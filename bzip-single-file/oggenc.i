# 1 "oggenc.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "oggenc.c"
# 11 "oggenc.c"
# 1 "/usr/include/alloca.h" 1 3 4
# 21 "/usr/include/alloca.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 22 "/usr/include/alloca.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 12 "oggenc.c" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4



extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



# 13 "oggenc.c" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 26 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/ctype.h" 2 3 4


# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 14 "oggenc.c" 2
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 58 "/usr/include/errno.h" 3 4

# 15 "oggenc.c" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 363 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4

# 437 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4

# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 50 "/usr/include/fcntl.h" 3 4
typedef __mode_t mode_t;





typedef __off_t off_t;
# 69 "/usr/include/fcntl.h" 3 4
typedef __pid_t pid_t;






# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 77 "/usr/include/fcntl.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };
# 78 "/usr/include/fcntl.h" 2 3 4
# 146 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 156 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 180 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 202 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/fcntl.h" 3 4
extern int lockf (int __fd, int __cmd, off_t __len);
# 248 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 270 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 292 "/usr/include/fcntl.h" 3 4

# 16 "oggenc.c" 2
# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4


# 50 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 120 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) __attribute__ ((__nothrow__ , __leaf__));


extern struct lconv *localeconv (void) __attribute__ ((__nothrow__ , __leaf__));


# 151 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) __attribute__ ((__nothrow__ , __leaf__));
# 186 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));



extern void freelocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));






extern __locale_t uselocale (__locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));








# 17 "oggenc.c" 2
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));







 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));








 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));






extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));






extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));







 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));








 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));






extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));






extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));







 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));








 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));






extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 372 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 534 "/usr/include/math.h" 3 4

# 18 "oggenc.c" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 19 "oggenc.c" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 640 "/usr/include/stdio.h" 3 4

# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 942 "/usr/include/stdio.h" 3 4

# 20 "oggenc.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;
# 75 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));
# 498 "/usr/include/stdlib.h" 3 4
extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 774 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 950 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 21 "oggenc.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 123 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 277 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 392 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 658 "/usr/include/string.h" 3 4

# 22 "oggenc.c" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 237 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 262 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 283 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));
# 320 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 441 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 23 "oggenc.c" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 24 "oggenc.c" 2

# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 223 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/time.h" 3 4

# 26 "oggenc.c" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));





extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4

# 27 "oggenc.c" 2


# 28 "oggenc.c"
struct option
{

  const char *name;





  int has_arg;
  int *flag;
  int val;
};





extern int getopt (int ___argc, char *const *___argv, const char *__shortopts);
extern int getopt_long (int ___argc, char *const *___argv,
                        const char *__shortopts,
                        const struct option *__longopts, int *__longind);
extern int getopt_long_only (int ___argc, char *const *___argv,
                             const char *__shortopts,
                             const struct option *__longopts, int *__longind);

extern int _getopt_internal (int ___argc, char *const *___argv,
                             const char *__shortopts,
                             const struct option *__longopts, int *__longind,
                             int __long_only);
# 131 "oggenc.c"
typedef int16_t ogg_int16_t;
typedef u_int16_t ogg_uint16_t;
typedef int32_t ogg_int32_t;
typedef u_int32_t ogg_uint32_t;
typedef int64_t ogg_int64_t;

typedef struct {
  long endbyte;
  int endbit;

  unsigned char *buffer;
  unsigned char *ptr;
  long storage;
} oggpack_buffer;



typedef struct {
  unsigned char *header;
  long header_len;
  unsigned char *body;
  long body_len;
} ogg_page;




typedef struct {
  unsigned char *body_data;
  long body_storage;
  long body_fill;
  long body_returned;


  int *lacing_vals;
  ogg_int64_t *granule_vals;


  long lacing_storage;
  long lacing_fill;
  long lacing_packet;
  long lacing_returned;

  unsigned char header[282];
  int header_fill;

  int e_o_s;

  int b_o_s;

  long serialno;
  long pageno;
  ogg_int64_t packetno;




  ogg_int64_t granulepos;

} ogg_stream_state;




typedef struct {
  unsigned char *packet;
  long bytes;
  long b_o_s;
  long e_o_s;

  ogg_int64_t granulepos;

  ogg_int64_t packetno;




} ogg_packet;

typedef struct {
  unsigned char *data;
  int storage;
  int fill;
  int returned;

  int unsynced;
  int headerbytes;
  int bodybytes;
} ogg_sync_state;



extern void oggpack_writeinit(oggpack_buffer *b);
extern void oggpack_writetrunc(oggpack_buffer *b,long bits);
extern void oggpack_writealign(oggpack_buffer *b);
extern void oggpack_writecopy(oggpack_buffer *b,void *source,long bits);
extern void oggpack_reset(oggpack_buffer *b);
extern void oggpack_writeclear(oggpack_buffer *b);
extern void oggpack_readinit(oggpack_buffer *b,unsigned char *buf,int bytes);
extern void oggpack_write(oggpack_buffer *b,unsigned long value,int bits);
extern long oggpack_look(oggpack_buffer *b,int bits);
extern long oggpack_look1(oggpack_buffer *b);
extern void oggpack_adv(oggpack_buffer *b,int bits);
extern void oggpack_adv1(oggpack_buffer *b);
extern long oggpack_read(oggpack_buffer *b,int bits);
extern long oggpack_read1(oggpack_buffer *b);
extern long oggpack_bytes(oggpack_buffer *b);
extern long oggpack_bits(oggpack_buffer *b);
extern unsigned char *oggpack_get_buffer(oggpack_buffer *b);

extern void oggpackB_writeinit(oggpack_buffer *b);
extern void oggpackB_writetrunc(oggpack_buffer *b,long bits);
extern void oggpackB_writealign(oggpack_buffer *b);
extern void oggpackB_writecopy(oggpack_buffer *b,void *source,long bits);
extern void oggpackB_reset(oggpack_buffer *b);
extern void oggpackB_writeclear(oggpack_buffer *b);
extern void oggpackB_readinit(oggpack_buffer *b,unsigned char *buf,int bytes);
extern void oggpackB_write(oggpack_buffer *b,unsigned long value,int bits);
extern long oggpackB_look(oggpack_buffer *b,int bits);
extern long oggpackB_look1(oggpack_buffer *b);
extern void oggpackB_adv(oggpack_buffer *b,int bits);
extern void oggpackB_adv1(oggpack_buffer *b);
extern long oggpackB_read(oggpack_buffer *b,int bits);
extern long oggpackB_read1(oggpack_buffer *b);
extern long oggpackB_bytes(oggpack_buffer *b);
extern long oggpackB_bits(oggpack_buffer *b);
extern unsigned char *oggpackB_get_buffer(oggpack_buffer *b);



extern int ogg_stream_packetin(ogg_stream_state *os, ogg_packet *op);
extern int ogg_stream_pageout(ogg_stream_state *os, ogg_page *og);
extern int ogg_stream_flush(ogg_stream_state *os, ogg_page *og);



extern int ogg_sync_init(ogg_sync_state *oy);
extern int ogg_sync_clear(ogg_sync_state *oy);
extern int ogg_sync_reset(ogg_sync_state *oy);
extern int ogg_sync_destroy(ogg_sync_state *oy);

extern char *ogg_sync_buffer(ogg_sync_state *oy, long size);
extern int ogg_sync_wrote(ogg_sync_state *oy, long bytes);
extern long ogg_sync_pageseek(ogg_sync_state *oy,ogg_page *og);
extern int ogg_sync_pageout(ogg_sync_state *oy, ogg_page *og);
extern int ogg_stream_pagein(ogg_stream_state *os, ogg_page *og);
extern int ogg_stream_packetout(ogg_stream_state *os,ogg_packet *op);
extern int ogg_stream_packetpeek(ogg_stream_state *os,ogg_packet *op);



extern int ogg_stream_init(ogg_stream_state *os,int serialno);
extern int ogg_stream_clear(ogg_stream_state *os);
extern int ogg_stream_reset(ogg_stream_state *os);
extern int ogg_stream_reset_serialno(ogg_stream_state *os,int serialno);
extern int ogg_stream_destroy(ogg_stream_state *os);
extern int ogg_stream_eos(ogg_stream_state *os);

extern void ogg_page_checksum_set(ogg_page *og);

extern int ogg_page_version(ogg_page *og);
extern int ogg_page_continued(ogg_page *og);
extern int ogg_page_bos(ogg_page *og);
extern int ogg_page_eos(ogg_page *og);
extern ogg_int64_t ogg_page_granulepos(ogg_page *og);
extern int ogg_page_serialno(ogg_page *og);
extern long ogg_page_pageno(ogg_page *og);
extern int ogg_page_packets(ogg_page *og);

extern void ogg_packet_clear(ogg_packet *op);


typedef struct vorbis_info{
  int version;
  int channels;
  long rate;
# 323 "oggenc.c"
  long bitrate_upper;
  long bitrate_nominal;
  long bitrate_lower;
  long bitrate_window;

  void *codec_setup;
} vorbis_info;




typedef struct vorbis_dsp_state{
  int analysisp;
  vorbis_info *vi;

  float **pcm;
  float **pcmret;
  int pcm_storage;
  int pcm_current;
  int pcm_returned;

  int preextrapolate;
  int eofflag;

  long lW;
  long W;
  long nW;
  long centerW;

  ogg_int64_t granulepos;
  ogg_int64_t sequence;

  ogg_int64_t glue_bits;
  ogg_int64_t time_bits;
  ogg_int64_t floor_bits;
  ogg_int64_t res_bits;

  void *backend_state;
} vorbis_dsp_state;

typedef struct vorbis_block{

  float **pcm;
  oggpack_buffer opb;

  long lW;
  long W;
  long nW;
  int pcmend;
  int mode;

  int eofflag;
  ogg_int64_t granulepos;
  ogg_int64_t sequence;
  vorbis_dsp_state *vd;



  void *localstore;
  long localtop;
  long localalloc;
  long totaluse;
  struct alloc_chain *reap;


  long glue_bits;
  long time_bits;
  long floor_bits;
  long res_bits;

  void *internal;

} vorbis_block;






struct alloc_chain{
  void *ptr;
  struct alloc_chain *next;
};
# 415 "oggenc.c"
typedef struct vorbis_comment{


  char **user_comments;
  int *comment_lengths;
  int comments;
  char *vendor;

} vorbis_comment;
# 440 "oggenc.c"
extern void vorbis_info_init(vorbis_info *vi);
extern void vorbis_info_clear(vorbis_info *vi);
extern int vorbis_info_blocksize(vorbis_info *vi,int zo);
extern void vorbis_comment_init(vorbis_comment *vc);
extern void vorbis_comment_add(vorbis_comment *vc, char *comment);
extern void vorbis_comment_add_tag(vorbis_comment *vc,
           char *tag, char *contents);
extern char *vorbis_comment_query(vorbis_comment *vc, char *tag, int count);
extern int vorbis_comment_query_count(vorbis_comment *vc, char *tag);
extern void vorbis_comment_clear(vorbis_comment *vc);

extern int vorbis_block_init(vorbis_dsp_state *v, vorbis_block *vb);
extern int vorbis_block_clear(vorbis_block *vb);
extern void vorbis_dsp_clear(vorbis_dsp_state *v);
extern double vorbis_granule_time(vorbis_dsp_state *v,
        ogg_int64_t granulepos);



extern int vorbis_analysis_init(vorbis_dsp_state *v,vorbis_info *vi);
extern int vorbis_commentheader_out(vorbis_comment *vc, ogg_packet *op);
extern int vorbis_analysis_headerout(vorbis_dsp_state *v,
       vorbis_comment *vc,
       ogg_packet *op,
       ogg_packet *op_comm,
       ogg_packet *op_code);
extern float **vorbis_analysis_buffer(vorbis_dsp_state *v,int vals);
extern int vorbis_analysis_wrote(vorbis_dsp_state *v,int vals);
extern int vorbis_analysis_blockout(vorbis_dsp_state *v,vorbis_block *vb);
extern int vorbis_analysis(vorbis_block *vb,ogg_packet *op);

extern int vorbis_bitrate_addblock(vorbis_block *vb);
extern int vorbis_bitrate_flushpacket(vorbis_dsp_state *vd,
        ogg_packet *op);


extern int vorbis_synthesis_headerin(vorbis_info *vi,vorbis_comment *vc,
       ogg_packet *op);

extern int vorbis_synthesis_init(vorbis_dsp_state *v,vorbis_info *vi);
extern int vorbis_synthesis_restart(vorbis_dsp_state *v);
extern int vorbis_synthesis(vorbis_block *vb,ogg_packet *op);
extern int vorbis_synthesis_trackonly(vorbis_block *vb,ogg_packet *op);
extern int vorbis_synthesis_blockin(vorbis_dsp_state *v,vorbis_block *vb);
extern int vorbis_synthesis_pcmout(vorbis_dsp_state *v,float ***pcm);
extern int vorbis_synthesis_lapout(vorbis_dsp_state *v,float ***pcm);
extern int vorbis_synthesis_read(vorbis_dsp_state *v,int samples);
extern long vorbis_packet_blocksize(vorbis_info *vi,ogg_packet *op);

extern int vorbis_synthesis_halfrate(vorbis_info *v,int flag);
extern int vorbis_synthesis_halfrate_p(vorbis_info *v);
# 510 "oggenc.c"
typedef void TIMER;
typedef long (*audio_read_func)(void *src, float **buffer, int samples);
typedef void (*progress_func)(char *fn, long totalsamples,
  long samples, double time);
typedef void (*enc_end_func)(char *fn, double time, int rate,
  long samples, long bytes);
typedef void (*enc_start_func)(char *fn, char *outfn, int bitrate,
        float quality, int qset, int managed, int min_br, int max_br);
typedef void (*error_func)(char *errormessage);


void *timer_start(void);
double timer_time(void *);
void timer_clear(void *);
int create_directories(char *);

void update_statistics_full(char *fn, long total, long done, double time);
void update_statistics_notime(char *fn, long total, long done, double time);
void update_statistics_null(char *fn, long total, long done, double time);
void start_encode_full(char *fn, char *outfn, int bitrate, float quality, int qset,
        int managed, int min, int max);
void start_encode_null(char *fn, char *outfn, int bitrate, float quality, int qset,
        int managed, int min, int max);
void final_statistics(char *fn, double time, int rate, long total_samples,
  long bytes);
void final_statistics_null(char *fn, double time, int rate, long total_samples,
  long bytes);
void encode_error(char *errmsg);

typedef struct {
    char *arg;
    char *val;
} adv_opt;

typedef struct
{
 char **title;
 int title_count;
 char **artist;
 int artist_count;
 char **album;
 int album_count;
 char **comments;
 int comment_count;
 char **tracknum;
 int track_count;
 char **dates;
 int date_count;
 char **genre;
 int genre_count;
    adv_opt *advopt;
    int advopt_count;
 int copy_comments;

 int quiet;

 int rawmode;
 int raw_samplesize;
 int raw_samplerate;
 int raw_channels;
    int raw_endianness;

 char *namefmt;
    char *namefmt_remove;
    char *namefmt_replace;
 char *outfile;


    int managed;
 int min_bitrate;
 int nominal_bitrate;
 int max_bitrate;


 float quality;
    int quality_set;

    int resamplefreq;
    int downmix;
    float scale;

 unsigned int serial;
} oe_options;

typedef struct
{
 vorbis_comment *comments;
 unsigned int serialno;

 audio_read_func read_samples;
 progress_func progress_update;
 enc_end_func end_encode;
 enc_start_func start_encode;
 error_func error;

 void *readdata;

 long total_samples_per_channel;
 int channels;
 long rate;
 int samplesize;
    int endianness;
    int resamplefreq;
 int copy_comments;


    int managed;
 int bitrate;
 int min_bitrate;
 int max_bitrate;
 float quality;
    int quality_set;
    adv_opt *advopt;
    int advopt_count;

 FILE *out;
 char *filename;
 char *infilename;
} oe_enc_opt;


int oe_encode(oe_enc_opt *opt);



int setup_resample(oe_enc_opt *opt);
void clear_resample(oe_enc_opt *opt);
void setup_downmix(oe_enc_opt *opt);
void clear_downmix(oe_enc_opt *opt);
void setup_scaler(oe_enc_opt *opt, float scale);
void clear_scaler(oe_enc_opt *opt);

typedef struct
{
 int (*id_func)(unsigned char *buf, int len);
 int id_data_len;
 int (*open_func)(FILE *in, oe_enc_opt *opt, unsigned char *buf, int buflen);
 void (*close_func)(void *);
 char *format;
 char *description;
} input_format;


typedef struct {
 short format;
 short channels;
 int samplerate;
 int bytespersec;
 short align;
 short samplesize;
} wav_fmt;

typedef struct {
 short channels;
 short samplesize;
 long totalsamples;
 long samplesread;
 FILE *f;
 short bigendian;
} wavfile;

typedef struct {
 short channels;
 int totalframes;
 short samplesize;
 int rate;
 int offset;
 int blocksize;
} aiff_fmt;

typedef wavfile aifffile;

input_format *open_audio_file(FILE *in, oe_enc_opt *opt);

int raw_open(FILE *in, oe_enc_opt *opt);
int wav_open(FILE *in, oe_enc_opt *opt, unsigned char *buf, int buflen);
int aiff_open(FILE *in, oe_enc_opt *opt, unsigned char *buf, int buflen);
int wav_id(unsigned char *buf, int len);
int aiff_id(unsigned char *buf, int len);
void wav_close(void *);
void raw_close(void *);

long wav_read(void *, float **buffer, int samples);
long wav_ieee_read(void *, float **buffer, int samples);
long raw_read_stereo(void *, float **buffer, int samples);
# 707 "oggenc.c"
struct option long_options[] = {
 {"quiet",0,0,'Q'},
 {"help",0,0,'h'},
 {"comment",1,0,'c'},
 {"artist",1,0,'a'},
 {"album",1,0,'l'},
 {"title",1,0,'t'},
    {"genre",1,0,'G'},
 {"names",1,0,'n'},
    {"name-remove",1,0,'X'},
    {"name-replace",1,0,'P'},
 {"output",1,0,'o'},
 {"version",0,0,'v'},
 {"raw",0,0,'r'},
 {"raw-bits",1,0,'B'},
 {"raw-chan",1,0,'C'},
 {"raw-rate",1,0,'R'},
    {"raw-endianness",1,0, 0},
 {"bitrate",1,0,'b'},
 {"min-bitrate",1,0,'m'},
 {"max-bitrate",1,0,'M'},
 {"quality",1,0,'q'},
 {"date",1,0,'d'},
 {"tracknum",1,0,'N'},
 {"serial",1,0,'s'},
    {"managed", 0, 0, 0},
    {"resample",1,0,0},
    {"downmix", 0,0,0},
    {"scale", 1, 0, 0},
    {"advanced-encode-option", 1, 0, 0},
 {"discard-comments", 0, 0, 0},
 {
# 738 "oggenc.c" 3 4
 ((void *)0)
# 738 "oggenc.c"
     ,0,0,0}
};

static char *generate_name_string(char *format, char *remove_list,
        char *replace_list, char *artist, char *title, char *album,
        char *track, char *date, char *genre);
static void parse_options(int argc, char **argv, oe_options *opt);
static void build_comments(vorbis_comment *vc, oe_options *opt, int filenum,
  char **artist,char **album, char **title, char **tracknum, char **date,
        char **genre);
static void usage(void);

int main(int argc, char **argv)
{

 oe_options opt = {
# 753 "oggenc.c" 3 4
                  ((void *)0)
# 753 "oggenc.c"
                      , 0, 
# 753 "oggenc.c" 3 4
                           ((void *)0)
# 753 "oggenc.c"
                               , 0, 
# 753 "oggenc.c" 3 4
                                    ((void *)0)
# 753 "oggenc.c"
                                        , 0, 
# 753 "oggenc.c" 3 4
                                             ((void *)0)
# 753 "oggenc.c"
                                                 , 0, 
# 753 "oggenc.c" 3 4
                                                      ((void *)0)
# 753 "oggenc.c"
                                                          ,
     0, 
# 754 "oggenc.c" 3 4
       ((void *)0)
# 754 "oggenc.c"
           , 0, 
# 754 "oggenc.c" 3 4
                ((void *)0)
# 754 "oggenc.c"
                    , 0, 
# 754 "oggenc.c" 3 4
                         ((void *)0)
# 754 "oggenc.c"
                             , 0, 1, 0, 0,16,44100,2, 0, 
# 754 "oggenc.c" 3 4
                                                         ((void *)0)
# 754 "oggenc.c"
                                                             ,
     "/", 
# 755 "oggenc.c" 3 4
                            ((void *)0)
# 755 "oggenc.c"
                                                   ,
     
# 756 "oggenc.c" 3 4
    ((void *)0)
# 756 "oggenc.c"
        , 0, -1,-1,-1,.3,-1,0, 0,0.f, 0};

 int i;

 char **infiles;
 int numfiles;
 int errors=0;

 parse_options(argc, argv, &opt);

 if(optind >= argc)
 {
  fprintf(
# 768 "oggenc.c" 3 4
         stderr
# 768 "oggenc.c"
               , ("%s%s\nERROR: No input files specified. Use -h for help.\n"), "OggEnc v1.0.1 (libvorbis 1.0.1)\n", "(c) 2000-2003 Michael Smith <msmith@xiph.org>\n");
  return 1;
 }
 else
 {
  infiles = argv + optind;
  numfiles = argc - optind;
 }



 for(i = 0; i < numfiles; i++)
 {
  if(!strcmp(infiles[i], "-") && numfiles > 1)
  {
   fprintf(
# 783 "oggenc.c" 3 4
          stderr
# 783 "oggenc.c"
                , ("ERROR: Multiple files specified when using stdin\n"));
   exit(1);
  }
 }

 if(numfiles > 1 && opt.outfile)
 {
  fprintf(
# 790 "oggenc.c" 3 4
         stderr
# 790 "oggenc.c"
               , ("ERROR: Multiple input files with specified output filename: suggest using -n\n"));
  exit(1);
 }

 if(opt.serial == 0)
 {

  srand(time(
# 797 "oggenc.c" 3 4
            ((void *)0)
# 797 "oggenc.c"
                ));
  opt.serial = rand();
 }

 for(i = 0; i < numfiles; i++)
 {


  oe_enc_opt enc_opts;
  vorbis_comment vc;
  char *out_fn = 
# 807 "oggenc.c" 3 4
                ((void *)0)
# 807 "oggenc.c"
                    ;
  FILE *in, *out = 
# 808 "oggenc.c" 3 4
                  ((void *)0)
# 808 "oggenc.c"
                      ;
  int foundformat = 0;
  int closeout = 0, closein = 0;
  char *artist=
# 811 "oggenc.c" 3 4
              ((void *)0)
# 811 "oggenc.c"
                  , *album=
# 811 "oggenc.c" 3 4
                           ((void *)0)
# 811 "oggenc.c"
                               , *title=
# 811 "oggenc.c" 3 4
                                        ((void *)0)
# 811 "oggenc.c"
                                            , *track=
# 811 "oggenc.c" 3 4
                                                     ((void *)0)
# 811 "oggenc.c"
                                                         ;
        char *date=
# 812 "oggenc.c" 3 4
                  ((void *)0)
# 812 "oggenc.c"
                      , *genre=
# 812 "oggenc.c" 3 4
                               ((void *)0)
# 812 "oggenc.c"
                                   ;
  input_format *format;



  enc_opts.serialno = opt.serial++;
  enc_opts.progress_update = update_statistics_full;
        enc_opts.start_encode = start_encode_full;
  enc_opts.end_encode = final_statistics;
  enc_opts.error = encode_error;
  enc_opts.comments = &vc;
  enc_opts.copy_comments = opt.copy_comments;


  build_comments(&vc, &opt, i, &artist, &album, &title, &track,
                &date, &genre);

  if(!strcmp(infiles[i], "-"))
  {
   {};
   in = 
# 832 "oggenc.c" 3 4
       stdin
# 832 "oggenc.c"
            ;
            infiles[i] = 
# 833 "oggenc.c" 3 4
                        ((void *)0)
# 833 "oggenc.c"
                            ;
   if(!opt.outfile)
   {
    {};
    out = 
# 837 "oggenc.c" 3 4
         stdout
# 837 "oggenc.c"
               ;
   }
  }
  else
  {
   in = fopen(infiles[i], "rb");

   if(in == 
# 844 "oggenc.c" 3 4
           ((void *)0)
# 844 "oggenc.c"
               )
   {
    fprintf(
# 846 "oggenc.c" 3 4
           stderr
# 846 "oggenc.c"
                 , ("ERROR: Cannot open input file \"%s\": %s\n"), infiles[i], strerror(
# 846 "oggenc.c" 3 4
                                                                                         (*__errno_location ())
# 846 "oggenc.c"
                                                                                              ));
    free(out_fn);
    errors++;
    continue;
   }

   closein = 1;
  }





  if(opt.rawmode)
  {
   enc_opts.rate=opt.raw_samplerate;
   enc_opts.channels=opt.raw_channels;
   enc_opts.samplesize=opt.raw_samplesize;
            enc_opts.endianness=opt.raw_endianness;
   raw_open(in, &enc_opts);
   foundformat=1;
  }
  else
  {
   format = open_audio_file(in, &enc_opts);
   if(format)
   {
                if(!opt.quiet)
        fprintf(
# 874 "oggenc.c" 3 4
               stderr
# 874 "oggenc.c"
                     , ("Opening with %s module: %s\n"),
          format->format, format->description);
    foundformat=1;
   }

  }

  if(!foundformat)
  {
   fprintf(
# 883 "oggenc.c" 3 4
          stderr
# 883 "oggenc.c"
                , ("ERROR: Input file \"%s\" is not a supported format\n"), infiles[i]?infiles[i]:"(stdin)");
      if(closein)
    fclose(in);
   errors++;
   continue;
  }



  if(opt.outfile && !strcmp(opt.outfile, "-"))
  {
   {};
   out = 
# 895 "oggenc.c" 3 4
        stdout
# 895 "oggenc.c"
              ;
  }
  else if(out == 
# 897 "oggenc.c" 3 4
                ((void *)0)
# 897 "oggenc.c"
                    )
  {
   if(opt.outfile)
   {
    out_fn = strdup(opt.outfile);
   }
   else if(opt.namefmt)
   {
    out_fn = generate_name_string(opt.namefmt, opt.namefmt_remove,
                        opt.namefmt_replace, artist, title, album, track,date,
                        genre);
   }
# 918 "oggenc.c"
   else if(infiles[i])
   {

    char *start, *end;

    start = infiles[i];
    end = strrchr(infiles[i], '.');
    end = end?end:(start + strlen(infiles[i])+1);

    out_fn = malloc(end - start + 5);
    strncpy(out_fn, start, end-start);
    out_fn[end-start] = 0;
    strcat(out_fn, ".ogg");
   }
            else {
                fprintf(
# 933 "oggenc.c" 3 4
                       stderr
# 933 "oggenc.c"
                             , ("WARNING: No filename, defaulting to \"default.ogg\"\n"));
                out_fn = strdup("default.ogg");
            }


            if(create_directories(out_fn)) {
                if(closein)
                    fclose(in);
    fprintf(
# 941 "oggenc.c" 3 4
           stderr
# 941 "oggenc.c"
                 , ("ERROR: Could not create required subdirectories for output filename \"%s\"\n"), out_fn);
    errors++;
    free(out_fn);
    continue;
            }

   out = fopen(out_fn, "wb");
   if(out == 
# 948 "oggenc.c" 3 4
            ((void *)0)
# 948 "oggenc.c"
                )
   {
    if(closein)
     fclose(in);
    fprintf(
# 952 "oggenc.c" 3 4
           stderr
# 952 "oggenc.c"
                 , ("ERROR: Cannot open output file \"%s\": %s\n"), out_fn, strerror(
# 952 "oggenc.c" 3 4
                                                                                      (*__errno_location ())
# 952 "oggenc.c"
                                                                                           ));
    errors++;
    free(out_fn);
    continue;
   }
   closeout = 1;
  }


  enc_opts.out = out;
  enc_opts.comments = &vc;
  enc_opts.filename = out_fn;
  enc_opts.infilename = infiles[i];
        enc_opts.managed = opt.managed;
  enc_opts.bitrate = opt.nominal_bitrate;
  enc_opts.min_bitrate = opt.min_bitrate;
  enc_opts.max_bitrate = opt.max_bitrate;
  enc_opts.quality = opt.quality;
  enc_opts.quality_set = opt.quality_set;
        enc_opts.advopt = opt.advopt;
        enc_opts.advopt_count = opt.advopt_count;

        if(opt.resamplefreq && opt.resamplefreq != enc_opts.rate) {
            int fromrate = enc_opts.rate;
            enc_opts.resamplefreq = opt.resamplefreq;
            if(setup_resample(&enc_opts)) {
                errors++;
                goto clear_all;
            }
            else if(!opt.quiet)
                fprintf(
# 982 "oggenc.c" 3 4
                       stderr
# 982 "oggenc.c"
                             , ("Resampling input from %d Hz to %d Hz\n"), fromrate, opt.resamplefreq);
        }

        if(opt.downmix) {
            if(enc_opts.channels == 2) {
                setup_downmix(&enc_opts);
                if(!opt.quiet)
                    fprintf(
# 989 "oggenc.c" 3 4
                           stderr
# 989 "oggenc.c"
                                 , ("Downmixing stereo to mono\n"));
            }
            else {
                fprintf(
# 992 "oggenc.c" 3 4
                       stderr
# 992 "oggenc.c"
                             , ("ERROR: Can't downmix except from stereo to mono\n"));
                errors++;
                if(opt.resamplefreq && opt.resamplefreq != enc_opts.rate)
                    clear_resample(&enc_opts);
                goto clear_all;
            }
        }

        if(opt.scale > 0.f) {
            setup_scaler(&enc_opts, opt.scale);
            if(!opt.quiet)
                fprintf(
# 1003 "oggenc.c" 3 4
                       stderr
# 1003 "oggenc.c"
                             , ("Scaling input to %f\n"), opt.scale);
        }


  if(!enc_opts.total_samples_per_channel)
   enc_opts.progress_update = update_statistics_notime;

  if(opt.quiet)
  {
            enc_opts.start_encode = start_encode_null;
   enc_opts.progress_update = update_statistics_null;
   enc_opts.end_encode = final_statistics_null;
  }

  if(oe_encode(&enc_opts))
   errors++;

        if(opt.scale > 0)
            clear_scaler(&enc_opts);
        if(opt.downmix)
            clear_downmix(&enc_opts);
        if(opt.resamplefreq && opt.resamplefreq != enc_opts.rate)
            clear_resample(&enc_opts);
clear_all:

  if(out_fn) free(out_fn);
        if(opt.outfile) free(opt.outfile);
  vorbis_comment_clear(&vc);
  if(!opt.rawmode)
   format->close_func(enc_opts.readdata);

  if(closein)
   fclose(in);
  if(closeout)
   fclose(out);
 }

 return errors?1:0;

}

static void usage(void)
{
 fprintf(
# 1046 "oggenc.c" 3 4
        stdout
# 1046 "oggenc.c"
              ,
  ("%s%s\n" "Usage: oggenc [options] input.wav [...]\n" "\n" "OPTIONS:\n" " General:\n" " -Q, --quiet          Produce no output to stderr\n" " -h, --help           Print this help text\n" " -r, --raw            Raw mode. Input files are read directly as PCM data\n" " -B, --raw-bits=n     Set bits/sample for raw input. Default is 16\n" " -C, --raw-chan=n     Set number of channels for raw input. Default is 2\n" " -R, --raw-rate=n     Set samples/sec for raw input. Default is 44100\n" " --raw-endianness     1 for bigendian, 0 for little (defaults to 0)\n" " -b, --bitrate        Choose a nominal bitrate to encode at. Attempt\n" "                      to encode at a bitrate averaging this. Takes an\n" "                      argument in kbps. This uses the bitrate management\n" "                      engine, and is not recommended for most users.\n" "                      See -q, --quality for a better alternative.\n" " -m, --min-bitrate    Specify a minimum bitrate (in kbps). Useful for\n" "                      encoding for a fixed-size channel.\n" " -M, --max-bitrate    Specify a maximum bitrate in kbps. Useful for\n" "                      streaming applications.\n" " -q, --quality        Specify quality between 0 (low) and 10 (high),\n" "                      instead of specifying a particular bitrate.\n" "                      This is the normal mode of operation.\n" "                      Fractional qualities (e.g. 2.75) are permitted\n" "                      Quality -1 is also possible, but may not be of\n" "                      acceptable quality.\n" " --resample n         Resample input data to sampling rate n (Hz)\n" " --downmix            Downmix stereo to mono. Only allowed on stereo\n" "                      input.\n" " -s, --serial         Specify a serial number for the stream. If encoding\n" "                      multiple files, this will be incremented for each\n" "                      stream after the first.\n" " --discard-comments   Prevents comments in FLAC and Ogg FLAC files from\n" "                      being copied to the output Ogg Vorbis file.\n" "\n" " Naming:\n" " -o, --output=fn      Write file to fn (only valid in single-file mode)\n" " -n, --names=string   Produce filenames as this string, with %%a, %%t, %%l,\n" "                      %%n, %%d replaced by artist, title, album, track number,\n" "                      and date, respectively (see below for specifying these).\n" "                      %%%% gives a literal %%.\n" " -X, --name-remove=s  Remove the specified characters from parameters to the\n" "                      -n format string. Useful to ensure legal filenames.\n" " -P, --name-replace=s Replace characters removed by --name-remove with the\n" "                      characters specified. If this string is shorter than the\n" "                      --name-remove list or is not specified, the extra\n" "                      characters are just removed.\n" "                      Default settings for the above two arguments are platform\n" "                      specific.\n" " -c, --comment=c      Add the given string as an extra comment. This may be\n" "                      used multiple times. The argument should be in the\n" "                      format \"tag=value\".\n" " -d, --date           Date for track (usually date of performance)\n" " -N, --tracknum       Track number for this track\n" " -t, --title          Title for this track\n" " -l, --album          Name of album\n" " -a, --artist         Name of artist\n" " -G, --genre          Genre of track\n" "                      If multiple input files are given, then multiple\n" "                      instances of the previous five arguments will be used,\n" "                      in the order they are given. If fewer titles are\n" "                      specified than files, OggEnc will print a warning, and\n" "                      reuse the final one for the remaining files. If fewer\n" "                      track numbers are given, the remaining files will be\n" "                      unnumbered. For the others, the final tag will be reused\n" "                      for all others without warning (so you can specify a date\n" "                      once, for example, and have it used for all the files)\n" "\n" "INPUT FILES:\n" " OggEnc input files must currently be 24, 16, or 8 bit PCM WAV, AIFF, or AIFF/C\n" " files, 32 bit IEEE floating point WAV, and optionally FLAC or Ogg FLAC. Files\n" "  may be mono or stereo (or more channels) and any sample rate.\n" " Alternatively, the --raw option may be used to use a raw PCM data file, which\n" " must be 16 bit stereo little-endian PCM ('headerless wav'), unless additional\n" " parameters for raw mode are specified.\n" " You can specify taking the file from stdin by using - as the input filename.\n" " In this mode, output is to stdout unless an output filename is specified\n" " with -o\n" "\n")
# 1126 "oggenc.c"
       , "OggEnc v1.0.1 (libvorbis 1.0.1)\n", "(c) 2000-2003 Michael Smith <msmith@xiph.org>\n");
}

static int strncpy_filtered(char *dst, char *src, int len, char *remove_list,
        char *replace_list)
{
    char *hit, *drop_margin;
    int used=0;

    if(remove_list == 
# 1135 "oggenc.c" 3 4
                     ((void *)0) 
# 1135 "oggenc.c"
                          || *remove_list == 0)
    {
        strncpy(dst, src, len-1);
        dst[len-1] = 0;
        return strlen(dst);
    }

    drop_margin = remove_list + (replace_list == 
# 1142 "oggenc.c" 3 4
                                                ((void *)0)
# 1142 "oggenc.c"
                                                    ?0:strlen(replace_list));

    while(*src && used < len-1)
    {
        if((hit = strchr(remove_list, *src)) != 
# 1146 "oggenc.c" 3 4
                                               ((void *)0)
# 1146 "oggenc.c"
                                                   )
        {
            if(hit < drop_margin)
            {
                *dst++ = replace_list[hit - remove_list];
                used++;
            }
        }
        else
        {
            *dst++ = *src;
            used++;
        }
        src++;
    }
    *dst = 0;

    return used;
}

static char *generate_name_string(char *format, char *remove_list,
        char *replace_list, char *artist, char *title, char *album,
        char *track, char *date, char *genre)
{
 char *buffer;
 char next;
 char *string;
 int used=0;
 int buflen;

 buffer = calloc(4096 +1,1);
 buflen = 4096;

 while(*format && used < buflen)
 {
  next = *format++;

  if(next == '%')
  {
   switch(*format++)
   {
    case '%':
     *(buffer+(used++)) = '%';
     break;
    case 'a':
     string = artist?artist:("(none)");
     used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
     break;
    case 'd':
     string = date?date:("(none)");
     used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
     break;
                case 'g':
                    string = genre?genre:("(none)");
                    used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
                    break;
    case 't':
     string = title?title:("(none)");
     used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
     break;
    case 'l':
     string = album?album:("(none)");
     used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
     break;
    case 'n':
     string = track?track:("(none)");
     used += strncpy_filtered(buffer+used, string, buflen-used,
                            remove_list, replace_list);
     break;
    default:
     fprintf(
# 1221 "oggenc.c" 3 4
            stderr
# 1221 "oggenc.c"
                  , ("WARNING: Ignoring illegal escape character '%c' in name format\n"), *(format - 1));
     break;
   }
  }
  else
   *(buffer + (used++)) = next;
 }

 return buffer;
}

static void parse_options(int argc, char **argv, oe_options *opt)
{
 int ret;
 int option_index = 1;

 while((ret = getopt_long(argc, argv, "A:a:b:B:c:C:d:G:hl:m:M:n:N:o:P:q:QrR:s:t:vX:",
     long_options, &option_index)) != -1)
 {
  switch(ret)
  {
   case 0:
                if(!strcmp(long_options[option_index].name, "managed")) {
              if(!opt->managed){
                        if(!opt->quiet)
                      fprintf(
# 1246 "oggenc.c" 3 4
                             stderr
# 1246 "oggenc.c"
                                   ,
                                    ("Enabling bitrate management engine\n"));
                        opt->managed = 1;
              }
                }
                else if(!strcmp(long_options[option_index].name,
                            "raw-endianness")) {
        if (opt->rawmode != 1)
        {
         opt->rawmode = 1;
         fprintf(
# 1256 "oggenc.c" 3 4
                stderr
# 1256 "oggenc.c"
                      , ("WARNING: Raw endianness specified for non-raw data. Assuming input is raw.\n"));
        }
        if(sscanf(optarg, "%d", &opt->raw_endianness) != 1) {
                        fprintf(
# 1259 "oggenc.c" 3 4
                               stderr
# 1259 "oggenc.c"
                                     , ("WARNING: Couldn't read endianness argument \"%s\"\n"), optarg);
         opt->raw_endianness = 0;
                    }
                }
                else if(!strcmp(long_options[option_index].name,
                            "resample")) {
        if(sscanf(optarg, "%d", &opt->resamplefreq) != 1) {
                        fprintf(
# 1266 "oggenc.c" 3 4
                               stderr
# 1266 "oggenc.c"
                                     , ("WARNING: Couldn't read resampling frequency \"%s\"\n"), optarg);
         opt->resamplefreq = 0;
                    }
                    if(opt->resamplefreq < 100)

                        fprintf(
# 1271 "oggenc.c" 3 4
                               stderr
# 1271 "oggenc.c"
                                     ,
                                ("Warning: Resample rate specified as %d Hz. Did you mean %d Hz?\n"),
                                opt->resamplefreq, opt->resamplefreq*1000);
                }
                else if(!strcmp(long_options[option_index].name, "downmix")) {
                    opt->downmix = 1;
                }
                else if(!strcmp(long_options[option_index].name, "scale")) {
                    opt->scale = atof(optarg);
        if(sscanf(optarg, "%f", &opt->scale) != 1) {
                        opt->scale = 0;
                        fprintf(
# 1282 "oggenc.c" 3 4
                               stderr
# 1282 "oggenc.c"
                                     , ("Warning: Couldn't parse scaling factor \"%s\"\n"),
                                optarg);
                    }
                }
                else if(!strcmp(long_options[option_index].name, "advanced-encode-option")) {
                    char *arg = strdup(optarg);
                    char *val;

                    val = strchr(arg, '=');
                    if(val == 
# 1291 "oggenc.c" 3 4
                             ((void *)0)
# 1291 "oggenc.c"
                                 ) {
                        fprintf(
# 1292 "oggenc.c" 3 4
                               stderr
# 1292 "oggenc.c"
                                     , ("No value for advanced encoder option found\n"));
                        continue;
                    }
                    else
                        *val++=0;

                    opt->advopt = realloc(opt->advopt, (++opt->advopt_count)*sizeof(adv_opt));
                    opt->advopt[opt->advopt_count - 1].arg = arg;
                    opt->advopt[opt->advopt_count - 1].val = val;
                }
                else if(!strcmp(long_options[option_index].name, "discard-comments")) {
    opt->copy_comments = 0;
  }

                else {
        fprintf(
# 1307 "oggenc.c" 3 4
               stderr
# 1307 "oggenc.c"
                     , ("Internal error parsing command line options\n"));
        exit(1);
                }

    break;
   case 'a':
    opt->artist = realloc(opt->artist, (++opt->artist_count)*sizeof(char *));
    opt->artist[opt->artist_count - 1] = strdup(optarg);
    break;
   case 'c':
                if(strchr(optarg, '=') == 
# 1317 "oggenc.c" 3 4
                                         ((void *)0)
# 1317 "oggenc.c"
                                             ) {
                    fprintf(
# 1318 "oggenc.c" 3 4
                           stderr
# 1318 "oggenc.c"
                                 , ("Warning: Illegal comment used (\"%s\"), ignoring.\n"), optarg);
                    break;
                }
    opt->comments = realloc(opt->comments, (++opt->comment_count)*sizeof(char *));
    opt->comments[opt->comment_count - 1] = strdup(optarg);
    break;
   case 'd':
    opt->dates = realloc(opt->dates, (++opt->date_count)*sizeof(char *));
    opt->dates[opt->date_count - 1] = strdup(optarg);
    break;
            case 'G':
                opt->genre = realloc(opt->genre, (++opt->genre_count)*sizeof(char *));
                opt->genre[opt->genre_count - 1] = strdup(optarg);
                break;
   case 'h':
    usage();
    exit(0);
    break;
   case 'l':
    opt->album = realloc(opt->album, (++opt->album_count)*sizeof(char *));
    opt->album[opt->album_count - 1] = strdup(optarg);
    break;
   case 's':


    if(sscanf(optarg, "%u", &opt->serial) != 1)
     opt->serial = 0;
    break;
   case 't':
    opt->title = realloc(opt->title, (++opt->title_count)*sizeof(char *));
    opt->title[opt->title_count - 1] = strdup(optarg);
    break;
   case 'b':
       if(sscanf(optarg, "%d", &opt->nominal_bitrate)
         != 1) {
        fprintf(
# 1353 "oggenc.c" 3 4
               stderr
# 1353 "oggenc.c"
                     , ("Warning: nominal bitrate \"%s\" not recognised\n"), optarg);
        opt->nominal_bitrate = -1;
    }

    break;
   case 'm':
    if(sscanf(optarg, "%d", &opt->min_bitrate)
      != 1) {
     fprintf(
# 1361 "oggenc.c" 3 4
            stderr
# 1361 "oggenc.c"
                  , ("Warning: minimum bitrate \"%s\" not recognised\n"), optarg);
     opt->min_bitrate = -1;
    }
    if(!opt->managed){
      if(!opt->quiet)
        fprintf(
# 1366 "oggenc.c" 3 4
               stderr
# 1366 "oggenc.c"
                     ,
         ("Enabling bitrate management engine\n"));
      opt->managed = 1;
    }
    break;
   case 'M':
    if(sscanf(optarg, "%d", &opt->max_bitrate)
      != 1) {
     fprintf(
# 1374 "oggenc.c" 3 4
            stderr
# 1374 "oggenc.c"
                  , ("Warning: maximum bitrate \"%s\" not recognised\n"), optarg);
     opt->max_bitrate = -1;
    }
    if(!opt->managed){
      if(!opt->quiet)
        fprintf(
# 1379 "oggenc.c" 3 4
               stderr
# 1379 "oggenc.c"
                     ,
         ("Enabling bitrate management engine\n"));
      opt->managed = 1;
    }
    break;
   case 'q':
    if(sscanf(optarg, "%f", &opt->quality) != 1) {
     fprintf(
# 1386 "oggenc.c" 3 4
            stderr
# 1386 "oggenc.c"
                  , ("Quality option \"%s\" not recognised, ignoring\n"), optarg);
     break;
    }
    opt->quality_set=1;
    opt->quality *= 0.1;
    if(opt->quality > 1.0f)
    {
     opt->quality = 1.0f;
     fprintf(
# 1394 "oggenc.c" 3 4
            stderr
# 1394 "oggenc.c"
                  , ("WARNING: quality setting too high, setting to maximum quality.\n"));
    }
    break;
   case 'n':
    if(opt->namefmt)
    {
     fprintf(
# 1400 "oggenc.c" 3 4
            stderr
# 1400 "oggenc.c"
                  , ("WARNING: Multiple name formats specified, using final\n"));
     free(opt->namefmt);
    }
    opt->namefmt = strdup(optarg);
    break;
            case 'X':
    if(opt->namefmt_remove && opt->namefmt_remove !=
                        "/")
    {
     fprintf(
# 1409 "oggenc.c" 3 4
            stderr
# 1409 "oggenc.c"
                  , ("WARNING: Multiple name format filters specified, using final\n"));
     free(opt->namefmt_remove);
    }
    opt->namefmt_remove = strdup(optarg);
    break;
            case 'P':
    if(opt->namefmt_replace && opt->namefmt_replace !=
                        
# 1416 "oggenc.c" 3 4
                       ((void *)0)
# 1416 "oggenc.c"
                                              )
                {
     fprintf(
# 1418 "oggenc.c" 3 4
            stderr
# 1418 "oggenc.c"
                  , ("WARNING: Multiple name format filter replacements specified, using final\n"));
     free(opt->namefmt_replace);
    }
    opt->namefmt_replace = strdup(optarg);
    break;
   case 'o':
    if(opt->outfile)
    {
     fprintf(
# 1426 "oggenc.c" 3 4
            stderr
# 1426 "oggenc.c"
                  , ("WARNING: Multiple output files specified, suggest using -n\n"));
     free(opt->outfile);
    }
    opt->outfile = strdup(optarg);
    break;
   case 'Q':
    opt->quiet = 1;
    break;
   case 'r':
    opt->rawmode = 1;
    break;
   case 'v':
    fprintf(
# 1438 "oggenc.c" 3 4
           stdout
# 1438 "oggenc.c"
                 , "OggEnc v1.0.1 (libvorbis 1.0.1)\n");
    exit(0);
    break;
   case 'B':
    if (opt->rawmode != 1)
    {
     opt->rawmode = 1;
     fprintf(
# 1445 "oggenc.c" 3 4
            stderr
# 1445 "oggenc.c"
                  , ("WARNING: Raw bits/sample specified for non-raw data. Assuming input is raw.\n"));
    }
    if(sscanf(optarg, "%u", &opt->raw_samplesize) != 1)
    {
     opt->raw_samplesize = 16;
     fprintf(
# 1450 "oggenc.c" 3 4
            stderr
# 1450 "oggenc.c"
                  , ("WARNING: Invalid bits/sample specified, assuming 16.\n"));
    }
    if((opt->raw_samplesize != 8) && (opt->raw_samplesize != 16))
    {
     fprintf(
# 1454 "oggenc.c" 3 4
            stderr
# 1454 "oggenc.c"
                  , ("WARNING: Invalid bits/sample specified, assuming 16.\n"));
    }
    break;
   case 'C':
    if (opt->rawmode != 1)
    {
     opt->rawmode = 1;
     fprintf(
# 1461 "oggenc.c" 3 4
            stderr
# 1461 "oggenc.c"
                  , ("WARNING: Raw channel count specified for non-raw data. Assuming input is raw.\n"));
    }
    if(sscanf(optarg, "%u", &opt->raw_channels) != 1)
    {
     opt->raw_channels = 2;
     fprintf(
# 1466 "oggenc.c" 3 4
            stderr
# 1466 "oggenc.c"
                  , ("WARNING: Invalid channel count specified, assuming 2.\n"));
    }
    break;
   case 'N':
    opt->tracknum = realloc(opt->tracknum, (++opt->track_count)*sizeof(char *));
    opt->tracknum[opt->track_count - 1] = strdup(optarg);
    break;
   case 'R':
    if (opt->rawmode != 1)
    {
     opt->rawmode = 1;
     fprintf(
# 1477 "oggenc.c" 3 4
            stderr
# 1477 "oggenc.c"
                  , ("WARNING: Raw sample rate specified for non-raw data. Assuming input is raw.\n"));
    }
    if(sscanf(optarg, "%u", &opt->raw_samplerate) != 1)
    {
     opt->raw_samplerate = 44100;
     fprintf(
# 1482 "oggenc.c" 3 4
            stderr
# 1482 "oggenc.c"
                  , ("WARNING: Invalid sample rate specified, assuming 44100.\n"));
    }
    break;
   case '?':
    fprintf(
# 1486 "oggenc.c" 3 4
           stderr
# 1486 "oggenc.c"
                 , ("WARNING: Unknown option specified, ignoring->\n"));
    break;
   default:
    usage();
    exit(0);
  }
 }

}

static void add_tag(vorbis_comment *vc, oe_options *opt,char *name, char *value)
{
  if(name == 
# 1498 "oggenc.c" 3 4
            ((void *)0)
# 1498 "oggenc.c"
                )
    vorbis_comment_add(vc, value);
  else
    vorbis_comment_add_tag(vc, name, value);
}

static void build_comments(vorbis_comment *vc, oe_options *opt, int filenum,
  char **artist, char **album, char **title, char **tracknum,
        char **date, char **genre)
{
 int i;

 vorbis_comment_init(vc);

 for(i = 0; i < opt->comment_count; i++)
  add_tag(vc, opt, 
# 1513 "oggenc.c" 3 4
                  ((void *)0)
# 1513 "oggenc.c"
                      , opt->comments[i]);

 if(opt->title_count)
 {
  if(filenum >= opt->title_count)
  {
   if(!opt->quiet)
    fprintf(
# 1520 "oggenc.c" 3 4
           stderr
# 1520 "oggenc.c"
                 , ("WARNING: Insufficient titles specified, defaulting to final title.\n"));
   i = opt->title_count-1;
  }
  else
   i = filenum;

  *title = opt->title[i];
  add_tag(vc, opt, "title", opt->title[i]);
 }

 if(opt->artist_count)
 {
  if(filenum >= opt->artist_count)
   i = opt->artist_count-1;
  else
   i = filenum;

  *artist = opt->artist[i];
  add_tag(vc, opt, "artist", opt->artist[i]);
 }

    if(opt->genre_count)
    {
        if(filenum >= opt->genre_count)
            i = opt->genre_count-1;
        else
            i = filenum;

        *genre = opt->genre[i];
        add_tag(vc, opt, "genre", opt->genre[i]);
    }

 if(opt->date_count)
 {
  if(filenum >= opt->date_count)
   i = opt->date_count-1;
  else
   i = filenum;

  *date = opt->dates[i];
  add_tag(vc, opt, "date", opt->dates[i]);
 }

 if(opt->album_count)
 {
  if(filenum >= opt->album_count)
  {
   i = opt->album_count-1;
  }
  else
   i = filenum;

  *album = opt->album[i];
  add_tag(vc, opt, "album", opt->album[i]);
 }

 if(filenum < opt->track_count)
 {
  i = filenum;
  *tracknum = opt->tracknum[i];
  add_tag(vc, opt, "tracknumber", opt->tracknum[i]);
 }
}
# 1616 "oggenc.c"
typedef float SAMPLE;

typedef struct
{
 unsigned int channels, infreq, outfreq, taps;
 float *table;
 SAMPLE *pool;


 int poolfill;
 int offset;
} res_state;

typedef enum
{
 RES_END,
 RES_GAIN,
 RES_CUTOFF,
 RES_TAPS,
 RES_BETA
} res_parameter;

int res_init(res_state *state, int channels, int outfreq, int infreq, res_parameter op1, ...);
# 1654 "oggenc.c"
int res_push_max_input(res_state const *state, size_t maxoutput);







int res_push_check(res_state const *state, size_t srclen);






int res_push(res_state *state, SAMPLE **dstlist, SAMPLE const **srclist, size_t srclen);
int res_push_interleaved(res_state *state, SAMPLE *dest, SAMPLE const *source, size_t srclen);
# 1683 "oggenc.c"
int res_drain(res_state *state, SAMPLE **dstlist);
int res_drain_interleaved(res_state *state, SAMPLE *dest);
# 1694 "oggenc.c"
void res_clear(res_state *state);
# 1715 "oggenc.c"
input_format formats[] = {
 {wav_id, 12, wav_open, wav_close, "wav", ("WAV file reader")},
 {aiff_id, 12, aiff_open, wav_close, "aiff", ("AIFF/AIFC file reader")},




 {
# 1722 "oggenc.c" 3 4
 ((void *)0)
# 1722 "oggenc.c"
     , 0, 
# 1722 "oggenc.c" 3 4
          ((void *)0)
# 1722 "oggenc.c"
              , 
# 1722 "oggenc.c" 3 4
                ((void *)0)
# 1722 "oggenc.c"
                    , 
# 1722 "oggenc.c" 3 4
                      ((void *)0)
# 1722 "oggenc.c"
                          , 
# 1722 "oggenc.c" 3 4
                            ((void *)0)
# 1722 "oggenc.c"
                                }
};

input_format *open_audio_file(FILE *in, oe_enc_opt *opt)
{
 int j=0;
 unsigned char *buf=
# 1728 "oggenc.c" 3 4
                   ((void *)0)
# 1728 "oggenc.c"
                       ;
 int buf_size=0, buf_filled=0;
 int size,ret;

 while(formats[j].id_func)
 {
  size = formats[j].id_data_len;
  if(size >= buf_size)
  {
   buf = realloc(buf, size);
   buf_size = size;
  }

  if(size > buf_filled)
  {
   ret = fread(buf+buf_filled, 1, buf_size-buf_filled, in);
   buf_filled += ret;

   if(buf_filled < size)
   {
    j++;
    continue;
   }
  }

  if(formats[j].id_func(buf, buf_filled))
  {

   if(formats[j].open_func(in, opt, buf, buf_filled)) {
                free(buf);
    return &formats[j];
            }
  }
  j++;
 }

    free(buf);

 return 
# 1766 "oggenc.c" 3 4
       ((void *)0)
# 1766 "oggenc.c"
           ;
}

static int seek_forward(FILE *in, int length)
{
 if(fseek(in, length, 
# 1771 "oggenc.c" 3 4
                     1
# 1771 "oggenc.c"
                             ))
 {

  unsigned char buf[1024];
  int seek_needed = length, seeked;
  while(seek_needed > 0)
  {
   seeked = fread(buf, 1, seek_needed>1024?1024:seek_needed, in);
   if(!seeked)
    return 0;
   else
    seek_needed -= seeked;
  }
 }
 return 1;
}


static int find_wav_chunk(FILE *in, char *type, unsigned int *len)
{
 unsigned char buf[8];

 while(1)
 {
  if(fread(buf,1,8,in) < 8)
  {
   fprintf(
# 1797 "oggenc.c" 3 4
          stderr
# 1797 "oggenc.c"
                , ("Warning: Unexpected EOF in reading WAV header\n"));
   return 0;
  }

  if(memcmp(buf, type, 4))
  {
   *len = (((buf+4)[3]<<24)|((buf+4)[2]<<16)|((buf+4)[1]<<8)|((buf+4)[0]&0xff));
   if(!seek_forward(in, *len))
    return 0;

   buf[4] = 0;
   fprintf(
# 1808 "oggenc.c" 3 4
          stderr
# 1808 "oggenc.c"
                , ("Skipping chunk of type \"%s\", length %d\n"), buf, *len);
  }
  else
  {
   *len = (((buf+4)[3]<<24)|((buf+4)[2]<<16)|((buf+4)[1]<<8)|((buf+4)[0]&0xff));
   return 1;
  }
 }
}

static int find_aiff_chunk(FILE *in, char *type, unsigned int *len)
{
 unsigned char buf[8];

 while(1)
 {
  if(fread(buf,1,8,in) <8)
  {
   fprintf(
# 1826 "oggenc.c" 3 4
          stderr
# 1826 "oggenc.c"
                , ("Warning: Unexpected EOF in AIFF chunk\n"));
   return 0;
  }

  *len = (((buf+4)[0]<<24)|((buf+4)[1]<<16)|((buf+4)[2]<<8)|((buf+4)[3]&0xff));

  if(memcmp(buf,type,4))
  {
   if((*len) & 0x1)
    (*len)++;

   if(!seek_forward(in, *len))
    return 0;
  }
  else
   return 1;
 }
}



double read_IEEE80(unsigned char *buf)
{
 int s=buf[0]&0xff;
 int e=((buf[0]&0x7f)<<8)|(buf[1]&0xff);
 double f=((unsigned long)(buf[2]&0xff)<<24)|
  ((buf[3]&0xff)<<16)|
  ((buf[4]&0xff)<<8) |
   (buf[5]&0xff);

 if(e==32767)
 {
  if(buf[2]&0x80)
   return 
# 1859 "oggenc.c" 3 4
         (__builtin_huge_val())
# 1859 "oggenc.c"
                 ;
  else
  {
   if(s)
    return -
# 1863 "oggenc.c" 3 4
           (__builtin_huge_val())
# 1863 "oggenc.c"
                   ;
   else
    return 
# 1865 "oggenc.c" 3 4
          (__builtin_huge_val())
# 1865 "oggenc.c"
                  ;
  }
 }

 f=ldexp(f,32);
 f+= ((buf[6]&0xff)<<24)|
  ((buf[7]&0xff)<<16)|
  ((buf[8]&0xff)<<8) |
   (buf[9]&0xff);

 return ldexp(f, e-16446);
}


int aiff_id(unsigned char *buf, int len)
{
 if(len<12) return 0;

 if(memcmp(buf, "FORM", 4))
  return 0;

 if(memcmp(buf+8, "AIF",3))
  return 0;

 if(buf[11]!='C' && buf[11]!='F')
  return 0;

 return 1;
}

int aiff_open(FILE *in, oe_enc_opt *opt, unsigned char *buf, int buflen)
{
 int aifc;
 unsigned int len;
 unsigned char *buffer;
 unsigned char buf2[8];
 aiff_fmt format;
 aifffile *aiff = malloc(sizeof(aifffile));

 if(buf[11]=='C')
  aifc=1;
 else
  aifc=0;

 if(!find_aiff_chunk(in, "COMM", &len))
 {
  fprintf(
# 1911 "oggenc.c" 3 4
         stderr
# 1911 "oggenc.c"
               , ("Warning: No common chunk found in AIFF file\n"));
  return 0;
 }

 if(len < 18)
 {
  fprintf(
# 1917 "oggenc.c" 3 4
         stderr
# 1917 "oggenc.c"
               , ("Warning: Truncated common chunk in AIFF header\n"));
  return 0;
 }

 buffer = 
# 1921 "oggenc.c" 3 4
         __builtin_alloca (
# 1921 "oggenc.c"
         len
# 1921 "oggenc.c" 3 4
         )
# 1921 "oggenc.c"
                    ;

 if(fread(buffer,1,len,in) < len)
 {
  fprintf(
# 1925 "oggenc.c" 3 4
         stderr
# 1925 "oggenc.c"
               , ("Warning: Unexpected EOF in reading AIFF header\n"));
  return 0;
 }

 format.channels = (((buffer)[0]<<8)|((buffer)[1]&0xff));
 format.totalframes = (((buffer+2)[0]<<24)|((buffer+2)[1]<<16)|((buffer+2)[2]<<8)|((buffer+2)[3]&0xff));
 format.samplesize = (((buffer+6)[0]<<8)|((buffer+6)[1]&0xff));
 format.rate = (int)read_IEEE80(buffer+8);

    aiff->bigendian = 1;

 if(aifc)
 {
  if(len < 22)
  {
   fprintf(
# 1940 "oggenc.c" 3 4
          stderr
# 1940 "oggenc.c"
                , ("Warning: AIFF-C header truncated.\n"));
   return 0;
  }

  if(!memcmp(buffer+18, "NONE", 4))
  {
   aiff->bigendian = 1;
  }
  else if(!memcmp(buffer+18, "sowt", 4))
  {
   aiff->bigendian = 0;
  }
  else
  {
   fprintf(
# 1954 "oggenc.c" 3 4
          stderr
# 1954 "oggenc.c"
                , ("Warning: Can't handle compressed AIFF-C (%c%c%c%c)\n"), *(buffer+18), *(buffer+19), *(buffer+20), *(buffer+21));
   return 0;
  }
 }

 if(!find_aiff_chunk(in, "SSND", &len))
 {
  fprintf(
# 1961 "oggenc.c" 3 4
         stderr
# 1961 "oggenc.c"
               , ("Warning: No SSND chunk found in AIFF file\n"));
  return 0;
 }

 if(len < 8)
 {
  fprintf(
# 1967 "oggenc.c" 3 4
         stderr
# 1967 "oggenc.c"
               , ("Warning: Corrupted SSND chunk in AIFF header\n"));
  return 0;
 }

 if(fread(buf2,1,8, in) < 8)
 {
  fprintf(
# 1973 "oggenc.c" 3 4
         stderr
# 1973 "oggenc.c"
               , ("Warning: Unexpected EOF reading AIFF header\n"));
  return 0;
 }

 format.offset = (((buf2)[0]<<24)|((buf2)[1]<<16)|((buf2)[2]<<8)|((buf2)[3]&0xff));
 format.blocksize = (((buf2+4)[0]<<24)|((buf2+4)[1]<<16)|((buf2+4)[2]<<8)|((buf2+4)[3]&0xff));

 if( format.blocksize == 0 &&
  (format.samplesize == 16 || format.samplesize == 8))
 {


  opt->rate = format.rate;
  opt->channels = format.channels;
  opt->read_samples = wav_read;
  opt->total_samples_per_channel = format.totalframes;

  aiff->f = in;
  aiff->samplesread = 0;
  aiff->channels = format.channels;
  aiff->samplesize = format.samplesize;
  aiff->totalsamples = format.totalframes;

  opt->readdata = (void *)aiff;

  seek_forward(in, format.offset);
  return 1;
 }
 else
 {
  fprintf(
# 2003 "oggenc.c" 3 4
         stderr
# 2003 "oggenc.c"
               ,
    ("Warning: OggEnc does not support this type of AIFF/AIFC file\n" " Must be 8, 16, or 24 bit PCM.\n")
                                       );
  return 0;
 }
}


int wav_id(unsigned char *buf, int len)
{
 unsigned int flen;

 if(len<12) return 0;

 if(memcmp(buf, "RIFF", 4))
  return 0;

 flen = (((buf+4)[3]<<24)|((buf+4)[2]<<16)|((buf+4)[1]<<8)|((buf+4)[0]&0xff));

 if(memcmp(buf+8, "WAVE",4))
  return 0;

 return 1;
}

int wav_open(FILE *in, oe_enc_opt *opt, unsigned char *oldbuf, int buflen)
{
 unsigned char buf[16];
 unsigned int len;
 int samplesize;
 wav_fmt format;
 wavfile *wav = malloc(sizeof(wavfile));







 if(!find_wav_chunk(in, "fmt ", &len))
  return 0;

 if(len < 16)
 {
  fprintf(
# 2047 "oggenc.c" 3 4
         stderr
# 2047 "oggenc.c"
               , ("Warning: Unrecognised format chunk in WAV header\n"));
  return 0;
 }







 if(len!=16 && len!=18)
  fprintf(
# 2058 "oggenc.c" 3 4
         stderr
# 2058 "oggenc.c"
               ,
    ("Warning: INVALID format chunk in wav header.\n" " Trying to read anyway (may not work)...\n")
                                                 );

 if(fread(buf,1,16,in) < 16)
 {
  fprintf(
# 2064 "oggenc.c" 3 4
         stderr
# 2064 "oggenc.c"
               , ("Warning: Unexpected EOF in reading WAV header\n"));
  return 0;
 }



 if(len - 16 > 0 && !seek_forward(in, len-16))
     return 0;

 format.format = (((buf)[1]<<8)|((buf)[0]&0xff));
 format.channels = (((buf+2)[1]<<8)|((buf+2)[0]&0xff));
 format.samplerate = (((buf+4)[3]<<24)|((buf+4)[2]<<16)|((buf+4)[1]<<8)|((buf+4)[0]&0xff));
 format.bytespersec = (((buf+8)[3]<<24)|((buf+8)[2]<<16)|((buf+8)[1]<<8)|((buf+8)[0]&0xff));
 format.align = (((buf+12)[1]<<8)|((buf+12)[0]&0xff));
 format.samplesize = (((buf+14)[1]<<8)|((buf+14)[0]&0xff));

 if(!find_wav_chunk(in, "data", &len))
  return 0;

 if(format.format == 1)
 {
  samplesize = format.samplesize/8;
  opt->read_samples = wav_read;
 }
 else if(format.format == 3)
 {
  samplesize = 4;
  opt->read_samples = wav_ieee_read;
 }
 else
 {
  fprintf(
# 2095 "oggenc.c" 3 4
         stderr
# 2095 "oggenc.c"
               ,
    ("ERROR: Wav file is unsupported type (must be standard PCM\n" " or type 3 floating point PCM\n")
                                      );
  return 0;
 }



 if( format.align == format.channels*samplesize &&
   format.samplesize == samplesize*8 &&
      (format.samplesize == 24 || format.samplesize == 16 ||
             format.samplesize == 8 ||
      (format.samplesize == 32 && format.format == 3)))
 {


  opt->rate = format.samplerate;
  opt->channels = format.channels;

  wav->f = in;
  wav->samplesread = 0;
  wav->bigendian = 0;
  wav->channels = format.channels;

  wav->samplesize = format.samplesize;

  if(len)
        {
   opt->total_samples_per_channel = len/(format.channels*samplesize);
  }
  else
  {
   long pos;
   pos = ftell(in);
   if(fseek(in, 0, 
# 2129 "oggenc.c" 3 4
                  2
# 2129 "oggenc.c"
                          ) == -1)
   {
    opt->total_samples_per_channel = 0;
   }
   else
   {
    opt->total_samples_per_channel = (ftell(in) - pos)/
                    (format.channels*samplesize);
    fseek(in,pos, 
# 2137 "oggenc.c" 3 4
                 0
# 2137 "oggenc.c"
                         );
   }
  }
  wav->totalsamples = opt->total_samples_per_channel;

  opt->readdata = (void *)wav;
  return 1;
 }
 else
 {
  fprintf(
# 2147 "oggenc.c" 3 4
         stderr
# 2147 "oggenc.c"
               ,
    ("ERROR: Wav file is unsupported subformat (must be 8,16, or 24 bit PCM\n" "or floating point PCM\n")
                              );
  return 0;
 }
}

long wav_read(void *in, float **buffer, int samples)
{
 wavfile *f = (wavfile *)in;
 int sampbyte = f->samplesize / 8;
 signed char *buf = 
# 2158 "oggenc.c" 3 4
                   __builtin_alloca (
# 2158 "oggenc.c"
                   samples*sampbyte*f->channels
# 2158 "oggenc.c" 3 4
                   )
# 2158 "oggenc.c"
                                                       ;
 long bytes_read = fread(buf, 1, samples*sampbyte*f->channels, f->f);
 int i,j;
 long realsamples;

 if(f->totalsamples && f->samplesread +
   bytes_read/(sampbyte*f->channels) > f->totalsamples) {
  bytes_read = sampbyte*f->channels*(f->totalsamples - f->samplesread);
    }

 realsamples = bytes_read/(sampbyte*f->channels);
 f->samplesread += realsamples;

 if(f->samplesize==8)
 {
  unsigned char *bufu = (unsigned char *)buf;
  for(i = 0; i < realsamples; i++)
  {
   for(j=0; j < f->channels; j++)
   {
    buffer[j][i]=((int)(bufu[i*f->channels + j])-128)/128.0f;
   }
  }
 }
 else if(f->samplesize==16)
 {
  if(!f->bigendian)
  {
   for(i = 0; i < realsamples; i++)
   {
    for(j=0; j < f->channels; j++)
    {
     buffer[j][i] = ((buf[i*2*f->channels + 2*j + 1]<<8) |
               (buf[i*2*f->channels + 2*j] & 0xff))/32768.0f;
    }
   }
  }
  else
  {
   for(i = 0; i < realsamples; i++)
   {
    for(j=0; j < f->channels; j++)
    {
     buffer[j][i]=((buf[i*2*f->channels + 2*j]<<8) |
             (buf[i*2*f->channels + 2*j + 1] & 0xff))/32768.0f;
    }
   }
  }
 }
    else if(f->samplesize==24)
    {
        if(!f->bigendian) {
            for(i = 0; i < realsamples; i++)
            {
                for(j=0; j < f->channels; j++)
                {
                    buffer[j][i] = ((buf[i*3*f->channels + 3*j + 2] << 16) |
                      (((unsigned char *)buf)[i*3*f->channels + 3*j + 1] << 8) |
                      (((unsigned char *)buf)[i*3*f->channels + 3*j] & 0xff))
                        / 8388608.0f;

                }
            }
        }
        else {
            fprintf(
# 2223 "oggenc.c" 3 4
                   stderr
# 2223 "oggenc.c"
                         , ("Big endian 24 bit PCM data is not currently " "supported, aborting.\n")
                                                       );
            return 0;
        }
    }
    else {
        fprintf(
# 2229 "oggenc.c" 3 4
               stderr
# 2229 "oggenc.c"
                     , ("Internal error: attempt to read unsupported " "bitdepth %d\n")
                                          , f->samplesize);
        return 0;
    }

 return realsamples;
}

long wav_ieee_read(void *in, float **buffer, int samples)
{
 wavfile *f = (wavfile *)in;
 float *buf = 
# 2240 "oggenc.c" 3 4
             __builtin_alloca (
# 2240 "oggenc.c"
             samples*4*f->channels
# 2240 "oggenc.c" 3 4
             )
# 2240 "oggenc.c"
                                          ;
 long bytes_read = fread(buf,1,samples*4*f->channels, f->f);
 int i,j;
 long realsamples;


 if(f->totalsamples && f->samplesread +
   bytes_read/(4*f->channels) > f->totalsamples)
  bytes_read = 4*f->channels*(f->totalsamples - f->samplesread);
 realsamples = bytes_read/(4*f->channels);
 f->samplesread += realsamples;

 for(i=0; i < realsamples; i++)
  for(j=0; j < f->channels; j++)
   buffer[j][i] = buf[i*f->channels + j];

 return realsamples;
}


void wav_close(void *info)
{
 wavfile *f = (wavfile *)info;

 free(f);
}

int raw_open(FILE *in, oe_enc_opt *opt)
{
 wav_fmt format;
 wavfile *wav = malloc(sizeof(wavfile));


 format.format = 2;
 format.channels = opt->channels;
 format.samplerate = opt->rate;
 format.samplesize = opt->samplesize;
 format.bytespersec = opt->channels * opt->rate * opt->samplesize / 8;
 format.align = format.bytespersec;
 wav->f = in;
 wav->samplesread = 0;
 wav->bigendian = opt->endianness;
 wav->channels = format.channels;
 wav->samplesize = opt->samplesize;
    wav->totalsamples = 0;

 opt->read_samples = wav_read;
 opt->readdata = (void *)wav;
 opt->total_samples_per_channel = 0;
 return 1;
}

typedef struct {
    res_state resampler;
    audio_read_func real_reader;
    void *real_readdata;
    float **bufs;
    int channels;
    int bufsize;
    int done;
} resampler;

static long read_resampled(void *d, float **buffer, int samples)
{
    resampler *rs = d;
    long in_samples;
    int out_samples;

    in_samples = res_push_max_input(&rs->resampler, samples);
    if(in_samples > rs->bufsize)
        in_samples = rs->bufsize;

    in_samples = rs->real_reader(rs->real_readdata, rs->bufs, in_samples);

    if(in_samples <= 0) {
        if(!rs->done) {
            rs->done = 1;
            out_samples = res_drain(&rs->resampler, buffer);
            return out_samples;
        }
        return 0;
    }

    out_samples = res_push(&rs->resampler, buffer, (float const **)rs->bufs, in_samples);

    if(out_samples <= 0) {
        fprintf(
# 2326 "oggenc.c" 3 4
               stderr
# 2326 "oggenc.c"
                     , ("BUG: Got zero samples from resampler: your file will be truncated. Please report this.\n"));
    }

    return out_samples;
}

int setup_resample(oe_enc_opt *opt) {
    resampler *rs = calloc(1, sizeof(resampler));
    int c;

    rs->bufsize = 4096;
    rs->real_reader = opt->read_samples;
    rs->real_readdata = opt->readdata;
    rs->bufs = malloc(sizeof(float *) * opt->channels);
    rs->channels = opt->channels;
    rs->done = 0;
    if(res_init(&rs->resampler, rs->channels, opt->resamplefreq, opt->rate, RES_END))
    {
        fprintf(
# 2344 "oggenc.c" 3 4
               stderr
# 2344 "oggenc.c"
                     , ("Couldn't initialise resampler\n"));
        return -1;
    }

    for(c=0; c < opt->channels; c++)
        rs->bufs[c] = malloc(sizeof(float) * rs->bufsize);

    opt->read_samples = read_resampled;
    opt->readdata = rs;
    if(opt->total_samples_per_channel)
        opt->total_samples_per_channel = (int)((float)opt->total_samples_per_channel *
            ((float)opt->resamplefreq/(float)opt->rate));
    opt->rate = opt->resamplefreq;

    return 0;
}

void clear_resample(oe_enc_opt *opt) {
    resampler *rs = opt->readdata;
    int i;

    opt->read_samples = rs->real_reader;
    opt->readdata = rs->real_readdata;
    res_clear(&rs->resampler);

    for(i = 0; i < rs->channels; i++)
        free(rs->bufs[i]);

    free(rs->bufs);

    free(rs);
}

typedef struct {
    audio_read_func real_reader;
    void *real_readdata;
    int channels;
    float scale_factor;
} scaler;

static long read_scaler(void *data, float **buffer, int samples) {
    scaler *d = data;
    long in_samples = d->real_reader(d->real_readdata, buffer, samples);
    int i,j;

    for(i=0; i < d->channels; i++) {
        for(j=0; j < in_samples; j++) {
            buffer[i][j] *= d->scale_factor;
        }
    }

    return in_samples;
}


void setup_scaler(oe_enc_opt *opt, float scale) {
    scaler *d = calloc(1, sizeof(scaler));

    d->real_reader = opt->read_samples;
    d->real_readdata = opt->readdata;

    opt->read_samples = read_scaler;
    opt->readdata = d;
    d->channels = opt->channels;
    d->scale_factor = scale;
}

void clear_scaler(oe_enc_opt *opt) {
    scaler *d = opt->readdata;

    opt->read_samples = d->real_reader;
    opt->readdata = d->real_readdata;

    free(d);
}

typedef struct {
    audio_read_func real_reader;
    void *real_readdata;
    float **bufs;
} downmix;

static long read_downmix(void *data, float **buffer, int samples)
{
    downmix *d = data;
    long in_samples = d->real_reader(d->real_readdata, d->bufs, samples);
    int i;

    for(i=0; i < in_samples; i++) {
        buffer[0][i] = (d->bufs[0][i] + d->bufs[1][i])*0.5f;
    }

    return in_samples;
}

void setup_downmix(oe_enc_opt *opt) {
    downmix *d = calloc(1, sizeof(downmix));

    if(opt->channels != 2) {
        fprintf(
# 2443 "oggenc.c" 3 4
               stderr
# 2443 "oggenc.c"
                     , "Internal error! Please report this bug.\n");
        return;
    }

    d->bufs = malloc(2 * sizeof(float *));
    d->bufs[0] = malloc(4096 * sizeof(float));
    d->bufs[1] = malloc(4096 * sizeof(float));
    d->real_reader = opt->read_samples;

    d->real_readdata = opt->readdata;

    opt->read_samples = read_downmix;
    opt->readdata = d;

    opt->channels = 1;
}
void clear_downmix(oe_enc_opt *opt) {
    downmix *d = opt->readdata;

    opt->read_samples = d->real_reader;
    opt->readdata = d->real_readdata;
    opt->channels = 2;

    free(d->bufs[0]);
    free(d->bufs[1]);
    free(d->bufs);
    free(d);
}
# 2502 "oggenc.c"
extern int vorbis_encode_init(vorbis_info *vi,
         long channels,
         long rate,

         long max_bitrate,
         long nominal_bitrate,
         long min_bitrate);

extern int vorbis_encode_setup_managed(vorbis_info *vi,
           long channels,
           long rate,

           long max_bitrate,
           long nominal_bitrate,
           long min_bitrate);

extern int vorbis_encode_setup_vbr(vorbis_info *vi,
      long channels,
      long rate,

      float
      );

extern int vorbis_encode_init_vbr(vorbis_info *vi,
      long channels,
      long rate,

      float base_quality
      );

extern int vorbis_encode_setup_init(vorbis_info *vi);

extern int vorbis_encode_ctl(vorbis_info *vi,int number,void *arg);
# 2548 "oggenc.c"
struct ovectl_ratemanage_arg {
  int management_active;

  long bitrate_hard_min;
  long bitrate_hard_max;
  double bitrate_hard_window;

  long bitrate_av_lo;
  long bitrate_av_hi;
  double bitrate_av_window;
  double bitrate_av_window_center;
};




int oe_write_page(ogg_page *page, FILE *fp);
# 2584 "oggenc.c"
static void set_advanced_encoder_options(adv_opt *opts, int count,
        vorbis_info *vi)
{
    int hard = 0;
    int avg = 0;
    struct ovectl_ratemanage_arg ai;
    int i;
    double dval;
    long lval;

    vorbis_encode_ctl(vi, 0x10, &ai);

    for(i=0; i < count; i++) {
        fprintf(
# 2597 "oggenc.c" 3 4
               stderr
# 2597 "oggenc.c"
                     , ("Setting advanced encoder option \"%s\" to %s\n"),
                opts[i].arg, opts[i].val);

        if(!strcmp(opts[i].arg, "bitrate_average_window")) {
            do { if(sscanf(opts[i].val, "%lf", &dval) != 1) fprintf(
# 2601 "oggenc.c" 3 4
           stderr
# 2601 "oggenc.c"
           , "For option %s, couldn't read value %s as double\n", opts[i].arg, opts[i].val); else ai.bitrate_av_window = dval; } while(0);
            avg = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_average_window_center")) {
            do { if(sscanf(opts[i].val, "%lf", &dval) != 1) fprintf(
# 2605 "oggenc.c" 3 4
           stderr
# 2605 "oggenc.c"
           , "For option %s, couldn't read value %s as double\n", opts[i].arg, opts[i].val); else ai.bitrate_av_window_center = dval; } while(0);
            avg = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_average_low")) {
            do { if(sscanf(opts[i].val, "%ld", &lval) != 1) fprintf(
# 2609 "oggenc.c" 3 4
           stderr
# 2609 "oggenc.c"
           , "For option %s, couldn't read value %s as integer\n", opts[i].arg, opts[i].val); else ai.bitrate_av_lo = lval; } while(0);
            avg = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_average_high")) {
            do { if(sscanf(opts[i].val, "%ld", &lval) != 1) fprintf(
# 2613 "oggenc.c" 3 4
           stderr
# 2613 "oggenc.c"
           , "For option %s, couldn't read value %s as integer\n", opts[i].arg, opts[i].val); else ai.bitrate_av_hi = lval; } while(0);
            avg = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_hard_min")) {
            do { if(sscanf(opts[i].val, "%ld", &lval) != 1) fprintf(
# 2617 "oggenc.c" 3 4
           stderr
# 2617 "oggenc.c"
           , "For option %s, couldn't read value %s as integer\n", opts[i].arg, opts[i].val); else ai.bitrate_hard_min = lval; } while(0);
            hard = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_hard_max")) {
            do { if(sscanf(opts[i].val, "%ld", &lval) != 1) fprintf(
# 2621 "oggenc.c" 3 4
           stderr
# 2621 "oggenc.c"
           , "For option %s, couldn't read value %s as integer\n", opts[i].arg, opts[i].val); else ai.bitrate_hard_max = lval; } while(0);
            hard = 1;
        }
        else if(!strcmp(opts[i].arg, "bitrate_hard_window")) {
            do { if(sscanf(opts[i].val, "%lf", &dval) != 1) fprintf(
# 2625 "oggenc.c" 3 4
           stderr
# 2625 "oggenc.c"
           , "For option %s, couldn't read value %s as double\n", opts[i].arg, opts[i].val); else ai.bitrate_hard_window = dval; } while(0);
            hard = 1;
        }
        else if(!strcmp(opts[i].arg, "impulse_noisetune")) {
            double val;
            do { if(sscanf(opts[i].val, "%lf", &dval) != 1) fprintf(
# 2630 "oggenc.c" 3 4
           stderr
# 2630 "oggenc.c"
           , "For option %s, couldn't read value %s as double\n", opts[i].arg, opts[i].val); else val = dval; } while(0);
            vorbis_encode_ctl(vi, 0x31, &val);
        }
        else if(!strcmp(opts[i].arg, "lowpass_frequency")) {
            double prev, new;
            do { if(sscanf(opts[i].val, "%lf", &dval) != 1) fprintf(
# 2635 "oggenc.c" 3 4
           stderr
# 2635 "oggenc.c"
           , "For option %s, couldn't read value %s as double\n", opts[i].arg, opts[i].val); else new = dval; } while(0);
            vorbis_encode_ctl(vi, 0x20, &prev);
            vorbis_encode_ctl(vi, 0x21, &new);
            fprintf(
# 2638 "oggenc.c" 3 4
                   stderr
# 2638 "oggenc.c"
                         , ("Changed lowpass frequency from %f kHz to %f kHz\n"), prev, new);
        }
        else {
            fprintf(
# 2641 "oggenc.c" 3 4
                   stderr
# 2641 "oggenc.c"
                         , ("Unrecognised advanced option \"%s\"\n"),
                    opts[i].arg);
        }
    }

    if(hard)
        vorbis_encode_ctl(vi, 0x13, &ai);
    if(avg)
        vorbis_encode_ctl(vi, 0x12, &ai);
}

int oe_encode(oe_enc_opt *opt)
{

 ogg_stream_state os;
 ogg_page og;
 ogg_packet op;

 vorbis_dsp_state vd;
 vorbis_block vb;
 vorbis_info vi;

 long samplesdone=0;
    int eos;
 long bytes_written = 0, packetsdone=0;
 double time_elapsed;
 int ret=0;
 TIMER *timer;

    if(opt->channels > 255) {
        fprintf(
# 2671 "oggenc.c" 3 4
               stderr
# 2671 "oggenc.c"
                     , ("255 channels should be enough for anyone. (Sorry, vorbis doesn't support more)\n"));
        return 1;
    }


    timer = timer_start();

    if(!opt->managed && (opt->min_bitrate>=0 || opt->max_bitrate>=0)){
      fprintf(
# 2679 "oggenc.c" 3 4
             stderr
# 2679 "oggenc.c"
                   , ("Requesting a minimum or maximum bitrate requires --managed\n"));
      return 1;
    }



    if(opt->bitrate < 0 && opt->min_bitrate < 0 && opt->max_bitrate < 0){
      opt->quality_set=1;
    }

    opt->start_encode(opt->infilename, opt->filename, opt->bitrate, opt->quality,
        opt->quality_set, opt->managed, opt->min_bitrate, opt->max_bitrate);


    vorbis_info_init(&vi);

    if(opt->quality_set > 0){
        if(vorbis_encode_setup_vbr(&vi, opt->channels, opt->rate, opt->quality)){
         fprintf(
# 2697 "oggenc.c" 3 4
                stderr
# 2697 "oggenc.c"
                      , ("Mode initialisation failed: invalid parameters for quality\n"));
         vorbis_info_clear(&vi);
         return 1;
        }


        if(opt->max_bitrate > 0 || opt->min_bitrate > 0){
            struct ovectl_ratemanage_arg ai;
         vorbis_encode_ctl(&vi, 0x10, &ai);

         ai.bitrate_hard_min=opt->min_bitrate;
         ai.bitrate_hard_max=opt->max_bitrate;
         ai.management_active=1;

         vorbis_encode_ctl(&vi, 0x11, &ai);

        }


    }else {
        if(vorbis_encode_setup_managed(&vi, opt->channels, opt->rate,
         opt->max_bitrate>0?opt->max_bitrate*1000:-1,
         opt->bitrate*1000,
         opt->min_bitrate>0?opt->min_bitrate*1000:-1)){
         fprintf(
# 2721 "oggenc.c" 3 4
                stderr
# 2721 "oggenc.c"
                      , ("Mode initialisation failed: invalid parameters for bitrate\n"));
         vorbis_info_clear(&vi);
         return 1;
        }
    }

    if(opt->managed && opt->bitrate < 0)
    {
        vorbis_encode_ctl(&vi, 0x12, 
# 2729 "oggenc.c" 3 4
                                                      ((void *)0)
# 2729 "oggenc.c"
                                                          );
    }
    else if(!opt->managed)
    {

        vorbis_encode_ctl(&vi, 0x11, 
# 2734 "oggenc.c" 3 4
                                                      ((void *)0)
# 2734 "oggenc.c"
                                                          );
    }

    set_advanced_encoder_options(opt->advopt, opt->advopt_count, &vi);

    vorbis_encode_setup_init(&vi);






 vorbis_analysis_init(&vd,&vi);
 vorbis_block_init(&vd,&vb);

 ogg_stream_init(&os, opt->serialno);




 {
  ogg_packet header_main;
  ogg_packet header_comments;
  ogg_packet header_codebooks;
  int result;


  vorbis_analysis_headerout(&vd,opt->comments,
    &header_main,&header_comments,&header_codebooks);


  ogg_stream_packetin(&os,&header_main);
  ogg_stream_packetin(&os,&header_comments);
  ogg_stream_packetin(&os,&header_codebooks);

  while((result = ogg_stream_flush(&os, &og)))
  {
   if(!result) break;
   ret = oe_write_page(&og, opt->out);
   if(ret != og.header_len + og.body_len)
   {
    opt->error(("Failed writing header to output stream\n"));
    ret = 1;
    goto cleanup;
   }
  }
 }

 eos = 0;


 while(!eos)
 {
  float **buffer = vorbis_analysis_buffer(&vd, 1024);
  long samples_read = opt->read_samples(opt->readdata,
    buffer, 1024);

  if(samples_read ==0)

   vorbis_analysis_wrote(&vd,0);
  else
  {
   samplesdone += samples_read;


   if(packetsdone>=40)
   {
    double time;

    packetsdone = 0;
    time = timer_time(timer);

    opt->progress_update(opt->filename, opt->total_samples_per_channel,
      samplesdone, time);
   }



   vorbis_analysis_wrote(&vd, samples_read);
  }



  while(vorbis_analysis_blockout(&vd,&vb)==1)
  {


   vorbis_analysis(&vb, 
# 2821 "oggenc.c" 3 4
                       ((void *)0)
# 2821 "oggenc.c"
                           );
   vorbis_bitrate_addblock(&vb);

   while(vorbis_bitrate_flushpacket(&vd, &op))
   {

    ogg_stream_packetin(&os,&op);
    packetsdone++;




    while(!eos)
    {
     int result = ogg_stream_pageout(&os,&og);
     if(!result) break;

     ret = oe_write_page(&og, opt->out);
     if(ret != og.header_len + og.body_len)
     {
      opt->error(("Failed writing data to output stream\n"));
      ret = 1;
      goto cleanup;
     }
     else
      bytes_written += ret;

     if(ogg_page_eos(&og))
      eos = 1;
    }
   }
  }
 }

 ret = 0;



cleanup:

 ogg_stream_clear(&os);

 vorbis_block_clear(&vb);
 vorbis_dsp_clear(&vd);
 vorbis_info_clear(&vi);

 time_elapsed = timer_time(timer);
 opt->end_encode(opt->filename, time_elapsed, opt->rate, samplesdone, bytes_written);

 timer_clear(timer);

 return ret;
}

void update_statistics_full(char *fn, long total, long done, double time)
{
 static char *spinner="|/-\\";
 static int spinpoint = 0;
 double remain_time;
 int minutes=0,seconds=0;

 remain_time = time/((double)done/(double)total) - time;
 minutes = ((int)remain_time)/60;
 seconds = (int)(remain_time - (double)((int)remain_time/60)*60);

 fprintf(
# 2886 "oggenc.c" 3 4
        stderr
# 2886 "oggenc.c"
              , "\r");
 fprintf(
# 2887 "oggenc.c" 3 4
        stderr
# 2887 "oggenc.c"
              , ("\t[%5.1f%%] [%2dm%.2ds remaining] %c"),
   done*100.0/total, minutes, seconds, spinner[spinpoint++%4]);
}

void update_statistics_notime(char *fn, long total, long done, double time)
{
 static char *spinner="|/-\\";
 static int spinpoint =0;

 fprintf(
# 2896 "oggenc.c" 3 4
        stderr
# 2896 "oggenc.c"
              , "\r");
 fprintf(
# 2897 "oggenc.c" 3 4
        stderr
# 2897 "oggenc.c"
              , ("\tEncoding [%2dm%.2ds so far] %c"),
            ((int)time)/60, (int)(time - (double)((int)time/60)*60),
   spinner[spinpoint++%4]);
}

int oe_write_page(ogg_page *page, FILE *fp)
{
 int written;
 written = fwrite(page->header,1,page->header_len, fp);
 written += fwrite(page->body,1,page->body_len, fp);

 return written;
}

void final_statistics(char *fn, double time, int rate, long samples, long bytes)
{
 double speed_ratio;
 if(fn)
  fprintf(
# 2915 "oggenc.c" 3 4
         stderr
# 2915 "oggenc.c"
               , ("\n\nDone encoding file \"%s\"\n"), fn);
 else
  fprintf(
# 2917 "oggenc.c" 3 4
         stderr
# 2917 "oggenc.c"
               , ("\n\nDone encoding.\n"));

 speed_ratio = (double)samples / (double)rate / time;

 fprintf(
# 2921 "oggenc.c" 3 4
        stderr
# 2921 "oggenc.c"
              , ("\n\tFile length:  %dm %04.1fs\n"),
   (int)(samples/rate/60),
   samples/rate -
   floor(samples/rate/60)*60);
 fprintf(
# 2925 "oggenc.c" 3 4
        stderr
# 2925 "oggenc.c"
              , ("\tElapsed time: %dm %04.1fs\n"),
   (int)(time/60),
   time - floor(time/60)*60);
 fprintf(
# 2928 "oggenc.c" 3 4
        stderr
# 2928 "oggenc.c"
              , ("\tRate:         %.4f\n"), speed_ratio);
 fprintf(
# 2929 "oggenc.c" 3 4
        stderr
# 2929 "oggenc.c"
              , ("\tAverage bitrate: %.1f kb/s\n\n"),
  8./1000.*((double)bytes/((double)samples/(double)rate)));
}

void final_statistics_null(char *fn, double time, int rate, long samples,
  long bytes)
{

}

void update_statistics_null(char *fn, long total, long done, double time)
{

}

void encode_error(char *errmsg)
{
 fprintf(
# 2946 "oggenc.c" 3 4
        stderr
# 2946 "oggenc.c"
              , "\n%s\n", errmsg);
}

static void print_brconstraints(int min, int max)
{
    if(min > 0 && max > 0)
        fprintf(
# 2952 "oggenc.c" 3 4
               stderr
# 2952 "oggenc.c"
                     , "(min %d kbps, max %d kbps)", min,max);
    else if(min > 0)
        fprintf(
# 2954 "oggenc.c" 3 4
               stderr
# 2954 "oggenc.c"
                     , "(min %d kbps, no max)", min);
    else if(max > 0)
        fprintf(
# 2956 "oggenc.c" 3 4
               stderr
# 2956 "oggenc.c"
                     , "(no min, max %d kbps)", max);
    else
        fprintf(
# 2958 "oggenc.c" 3 4
               stderr
# 2958 "oggenc.c"
                     , "(no min or max)");
}

void start_encode_full(char *fn, char *outfn, int bitrate, float quality, int qset,
        int managed, int min, int max)
{
  if(bitrate>0){
    if(managed>0){
      fprintf(
# 2966 "oggenc.c" 3 4
             stderr
# 2966 "oggenc.c"
                   , ("Encoding %s%s%s to \n         " "%s%s%s \nat average bitrate %d kbps ")
                                          ,
       fn?"\"":"", fn?fn:("standard input"), fn?"\"":"",
       outfn?"\"":"", outfn?outfn:("standard output"), outfn?"\"":"",
       bitrate);
      print_brconstraints(min,max);
      fprintf(
# 2972 "oggenc.c" 3 4
             stderr
# 2972 "oggenc.c"
                   , ", \nusing full bitrate management engine\n");
    } else {
      fprintf(
# 2974 "oggenc.c" 3 4
             stderr
# 2974 "oggenc.c"
                   , ("Encoding %s%s%s to \n         %s%s%s \nat approximate bitrate %d kbps (VBR encoding enabled)\n"),
       fn?"\"":"", fn?fn:("standard input"), fn?"\"":"",
     outfn?"\"":"", outfn?outfn:("standard output"), outfn?"\"":"",
       bitrate);
    }
  }else{
    if(qset>0){
      if(managed>0){
 fprintf(
# 2982 "oggenc.c" 3 4
        stderr
# 2982 "oggenc.c"
              , ("Encoding %s%s%s to \n         %s%s%s \nat quality level %2.2f using constrained VBR "),
  fn?"\"":"", fn?fn:("standard input"), fn?"\"":"",
  outfn?"\"":"", outfn?outfn:("standard output"), outfn?"\"":"",
  quality * 10);
 print_brconstraints(min,max);
 fprintf(
# 2987 "oggenc.c" 3 4
        stderr
# 2987 "oggenc.c"
              , "\n");
      }else{
        fprintf(
# 2989 "oggenc.c" 3 4
               stderr
# 2989 "oggenc.c"
                     , ("Encoding %s%s%s to \n         %s%s%s \nat quality %2.2f\n"),
       fn?"\"":"", fn?fn:("standard input"), fn?"\"":"",
                outfn?"\"":"", outfn?outfn:("standard output"), outfn?"\"":"",
                quality * 10);
      }
    }else{
      fprintf(
# 2995 "oggenc.c" 3 4
             stderr
# 2995 "oggenc.c"
                   , ("Encoding %s%s%s to \n         %s%s%s \nusing bitrate management "),
       fn?"\"":"", fn?fn:("standard input"), fn?"\"":"",
       outfn?"\"":"", outfn?outfn:("standard output"), outfn?"\"":"");
      print_brconstraints(min,max);
      fprintf(
# 2999 "oggenc.c" 3 4
             stderr
# 2999 "oggenc.c"
                   , "\n");
    }
  }
}

void start_encode_null(char *fn, char *outfn, int bitrate, float quality, int qset,
        int managed, int min, int max)
{
}
# 3074 "oggenc.c"
void *timer_start(void)
{
 struct timeval *start = malloc(sizeof(struct timeval));
 gettimeofday(start, 
# 3077 "oggenc.c" 3 4
                    ((void *)0)
# 3077 "oggenc.c"
                        );
 return (void *)start;
}

double timer_time(void *timer)
{
 struct timeval now;
 struct timeval start = *((struct timeval *)timer);

 gettimeofday(&now, 
# 3086 "oggenc.c" 3 4
                   ((void *)0)
# 3086 "oggenc.c"
                       );

 return (double)now.tv_sec - (double)start.tv_sec +
  ((double)now.tv_usec - (double)start.tv_usec)/1000000.0;
}

void timer_clear(void *timer)
{
 free((time_t *)timer);
}
# 3115 "oggenc.c"
int create_directories(char *fn)
{
    char *end, *start;
    struct stat statbuf;
    char *segment = malloc(strlen(fn)+1);

    start = fn;





    while((end = strpbrk(start+1, "/")) != 
# 3127 "oggenc.c" 3 4
                                                ((void *)0)
# 3127 "oggenc.c"
                                                    )
    {
        memcpy(segment, fn, end-fn);
        segment[end-fn] = 0;

        if(stat(segment,&statbuf)) {
            if(
# 3133 "oggenc.c" 3 4
              (*__errno_location ()) 
# 3133 "oggenc.c"
                    == 
# 3133 "oggenc.c" 3 4
                       2
# 3133 "oggenc.c"
                             ) {
                if(mkdir(segment, 0777)) {
                    fprintf(
# 3135 "oggenc.c" 3 4
                           stderr
# 3135 "oggenc.c"
                                 , ("Couldn't create directory \"%s\": %s\n"),
                            segment, strerror(
# 3136 "oggenc.c" 3 4
                                             (*__errno_location ())
# 3136 "oggenc.c"
                                                  ));
                    free(segment);
                    return -1;
                }
            }
            else {
                fprintf(
# 3142 "oggenc.c" 3 4
                       stderr
# 3142 "oggenc.c"
                             , ("Error checking for existence of directory %s: %s\n"),
                            segment, strerror(
# 3143 "oggenc.c" 3 4
                                             (*__errno_location ())
# 3143 "oggenc.c"
                                                  ));
                free(segment);
                return -1;
            }
        }





        else if(!
# 3153 "oggenc.c" 3 4
                ((((
# 3153 "oggenc.c"
                statbuf.st_mode
# 3153 "oggenc.c" 3 4
                )) & 0170000) == (0040000))
# 3153 "oggenc.c"
                                        ) {

            fprintf(
# 3155 "oggenc.c" 3 4
                   stderr
# 3155 "oggenc.c"
                         , ("Error: path segment \"%s\" is not a directory\n"),
                    segment);
            free(segment);
            return -1;
        }

        start = end+1;
    }

    free(segment);
    return 0;

}
# 3179 "oggenc.c"
static int hcf(int arg1, int arg2)
{
 int mult = 1;

 while (~(arg1 | arg2) & 1)
  arg1 >>= 1, arg2 >>= 1, mult <<= 1;

 while (arg1 > 0)
 {
  if (~(arg1 & arg2) & 1)
  {
   arg1 >>= (~arg1 & 1);
   arg2 >>= (~arg2 & 1);
  }
  else if (arg1 < arg2)
   arg2 = (arg2 - arg1) >> 1;
  else
   arg1 = (arg1 - arg2) >> 1;
 }

 return arg2 * mult;
}


static void filt_sinc(float *dest, int N, int step, double fc, double gain, int width)
{
 double s = fc / step;
 int mid, x;
 float *endpoint = dest + N,
  *base = dest,
  *origdest = dest;

 
# 3211 "oggenc.c" 3 4
((
# 3211 "oggenc.c"
width <= N
# 3211 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3211 "oggenc.c"
"width <= N"
# 3211 "oggenc.c" 3 4
, "oggenc.c", 3211, __PRETTY_FUNCTION__))
# 3211 "oggenc.c"
                  ;

 if ((N & 1) == 0)
 {
  *dest = 0.0;
  dest += width;
  if (dest >= endpoint)
   dest = ++base;
  N--;
 }

 mid = N / 2;
 x = -mid;

 while (N--)
 {
  *dest = (x ? sin(x * 
# 3227 "oggenc.c" 3 4
                      3.14159265358979323846 
# 3227 "oggenc.c"
                           * s) / (x * 
# 3227 "oggenc.c" 3 4
                                       3.14159265358979323846
# 3227 "oggenc.c"
                                           ) * step : fc) * gain;
  x++;
  dest += width;
  if (dest >= endpoint)
   dest = ++base;
 }
 
# 3233 "oggenc.c" 3 4
((
# 3233 "oggenc.c"
dest == origdest + width
# 3233 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3233 "oggenc.c"
"dest == origdest + width"
# 3233 "oggenc.c" 3 4
, "oggenc.c", 3233, __PRETTY_FUNCTION__))
# 3233 "oggenc.c"
                                ;
}


static double I_zero(double x)
{
 int n = 0;
 double u = 1.0,
  s = 1.0,
  t;

 do
 {
  n += 2;
  t = x / n;
  u *= t * t;
  s += u;
 } while (u > 1e-21 * s);

 return s;
}


static void win_kaiser(float *dest, int N, double alpha, int width)
{
 double I_alpha, midsq;
 int x;
 float *endpoint = dest + N,
  *base = dest,
  *origdest = dest;

 
# 3264 "oggenc.c" 3 4
((
# 3264 "oggenc.c"
width <= N
# 3264 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3264 "oggenc.c"
"width <= N"
# 3264 "oggenc.c" 3 4
, "oggenc.c", 3264, __PRETTY_FUNCTION__))
# 3264 "oggenc.c"
                  ;

 if ((N & 1) == 0)
 {
  *dest = 0.0;
  dest += width;
  if (dest >= endpoint)
   dest = ++base;
  N--;
 }

 x = -(N / 2);
 midsq = (double)(x - 1) * (double)(x - 1);
 I_alpha = I_zero(alpha);

 while (N--)
 {
  *dest *= I_zero(alpha * sqrt(1.0 - ((double)x * (double)x) / midsq)) / I_alpha;
  x++;
  dest += width;
  if (dest >= endpoint)
   dest = ++base;
 }
 
# 3287 "oggenc.c" 3 4
((
# 3287 "oggenc.c"
dest == origdest + width
# 3287 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3287 "oggenc.c"
"dest == origdest + width"
# 3287 "oggenc.c" 3 4
, "oggenc.c", 3287, __PRETTY_FUNCTION__))
# 3287 "oggenc.c"
                                ;
}


int res_init(res_state *state, int channels, int outfreq, int infreq, res_parameter op1, ...)
{
 double beta = 16.0,
  cutoff = 0.80,
  gain = 1.0;
 int taps = 45;

 int factor;

 
# 3300 "oggenc.c" 3 4
((
# 3300 "oggenc.c"
state
# 3300 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3300 "oggenc.c"
"state"
# 3300 "oggenc.c" 3 4
, "oggenc.c", 3300, __PRETTY_FUNCTION__))
# 3300 "oggenc.c"
             ;
 
# 3301 "oggenc.c" 3 4
((
# 3301 "oggenc.c"
channels > 0
# 3301 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3301 "oggenc.c"
"channels > 0"
# 3301 "oggenc.c" 3 4
, "oggenc.c", 3301, __PRETTY_FUNCTION__))
# 3301 "oggenc.c"
                    ;
 
# 3302 "oggenc.c" 3 4
((
# 3302 "oggenc.c"
outfreq > 0
# 3302 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3302 "oggenc.c"
"outfreq > 0"
# 3302 "oggenc.c" 3 4
, "oggenc.c", 3302, __PRETTY_FUNCTION__))
# 3302 "oggenc.c"
                   ;
 
# 3303 "oggenc.c" 3 4
((
# 3303 "oggenc.c"
infreq > 0
# 3303 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3303 "oggenc.c"
"infreq > 0"
# 3303 "oggenc.c" 3 4
, "oggenc.c", 3303, __PRETTY_FUNCTION__))
# 3303 "oggenc.c"
                  ;
 
# 3304 "oggenc.c" 3 4
((
# 3304 "oggenc.c"
taps > 0
# 3304 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3304 "oggenc.c"
"taps > 0"
# 3304 "oggenc.c" 3 4
, "oggenc.c", 3304, __PRETTY_FUNCTION__))
# 3304 "oggenc.c"
                ;

 if (state == 
# 3306 "oggenc.c" 3 4
             ((void *)0) 
# 3306 "oggenc.c"
                  || channels <= 0 || outfreq <= 0 || infreq <= 0 || taps <= 0)
  return -1;

 if (op1 != RES_END)
 {
  va_list argp;
  
# 3312 "oggenc.c" 3 4
 __builtin_va_start(
# 3312 "oggenc.c"
 argp
# 3312 "oggenc.c" 3 4
 ,
# 3312 "oggenc.c"
 op1
# 3312 "oggenc.c" 3 4
 )
# 3312 "oggenc.c"
                    ;
  do
  {
   switch (op1)
   {
   case RES_GAIN:
    gain = 
# 3318 "oggenc.c" 3 4
          __builtin_va_arg(
# 3318 "oggenc.c"
          argp
# 3318 "oggenc.c" 3 4
          ,
# 3318 "oggenc.c"
          double
# 3318 "oggenc.c" 3 4
          )
# 3318 "oggenc.c"
                              ;
    break;

   case RES_CUTOFF:
    cutoff = 
# 3322 "oggenc.c" 3 4
            __builtin_va_arg(
# 3322 "oggenc.c"
            argp
# 3322 "oggenc.c" 3 4
            ,
# 3322 "oggenc.c"
            double
# 3322 "oggenc.c" 3 4
            )
# 3322 "oggenc.c"
                                ;
    
# 3323 "oggenc.c" 3 4
   ((
# 3323 "oggenc.c"
   cutoff > 0.01 && cutoff <= 1.0
# 3323 "oggenc.c" 3 4
   ) ? (void) (0) : __assert_fail (
# 3323 "oggenc.c"
   "cutoff > 0.01 && cutoff <= 1.0"
# 3323 "oggenc.c" 3 4
   , "oggenc.c", 3323, __PRETTY_FUNCTION__))
# 3323 "oggenc.c"
                                         ;
    break;

   case RES_TAPS:
    taps = 
# 3327 "oggenc.c" 3 4
          __builtin_va_arg(
# 3327 "oggenc.c"
          argp
# 3327 "oggenc.c" 3 4
          ,
# 3327 "oggenc.c"
          int
# 3327 "oggenc.c" 3 4
          )
# 3327 "oggenc.c"
                           ;
    
# 3328 "oggenc.c" 3 4
   ((
# 3328 "oggenc.c"
   taps > 2 && taps < 1000
# 3328 "oggenc.c" 3 4
   ) ? (void) (0) : __assert_fail (
# 3328 "oggenc.c"
   "taps > 2 && taps < 1000"
# 3328 "oggenc.c" 3 4
   , "oggenc.c", 3328, __PRETTY_FUNCTION__))
# 3328 "oggenc.c"
                                  ;
    break;

   case RES_BETA:
    beta = 
# 3332 "oggenc.c" 3 4
          __builtin_va_arg(
# 3332 "oggenc.c"
          argp
# 3332 "oggenc.c" 3 4
          ,
# 3332 "oggenc.c"
          double
# 3332 "oggenc.c" 3 4
          )
# 3332 "oggenc.c"
                              ;
    
# 3333 "oggenc.c" 3 4
   ((
# 3333 "oggenc.c"
   beta > 2.0
# 3333 "oggenc.c" 3 4
   ) ? (void) (0) : __assert_fail (
# 3333 "oggenc.c"
   "beta > 2.0"
# 3333 "oggenc.c" 3 4
   , "oggenc.c", 3333, __PRETTY_FUNCTION__))
# 3333 "oggenc.c"
                     ;
    break;
   default:
    
# 3336 "oggenc.c" 3 4
   ((
# 3336 "oggenc.c"
   "arglist" == "valid"
# 3336 "oggenc.c" 3 4
   ) ? (void) (0) : __assert_fail (
# 3336 "oggenc.c"
   "\"arglist\" == \"valid\""
# 3336 "oggenc.c" 3 4
   , "oggenc.c", 3336, __PRETTY_FUNCTION__))
# 3336 "oggenc.c"
                               ;
    return -1;
   }
   op1 = 
# 3339 "oggenc.c" 3 4
        __builtin_va_arg(
# 3339 "oggenc.c"
        argp
# 3339 "oggenc.c" 3 4
        ,
# 3339 "oggenc.c"
        res_parameter
# 3339 "oggenc.c" 3 4
        )
# 3339 "oggenc.c"
                                   ;
  } while (op1 != RES_END);
  
# 3341 "oggenc.c" 3 4
 __builtin_va_end(
# 3341 "oggenc.c"
 argp
# 3341 "oggenc.c" 3 4
 )
# 3341 "oggenc.c"
             ;
 }

 factor = hcf(infreq, outfreq);
 outfreq /= factor;
 infreq /= factor;


 if (outfreq < infreq)
 {

  cutoff = cutoff * outfreq / infreq;



        taps = taps * infreq/outfreq;
 }

 
# 3359 "oggenc.c" 3 4
((
# 3359 "oggenc.c"
taps >= (infreq + outfreq - 1) / outfreq
# 3359 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3359 "oggenc.c"
"taps >= (infreq + outfreq - 1) / outfreq"
# 3359 "oggenc.c" 3 4
, "oggenc.c", 3359, __PRETTY_FUNCTION__))
# 3359 "oggenc.c"
                                                ;

 if ((state->table = calloc(outfreq * taps, sizeof(float))) == 
# 3361 "oggenc.c" 3 4
                                                              ((void *)0)
# 3361 "oggenc.c"
                                                                  )
  return -1;
 if ((state->pool = calloc(channels * taps, sizeof(SAMPLE))) == 
# 3363 "oggenc.c" 3 4
                                                               ((void *)0)
# 3363 "oggenc.c"
                                                                   )
 {
  free(state->table);
  state->table = 
# 3366 "oggenc.c" 3 4
                ((void *)0)
# 3366 "oggenc.c"
                    ;
  return -1;
 }

 state->poolfill = taps / 2 + 1;
 state->channels = channels;
 state->outfreq = outfreq;
 state->infreq = infreq;
 state->taps = taps;
 state->offset = 0;

 filt_sinc(state->table, outfreq * taps, outfreq, cutoff, gain, taps);
 win_kaiser(state->table, outfreq * taps, beta, taps);

 return 0;
}


static SAMPLE sum(float const *scale, int count, SAMPLE const *source, SAMPLE const *trigger, SAMPLE const *reset, int srcstep)
{
 float total = 0.0;

 while (count--)
 {
  total += *source * *scale;

  if (source == trigger)
   source = reset, srcstep = 1;
  source -= srcstep;
  scale++;
 }

 return total;
}


static int push(res_state const * const state, SAMPLE *pool, int * const poolfill, int * const offset, SAMPLE *dest, int dststep, SAMPLE const *source, int srcstep, size_t srclen)
{
 SAMPLE * const destbase = dest,
  *poolhead = pool + *poolfill,
  *poolend = pool + state->taps,
  *newpool = pool;
 SAMPLE const *refill, *base, *endpoint;
 int lencheck;


 
# 3412 "oggenc.c" 3 4
((
# 3412 "oggenc.c"
state
# 3412 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3412 "oggenc.c"
"state"
# 3412 "oggenc.c" 3 4
, "oggenc.c", 3412, __PRETTY_FUNCTION__))
# 3412 "oggenc.c"
             ;
 
# 3413 "oggenc.c" 3 4
((
# 3413 "oggenc.c"
pool
# 3413 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3413 "oggenc.c"
"pool"
# 3413 "oggenc.c" 3 4
, "oggenc.c", 3413, __PRETTY_FUNCTION__))
# 3413 "oggenc.c"
            ;
 
# 3414 "oggenc.c" 3 4
((
# 3414 "oggenc.c"
poolfill
# 3414 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3414 "oggenc.c"
"poolfill"
# 3414 "oggenc.c" 3 4
, "oggenc.c", 3414, __PRETTY_FUNCTION__))
# 3414 "oggenc.c"
                ;
 
# 3415 "oggenc.c" 3 4
((
# 3415 "oggenc.c"
dest
# 3415 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3415 "oggenc.c"
"dest"
# 3415 "oggenc.c" 3 4
, "oggenc.c", 3415, __PRETTY_FUNCTION__))
# 3415 "oggenc.c"
            ;
 
# 3416 "oggenc.c" 3 4
((
# 3416 "oggenc.c"
source
# 3416 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3416 "oggenc.c"
"source"
# 3416 "oggenc.c" 3 4
, "oggenc.c", 3416, __PRETTY_FUNCTION__))
# 3416 "oggenc.c"
              ;

 
# 3418 "oggenc.c" 3 4
((
# 3418 "oggenc.c"
state->poolfill != -1
# 3418 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3418 "oggenc.c"
"state->poolfill != -1"
# 3418 "oggenc.c" 3 4
, "oggenc.c", 3418, __PRETTY_FUNCTION__))
# 3418 "oggenc.c"
                             ;

 lencheck = res_push_check(state, srclen);


 while (poolhead < poolend && srclen > 0)
 {
  *poolhead++ = *source;
  source += srcstep;
  srclen--;
 }

 if (srclen <= 0)
  return 0;

 base = source;
 endpoint = source + srclen * srcstep;

 while (source < endpoint)
 {
  *dest = sum(state->table + *offset * state->taps, state->taps, source, base, poolend, srcstep);
  dest += dststep;
  *offset += state->infreq;
  while (*offset >= state->outfreq)
  {
   *offset -= state->outfreq;
   source += srcstep;
  }
 }

 
# 3448 "oggenc.c" 3 4
((
# 3448 "oggenc.c"
dest == destbase + lencheck * dststep
# 3448 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3448 "oggenc.c"
"dest == destbase + lencheck * dststep"
# 3448 "oggenc.c" 3 4
, "oggenc.c", 3448, __PRETTY_FUNCTION__))
# 3448 "oggenc.c"
                                             ;


 srclen += (source - endpoint) / srcstep;


 if (srclen < state->taps)
 {
  refill = pool + srclen;
  while (refill < poolend)
   *newpool++ = *refill++;

  refill = source - srclen * srcstep;
 }
 else
  refill = source - state->taps * srcstep;


 while (refill < endpoint)
 {
  *newpool++ = *refill;
  refill += srcstep;
 }

 
# 3472 "oggenc.c" 3 4
((
# 3472 "oggenc.c"
newpool > pool
# 3472 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3472 "oggenc.c"
"newpool > pool"
# 3472 "oggenc.c" 3 4
, "oggenc.c", 3472, __PRETTY_FUNCTION__))
# 3472 "oggenc.c"
                      ;
 
# 3473 "oggenc.c" 3 4
((
# 3473 "oggenc.c"
newpool <= poolend
# 3473 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3473 "oggenc.c"
"newpool <= poolend"
# 3473 "oggenc.c" 3 4
, "oggenc.c", 3473, __PRETTY_FUNCTION__))
# 3473 "oggenc.c"
                          ;

 *poolfill = newpool - pool;

 return (dest - destbase) / dststep;
}


int res_push_max_input(res_state const * const state, size_t maxoutput)
{
 return maxoutput * state->infreq / state->outfreq;
}


int res_push_check(res_state const * const state, size_t srclen)
{
 if (state->poolfill < state->taps)
  srclen -= state->taps - state->poolfill;

 return (srclen * state->outfreq - state->offset + state->infreq - 1) / state->infreq;
}


int res_push(res_state *state, SAMPLE **dstlist, SAMPLE const **srclist, size_t srclen)
{
 int result = -1, poolfill = -1, offset = -1, i;

 
# 3500 "oggenc.c" 3 4
((
# 3500 "oggenc.c"
state
# 3500 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3500 "oggenc.c"
"state"
# 3500 "oggenc.c" 3 4
, "oggenc.c", 3500, __PRETTY_FUNCTION__))
# 3500 "oggenc.c"
             ;
 
# 3501 "oggenc.c" 3 4
((
# 3501 "oggenc.c"
dstlist
# 3501 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3501 "oggenc.c"
"dstlist"
# 3501 "oggenc.c" 3 4
, "oggenc.c", 3501, __PRETTY_FUNCTION__))
# 3501 "oggenc.c"
               ;
 
# 3502 "oggenc.c" 3 4
((
# 3502 "oggenc.c"
srclist
# 3502 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3502 "oggenc.c"
"srclist"
# 3502 "oggenc.c" 3 4
, "oggenc.c", 3502, __PRETTY_FUNCTION__))
# 3502 "oggenc.c"
               ;
 
# 3503 "oggenc.c" 3 4
((
# 3503 "oggenc.c"
state->poolfill >= 0
# 3503 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3503 "oggenc.c"
"state->poolfill >= 0"
# 3503 "oggenc.c" 3 4
, "oggenc.c", 3503, __PRETTY_FUNCTION__))
# 3503 "oggenc.c"
                            ;

 for (i = 0; i < state->channels; i++)
 {
  poolfill = state->poolfill;
  offset = state->offset;
  result = push(state, state->pool + i * state->taps, &poolfill, &offset, dstlist[i], 1, srclist[i], 1, srclen);
 }
 state->poolfill = poolfill;
 state->offset = offset;

 return result;
}


int res_push_interleaved(res_state *state, SAMPLE *dest, SAMPLE const *source, size_t srclen)
{
 int result = -1, poolfill = -1, offset = -1, i;

 
# 3522 "oggenc.c" 3 4
((
# 3522 "oggenc.c"
state
# 3522 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3522 "oggenc.c"
"state"
# 3522 "oggenc.c" 3 4
, "oggenc.c", 3522, __PRETTY_FUNCTION__))
# 3522 "oggenc.c"
             ;
 
# 3523 "oggenc.c" 3 4
((
# 3523 "oggenc.c"
dest
# 3523 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3523 "oggenc.c"
"dest"
# 3523 "oggenc.c" 3 4
, "oggenc.c", 3523, __PRETTY_FUNCTION__))
# 3523 "oggenc.c"
            ;
 
# 3524 "oggenc.c" 3 4
((
# 3524 "oggenc.c"
source
# 3524 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3524 "oggenc.c"
"source"
# 3524 "oggenc.c" 3 4
, "oggenc.c", 3524, __PRETTY_FUNCTION__))
# 3524 "oggenc.c"
              ;
 
# 3525 "oggenc.c" 3 4
((
# 3525 "oggenc.c"
state->poolfill >= 0
# 3525 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3525 "oggenc.c"
"state->poolfill >= 0"
# 3525 "oggenc.c" 3 4
, "oggenc.c", 3525, __PRETTY_FUNCTION__))
# 3525 "oggenc.c"
                            ;

 for (i = 0; i < state->channels; i++)
 {
  poolfill = state->poolfill;
  offset = state->offset;
  result = push(state, state->pool + i * state->taps, &poolfill, &offset, dest + i, state->channels, source + i, state->channels, srclen);
 }
 state->poolfill = poolfill;
 state->offset = offset;

 return result;
}


int res_drain(res_state *state, SAMPLE **dstlist)
{
 SAMPLE *tail;
 int result = -1, poolfill = -1, offset = -1, i;

 
# 3545 "oggenc.c" 3 4
((
# 3545 "oggenc.c"
state
# 3545 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3545 "oggenc.c"
"state"
# 3545 "oggenc.c" 3 4
, "oggenc.c", 3545, __PRETTY_FUNCTION__))
# 3545 "oggenc.c"
             ;
 
# 3546 "oggenc.c" 3 4
((
# 3546 "oggenc.c"
dstlist
# 3546 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3546 "oggenc.c"
"dstlist"
# 3546 "oggenc.c" 3 4
, "oggenc.c", 3546, __PRETTY_FUNCTION__))
# 3546 "oggenc.c"
               ;
 
# 3547 "oggenc.c" 3 4
((
# 3547 "oggenc.c"
state->poolfill >= 0
# 3547 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3547 "oggenc.c"
"state->poolfill >= 0"
# 3547 "oggenc.c" 3 4
, "oggenc.c", 3547, __PRETTY_FUNCTION__))
# 3547 "oggenc.c"
                            ;

 if ((tail = calloc(state->taps, sizeof(SAMPLE))) == 
# 3549 "oggenc.c" 3 4
                                                    ((void *)0)
# 3549 "oggenc.c"
                                                        )
  return -1;

 for (i = 0; i < state->channels; i++)
 {
  poolfill = state->poolfill;
  offset = state->offset;
  result = push(state, state->pool + i * state->taps, &poolfill, &offset, dstlist[i], 1, tail, 1, state->taps / 2 - 1);
 }

 free(tail);

 state->poolfill = -1;

 return result;
}


int res_drain_interleaved(res_state *state, SAMPLE *dest)
{
 SAMPLE *tail;
 int result = -1, poolfill = -1, offset = -1, i;

 
# 3572 "oggenc.c" 3 4
((
# 3572 "oggenc.c"
state
# 3572 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3572 "oggenc.c"
"state"
# 3572 "oggenc.c" 3 4
, "oggenc.c", 3572, __PRETTY_FUNCTION__))
# 3572 "oggenc.c"
             ;
 
# 3573 "oggenc.c" 3 4
((
# 3573 "oggenc.c"
dest
# 3573 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3573 "oggenc.c"
"dest"
# 3573 "oggenc.c" 3 4
, "oggenc.c", 3573, __PRETTY_FUNCTION__))
# 3573 "oggenc.c"
            ;
 
# 3574 "oggenc.c" 3 4
((
# 3574 "oggenc.c"
state->poolfill >= 0
# 3574 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3574 "oggenc.c"
"state->poolfill >= 0"
# 3574 "oggenc.c" 3 4
, "oggenc.c", 3574, __PRETTY_FUNCTION__))
# 3574 "oggenc.c"
                            ;

 if ((tail = calloc(state->taps, sizeof(SAMPLE))) == 
# 3576 "oggenc.c" 3 4
                                                    ((void *)0)
# 3576 "oggenc.c"
                                                        )
  return -1;

 for (i = 0; i < state->channels; i++)
 {
  poolfill = state->poolfill;
  offset = state->offset;
  result = push(state, state->pool + i * state->taps, &poolfill, &offset, dest + i, state->channels, tail, 1, state->taps / 2 - 1);
 }

 free(tail);

 state->poolfill = -1;

 return result;
}


void res_clear(res_state *state)
{
 
# 3596 "oggenc.c" 3 4
((
# 3596 "oggenc.c"
state
# 3596 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3596 "oggenc.c"
"state"
# 3596 "oggenc.c" 3 4
, "oggenc.c", 3596, __PRETTY_FUNCTION__))
# 3596 "oggenc.c"
             ;
 
# 3597 "oggenc.c" 3 4
((
# 3597 "oggenc.c"
state->table
# 3597 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3597 "oggenc.c"
"state->table"
# 3597 "oggenc.c" 3 4
, "oggenc.c", 3597, __PRETTY_FUNCTION__))
# 3597 "oggenc.c"
                    ;
 
# 3598 "oggenc.c" 3 4
((
# 3598 "oggenc.c"
state->pool
# 3598 "oggenc.c" 3 4
) ? (void) (0) : __assert_fail (
# 3598 "oggenc.c"
"state->pool"
# 3598 "oggenc.c" 3 4
, "oggenc.c", 3598, __PRETTY_FUNCTION__))
# 3598 "oggenc.c"
                   ;

 free(state->table);
 free(state->pool);
 memset(state, 0, sizeof(*state));
}
# 3659 "oggenc.c"
char *optarg;
# 3674 "oggenc.c"
int optind = 1;





int __getopt_initialized;
# 3689 "oggenc.c"
static char *nextchar;




int opterr = 1;





int optopt = '?';
# 3731 "oggenc.c"
static enum
{
  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
} ordering;


static char *posixly_correct;
# 3788 "oggenc.c"
static int first_nonopt;
static int last_nonopt;
# 3841 "oggenc.c"
static void exchange (char **);


static void
exchange (argv)
     char **argv;
{
  int bottom = first_nonopt;
  int middle = last_nonopt;
  int top = optind;
  char *tem;
# 3880 "oggenc.c"
  while (top > middle && middle > bottom)
    {
      if (top - middle > middle - bottom)
 {

   int len = middle - bottom;
   register int i;


   for (i = 0; i < len; i++)
     {
       tem = argv[bottom + i];
       argv[bottom + i] = argv[top - (middle - bottom) + i];
       argv[top - (middle - bottom) + i] = tem;
       ;
     }

   top -= len;
 }
      else
 {

   int len = top - middle;
   register int i;


   for (i = 0; i < len; i++)
     {
       tem = argv[bottom + i];
       argv[bottom + i] = argv[middle + i];
       argv[middle + i] = tem;
       ;
     }

   bottom += len;
 }
    }



  first_nonopt += (optind - last_nonopt);
  last_nonopt = optind;
}




static const char *_getopt_initialize (int, char *const *, const char *);

static const char *
_getopt_initialize (argc, argv, optstring)
     int argc;
     char *const *argv;
     const char *optstring;
{




  first_nonopt = last_nonopt = optind;

  nextchar = 
# 3941 "oggenc.c" 3 4
            ((void *)0)
# 3941 "oggenc.c"
                ;

  posixly_correct = getenv ("POSIXLY_CORRECT");



  if (optstring[0] == '-')
    {
      ordering = RETURN_IN_ORDER;
      ++optstring;
    }
  else if (optstring[0] == '+')
    {
      ordering = REQUIRE_ORDER;
      ++optstring;
    }
  else if (posixly_correct != 
# 3957 "oggenc.c" 3 4
                             ((void *)0)
# 3957 "oggenc.c"
                                 )
    ordering = REQUIRE_ORDER;
  else
    ordering = PERMUTE;
# 3992 "oggenc.c"
  return optstring;
}
# 4051 "oggenc.c"
int
_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
     int argc;
     char *const *argv;
     const char *optstring;
     const struct option *longopts;
     int *longind;
     int long_only;
{
  optarg = 
# 4060 "oggenc.c" 3 4
          ((void *)0)
# 4060 "oggenc.c"
              ;

  if (optind == 0 || !__getopt_initialized)
    {
      if (optind == 0)
 optind = 1;
      optstring = _getopt_initialize (argc, argv, optstring);
      __getopt_initialized = 1;
    }
# 4082 "oggenc.c"
  if (nextchar == 
# 4082 "oggenc.c" 3 4
                 ((void *)0) 
# 4082 "oggenc.c"
                      || *nextchar == '\0')
    {




      if (last_nonopt > optind)
 last_nonopt = optind;
      if (first_nonopt > optind)
 first_nonopt = optind;

      if (ordering == PERMUTE)
 {



   if (first_nonopt != last_nonopt && last_nonopt != optind)
     exchange ((char **) argv);
   else if (last_nonopt != optind)
     first_nonopt = optind;




   while (optind < argc && (argv[optind][0] != '-' || argv[optind][1] == '\0'))
     optind++;
   last_nonopt = optind;
 }






      if (optind != argc && !strcmp (argv[optind], "--"))
 {
   optind++;

   if (first_nonopt != last_nonopt && last_nonopt != optind)
     exchange ((char **) argv);
   else if (first_nonopt == last_nonopt)
     first_nonopt = optind;
   last_nonopt = argc;

   optind = argc;
 }




      if (optind == argc)
 {


   if (first_nonopt != last_nonopt)
     optind = first_nonopt;
   return -1;
 }




      if ((argv[optind][0] != '-' || argv[optind][1] == '\0'))
 {
   if (ordering == REQUIRE_ORDER)
     return -1;
   optarg = argv[optind++];
   return 1;
 }




      nextchar = (argv[optind] + 1
    + (longopts != 
# 4156 "oggenc.c" 3 4
                  ((void *)0) 
# 4156 "oggenc.c"
                       && argv[optind][1] == '-'));
    }
# 4174 "oggenc.c"
  if (longopts != 
# 4174 "oggenc.c" 3 4
                 ((void *)0)
      
# 4175 "oggenc.c"
     && (argv[optind][1] == '-'
   || (long_only && (argv[optind][2] || !strchr (optstring, argv[optind][1])))))
    {
      char *nameend;
      const struct option *p;
      const struct option *pfound = 
# 4180 "oggenc.c" 3 4
                                   ((void *)0)
# 4180 "oggenc.c"
                                       ;
      int exact = 0;
      int ambig = 0;
      int indfound = -1;
      int option_index;

      for (nameend = nextchar; *nameend && *nameend != '='; nameend++)
                    ;



      for (p = longopts, option_index = 0; p->name; p++, option_index++)
 if (!strncmp (p->name, nextchar, nameend - nextchar))
   {
     if ((unsigned int) (nameend - nextchar)
  == (unsigned int) strlen (p->name))
       {

  pfound = p;
  indfound = option_index;
  exact = 1;
  break;
       }
     else if (pfound == 
# 4203 "oggenc.c" 3 4
                       ((void *)0)
# 4203 "oggenc.c"
                           )
       {

  pfound = p;
  indfound = option_index;
       }
     else

       ambig = 1;
   }

      if (ambig && !exact)
 {
   if (opterr)
     fprintf (
# 4217 "oggenc.c" 3 4
             stderr
# 4217 "oggenc.c"
                   , ("%s: option `%s' is ambiguous\n"),
       argv[0], argv[optind]);
   nextchar += strlen (nextchar);
   optind++;
   optopt = 0;
   return '?';
 }

      if (pfound != 
# 4225 "oggenc.c" 3 4
                   ((void *)0)
# 4225 "oggenc.c"
                       )
 {
   option_index = indfound;
   optind++;
   if (*nameend)
     {


       if (pfound->has_arg)
  optarg = nameend + 1;
       else
  {
    if (opterr)
      {
        if (argv[optind - 1][1] == '-')

   fprintf (
# 4241 "oggenc.c" 3 4
           stderr
# 4241 "oggenc.c"
                 ,
     ("%s: option `--%s' doesn't allow an argument\n"),
     argv[0], pfound->name);
        else

   fprintf (
# 4246 "oggenc.c" 3 4
           stderr
# 4246 "oggenc.c"
                 ,
     ("%s: option `%c%s' doesn't allow an argument\n"),
     argv[0], argv[optind - 1][0], pfound->name);
      }

    nextchar += strlen (nextchar);

    optopt = pfound->val;
    return '?';
  }
     }
   else if (pfound->has_arg == 1)
     {
       if (optind < argc)
  optarg = argv[optind++];
       else
  {
    if (opterr)
      fprintf (
# 4264 "oggenc.c" 3 4
              stderr
# 4264 "oggenc.c"
                    ,
      ("%s: option `%s' requires an argument\n"),
      argv[0], argv[optind - 1]);
    nextchar += strlen (nextchar);
    optopt = pfound->val;
    return optstring[0] == ':' ? ':' : '?';
  }
     }
   nextchar += strlen (nextchar);
   if (longind != 
# 4273 "oggenc.c" 3 4
                 ((void *)0)
# 4273 "oggenc.c"
                     )
     *longind = option_index;
   if (pfound->flag)
     {
       *(pfound->flag) = pfound->val;
       return 0;
     }
   return pfound->val;
 }





      if (!long_only || argv[optind][1] == '-'
   || strchr (optstring, *nextchar) == 
# 4288 "oggenc.c" 3 4
                                        ((void *)0)
# 4288 "oggenc.c"
                                            )
 {
   if (opterr)
     {
       if (argv[optind][1] == '-')

  fprintf (
# 4294 "oggenc.c" 3 4
          stderr
# 4294 "oggenc.c"
                , ("%s: unrecognized option `--%s'\n"),
    argv[0], nextchar);
       else

  fprintf (
# 4298 "oggenc.c" 3 4
          stderr
# 4298 "oggenc.c"
                , ("%s: unrecognized option `%c%s'\n"),
    argv[0], argv[optind][0], nextchar);
     }
   nextchar = (char *) "";
   optind++;
   optopt = 0;
   return '?';
 }
    }



  {
    char c = *nextchar++;
    char *temp = strchr (optstring, c);


    if (*nextchar == '\0')
      ++optind;

    if (temp == 
# 4318 "oggenc.c" 3 4
               ((void *)0) 
# 4318 "oggenc.c"
                    || c == ':')
      {
 if (opterr)
   {
     if (posixly_correct)

       fprintf (
# 4324 "oggenc.c" 3 4
               stderr
# 4324 "oggenc.c"
                     , ("%s: illegal option -- %c\n"),
         argv[0], c);
     else
       fprintf (
# 4327 "oggenc.c" 3 4
               stderr
# 4327 "oggenc.c"
                     , ("%s: invalid option -- %c\n"),
         argv[0], c);
   }
 optopt = c;
 return '?';
      }

    if (temp[0] == 'W' && temp[1] == ';')
      {
 char *nameend;
 const struct option *p;
 const struct option *pfound = 
# 4338 "oggenc.c" 3 4
                              ((void *)0)
# 4338 "oggenc.c"
                                  ;
 int exact = 0;
 int ambig = 0;
 int indfound = 0;
 int option_index;


 if (*nextchar != '\0')
   {
     optarg = nextchar;


     optind++;
   }
 else if (optind == argc)
   {
     if (opterr)
       {

  fprintf (
# 4357 "oggenc.c" 3 4
          stderr
# 4357 "oggenc.c"
                , ("%s: option requires an argument -- %c\n"),
    argv[0], c);
       }
     optopt = c;
     if (optstring[0] == ':')
       c = ':';
     else
       c = '?';
     return c;
   }
 else


   optarg = argv[optind++];




 for (nextchar = nameend = optarg; *nameend && *nameend != '='; nameend++)
                      ;



 for (p = longopts, option_index = 0; p->name; p++, option_index++)
   if (!strncmp (p->name, nextchar, nameend - nextchar))
     {
       if ((unsigned int) (nameend - nextchar) == strlen (p->name))
  {

    pfound = p;
    indfound = option_index;
    exact = 1;
    break;
  }
       else if (pfound == 
# 4391 "oggenc.c" 3 4
                         ((void *)0)
# 4391 "oggenc.c"
                             )
  {

    pfound = p;
    indfound = option_index;
  }
       else

  ambig = 1;
     }
 if (ambig && !exact)
   {
     if (opterr)
       fprintf (
# 4404 "oggenc.c" 3 4
               stderr
# 4404 "oggenc.c"
                     , ("%s: option `-W %s' is ambiguous\n"),
         argv[0], argv[optind]);
     nextchar += strlen (nextchar);
     optind++;
     return '?';
   }
 if (pfound != 
# 4410 "oggenc.c" 3 4
              ((void *)0)
# 4410 "oggenc.c"
                  )
   {
     option_index = indfound;
     if (*nameend)
       {


  if (pfound->has_arg)
    optarg = nameend + 1;
  else
    {
      if (opterr)
        fprintf (
# 4422 "oggenc.c" 3 4
                stderr
# 4422 "oggenc.c"
                      , ("%s: option `-W %s' doesn't allow an argument\n")
                                                ,
          argv[0], pfound->name);

      nextchar += strlen (nextchar);
      return '?';
    }
       }
     else if (pfound->has_arg == 1)
       {
  if (optind < argc)
    optarg = argv[optind++];
  else
    {
      if (opterr)
        fprintf (
# 4437 "oggenc.c" 3 4
                stderr
# 4437 "oggenc.c"
                      ,
          ("%s: option `%s' requires an argument\n"),
          argv[0], argv[optind - 1]);
      nextchar += strlen (nextchar);
      return optstring[0] == ':' ? ':' : '?';
    }
       }
     nextchar += strlen (nextchar);
     if (longind != 
# 4445 "oggenc.c" 3 4
                   ((void *)0)
# 4445 "oggenc.c"
                       )
       *longind = option_index;
     if (pfound->flag)
       {
  *(pfound->flag) = pfound->val;
  return 0;
       }
     return pfound->val;
   }
   nextchar = 
# 4454 "oggenc.c" 3 4
             ((void *)0)
# 4454 "oggenc.c"
                 ;
   return 'W';
      }
    if (temp[1] == ':')
      {
 if (temp[2] == ':')
   {

     if (*nextchar != '\0')
       {
  optarg = nextchar;
  optind++;
       }
     else
       optarg = 
# 4468 "oggenc.c" 3 4
               ((void *)0)
# 4468 "oggenc.c"
                   ;
     nextchar = 
# 4469 "oggenc.c" 3 4
               ((void *)0)
# 4469 "oggenc.c"
                   ;
   }
 else
   {

     if (*nextchar != '\0')
       {
  optarg = nextchar;


  optind++;
       }
     else if (optind == argc)
       {
  if (opterr)
    {

      fprintf (
# 4486 "oggenc.c" 3 4
              stderr
# 4486 "oggenc.c"
                    ,
      ("%s: option requires an argument -- %c\n"),
      argv[0], c);
    }
  optopt = c;
  if (optstring[0] == ':')
    c = ':';
  else
    c = '?';
       }
     else


       optarg = argv[optind++];
     nextchar = 
# 4500 "oggenc.c" 3 4
               ((void *)0)
# 4500 "oggenc.c"
                   ;
   }
      }
    return c;
  }
}

int
getopt (argc, argv, optstring)
     int argc;
     char *const *argv;
     const char *optstring;
{
  return _getopt_internal (argc, argv, optstring,
      (const struct option *) 0,
      (int *) 0,
      0);
}

int
getopt_long (argc, argv, options, long_options, opt_index)
     int argc;
     char *const *argv;
     const char *options;
     const struct option *long_options;
     int *opt_index;
{
  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
}

int
getopt_long_only (argc, argv, options, long_options, opt_index)
     int argc;
     char *const *argv;
     const char *options;
     const struct option *long_options;
     int *opt_index;
{
  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
}
# 4645 "oggenc.c"
typedef struct {
  int n;
  int log2n;

  float *trig;
  int *bitrev;

  float scale;
} mdct_lookup;

extern void mdct_init(mdct_lookup *lookup,int n);
extern void mdct_clear(mdct_lookup *l);
extern void mdct_forward(mdct_lookup *init, float *in, float *out);
extern void mdct_backward(mdct_lookup *init, float *in, float *out);
# 4672 "oggenc.c"
typedef struct {
  float ampbuf[(16 +2 -1)];
  int ampptr;

  float nearDC[15];
  float nearDC_acc;
  float nearDC_partialacc;
  int nearptr;

} envelope_filter_state;

typedef struct {
  int begin;
  int end;
  float *window;
  float total;
} envelope_band;

typedef struct {
  int ch;
  int winlength;
  int searchstep;
  float minenergy;

  mdct_lookup mdct;
  float *mdct_win;

  envelope_band band[7];
  envelope_filter_state *filter;
  int stretch;

  int *mark;

  long storage;
  long current;
  long curmark;
  long cursor;
} envelope_lookup;

extern void _ve_envelope_init(envelope_lookup *e,vorbis_info *vi);
extern void _ve_envelope_clear(envelope_lookup *e);
extern long _ve_envelope_search(vorbis_dsp_state *v);
extern void _ve_envelope_shift(envelope_lookup *e,long shift);
extern int _ve_envelope_mark(vorbis_dsp_state *v);
# 4749 "oggenc.c"
typedef struct static_codebook{
  long dim;
  long entries;
  long *lengthlist;


  int maptype;




  long q_min;
  long q_delta;
  int q_quant;
  int q_sequencep;

  long *quantlist;




  struct encode_aux_nearestmatch *nearest_tree;
  struct encode_aux_threshmatch *thresh_tree;
  struct encode_aux_pigeonhole *pigeon_tree;

  int allocedp;
} static_codebook;



typedef struct encode_aux_nearestmatch{

  long *ptr0;
  long *ptr1;

  long *p;
  long *q;
  long aux;
  long alloc;
} encode_aux_nearestmatch;


typedef struct encode_aux_threshmatch{
  float *quantthresh;
  long *quantmap;
  int quantvals;
  int threshvals;
} encode_aux_threshmatch;

typedef struct encode_aux_pigeonhole{
  float min;
  float del;

  int mapentries;
  int quantvals;
  long *pigeonmap;

  long fittotal;
  long *fitlist;
  long *fitmap;
  long *fitlength;
} encode_aux_pigeonhole;

typedef struct codebook{
  long dim;
  long entries;
  long used_entries;
  const static_codebook *c;




  float *valuelist;
  ogg_uint32_t *codelist;

  int *dec_index;
  char *dec_codelengths;
  ogg_uint32_t *dec_firsttable;
  int dec_firsttablen;
  int dec_maxlength;

} codebook;

extern void vorbis_staticbook_clear(static_codebook *b);
extern void vorbis_staticbook_destroy(static_codebook *b);
extern int vorbis_book_init_encode(codebook *dest,const static_codebook *source);
extern int vorbis_book_init_decode(codebook *dest,const static_codebook *source);
extern void vorbis_book_clear(codebook *b);

extern float *_book_unquantize(const static_codebook *b,int n,int *map);
extern float *_book_logdist(const static_codebook *b,float *vals);
extern float _float32_unpack(long val);
extern long _float32_pack(float val);
extern int _best(codebook *book, float *a, int step);
extern int _ilog(unsigned int v);
extern long _book_maptype1_quantvals(const static_codebook *b);

extern int vorbis_book_besterror(codebook *book,float *a,int step,int addmul);
extern long vorbis_book_codeword(codebook *book,int entry);
extern long vorbis_book_codelen(codebook *book,int entry);



extern int vorbis_staticbook_pack(const static_codebook *c,oggpack_buffer *b);
extern int vorbis_staticbook_unpack(oggpack_buffer *b,static_codebook *c);

extern int vorbis_book_encode(codebook *book, int a, oggpack_buffer *b);
extern int vorbis_book_errorv(codebook *book, float *a);
extern int vorbis_book_encodev(codebook *book, int best,float *a,
          oggpack_buffer *b);

extern long vorbis_book_decode(codebook *book, oggpack_buffer *b);
extern long vorbis_book_decodevs_add(codebook *book, float *a,
         oggpack_buffer *b,int n);
extern long vorbis_book_decodev_set(codebook *book, float *a,
        oggpack_buffer *b,int n);
extern long vorbis_book_decodev_add(codebook *book, float *a,
        oggpack_buffer *b,int n);
extern long vorbis_book_decodevv_add(codebook *book, float **a,
         long off,int ch,
        oggpack_buffer *b,int n);
# 4878 "oggenc.c"
typedef struct vorbis_block_internal{
  float **pcmdelay;
  float ampmax;
  int blocktype;

  ogg_uint32_t packetblob_markers[15];
} vorbis_block_internal;

typedef void vorbis_look_floor;
typedef void vorbis_look_residue;
typedef void vorbis_look_transform;


typedef struct {
  int blockflag;
  int windowtype;
  int transformtype;
  int mapping;
} vorbis_info_mode;

typedef void vorbis_info_floor;
typedef void vorbis_info_residue;
typedef void vorbis_info_mapping;
# 4941 "oggenc.c"
typedef struct {
  int n;
  float *trigcache;
  int *splitcache;
} drft_lookup;

extern void drft_forward(drft_lookup *l,float *data);
extern void drft_backward(drft_lookup *l,float *data);
extern void drft_init(drft_lookup *l,int n);
extern void drft_clear(drft_lookup *l);
# 4978 "oggenc.c"
typedef struct{
  void (*pack) (vorbis_info_floor *,oggpack_buffer *);
  vorbis_info_floor *(*unpack)(vorbis_info *,oggpack_buffer *);
  vorbis_look_floor *(*look) (vorbis_dsp_state *,vorbis_info_floor *);
  void (*free_info) (vorbis_info_floor *);
  void (*free_look) (vorbis_look_floor *);
  void *(*inverse1) (struct vorbis_block *,vorbis_look_floor *);
  int (*inverse2) (struct vorbis_block *,vorbis_look_floor *,
       void *buffer,float *);
} vorbis_func_floor;

typedef struct{
  int order;
  long rate;
  long barkmap;

  int ampbits;
  int ampdB;

  int numbooks;
  int books[16];

  float lessthan;
  float greaterthan;

} vorbis_info_floor0;





typedef struct{
  int partitions;
  int partitionclass[31];

  int class_dim[16];
  int class_subs[16];
  int class_book[16];
  int class_subbook[16][8];


  int mult;
  int postlist[63 +2];



  float maxover;
  float maxunder;
  float maxerr;

  float twofitweight;
  float twofitatten;

  int n;

} vorbis_info_floor1;


typedef struct{
  void (*pack) (vorbis_info_residue *,oggpack_buffer *);
  vorbis_info_residue *(*unpack)(vorbis_info *,oggpack_buffer *);
  vorbis_look_residue *(*look) (vorbis_dsp_state *,
     vorbis_info_residue *);
  void (*free_info) (vorbis_info_residue *);
  void (*free_look) (vorbis_look_residue *);
  long **(*class) (struct vorbis_block *,vorbis_look_residue *,
   float **,int *,int);
  int (*forward) (struct vorbis_block *,vorbis_look_residue *,
   float **,float **,int *,int,long **);
  int (*inverse) (struct vorbis_block *,vorbis_look_residue *,
   float **,int *,int);
} vorbis_func_residue;

typedef struct vorbis_info_residue0{

  long begin;
  long end;


  int grouping;
  int partitions;
  int groupbook;
  int secondstages[64];
  int booklist[256];

  float classmetric1[64];
  float classmetric2[64];

} vorbis_info_residue0;


typedef struct{
  void (*pack) (vorbis_info *,vorbis_info_mapping *,
     oggpack_buffer *);
  vorbis_info_mapping *(*unpack)(vorbis_info *,oggpack_buffer *);
  void (*free_info) (vorbis_info_mapping *);
  int (*forward) (struct vorbis_block *vb);
  int (*inverse) (struct vorbis_block *vb,vorbis_info_mapping *);
} vorbis_func_mapping;

typedef struct vorbis_info_mapping0{
  int submaps;
  int chmuxlist[256];

  int floorsubmap[16];
  int residuesubmap[16];

  int coupling_steps;
  int coupling_mag[256];
  int coupling_ang[256];

} vorbis_info_mapping0;
# 5102 "oggenc.c"
typedef struct vorbis_info_psy{
  int blockflag;

  float ath_adjatt;
  float ath_maxatt;

  float tone_masteratt[3];
  float tone_centerboost;
  float tone_decay;
  float tone_abs_limit;
  float toneatt[17];

  int noisemaskp;
  float noisemaxsupp;
  float noisewindowlo;
  float noisewindowhi;
  int noisewindowlomin;
  int noisewindowhimin;
  int noisewindowfixed;
  float noiseoff[3][17];
  float noisecompand[40];

  float max_curve_dB;

  int normal_channel_p;
  int normal_point_p;
  int normal_start;
  int normal_partition;
  double normal_thresh;
} vorbis_info_psy;

typedef struct{
  int eighth_octave_lines;


  float preecho_thresh[7];
  float postecho_thresh[7];
  float stretch_penalty;
  float preecho_minenergy;

  float ampmax_att_per_sec;


  int coupling_pkHz[15];
  int coupling_pointlimit[2][15];
  int coupling_prepointamp[15];
  int coupling_postpointamp[15];
  int sliding_lowpass[2][15];

} vorbis_info_psy_global;

typedef struct {
  float ampmax;
  int channels;

  vorbis_info_psy_global *gi;
  int coupling_pointlimit[2][3];
} vorbis_look_psy_global;


typedef struct {
  int n;
  struct vorbis_info_psy *vi;

  float ***tonecurves;
  float **noiseoffset;

  float *ath;
  long *octave;
  long *bark;

  long firstoc;
  long shiftoc;
  int eighth_octave_lines;
  int total_octave_lines;
  long rate;
} vorbis_look_psy;

extern void _vp_psy_init(vorbis_look_psy *p,vorbis_info_psy *vi,
      vorbis_info_psy_global *gi,int n,long rate);
extern void _vp_psy_clear(vorbis_look_psy *p);
extern void *_vi_psy_dup(void *source);

extern void _vi_psy_free(vorbis_info_psy *i);
extern vorbis_info_psy *_vi_psy_copy(vorbis_info_psy *i);

extern void _vp_remove_floor(vorbis_look_psy *p,
        float *mdct,
        int *icodedflr,
        float *residue,
        int sliding_lowpass);

extern void _vp_noisemask(vorbis_look_psy *p,
     float *logmdct,
     float *logmask);

extern void _vp_tonemask(vorbis_look_psy *p,
    float *logfft,
    float *logmask,
    float global_specmax,
    float local_specmax);

extern void _vp_offset_and_mix(vorbis_look_psy *p,
          float *noise,
          float *tone,
          int offset_select,
          float *logmask);

extern float _vp_ampmax_decay(float amp,vorbis_dsp_state *vd);

extern float **_vp_quantize_couple_memo(vorbis_block *vb,
     vorbis_info_psy_global *g,
     vorbis_look_psy *p,
     vorbis_info_mapping0 *vi,
     float **mdct);

extern void _vp_couple(int blobno,
         vorbis_info_psy_global *g,
         vorbis_look_psy *p,
         vorbis_info_mapping0 *vi,
         float **res,
         float **mag_memo,
         int **mag_sort,
         int **ifloor,
         int *nonzero,
         int sliding_lowpass);

extern void _vp_noise_normalize(vorbis_look_psy *p,
    float *in,float *out,int *sortedindex);

extern void _vp_noise_normalize_sort(vorbis_look_psy *p,
         float *magnitudes,int *sortedindex);

extern int **_vp_quantize_couple_sort(vorbis_block *vb,
          vorbis_look_psy *p,
          vorbis_info_mapping0 *vi,
          float **mags);
# 5295 "oggenc.c"
extern int analysis_noisy;

extern void *_vorbis_block_alloc(vorbis_block *vb,long bytes);
extern void _vorbis_block_ripcord(vorbis_block *vb);
extern void _analysis_output(char *base,int i,float *v,int n,int bark,int dB,
        ogg_int64_t off);
# 5397 "oggenc.c"
typedef int vorbis_fpu_control;

static int vorbis_ftoi(double f){
  return (int)(f+.5);
}
# 5410 "oggenc.c"
typedef struct bitrate_manager_state {
  ogg_uint32_t *queue_binned;
  ogg_uint32_t *queue_actual;
  int queue_size;

  int queue_head;
  int queue_bins;

  long *avg_binacc;
  int avg_center;
  int avg_tail;
  ogg_uint32_t avg_centeracc;
  ogg_uint32_t avg_sampleacc;
  ogg_uint32_t avg_sampledesired;
  ogg_uint32_t avg_centerdesired;

  long *minmax_binstack;
  long *minmax_posstack;
  long *minmax_limitstack;
  long minmax_stackptr;

  long minmax_acctotal;
  int minmax_tail;
  ogg_uint32_t minmax_sampleacc;
  ogg_uint32_t minmax_sampledesired;

  int next_to_flush;
  int last_to_flush;

  double avgfloat;


  oggpack_buffer *packetbuffers;
  ogg_packet *packets;

} bitrate_manager_state;

typedef struct bitrate_manager_info{

  double queue_avg_time;
  double queue_avg_center;
  double queue_minmax_time;
  double queue_hardmin;
  double queue_hardmax;
  double queue_avgmin;
  double queue_avgmax;

  double avgfloat_downslew_max;
  double avgfloat_upslew_max;

} bitrate_manager_info;

extern void vorbis_bitrate_init(vorbis_info *vi,bitrate_manager_state *bs);
extern void vorbis_bitrate_clear(bitrate_manager_state *bs);
extern int vorbis_bitrate_managed(vorbis_block *vb);
extern int vorbis_bitrate_addblock(vorbis_block *vb);
extern int vorbis_bitrate_flushpacket(vorbis_dsp_state *vd, ogg_packet *op);

typedef struct private_state {

  envelope_lookup *ve;
  int window[2];
  vorbis_look_transform **transform[2];
  drft_lookup fft_look[2];

  int modebits;
  vorbis_look_floor **flr;
  vorbis_look_residue **residue;
  vorbis_look_psy *psy;
  vorbis_look_psy_global *psy_g_look;





  unsigned char *header;
  unsigned char *header1;
  unsigned char *header2;

  bitrate_manager_state bms;

  ogg_int64_t sample_count;
} private_state;
# 5517 "oggenc.c"
typedef struct highlevel_byblocktype {
  double tone_mask_setting;
  double tone_peaklimit_setting;
  double noise_bias_setting;
  double noise_compand_setting;
} highlevel_byblocktype;

typedef struct highlevel_encode_setup {
  void *setup;
  int set_in_stone;

  double base_setting;
  double long_setting;
  double short_setting;
  double impulse_noisetune;

  int managed;
  long bitrate_min;
  long bitrate_av_lo;
  long bitrate_av_hi;
  long bitrate_max;
  double bitrate_limit_window;
  double bitrate_av_window;
  double bitrate_av_window_center;

  int impulse_block_p;
  int noise_normalize_p;

  double stereo_point_setting;
  double lowpass_kHz;

  double ath_floating_dB;
  double ath_absolute_dB;

  double amplitude_track_dBpersec;
  double trigger_setting;

  highlevel_byblocktype block[4];

} highlevel_encode_setup;

typedef struct codec_setup_info {




  long blocksizes[2];






  int modes;
  int maps;
  int floors;
  int residues;
  int books;
  int psys;

  vorbis_info_mode *mode_param[64];
  int map_type[64];
  vorbis_info_mapping *map_param[64];
  int floor_type[64];
  vorbis_info_floor *floor_param[64];
  int residue_type[64];
  vorbis_info_residue *residue_param[64];
  static_codebook *book_param[256];
  codebook *fullbooks;

  vorbis_info_psy *psy_param[4];
  vorbis_info_psy_global psy_g_param;

  bitrate_manager_info bi;
  highlevel_encode_setup hi;


  int halfrate_flag;
} codec_setup_info;

extern vorbis_look_psy_global *_vp_global_look(vorbis_info *vi);
extern void _vp_global_free(vorbis_look_psy_global *look);





typedef struct {
  static_codebook *books[12][3];
} static_bookblock;

typedef struct {
  int res_type;
  int limit_type;
  vorbis_info_residue0 *res;
  static_codebook *book_aux;
  static_codebook *book_aux_managed;
  static_bookblock *books_base;
  static_bookblock *books_base_managed;
} vorbis_residue_template;

typedef struct {
  vorbis_info_mapping0 *map;
  vorbis_residue_template *res;
} vorbis_mapping_template;

typedef struct vp_adjblock{
  int block[17];
} vp_adjblock;

typedef struct {
  int data[40];
} compandblock;
# 5638 "oggenc.c"
typedef struct {
  int att[3];
  float boost;
  float decay;
} att3;
typedef struct { int data[3]; } adj3;

typedef struct {
  int pre[15];
  int post[15];
  float kHz[15];
  float lowpasskHz[15];
} adj_stereo;

typedef struct {
  int lo;
  int hi;
  int fixed;
} noiseguard;
typedef struct {
  int data[3][17];
} noise3;

typedef struct {
  int mappings;
  double *rate_mapping;
  double *quality_mapping;
  int coupling_restriction;
  long samplerate_min_restriction;
  long samplerate_max_restriction;


  int *blocksize_short;
  int *blocksize_long;

  att3 *psy_tone_masteratt;
  int *psy_tone_0dB;
  int *psy_tone_dBsuppress;

  vp_adjblock *psy_tone_adj_impulse;
  vp_adjblock *psy_tone_adj_long;
  vp_adjblock *psy_tone_adj_other;

  noiseguard *psy_noiseguards;
  noise3 *psy_noise_bias_impulse;
  noise3 *psy_noise_bias_padding;
  noise3 *psy_noise_bias_trans;
  noise3 *psy_noise_bias_long;
  int *psy_noise_dBsuppress;

  compandblock *psy_noise_compand;
  double *psy_noise_compand_short_mapping;
  double *psy_noise_compand_long_mapping;

  int *psy_noise_normal_start[2];
  int *psy_noise_normal_partition[2];
  double *psy_noise_normal_thresh;

  int *psy_ath_float;
  int *psy_ath_abs;

  double *psy_lowpass;

  vorbis_info_psy_global *global_params;
  double *global_mapping;
  adj_stereo *stereo_modes;

  static_codebook ***floor_books;
  vorbis_info_floor1 *floor_params;
  int *floor_short_mapping;
  int *floor_long_mapping;

  vorbis_mapping_template *maps;
} ve_setup_data_template;


static vorbis_info_mode _mode_template[2]={
  {0,0,0,0},
  {1,0,0,1}
};

static vorbis_info_mapping0 _map_nominal[2]={
  {1, {0,0}, {0}, {0}, 1,{0},{1}},
  {1, {0,0}, {1}, {1}, 1,{0},{1}}
};
# 5774 "oggenc.c"
static long _huff_lengthlist_line_1024x27_0sub0[] = {
  5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5,
  6, 5, 6, 5, 6, 5, 7, 5, 7, 5, 7, 5, 8, 5, 8, 6,
  8, 6, 9, 6, 9, 6, 9, 6,10, 6,10, 6,11, 6,11, 6,
 11, 6,12, 6,12, 7,12, 7,12, 7,12, 7,12, 7,12, 7,
 12, 7,12, 7,12, 7,12, 7,12, 8,12, 8,11, 8,11, 8,
 12, 9,11, 9, 9,10,11, 9,12, 9,12,12,14,13,13,14,
 13,13,13,12,14,16,20,20,21,14,14,15,21,21,21,20,
 21,21,21,21,21,21,21,21,21,21,20,20,20,20,20,20,
};

static static_codebook _huff_book_line_1024x27_0sub0 = {
 1, 128,
 _huff_lengthlist_line_1024x27_0sub0,
 0, 0, 0, 0, 0,
 
# 5789 "oggenc.c" 3 4
((void *)0)
# 5789 "oggenc.c"
    ,
 
# 5790 "oggenc.c" 3 4
((void *)0)
# 5790 "oggenc.c"
    ,
 
# 5791 "oggenc.c" 3 4
((void *)0)
# 5791 "oggenc.c"
    ,
 
# 5792 "oggenc.c" 3 4
((void *)0)
# 5792 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_1sub0[] = {
  2, 5, 5, 4, 5, 4, 5, 4, 5, 4, 6, 4, 6, 5, 6, 5,
  7, 5, 7, 6, 8, 6, 8, 6, 8, 6, 9, 6,10, 6,10, 6,
};

static static_codebook _huff_book_line_1024x27_1sub0 = {
 1, 32,
 _huff_lengthlist_line_1024x27_1sub0,
 0, 0, 0, 0, 0,
 
# 5805 "oggenc.c" 3 4
((void *)0)
# 5805 "oggenc.c"
    ,
 
# 5806 "oggenc.c" 3 4
((void *)0)
# 5806 "oggenc.c"
    ,
 
# 5807 "oggenc.c" 3 4
((void *)0)
# 5807 "oggenc.c"
    ,
 
# 5808 "oggenc.c" 3 4
((void *)0)
# 5808 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_1sub1[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  9, 5,10, 4,10, 4, 9, 4, 9, 3, 9, 4, 9, 4, 9, 4,
  9, 4, 9, 4, 9, 4, 8, 4, 8, 4, 8, 5, 9, 5, 9, 6,
  8, 6, 9, 7,10, 8,10, 9,10,10,10,12,11,13,12,13,
 13,15,13,14,13,14,12,15,13,15,14,15,13,16,14,16,
 14,15,14,14,14,16,15,18,15,18,16,18,18,18,18,18,
 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,
};

static static_codebook _huff_book_line_1024x27_1sub1 = {
 1, 128,
 _huff_lengthlist_line_1024x27_1sub1,
 0, 0, 0, 0, 0,
 
# 5827 "oggenc.c" 3 4
((void *)0)
# 5827 "oggenc.c"
    ,
 
# 5828 "oggenc.c" 3 4
((void *)0)
# 5828 "oggenc.c"
    ,
 
# 5829 "oggenc.c" 3 4
((void *)0)
# 5829 "oggenc.c"
    ,
 
# 5830 "oggenc.c" 3 4
((void *)0)
# 5830 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_2sub0[] = {
  1, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5,
  6, 6, 7, 6, 7, 7, 8, 8, 9, 8, 9, 9, 9, 9,10,10,
};

static static_codebook _huff_book_line_1024x27_2sub0 = {
 1, 32,
 _huff_lengthlist_line_1024x27_2sub0,
 0, 0, 0, 0, 0,
 
# 5843 "oggenc.c" 3 4
((void *)0)
# 5843 "oggenc.c"
    ,
 
# 5844 "oggenc.c" 3 4
((void *)0)
# 5844 "oggenc.c"
    ,
 
# 5845 "oggenc.c" 3 4
((void *)0)
# 5845 "oggenc.c"
    ,
 
# 5846 "oggenc.c" 3 4
((void *)0)
# 5846 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_2sub1[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  3, 3, 4, 3, 4, 4, 5, 4, 5, 5, 5, 5, 6, 5, 6, 6,
  7, 6, 7, 7, 7, 7, 7, 7, 8, 9, 8, 9, 8,10, 8,11,
  8,12, 9,13, 9,14, 9,14, 8,12, 8,14, 9,14, 8,12,
  8,11, 8,11, 8,11, 9,11,10,11,10,12,10,12,11,12,
 12,12,12,12,11,12,11,13,11,13,12,14,14,14,14,14,
 14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,
};

static static_codebook _huff_book_line_1024x27_2sub1 = {
 1, 128,
 _huff_lengthlist_line_1024x27_2sub1,
 0, 0, 0, 0, 0,
 
# 5865 "oggenc.c" 3 4
((void *)0)
# 5865 "oggenc.c"
    ,
 
# 5866 "oggenc.c" 3 4
((void *)0)
# 5866 "oggenc.c"
    ,
 
# 5867 "oggenc.c" 3 4
((void *)0)
# 5867 "oggenc.c"
    ,
 
# 5868 "oggenc.c" 3 4
((void *)0)
# 5868 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_3sub1[] = {
  0, 4, 5, 4, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 5, 4,
  5, 5,
};

static static_codebook _huff_book_line_1024x27_3sub1 = {
 1, 18,
 _huff_lengthlist_line_1024x27_3sub1,
 0, 0, 0, 0, 0,
 
# 5881 "oggenc.c" 3 4
((void *)0)
# 5881 "oggenc.c"
    ,
 
# 5882 "oggenc.c" 3 4
((void *)0)
# 5882 "oggenc.c"
    ,
 
# 5883 "oggenc.c" 3 4
((void *)0)
# 5883 "oggenc.c"
    ,
 
# 5884 "oggenc.c" 3 4
((void *)0)
# 5884 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_3sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 3, 3, 3, 3, 4, 4, 4, 5, 4, 6, 5, 6, 5, 7,
  5, 9, 5,10, 6,11, 6,12, 7,13, 8,15, 8,15, 9,15,
  9,15,
};

static static_codebook _huff_book_line_1024x27_3sub2 = {
 1, 50,
 _huff_lengthlist_line_1024x27_3sub2,
 0, 0, 0, 0, 0,
 
# 5899 "oggenc.c" 3 4
((void *)0)
# 5899 "oggenc.c"
    ,
 
# 5900 "oggenc.c" 3 4
((void *)0)
# 5900 "oggenc.c"
    ,
 
# 5901 "oggenc.c" 3 4
((void *)0)
# 5901 "oggenc.c"
    ,
 
# 5902 "oggenc.c" 3 4
((void *)0)
# 5902 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_3sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 9, 2, 9, 2, 9, 4, 9, 6, 9, 7, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static static_codebook _huff_book_line_1024x27_3sub3 = {
 1, 128,
 _huff_lengthlist_line_1024x27_3sub3,
 0, 0, 0, 0, 0,
 
# 5921 "oggenc.c" 3 4
((void *)0)
# 5921 "oggenc.c"
    ,
 
# 5922 "oggenc.c" 3 4
((void *)0)
# 5922 "oggenc.c"
    ,
 
# 5923 "oggenc.c" 3 4
((void *)0)
# 5923 "oggenc.c"
    ,
 
# 5924 "oggenc.c" 3 4
((void *)0)
# 5924 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_4sub1[] = {
  0, 4, 5, 4, 5, 4, 6, 3, 6, 3, 5, 3, 5, 3, 6, 4,
  6, 4,
};

static static_codebook _huff_book_line_1024x27_4sub1 = {
 1, 18,
 _huff_lengthlist_line_1024x27_4sub1,
 0, 0, 0, 0, 0,
 
# 5937 "oggenc.c" 3 4
((void *)0)
# 5937 "oggenc.c"
    ,
 
# 5938 "oggenc.c" 3 4
((void *)0)
# 5938 "oggenc.c"
    ,
 
# 5939 "oggenc.c" 3 4
((void *)0)
# 5939 "oggenc.c"
    ,
 
# 5940 "oggenc.c" 3 4
((void *)0)
# 5940 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_4sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 2, 4, 2, 5, 3, 5, 4, 6, 6, 6, 6, 7, 7,
  7, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 9,10,10,11,
 10,11,
};

static static_codebook _huff_book_line_1024x27_4sub2 = {
 1, 50,
 _huff_lengthlist_line_1024x27_4sub2,
 0, 0, 0, 0, 0,
 
# 5955 "oggenc.c" 3 4
((void *)0)
# 5955 "oggenc.c"
    ,
 
# 5956 "oggenc.c" 3 4
((void *)0)
# 5956 "oggenc.c"
    ,
 
# 5957 "oggenc.c" 3 4
((void *)0)
# 5957 "oggenc.c"
    ,
 
# 5958 "oggenc.c" 3 4
((void *)0)
# 5958 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_4sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 3, 3, 3, 6, 4, 6, 4, 5, 5, 7, 4, 8, 5, 9,
  4, 9, 5, 9, 5, 9, 6, 9, 5, 9, 7, 9, 7, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static static_codebook _huff_book_line_1024x27_4sub3 = {
 1, 128,
 _huff_lengthlist_line_1024x27_4sub3,
 0, 0, 0, 0, 0,
 
# 5977 "oggenc.c" 3 4
((void *)0)
# 5977 "oggenc.c"
    ,
 
# 5978 "oggenc.c" 3 4
((void *)0)
# 5978 "oggenc.c"
    ,
 
# 5979 "oggenc.c" 3 4
((void *)0)
# 5979 "oggenc.c"
    ,
 
# 5980 "oggenc.c" 3 4
((void *)0)
# 5980 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_class1[] = {
  2, 9, 8,14, 7,13,11,14, 1, 5, 3, 7, 4,10, 7,12,
};

static static_codebook _huff_book_line_1024x27_class1 = {
 1, 16,
 _huff_lengthlist_line_1024x27_class1,
 0, 0, 0, 0, 0,
 
# 5992 "oggenc.c" 3 4
((void *)0)
# 5992 "oggenc.c"
    ,
 
# 5993 "oggenc.c" 3 4
((void *)0)
# 5993 "oggenc.c"
    ,
 
# 5994 "oggenc.c" 3 4
((void *)0)
# 5994 "oggenc.c"
    ,
 
# 5995 "oggenc.c" 3 4
((void *)0)
# 5995 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_class2[] = {
  1, 3, 2, 5, 4, 7, 6, 7,
};

static static_codebook _huff_book_line_1024x27_class2 = {
 1, 8,
 _huff_lengthlist_line_1024x27_class2,
 0, 0, 0, 0, 0,
 
# 6007 "oggenc.c" 3 4
((void *)0)
# 6007 "oggenc.c"
    ,
 
# 6008 "oggenc.c" 3 4
((void *)0)
# 6008 "oggenc.c"
    ,
 
# 6009 "oggenc.c" 3 4
((void *)0)
# 6009 "oggenc.c"
    ,
 
# 6010 "oggenc.c" 3 4
((void *)0)
# 6010 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_class3[] = {
  1, 5, 6,19, 5, 8,10,19, 9,10,15,19,19,19,19,19,
  4, 7, 9,19, 6, 7,10,19,11,11,15,19,19,19,19,19,
  8,11,13,19, 8,11,14,19,13,13,17,19,19,19,19,19,
 19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
  3, 7, 9,19, 6, 8,11,19,11,11,15,19,19,19,19,19,
  5, 7,11,19, 6, 7,11,19,11,10,14,19,19,19,19,19,
  8,11,15,19, 8,10,14,19,13,13,16,19,19,19,19,19,
 19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
  6, 9,11,19, 8,10,12,19,15,14,17,19,19,19,19,19,
  5, 8,11,19, 7, 9,12,19,14,11,16,19,19,19,19,19,
  9,10,18,19, 9,10,15,19,14,16,19,19,19,19,19,19,
 19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
 16,17,19,19,16,17,17,19,19,19,19,19,19,19,19,19,
 12,14,16,19,12,12,16,19,19,19,19,19,19,19,19,19,
 18,18,19,19,17,16,19,19,19,19,19,19,19,19,19,19,
 19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,18,
};

static static_codebook _huff_book_line_1024x27_class3 = {
 1, 256,
 _huff_lengthlist_line_1024x27_class3,
 0, 0, 0, 0, 0,
 
# 6037 "oggenc.c" 3 4
((void *)0)
# 6037 "oggenc.c"
    ,
 
# 6038 "oggenc.c" 3 4
((void *)0)
# 6038 "oggenc.c"
    ,
 
# 6039 "oggenc.c" 3 4
((void *)0)
# 6039 "oggenc.c"
    ,
 
# 6040 "oggenc.c" 3 4
((void *)0)
# 6040 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_1024x27_class4[] = {
  1, 4, 8,12, 4, 6, 8,21, 9, 8,10,21,20,16,18,20,
  2, 6, 8,20, 7, 6, 9,19,11, 9,10,20,17,15,16,20,
  5, 8,11,19, 8, 8,10,15,12,10,12,15,20,20,15,20,
 17,20,20,20,15,20,20,19,20,20,16,19,20,20,20,20,
};

static static_codebook _huff_book_line_1024x27_class4 = {
 1, 64,
 _huff_lengthlist_line_1024x27_class4,
 0, 0, 0, 0, 0,
 
# 6055 "oggenc.c" 3 4
((void *)0)
# 6055 "oggenc.c"
    ,
 
# 6056 "oggenc.c" 3 4
((void *)0)
# 6056 "oggenc.c"
    ,
 
# 6057 "oggenc.c" 3 4
((void *)0)
# 6057 "oggenc.c"
    ,
 
# 6058 "oggenc.c" 3 4
((void *)0)
# 6058 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_0sub0[] = {
  5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5,
  6, 5, 6, 5, 6, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
  7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6,
  8, 7, 8, 7, 8, 7, 8, 7, 9, 7, 9, 7, 9, 8,10, 8,
 10, 8,10, 8,10, 8,10, 9,11, 9,11, 9,10, 9,10,10,
 11,10,11,11,11,11,12,12,13,14,13,14,16,16,16,16,
 16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,
 16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,
};

static static_codebook _huff_book_line_128x11_0sub0 = {
 1, 128,
 _huff_lengthlist_line_128x11_0sub0,
 0, 0, 0, 0, 0,
 
# 6077 "oggenc.c" 3 4
((void *)0)
# 6077 "oggenc.c"
    ,
 
# 6078 "oggenc.c" 3 4
((void *)0)
# 6078 "oggenc.c"
    ,
 
# 6079 "oggenc.c" 3 4
((void *)0)
# 6079 "oggenc.c"
    ,
 
# 6080 "oggenc.c" 3 4
((void *)0)
# 6080 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_1sub0[] = {
  2, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  6, 5, 6, 5, 6, 5, 7, 6, 7, 6, 7, 6, 8, 6, 8, 6,
};

static static_codebook _huff_book_line_128x11_1sub0 = {
 1, 32,
 _huff_lengthlist_line_128x11_1sub0,
 0, 0, 0, 0, 0,
 
# 6093 "oggenc.c" 3 4
((void *)0)
# 6093 "oggenc.c"
    ,
 
# 6094 "oggenc.c" 3 4
((void *)0)
# 6094 "oggenc.c"
    ,
 
# 6095 "oggenc.c" 3 4
((void *)0)
# 6095 "oggenc.c"
    ,
 
# 6096 "oggenc.c" 3 4
((void *)0)
# 6096 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_1sub1[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  6, 3, 6, 3, 7, 3, 7, 4, 8, 4, 8, 4, 8, 4, 9, 4,
 10, 5, 9, 5,10, 5,10, 5,10, 5,12, 6,12, 6,10, 6,
 10, 7,10, 8,10, 8,10, 9,11, 9,12,11,10,11,11,13,
 12,12,12,13,10,13,10,13,10,13,10,13,11,13,10,13,
 10,13,10,13,10,13,10,13,11,12,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
};

static static_codebook _huff_book_line_128x11_1sub1 = {
 1, 128,
 _huff_lengthlist_line_128x11_1sub1,
 0, 0, 0, 0, 0,
 
# 6115 "oggenc.c" 3 4
((void *)0)
# 6115 "oggenc.c"
    ,
 
# 6116 "oggenc.c" 3 4
((void *)0)
# 6116 "oggenc.c"
    ,
 
# 6117 "oggenc.c" 3 4
((void *)0)
# 6117 "oggenc.c"
    ,
 
# 6118 "oggenc.c" 3 4
((void *)0)
# 6118 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_2sub1[] = {
  0, 4, 5, 4, 5, 4, 5, 3, 4, 3, 4, 4, 4, 4, 4, 5,
  5, 5,
};

static static_codebook _huff_book_line_128x11_2sub1 = {
 1, 18,
 _huff_lengthlist_line_128x11_2sub1,
 0, 0, 0, 0, 0,
 
# 6131 "oggenc.c" 3 4
((void *)0)
# 6131 "oggenc.c"
    ,
 
# 6132 "oggenc.c" 3 4
((void *)0)
# 6132 "oggenc.c"
    ,
 
# 6133 "oggenc.c" 3 4
((void *)0)
# 6133 "oggenc.c"
    ,
 
# 6134 "oggenc.c" 3 4
((void *)0)
# 6134 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_2sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 3, 3, 4, 3, 5, 4, 5, 5, 6, 5, 6, 6, 6,
  6, 8, 6,10, 7,10, 8,10, 8,10,10,10,10,10,10,10,
 10,10,
};

static static_codebook _huff_book_line_128x11_2sub2 = {
 1, 50,
 _huff_lengthlist_line_128x11_2sub2,
 0, 0, 0, 0, 0,
 
# 6149 "oggenc.c" 3 4
((void *)0)
# 6149 "oggenc.c"
    ,
 
# 6150 "oggenc.c" 3 4
((void *)0)
# 6150 "oggenc.c"
    ,
 
# 6151 "oggenc.c" 3 4
((void *)0)
# 6151 "oggenc.c"
    ,
 
# 6152 "oggenc.c" 3 4
((void *)0)
# 6152 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_2sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
};

static static_codebook _huff_book_line_128x11_2sub3 = {
 1, 128,
 _huff_lengthlist_line_128x11_2sub3,
 0, 0, 0, 0, 0,
 
# 6171 "oggenc.c" 3 4
((void *)0)
# 6171 "oggenc.c"
    ,
 
# 6172 "oggenc.c" 3 4
((void *)0)
# 6172 "oggenc.c"
    ,
 
# 6173 "oggenc.c" 3 4
((void *)0)
# 6173 "oggenc.c"
    ,
 
# 6174 "oggenc.c" 3 4
((void *)0)
# 6174 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_3sub1[] = {
  0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4,
  5, 4,
};

static static_codebook _huff_book_line_128x11_3sub1 = {
 1, 18,
 _huff_lengthlist_line_128x11_3sub1,
 0, 0, 0, 0, 0,
 
# 6187 "oggenc.c" 3 4
((void *)0)
# 6187 "oggenc.c"
    ,
 
# 6188 "oggenc.c" 3 4
((void *)0)
# 6188 "oggenc.c"
    ,
 
# 6189 "oggenc.c" 3 4
((void *)0)
# 6189 "oggenc.c"
    ,
 
# 6190 "oggenc.c" 3 4
((void *)0)
# 6190 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_3sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 3, 5, 3, 6, 4, 7, 4, 7, 4, 7, 4, 8, 4,
  8, 4, 9, 4, 9, 4, 9, 5,10, 5,11, 5,12, 6,13, 6,
 13, 7,
};

static static_codebook _huff_book_line_128x11_3sub2 = {
 1, 50,
 _huff_lengthlist_line_128x11_3sub2,
 0, 0, 0, 0, 0,
 
# 6205 "oggenc.c" 3 4
((void *)0)
# 6205 "oggenc.c"
    ,
 
# 6206 "oggenc.c" 3 4
((void *)0)
# 6206 "oggenc.c"
    ,
 
# 6207 "oggenc.c" 3 4
((void *)0)
# 6207 "oggenc.c"
    ,
 
# 6208 "oggenc.c" 3 4
((void *)0)
# 6208 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_3sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 7, 2, 6, 2, 7, 3, 8, 4, 7, 6, 9, 7, 9, 7,
  9, 9, 9, 8, 9, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static static_codebook _huff_book_line_128x11_3sub3 = {
 1, 128,
 _huff_lengthlist_line_128x11_3sub3,
 0, 0, 0, 0, 0,
 
# 6227 "oggenc.c" 3 4
((void *)0)
# 6227 "oggenc.c"
    ,
 
# 6228 "oggenc.c" 3 4
((void *)0)
# 6228 "oggenc.c"
    ,
 
# 6229 "oggenc.c" 3 4
((void *)0)
# 6229 "oggenc.c"
    ,
 
# 6230 "oggenc.c" 3 4
((void *)0)
# 6230 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_class1[] = {
  1, 6, 3, 7, 2, 5, 4, 7,
};

static static_codebook _huff_book_line_128x11_class1 = {
 1, 8,
 _huff_lengthlist_line_128x11_class1,
 0, 0, 0, 0, 0,
 
# 6242 "oggenc.c" 3 4
((void *)0)
# 6242 "oggenc.c"
    ,
 
# 6243 "oggenc.c" 3 4
((void *)0)
# 6243 "oggenc.c"
    ,
 
# 6244 "oggenc.c" 3 4
((void *)0)
# 6244 "oggenc.c"
    ,
 
# 6245 "oggenc.c" 3 4
((void *)0)
# 6245 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_class2[] = {
  1, 5,11,14, 4,11,13,14,10,14,13,14,14,14,13,13,
  2, 6,11,13, 5,11,12,13,11,12,13,13,13,13,13,13,
  4, 8,12,13, 5, 9,11,13,12,13,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
};

static static_codebook _huff_book_line_128x11_class2 = {
 1, 64,
 _huff_lengthlist_line_128x11_class2,
 0, 0, 0, 0, 0,
 
# 6260 "oggenc.c" 3 4
((void *)0)
# 6260 "oggenc.c"
    ,
 
# 6261 "oggenc.c" 3 4
((void *)0)
# 6261 "oggenc.c"
    ,
 
# 6262 "oggenc.c" 3 4
((void *)0)
# 6262 "oggenc.c"
    ,
 
# 6263 "oggenc.c" 3 4
((void *)0)
# 6263 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x11_class3[] = {
  6, 7,11,16, 6, 7,10,16,11, 9,13,15,15,15,15,15,
  4, 4, 7,14, 4, 4, 6,14, 8, 6, 8,15,15,15,15,15,
  4, 4, 6,15, 3, 2, 4,13, 6, 5, 6,14,15,12,11,14,
 11,11,13,15, 9, 8,10,15,11,10,11,15,15,15,15,15,
};

static static_codebook _huff_book_line_128x11_class3 = {
 1, 64,
 _huff_lengthlist_line_128x11_class3,
 0, 0, 0, 0, 0,
 
# 6278 "oggenc.c" 3 4
((void *)0)
# 6278 "oggenc.c"
    ,
 
# 6279 "oggenc.c" 3 4
((void *)0)
# 6279 "oggenc.c"
    ,
 
# 6280 "oggenc.c" 3 4
((void *)0)
# 6280 "oggenc.c"
    ,
 
# 6281 "oggenc.c" 3 4
((void *)0)
# 6281 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_0sub0[] = {
  5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5,
  6, 5, 6, 5, 6, 5, 6, 5, 7, 5, 7, 5, 7, 6, 7, 6,
  7, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 7, 9, 7,
  9, 7, 9, 7, 9, 7, 9, 7, 9, 7,10, 7,10, 8,10, 8,
 11, 8,11, 8,11, 8,12, 8,12, 8,12, 8,12, 9,12, 9,
 12, 9,12, 9,13, 9,13,10,13,10,13,11,14,12,14,13,
 14,14,16,15,17,17,19,18,19,19,19,19,19,19,19,19,
 19,19,19,19,19,19,19,19,19,19,19,18,18,18,18,18,
};

static static_codebook _huff_book_line_128x17_0sub0 = {
 1, 128,
 _huff_lengthlist_line_128x17_0sub0,
 0, 0, 0, 0, 0,
 
# 6300 "oggenc.c" 3 4
((void *)0)
# 6300 "oggenc.c"
    ,
 
# 6301 "oggenc.c" 3 4
((void *)0)
# 6301 "oggenc.c"
    ,
 
# 6302 "oggenc.c" 3 4
((void *)0)
# 6302 "oggenc.c"
    ,
 
# 6303 "oggenc.c" 3 4
((void *)0)
# 6303 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_1sub0[] = {
  2, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 5,
  6, 5, 6, 6, 7, 6, 7, 6, 8, 6, 8, 7, 9, 7, 9, 8,
};

static static_codebook _huff_book_line_128x17_1sub0 = {
 1, 32,
 _huff_lengthlist_line_128x17_1sub0,
 0, 0, 0, 0, 0,
 
# 6316 "oggenc.c" 3 4
((void *)0)
# 6316 "oggenc.c"
    ,
 
# 6317 "oggenc.c" 3 4
((void *)0)
# 6317 "oggenc.c"
    ,
 
# 6318 "oggenc.c" 3 4
((void *)0)
# 6318 "oggenc.c"
    ,
 
# 6319 "oggenc.c" 3 4
((void *)0)
# 6319 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_1sub1[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  4, 2, 5, 3, 5, 3, 6, 4, 6, 4, 7, 4, 8, 5, 8, 5,
  8, 6, 9, 6, 9, 7, 9, 8,10, 8,10, 9,10,10,10,10,
 10,12,10,14,11,15,12,15,11,15,11,15,11,14,11,15,
 11,14,11,13,10,12,10,14,10,14,11,13,10,12,11,15,
 12,15,13,15,12,13,14,15,15,15,15,15,15,15,15,15,
 15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,
};

static static_codebook _huff_book_line_128x17_1sub1 = {
 1, 128,
 _huff_lengthlist_line_128x17_1sub1,
 0, 0, 0, 0, 0,
 
# 6338 "oggenc.c" 3 4
((void *)0)
# 6338 "oggenc.c"
    ,
 
# 6339 "oggenc.c" 3 4
((void *)0)
# 6339 "oggenc.c"
    ,
 
# 6340 "oggenc.c" 3 4
((void *)0)
# 6340 "oggenc.c"
    ,
 
# 6341 "oggenc.c" 3 4
((void *)0)
# 6341 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_2sub1[] = {
  0, 4, 5, 4, 7, 3, 8, 3, 9, 3,10, 2,12, 3,12, 4,
 11, 6,
};

static static_codebook _huff_book_line_128x17_2sub1 = {
 1, 18,
 _huff_lengthlist_line_128x17_2sub1,
 0, 0, 0, 0, 0,
 
# 6354 "oggenc.c" 3 4
((void *)0)
# 6354 "oggenc.c"
    ,
 
# 6355 "oggenc.c" 3 4
((void *)0)
# 6355 "oggenc.c"
    ,
 
# 6356 "oggenc.c" 3 4
((void *)0)
# 6356 "oggenc.c"
    ,
 
# 6357 "oggenc.c" 3 4
((void *)0)
# 6357 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_2sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 7, 1, 8, 2, 9, 3, 9, 7, 9, 7, 9, 7, 8, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8,
};

static static_codebook _huff_book_line_128x17_2sub2 = {
 1, 50,
 _huff_lengthlist_line_128x17_2sub2,
 0, 0, 0, 0, 0,
 
# 6372 "oggenc.c" 3 4
((void *)0)
# 6372 "oggenc.c"
    ,
 
# 6373 "oggenc.c" 3 4
((void *)0)
# 6373 "oggenc.c"
    ,
 
# 6374 "oggenc.c" 3 4
((void *)0)
# 6374 "oggenc.c"
    ,
 
# 6375 "oggenc.c" 3 4
((void *)0)
# 6375 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_2sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
};

static static_codebook _huff_book_line_128x17_2sub3 = {
 1, 128,
 _huff_lengthlist_line_128x17_2sub3,
 0, 0, 0, 0, 0,
 
# 6394 "oggenc.c" 3 4
((void *)0)
# 6394 "oggenc.c"
    ,
 
# 6395 "oggenc.c" 3 4
((void *)0)
# 6395 "oggenc.c"
    ,
 
# 6396 "oggenc.c" 3 4
((void *)0)
# 6396 "oggenc.c"
    ,
 
# 6397 "oggenc.c" 3 4
((void *)0)
# 6397 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_3sub1[] = {
  0, 4, 4, 4, 5, 4, 5, 3, 5, 3, 5, 3, 5, 4, 6, 4,
  6, 4,
};

static static_codebook _huff_book_line_128x17_3sub1 = {
 1, 18,
 _huff_lengthlist_line_128x17_3sub1,
 0, 0, 0, 0, 0,
 
# 6410 "oggenc.c" 3 4
((void *)0)
# 6410 "oggenc.c"
    ,
 
# 6411 "oggenc.c" 3 4
((void *)0)
# 6411 "oggenc.c"
    ,
 
# 6412 "oggenc.c" 3 4
((void *)0)
# 6412 "oggenc.c"
    ,
 
# 6413 "oggenc.c" 3 4
((void *)0)
# 6413 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_3sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 3, 6, 3, 6, 3, 7, 4, 8, 4, 8, 4, 9, 4,
  9, 4,10, 4,10, 5,11, 5,11, 5,12, 5,12, 6,12, 6,
 12, 7,
};

static static_codebook _huff_book_line_128x17_3sub2 = {
 1, 50,
 _huff_lengthlist_line_128x17_3sub2,
 0, 0, 0, 0, 0,
 
# 6428 "oggenc.c" 3 4
((void *)0)
# 6428 "oggenc.c"
    ,
 
# 6429 "oggenc.c" 3 4
((void *)0)
# 6429 "oggenc.c"
    ,
 
# 6430 "oggenc.c" 3 4
((void *)0)
# 6430 "oggenc.c"
    ,
 
# 6431 "oggenc.c" 3 4
((void *)0)
# 6431 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_3sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 7, 1, 7, 3, 6, 3, 6, 4, 6, 5, 6, 8, 7,10,
  7,11, 7,11, 8,11, 9,11, 7,11, 8,11, 8,11,10,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
};

static static_codebook _huff_book_line_128x17_3sub3 = {
 1, 128,
 _huff_lengthlist_line_128x17_3sub3,
 0, 0, 0, 0, 0,
 
# 6450 "oggenc.c" 3 4
((void *)0)
# 6450 "oggenc.c"
    ,
 
# 6451 "oggenc.c" 3 4
((void *)0)
# 6451 "oggenc.c"
    ,
 
# 6452 "oggenc.c" 3 4
((void *)0)
# 6452 "oggenc.c"
    ,
 
# 6453 "oggenc.c" 3 4
((void *)0)
# 6453 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_class1[] = {
  1, 3, 4, 7, 2, 6, 5, 7,
};

static static_codebook _huff_book_line_128x17_class1 = {
 1, 8,
 _huff_lengthlist_line_128x17_class1,
 0, 0, 0, 0, 0,
 
# 6465 "oggenc.c" 3 4
((void *)0)
# 6465 "oggenc.c"
    ,
 
# 6466 "oggenc.c" 3 4
((void *)0)
# 6466 "oggenc.c"
    ,
 
# 6467 "oggenc.c" 3 4
((void *)0)
# 6467 "oggenc.c"
    ,
 
# 6468 "oggenc.c" 3 4
((void *)0)
# 6468 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_class2[] = {
  1, 2, 7,14, 4, 9,13,14, 8,14,14,14,14,14,14,14,
  3, 5,10,14, 8,14,14,14,11,14,14,14,14,14,14,14,
  7,10,14,14,12,14,14,14,14,14,14,14,14,14,14,14,
 14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,
};

static static_codebook _huff_book_line_128x17_class2 = {
 1, 64,
 _huff_lengthlist_line_128x17_class2,
 0, 0, 0, 0, 0,
 
# 6483 "oggenc.c" 3 4
((void *)0)
# 6483 "oggenc.c"
    ,
 
# 6484 "oggenc.c" 3 4
((void *)0)
# 6484 "oggenc.c"
    ,
 
# 6485 "oggenc.c" 3 4
((void *)0)
# 6485 "oggenc.c"
    ,
 
# 6486 "oggenc.c" 3 4
((void *)0)
# 6486 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x17_class3[] = {
  2, 6,11,19, 5, 9,12,19,10,11,13,19,19,19,19,19,
  2, 5, 8,19, 4, 6, 8,19, 8, 8, 9,19,19,16,19,19,
  3, 6, 8,19, 3, 5, 7,18, 8, 8, 9,16,16,11,16,19,
 14,14,14,19,10,10,11,19,16,12,14,19,19,19,19,19,
};

static static_codebook _huff_book_line_128x17_class3 = {
 1, 64,
 _huff_lengthlist_line_128x17_class3,
 0, 0, 0, 0, 0,
 
# 6501 "oggenc.c" 3 4
((void *)0)
# 6501 "oggenc.c"
    ,
 
# 6502 "oggenc.c" 3 4
((void *)0)
# 6502 "oggenc.c"
    ,
 
# 6503 "oggenc.c" 3 4
((void *)0)
# 6503 "oggenc.c"
    ,
 
# 6504 "oggenc.c" 3 4
((void *)0)
# 6504 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x4_0sub0[] = {
  2, 2, 2, 2,
};

static static_codebook _huff_book_line_128x4_0sub0 = {
 1, 4,
 _huff_lengthlist_line_128x4_0sub0,
 0, 0, 0, 0, 0,
 
# 6516 "oggenc.c" 3 4
((void *)0)
# 6516 "oggenc.c"
    ,
 
# 6517 "oggenc.c" 3 4
((void *)0)
# 6517 "oggenc.c"
    ,
 
# 6518 "oggenc.c" 3 4
((void *)0)
# 6518 "oggenc.c"
    ,
 
# 6519 "oggenc.c" 3 4
((void *)0)
# 6519 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x4_0sub1[] = {
  0, 0, 0, 0, 3, 2, 3, 2, 3, 3,
};

static static_codebook _huff_book_line_128x4_0sub1 = {
 1, 10,
 _huff_lengthlist_line_128x4_0sub1,
 0, 0, 0, 0, 0,
 
# 6531 "oggenc.c" 3 4
((void *)0)
# 6531 "oggenc.c"
    ,
 
# 6532 "oggenc.c" 3 4
((void *)0)
# 6532 "oggenc.c"
    ,
 
# 6533 "oggenc.c" 3 4
((void *)0)
# 6533 "oggenc.c"
    ,
 
# 6534 "oggenc.c" 3 4
((void *)0)
# 6534 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x4_0sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 4, 4, 4,
  4, 3, 4, 4, 5, 3, 6, 4, 6,
};

static static_codebook _huff_book_line_128x4_0sub2 = {
 1, 25,
 _huff_lengthlist_line_128x4_0sub2,
 0, 0, 0, 0, 0,
 
# 6547 "oggenc.c" 3 4
((void *)0)
# 6547 "oggenc.c"
    ,
 
# 6548 "oggenc.c" 3 4
((void *)0)
# 6548 "oggenc.c"
    ,
 
# 6549 "oggenc.c" 3 4
((void *)0)
# 6549 "oggenc.c"
    ,
 
# 6550 "oggenc.c" 3 4
((void *)0)
# 6550 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x4_0sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 2, 6, 3, 6, 3,
  7, 4, 7, 5, 7, 5, 7, 6, 8, 8, 9,10,10,16,10,16,
 10,14,10,14,11,15,15,15,15,15,15,15,15,15,15,15,
};

static static_codebook _huff_book_line_128x4_0sub3 = {
 1, 64,
 _huff_lengthlist_line_128x4_0sub3,
 0, 0, 0, 0, 0,
 
# 6565 "oggenc.c" 3 4
((void *)0)
# 6565 "oggenc.c"
    ,
 
# 6566 "oggenc.c" 3 4
((void *)0)
# 6566 "oggenc.c"
    ,
 
# 6567 "oggenc.c" 3 4
((void *)0)
# 6567 "oggenc.c"
    ,
 
# 6568 "oggenc.c" 3 4
((void *)0)
# 6568 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x4_class0[] = {
  8, 8, 8,14, 7, 7, 8,13, 7, 6, 7,11,11,11,10,13,
  9, 9,10,16, 8, 8, 9,12, 7, 7, 7,11,11,11,10,12,
 11,11,11,14,10,10,10,14, 9, 8, 9,12,13,14,12,14,
 16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
  8, 7, 8,11, 7, 7, 7,11, 6, 6, 6,10,10,10,10,14,
  8, 8, 8,12, 7, 7, 8,11, 6, 7, 7,10,10,10,10,13,
 10,10,10,12,10, 9, 9,12, 9, 9, 9,12,12,13,12,14,
 16,16,16,16,16,14,16,16,14,14,16,16,16,16,16,16,
  7, 6, 5, 7, 6, 6, 5, 6, 6, 5, 5, 5, 9,10, 9,10,
  8, 7, 6, 7, 7, 6, 5, 6, 6, 6, 5, 6,10,10, 9, 9,
 10, 9, 7, 8, 9, 8, 7, 7, 8, 7, 6, 7,11,11,10, 9,
 16,13,14,16,14,14,13,15,16,14,12,13,16,16,14,16,
  9, 8, 7, 8, 8, 8, 7, 8, 8, 7, 6, 7,10,10, 9,12,
  9, 9, 8, 8, 9, 8, 7, 8, 8, 8, 6, 7,10,10, 9,12,
 11,10, 9,10,10, 9, 7, 9, 9, 8, 6, 9,12,11,10,13,
 12,16,16,16,12,13,12,16,15,12,11,14,16,16,16,16,
};

static static_codebook _huff_book_line_128x4_class0 = {
 1, 256,
 _huff_lengthlist_line_128x4_class0,
 0, 0, 0, 0, 0,
 
# 6595 "oggenc.c" 3 4
((void *)0)
# 6595 "oggenc.c"
    ,
 
# 6596 "oggenc.c" 3 4
((void *)0)
# 6596 "oggenc.c"
    ,
 
# 6597 "oggenc.c" 3 4
((void *)0)
# 6597 "oggenc.c"
    ,
 
# 6598 "oggenc.c" 3 4
((void *)0)
# 6598 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_0sub1[] = {
  0, 3, 3, 3, 3, 3, 3, 3, 3,
};

static static_codebook _huff_book_line_128x7_0sub1 = {
 1, 9,
 _huff_lengthlist_line_128x7_0sub1,
 0, 0, 0, 0, 0,
 
# 6610 "oggenc.c" 3 4
((void *)0)
# 6610 "oggenc.c"
    ,
 
# 6611 "oggenc.c" 3 4
((void *)0)
# 6611 "oggenc.c"
    ,
 
# 6612 "oggenc.c" 3 4
((void *)0)
# 6612 "oggenc.c"
    ,
 
# 6613 "oggenc.c" 3 4
((void *)0)
# 6613 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_0sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 3, 4, 4, 4,
  5, 4, 5, 4, 5, 4, 6, 4, 6,
};

static static_codebook _huff_book_line_128x7_0sub2 = {
 1, 25,
 _huff_lengthlist_line_128x7_0sub2,
 0, 0, 0, 0, 0,
 
# 6626 "oggenc.c" 3 4
((void *)0)
# 6626 "oggenc.c"
    ,
 
# 6627 "oggenc.c" 3 4
((void *)0)
# 6627 "oggenc.c"
    ,
 
# 6628 "oggenc.c" 3 4
((void *)0)
# 6628 "oggenc.c"
    ,
 
# 6629 "oggenc.c" 3 4
((void *)0)
# 6629 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_0sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 6, 4,
  6, 4, 6, 4, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5,
  6, 7, 8,10,12,12,12,12,12,12,12,12,12,12,12,12,
};

static static_codebook _huff_book_line_128x7_0sub3 = {
 1, 64,
 _huff_lengthlist_line_128x7_0sub3,
 0, 0, 0, 0, 0,
 
# 6644 "oggenc.c" 3 4
((void *)0)
# 6644 "oggenc.c"
    ,
 
# 6645 "oggenc.c" 3 4
((void *)0)
# 6645 "oggenc.c"
    ,
 
# 6646 "oggenc.c" 3 4
((void *)0)
# 6646 "oggenc.c"
    ,
 
# 6647 "oggenc.c" 3 4
((void *)0)
# 6647 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_1sub1[] = {
  0, 3, 3, 3, 3, 2, 4, 3, 4,
};

static static_codebook _huff_book_line_128x7_1sub1 = {
 1, 9,
 _huff_lengthlist_line_128x7_1sub1,
 0, 0, 0, 0, 0,
 
# 6659 "oggenc.c" 3 4
((void *)0)
# 6659 "oggenc.c"
    ,
 
# 6660 "oggenc.c" 3 4
((void *)0)
# 6660 "oggenc.c"
    ,
 
# 6661 "oggenc.c" 3 4
((void *)0)
# 6661 "oggenc.c"
    ,
 
# 6662 "oggenc.c" 3 4
((void *)0)
# 6662 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_1sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 6, 3, 7, 3,
  8, 3, 9, 3,10, 3,11, 4,11,
};

static static_codebook _huff_book_line_128x7_1sub2 = {
 1, 25,
 _huff_lengthlist_line_128x7_1sub2,
 0, 0, 0, 0, 0,
 
# 6675 "oggenc.c" 3 4
((void *)0)
# 6675 "oggenc.c"
    ,
 
# 6676 "oggenc.c" 3 4
((void *)0)
# 6676 "oggenc.c"
    ,
 
# 6677 "oggenc.c" 3 4
((void *)0)
# 6677 "oggenc.c"
    ,
 
# 6678 "oggenc.c" 3 4
((void *)0)
# 6678 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_1sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1,12, 2, 9, 3,10, 4,
 12, 5,12, 6,12,10,12,11,12,12,12,12,12,12,12,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
};

static static_codebook _huff_book_line_128x7_1sub3 = {
 1, 64,
 _huff_lengthlist_line_128x7_1sub3,
 0, 0, 0, 0, 0,
 
# 6693 "oggenc.c" 3 4
((void *)0)
# 6693 "oggenc.c"
    ,
 
# 6694 "oggenc.c" 3 4
((void *)0)
# 6694 "oggenc.c"
    ,
 
# 6695 "oggenc.c" 3 4
((void *)0)
# 6695 "oggenc.c"
    ,
 
# 6696 "oggenc.c" 3 4
((void *)0)
# 6696 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_class0[] = {
 10, 7, 8,14,10, 7, 7,12,11, 8, 8,13,16,16,16,16,
  8, 5, 5,10, 7, 4, 4, 8, 8, 5, 5, 9,16,16,16,16,
  7, 4, 5, 7, 6, 3, 3, 6, 8, 5, 5, 7,16,14,13,16,
  9, 7, 7,10, 7, 4, 4, 7, 9, 6, 5, 6,15,13,11,14,
};

static static_codebook _huff_book_line_128x7_class0 = {
 1, 64,
 _huff_lengthlist_line_128x7_class0,
 0, 0, 0, 0, 0,
 
# 6711 "oggenc.c" 3 4
((void *)0)
# 6711 "oggenc.c"
    ,
 
# 6712 "oggenc.c" 3 4
((void *)0)
# 6712 "oggenc.c"
    ,
 
# 6713 "oggenc.c" 3 4
((void *)0)
# 6713 "oggenc.c"
    ,
 
# 6714 "oggenc.c" 3 4
((void *)0)
# 6714 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_128x7_class1[] = {
  8,12,16,16,10,14,16,16,12,15,16,16,16,16,16,16,
  7,11,15,16, 7,11,16,16,10,12,16,16,16,16,16,16,
  9,15,16,16, 9,12,16,16,11,15,16,16,16,16,16,16,
 16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
  6,10,13,16, 7,10,15,16, 9,11,16,16,16,16,16,16,
  4, 8,13,16, 5, 8,15,16, 7, 9,15,16,16,16,16,16,
  6,12,16,16, 6,10,15,16, 9,10,14,16,16,16,16,16,
 14,16,16,16,12,14,16,16,15,16,16,16,16,16,16,16,
  4, 9,11,16, 5, 9,13,16, 7, 9,15,16,16,16,16,16,
  2, 7,11,16, 3, 6,11,16, 5, 7,12,16,16,16,16,16,
  4, 9,14,16, 4, 7,13,16, 6, 8,13,16,16,16,16,16,
 11,14,16,16,10,16,14,16,11,16,16,16,16,16,16,16,
  7,13,16,16, 9,13,15,16,11,13,16,16,16,16,16,16,
  5,10,14,16, 6,10,15,16, 9,10,16,16,16,16,16,16,
  7,13,16,16, 6,10,16,16, 9,12,16,16,16,16,16,16,
 11,16,16,16,10,16,16,16,13,16,16,16,16,16,16,16,
};

static static_codebook _huff_book_line_128x7_class1 = {
 1, 256,
 _huff_lengthlist_line_128x7_class1,
 0, 0, 0, 0, 0,
 
# 6741 "oggenc.c" 3 4
((void *)0)
# 6741 "oggenc.c"
    ,
 
# 6742 "oggenc.c" 3 4
((void *)0)
# 6742 "oggenc.c"
    ,
 
# 6743 "oggenc.c" 3 4
((void *)0)
# 6743 "oggenc.c"
    ,
 
# 6744 "oggenc.c" 3 4
((void *)0)
# 6744 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x4_0sub0[] = {
  1, 3, 2, 3,
};

static static_codebook _huff_book_line_256x4_0sub0 = {
 1, 4,
 _huff_lengthlist_line_256x4_0sub0,
 0, 0, 0, 0, 0,
 
# 6756 "oggenc.c" 3 4
((void *)0)
# 6756 "oggenc.c"
    ,
 
# 6757 "oggenc.c" 3 4
((void *)0)
# 6757 "oggenc.c"
    ,
 
# 6758 "oggenc.c" 3 4
((void *)0)
# 6758 "oggenc.c"
    ,
 
# 6759 "oggenc.c" 3 4
((void *)0)
# 6759 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x4_0sub1[] = {
  0, 0, 0, 0, 2, 2, 3, 3, 3, 3,
};

static static_codebook _huff_book_line_256x4_0sub1 = {
 1, 10,
 _huff_lengthlist_line_256x4_0sub1,
 0, 0, 0, 0, 0,
 
# 6771 "oggenc.c" 3 4
((void *)0)
# 6771 "oggenc.c"
    ,
 
# 6772 "oggenc.c" 3 4
((void *)0)
# 6772 "oggenc.c"
    ,
 
# 6773 "oggenc.c" 3 4
((void *)0)
# 6773 "oggenc.c"
    ,
 
# 6774 "oggenc.c" 3 4
((void *)0)
# 6774 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x4_0sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 4, 3, 4,
  4, 4, 5, 4, 5, 5, 6, 4, 6,
};

static static_codebook _huff_book_line_256x4_0sub2 = {
 1, 25,
 _huff_lengthlist_line_256x4_0sub2,
 0, 0, 0, 0, 0,
 
# 6787 "oggenc.c" 3 4
((void *)0)
# 6787 "oggenc.c"
    ,
 
# 6788 "oggenc.c" 3 4
((void *)0)
# 6788 "oggenc.c"
    ,
 
# 6789 "oggenc.c" 3 4
((void *)0)
# 6789 "oggenc.c"
    ,
 
# 6790 "oggenc.c" 3 4
((void *)0)
# 6790 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x4_0sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 3, 4, 3, 4, 4,
  5, 4, 5, 5, 6, 5, 7, 6, 8, 7, 9, 8, 9, 9,10,12,
 15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,
};

static static_codebook _huff_book_line_256x4_0sub3 = {
 1, 64,
 _huff_lengthlist_line_256x4_0sub3,
 0, 0, 0, 0, 0,
 
# 6805 "oggenc.c" 3 4
((void *)0)
# 6805 "oggenc.c"
    ,
 
# 6806 "oggenc.c" 3 4
((void *)0)
# 6806 "oggenc.c"
    ,
 
# 6807 "oggenc.c" 3 4
((void *)0)
# 6807 "oggenc.c"
    ,
 
# 6808 "oggenc.c" 3 4
((void *)0)
# 6808 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x4_class0[] = {
  4, 5, 6,11, 5, 5, 6,10, 7, 6, 5, 6,14,13,10,10,
  6, 6, 6,10, 6, 6, 6,10, 7, 7, 7, 9, 9,10, 9,12,
  9, 8, 8,11, 8, 8, 8,10, 8, 8, 9,11, 8, 9, 9,13,
 18,18,18,18,16,17,18,18,12,13,14,18,14,14,10,12,
  5, 5, 6,12, 6, 5, 6,10, 7, 7, 6, 7,13,12, 9,12,
  6, 6, 6,11, 6, 6, 6, 9, 7, 7, 7,10,10,10, 9,12,
  9, 8, 8,12, 8, 8, 7,11, 8, 8, 8,11, 9, 9, 8,10,
 18,18,17,18,18,18,15,18,16,14,12,18,14,12,10,11,
  8, 7, 7,12, 8, 7, 7,10, 8, 7, 6, 6,11,10, 9,10,
  8, 8, 7,11, 8, 7, 7, 9, 8, 8, 7, 9,10,10, 9, 9,
 10, 9, 8,12, 9, 9, 8,11,10, 9, 8, 9, 8, 8, 7, 9,
 18,18,18,18,18,18,18,18,17,16,14,18,13,12,11,13,
 12,12,13,16,11,10,10,16,12,12, 9, 7,15,12,11,11,
 14,14,14,14,12,11,11,18,14,12,10,11,18,13,11,13,
 18,18,18,17,17,16,15,17,18,15,16,18,16,12,11,11,
 18,18,18,18,18,18,18,18,18,18,17,18,18,13,12,15,
};

static static_codebook _huff_book_line_256x4_class0 = {
 1, 256,
 _huff_lengthlist_line_256x4_class0,
 0, 0, 0, 0, 0,
 
# 6835 "oggenc.c" 3 4
((void *)0)
# 6835 "oggenc.c"
    ,
 
# 6836 "oggenc.c" 3 4
((void *)0)
# 6836 "oggenc.c"
    ,
 
# 6837 "oggenc.c" 3 4
((void *)0)
# 6837 "oggenc.c"
    ,
 
# 6838 "oggenc.c" 3 4
((void *)0)
# 6838 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_0sub1[] = {
  0, 2, 3, 3, 3, 3, 4, 3, 4,
};

static static_codebook _huff_book_line_256x7_0sub1 = {
 1, 9,
 _huff_lengthlist_line_256x7_0sub1,
 0, 0, 0, 0, 0,
 
# 6850 "oggenc.c" 3 4
((void *)0)
# 6850 "oggenc.c"
    ,
 
# 6851 "oggenc.c" 3 4
((void *)0)
# 6851 "oggenc.c"
    ,
 
# 6852 "oggenc.c" 3 4
((void *)0)
# 6852 "oggenc.c"
    ,
 
# 6853 "oggenc.c" 3 4
((void *)0)
# 6853 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_0sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 3, 4, 3, 5, 3,
  6, 3, 6, 4, 6, 4, 7, 5, 7,
};

static static_codebook _huff_book_line_256x7_0sub2 = {
 1, 25,
 _huff_lengthlist_line_256x7_0sub2,
 0, 0, 0, 0, 0,
 
# 6866 "oggenc.c" 3 4
((void *)0)
# 6866 "oggenc.c"
    ,
 
# 6867 "oggenc.c" 3 4
((void *)0)
# 6867 "oggenc.c"
    ,
 
# 6868 "oggenc.c" 3 4
((void *)0)
# 6868 "oggenc.c"
    ,
 
# 6869 "oggenc.c" 3 4
((void *)0)
# 6869 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_0sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 2, 5, 3, 5, 3,
  6, 3, 6, 4, 7, 6, 7, 8, 7, 9, 8, 9, 9, 9,10, 9,
 11,13,11,13,10,10,13,13,13,13,13,13,12,12,12,12,
};

static static_codebook _huff_book_line_256x7_0sub3 = {
 1, 64,
 _huff_lengthlist_line_256x7_0sub3,
 0, 0, 0, 0, 0,
 
# 6884 "oggenc.c" 3 4
((void *)0)
# 6884 "oggenc.c"
    ,
 
# 6885 "oggenc.c" 3 4
((void *)0)
# 6885 "oggenc.c"
    ,
 
# 6886 "oggenc.c" 3 4
((void *)0)
# 6886 "oggenc.c"
    ,
 
# 6887 "oggenc.c" 3 4
((void *)0)
# 6887 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_1sub1[] = {
  0, 3, 3, 3, 3, 2, 4, 3, 4,
};

static static_codebook _huff_book_line_256x7_1sub1 = {
 1, 9,
 _huff_lengthlist_line_256x7_1sub1,
 0, 0, 0, 0, 0,
 
# 6899 "oggenc.c" 3 4
((void *)0)
# 6899 "oggenc.c"
    ,
 
# 6900 "oggenc.c" 3 4
((void *)0)
# 6900 "oggenc.c"
    ,
 
# 6901 "oggenc.c" 3 4
((void *)0)
# 6901 "oggenc.c"
    ,
 
# 6902 "oggenc.c" 3 4
((void *)0)
# 6902 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_1sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 3, 4, 4,
  5, 4, 6, 5, 6, 7, 6, 8, 8,
};

static static_codebook _huff_book_line_256x7_1sub2 = {
 1, 25,
 _huff_lengthlist_line_256x7_1sub2,
 0, 0, 0, 0, 0,
 
# 6915 "oggenc.c" 3 4
((void *)0)
# 6915 "oggenc.c"
    ,
 
# 6916 "oggenc.c" 3 4
((void *)0)
# 6916 "oggenc.c"
    ,
 
# 6917 "oggenc.c" 3 4
((void *)0)
# 6917 "oggenc.c"
    ,
 
# 6918 "oggenc.c" 3 4
((void *)0)
# 6918 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_1sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 3, 6, 3, 7,
  3, 8, 5, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7,
};

static static_codebook _huff_book_line_256x7_1sub3 = {
 1, 64,
 _huff_lengthlist_line_256x7_1sub3,
 0, 0, 0, 0, 0,
 
# 6933 "oggenc.c" 3 4
((void *)0)
# 6933 "oggenc.c"
    ,
 
# 6934 "oggenc.c" 3 4
((void *)0)
# 6934 "oggenc.c"
    ,
 
# 6935 "oggenc.c" 3 4
((void *)0)
# 6935 "oggenc.c"
    ,
 
# 6936 "oggenc.c" 3 4
((void *)0)
# 6936 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_class0[] = {
  7, 5, 5, 9, 9, 6, 6, 9,12, 8, 7, 8,11, 8, 9,15,
  6, 3, 3, 7, 7, 4, 3, 6, 9, 6, 5, 6, 8, 6, 8,15,
  8, 5, 5, 9, 8, 5, 4, 6,10, 7, 5, 5,11, 8, 7,15,
 14,15,13,13,13,13, 8,11,15,10, 7, 6,11, 9,10,15,
};

static static_codebook _huff_book_line_256x7_class0 = {
 1, 64,
 _huff_lengthlist_line_256x7_class0,
 0, 0, 0, 0, 0,
 
# 6951 "oggenc.c" 3 4
((void *)0)
# 6951 "oggenc.c"
    ,
 
# 6952 "oggenc.c" 3 4
((void *)0)
# 6952 "oggenc.c"
    ,
 
# 6953 "oggenc.c" 3 4
((void *)0)
# 6953 "oggenc.c"
    ,
 
# 6954 "oggenc.c" 3 4
((void *)0)
# 6954 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_256x7_class1[] = {
  5, 6, 8,15, 6, 9,10,15,10,11,12,15,15,15,15,15,
  4, 6, 7,15, 6, 7, 8,15, 9, 8, 9,15,15,15,15,15,
  6, 8, 9,15, 7, 7, 8,15,10, 9,10,15,15,15,15,15,
 15,13,15,15,15,10,11,15,15,13,13,15,15,15,15,15,
  4, 6, 7,15, 6, 8, 9,15,10,10,12,15,15,15,15,15,
  2, 5, 6,15, 5, 6, 7,15, 8, 6, 7,15,15,15,15,15,
  5, 6, 8,15, 5, 6, 7,15, 9, 6, 7,15,15,15,15,15,
 14,12,13,15,12,10,11,15,15,15,15,15,15,15,15,15,
  7, 8, 9,15, 9,10,10,15,15,14,14,15,15,15,15,15,
  5, 6, 7,15, 7, 8, 9,15,12, 9,10,15,15,15,15,15,
  7, 7, 9,15, 7, 7, 8,15,12, 8, 9,15,15,15,15,15,
 13,13,14,15,12,11,12,15,15,15,15,15,15,15,15,15,
 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
 13,13,13,15,15,15,15,15,15,15,15,15,15,15,15,15,
 15,12,13,15,15,12,13,15,15,14,15,15,15,15,15,15,
 15,15,15,15,15,15,13,15,15,15,15,15,15,15,15,15,
};

static static_codebook _huff_book_line_256x7_class1 = {
 1, 256,
 _huff_lengthlist_line_256x7_class1,
 0, 0, 0, 0, 0,
 
# 6981 "oggenc.c" 3 4
((void *)0)
# 6981 "oggenc.c"
    ,
 
# 6982 "oggenc.c" 3 4
((void *)0)
# 6982 "oggenc.c"
    ,
 
# 6983 "oggenc.c" 3 4
((void *)0)
# 6983 "oggenc.c"
    ,
 
# 6984 "oggenc.c" 3 4
((void *)0)
# 6984 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_0sub0[] = {
  4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 6, 5, 6, 6, 6, 6, 5, 6, 6, 7, 6, 7, 6, 7, 6,
  7, 6, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 9, 7, 9, 7,
  9, 7, 9, 8, 9, 8,10, 8,10, 8,10, 7,10, 6,10, 8,
 10, 8,11, 7,10, 7,11, 8,11,11,12,12,11,11,12,11,
 13,11,13,11,13,12,15,12,13,13,14,14,14,14,14,15,
 15,15,16,14,17,19,19,18,18,18,18,18,18,18,18,18,
 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
};

static static_codebook _huff_book_line_512x17_0sub0 = {
 1, 128,
 _huff_lengthlist_line_512x17_0sub0,
 0, 0, 0, 0, 0,
 
# 7003 "oggenc.c" 3 4
((void *)0)
# 7003 "oggenc.c"
    ,
 
# 7004 "oggenc.c" 3 4
((void *)0)
# 7004 "oggenc.c"
    ,
 
# 7005 "oggenc.c" 3 4
((void *)0)
# 7005 "oggenc.c"
    ,
 
# 7006 "oggenc.c" 3 4
((void *)0)
# 7006 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_1sub0[] = {
  2, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 6, 5,
  6, 5, 6, 6, 7, 6, 7, 6, 8, 7, 8, 7, 8, 7, 8, 7,
};

static static_codebook _huff_book_line_512x17_1sub0 = {
 1, 32,
 _huff_lengthlist_line_512x17_1sub0,
 0, 0, 0, 0, 0,
 
# 7019 "oggenc.c" 3 4
((void *)0)
# 7019 "oggenc.c"
    ,
 
# 7020 "oggenc.c" 3 4
((void *)0)
# 7020 "oggenc.c"
    ,
 
# 7021 "oggenc.c" 3 4
((void *)0)
# 7021 "oggenc.c"
    ,
 
# 7022 "oggenc.c" 3 4
((void *)0)
# 7022 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_1sub1[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  4, 3, 5, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 5,
  6, 5, 7, 5, 8, 6, 8, 6, 8, 6, 8, 6, 8, 7, 9, 7,
  9, 7,11, 9,11,11,12,11,14,12,14,16,14,16,13,16,
 14,16,12,15,13,16,14,16,13,14,12,15,13,15,13,13,
 13,15,12,14,14,15,13,15,12,15,15,15,15,15,15,15,
 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
};

static static_codebook _huff_book_line_512x17_1sub1 = {
 1, 128,
 _huff_lengthlist_line_512x17_1sub1,
 0, 0, 0, 0, 0,
 
# 7041 "oggenc.c" 3 4
((void *)0)
# 7041 "oggenc.c"
    ,
 
# 7042 "oggenc.c" 3 4
((void *)0)
# 7042 "oggenc.c"
    ,
 
# 7043 "oggenc.c" 3 4
((void *)0)
# 7043 "oggenc.c"
    ,
 
# 7044 "oggenc.c" 3 4
((void *)0)
# 7044 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_2sub1[] = {
  0, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 5, 4, 5, 3,
  5, 3,
};

static static_codebook _huff_book_line_512x17_2sub1 = {
 1, 18,
 _huff_lengthlist_line_512x17_2sub1,
 0, 0, 0, 0, 0,
 
# 7057 "oggenc.c" 3 4
((void *)0)
# 7057 "oggenc.c"
    ,
 
# 7058 "oggenc.c" 3 4
((void *)0)
# 7058 "oggenc.c"
    ,
 
# 7059 "oggenc.c" 3 4
((void *)0)
# 7059 "oggenc.c"
    ,
 
# 7060 "oggenc.c" 3 4
((void *)0)
# 7060 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_2sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 3, 4, 3, 4, 4, 5, 4, 5, 4, 6, 4, 6, 5,
  6, 5, 7, 5, 7, 6, 8, 6, 8, 6, 8, 7, 8, 7, 9, 7,
  9, 8,
};

static static_codebook _huff_book_line_512x17_2sub2 = {
 1, 50,
 _huff_lengthlist_line_512x17_2sub2,
 0, 0, 0, 0, 0,
 
# 7075 "oggenc.c" 3 4
((void *)0)
# 7075 "oggenc.c"
    ,
 
# 7076 "oggenc.c" 3 4
((void *)0)
# 7076 "oggenc.c"
    ,
 
# 7077 "oggenc.c" 3 4
((void *)0)
# 7077 "oggenc.c"
    ,
 
# 7078 "oggenc.c" 3 4
((void *)0)
# 7078 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_2sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 3, 3, 3, 3, 4, 3, 4, 4, 5, 5, 6, 6, 7, 7,
  7, 8, 8,11, 8, 9, 9, 9,10,11,11,11, 9,10,10,11,
 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
};

static static_codebook _huff_book_line_512x17_2sub3 = {
 1, 128,
 _huff_lengthlist_line_512x17_2sub3,
 0, 0, 0, 0, 0,
 
# 7097 "oggenc.c" 3 4
((void *)0)
# 7097 "oggenc.c"
    ,
 
# 7098 "oggenc.c" 3 4
((void *)0)
# 7098 "oggenc.c"
    ,
 
# 7099 "oggenc.c" 3 4
((void *)0)
# 7099 "oggenc.c"
    ,
 
# 7100 "oggenc.c" 3 4
((void *)0)
# 7100 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_3sub1[] = {
  0, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 5,
  5, 5,
};

static static_codebook _huff_book_line_512x17_3sub1 = {
 1, 18,
 _huff_lengthlist_line_512x17_3sub1,
 0, 0, 0, 0, 0,
 
# 7113 "oggenc.c" 3 4
((void *)0)
# 7113 "oggenc.c"
    ,
 
# 7114 "oggenc.c" 3 4
((void *)0)
# 7114 "oggenc.c"
    ,
 
# 7115 "oggenc.c" 3 4
((void *)0)
# 7115 "oggenc.c"
    ,
 
# 7116 "oggenc.c" 3 4
((void *)0)
# 7116 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_3sub2[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 3, 3, 4, 3, 5, 4, 6, 4, 6, 5, 7, 6, 7,
  6, 8, 6, 8, 7, 9, 8,10, 8,12, 9,13,10,15,10,15,
 11,14,
};

static static_codebook _huff_book_line_512x17_3sub2 = {
 1, 50,
 _huff_lengthlist_line_512x17_3sub2,
 0, 0, 0, 0, 0,
 
# 7131 "oggenc.c" 3 4
((void *)0)
# 7131 "oggenc.c"
    ,
 
# 7132 "oggenc.c" 3 4
((void *)0)
# 7132 "oggenc.c"
    ,
 
# 7133 "oggenc.c" 3 4
((void *)0)
# 7133 "oggenc.c"
    ,
 
# 7134 "oggenc.c" 3 4
((void *)0)
# 7134 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_3sub3[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 8, 4, 8, 4, 8, 4, 8, 5, 8, 5, 8, 6, 8,
  4, 8, 4, 8, 5, 8, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
};

static static_codebook _huff_book_line_512x17_3sub3 = {
 1, 128,
 _huff_lengthlist_line_512x17_3sub3,
 0, 0, 0, 0, 0,
 
# 7153 "oggenc.c" 3 4
((void *)0)
# 7153 "oggenc.c"
    ,
 
# 7154 "oggenc.c" 3 4
((void *)0)
# 7154 "oggenc.c"
    ,
 
# 7155 "oggenc.c" 3 4
((void *)0)
# 7155 "oggenc.c"
    ,
 
# 7156 "oggenc.c" 3 4
((void *)0)
# 7156 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_class1[] = {
  1, 2, 3, 6, 5, 4, 7, 7,
};

static static_codebook _huff_book_line_512x17_class1 = {
 1, 8,
 _huff_lengthlist_line_512x17_class1,
 0, 0, 0, 0, 0,
 
# 7168 "oggenc.c" 3 4
((void *)0)
# 7168 "oggenc.c"
    ,
 
# 7169 "oggenc.c" 3 4
((void *)0)
# 7169 "oggenc.c"
    ,
 
# 7170 "oggenc.c" 3 4
((void *)0)
# 7170 "oggenc.c"
    ,
 
# 7171 "oggenc.c" 3 4
((void *)0)
# 7171 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_class2[] = {
  3, 3, 3,14, 5, 4, 4,11, 8, 6, 6,10,17,12,11,17,
  6, 5, 5,15, 5, 3, 4,11, 8, 5, 5, 8,16, 9,10,14,
 10, 8, 9,17, 8, 6, 6,13,10, 7, 7,10,16,11,13,14,
 17,17,17,17,17,16,16,16,16,15,16,16,16,16,16,16,
};

static static_codebook _huff_book_line_512x17_class2 = {
 1, 64,
 _huff_lengthlist_line_512x17_class2,
 0, 0, 0, 0, 0,
 
# 7186 "oggenc.c" 3 4
((void *)0)
# 7186 "oggenc.c"
    ,
 
# 7187 "oggenc.c" 3 4
((void *)0)
# 7187 "oggenc.c"
    ,
 
# 7188 "oggenc.c" 3 4
((void *)0)
# 7188 "oggenc.c"
    ,
 
# 7189 "oggenc.c" 3 4
((void *)0)
# 7189 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist_line_512x17_class3[] = {
  2, 4, 6,17, 4, 5, 7,17, 8, 7,10,17,17,17,17,17,
  3, 4, 6,15, 3, 3, 6,15, 7, 6, 9,17,17,17,17,17,
  6, 8,10,17, 6, 6, 8,16, 9, 8,10,17,17,15,16,17,
 17,17,17,17,12,15,15,16,12,15,15,16,16,16,16,16,
};

static static_codebook _huff_book_line_512x17_class3 = {
 1, 64,
 _huff_lengthlist_line_512x17_class3,
 0, 0, 0, 0, 0,
 
# 7204 "oggenc.c" 3 4
((void *)0)
# 7204 "oggenc.c"
    ,
 
# 7205 "oggenc.c" 3 4
((void *)0)
# 7205 "oggenc.c"
    ,
 
# 7206 "oggenc.c" 3 4
((void *)0)
# 7206 "oggenc.c"
    ,
 
# 7207 "oggenc.c" 3 4
((void *)0)
# 7207 "oggenc.c"
    ,
 0
};

static static_codebook *_floor_128x4_books[]={
  &_huff_book_line_128x4_class0,
  &_huff_book_line_128x4_0sub0,
  &_huff_book_line_128x4_0sub1,
  &_huff_book_line_128x4_0sub2,
  &_huff_book_line_128x4_0sub3,
};
static static_codebook *_floor_256x4_books[]={
  &_huff_book_line_256x4_class0,
  &_huff_book_line_256x4_0sub0,
  &_huff_book_line_256x4_0sub1,
  &_huff_book_line_256x4_0sub2,
  &_huff_book_line_256x4_0sub3,
};
static static_codebook *_floor_128x7_books[]={
  &_huff_book_line_128x7_class0,
  &_huff_book_line_128x7_class1,

  &_huff_book_line_128x7_0sub1,
  &_huff_book_line_128x7_0sub2,
  &_huff_book_line_128x7_0sub3,
  &_huff_book_line_128x7_1sub1,
  &_huff_book_line_128x7_1sub2,
  &_huff_book_line_128x7_1sub3,
};
static static_codebook *_floor_256x7_books[]={
  &_huff_book_line_256x7_class0,
  &_huff_book_line_256x7_class1,

  &_huff_book_line_256x7_0sub1,
  &_huff_book_line_256x7_0sub2,
  &_huff_book_line_256x7_0sub3,
  &_huff_book_line_256x7_1sub1,
  &_huff_book_line_256x7_1sub2,
  &_huff_book_line_256x7_1sub3,
};
static static_codebook *_floor_128x11_books[]={
  &_huff_book_line_128x11_class1,
  &_huff_book_line_128x11_class2,
  &_huff_book_line_128x11_class3,

  &_huff_book_line_128x11_0sub0,
  &_huff_book_line_128x11_1sub0,
  &_huff_book_line_128x11_1sub1,
  &_huff_book_line_128x11_2sub1,
  &_huff_book_line_128x11_2sub2,
  &_huff_book_line_128x11_2sub3,
  &_huff_book_line_128x11_3sub1,
  &_huff_book_line_128x11_3sub2,
  &_huff_book_line_128x11_3sub3,
};
static static_codebook *_floor_128x17_books[]={
  &_huff_book_line_128x17_class1,
  &_huff_book_line_128x17_class2,
  &_huff_book_line_128x17_class3,

  &_huff_book_line_128x17_0sub0,
  &_huff_book_line_128x17_1sub0,
  &_huff_book_line_128x17_1sub1,
  &_huff_book_line_128x17_2sub1,
  &_huff_book_line_128x17_2sub2,
  &_huff_book_line_128x17_2sub3,
  &_huff_book_line_128x17_3sub1,
  &_huff_book_line_128x17_3sub2,
  &_huff_book_line_128x17_3sub3,
};
static static_codebook *_floor_512x17_books[]={
  &_huff_book_line_512x17_class1,
  &_huff_book_line_512x17_class2,
  &_huff_book_line_512x17_class3,

  &_huff_book_line_512x17_0sub0,
  &_huff_book_line_512x17_1sub0,
  &_huff_book_line_512x17_1sub1,
  &_huff_book_line_512x17_2sub1,
  &_huff_book_line_512x17_2sub2,
  &_huff_book_line_512x17_2sub3,
  &_huff_book_line_512x17_3sub1,
  &_huff_book_line_512x17_3sub2,
  &_huff_book_line_512x17_3sub3,
};
static static_codebook *_floor_1024x27_books[]={
  &_huff_book_line_1024x27_class1,
  &_huff_book_line_1024x27_class2,
  &_huff_book_line_1024x27_class3,
  &_huff_book_line_1024x27_class4,

  &_huff_book_line_1024x27_0sub0,
  &_huff_book_line_1024x27_1sub0,
  &_huff_book_line_1024x27_1sub1,
  &_huff_book_line_1024x27_2sub0,
  &_huff_book_line_1024x27_2sub1,
  &_huff_book_line_1024x27_3sub1,
  &_huff_book_line_1024x27_3sub2,
  &_huff_book_line_1024x27_3sub3,
  &_huff_book_line_1024x27_4sub1,
  &_huff_book_line_1024x27_4sub2,
  &_huff_book_line_1024x27_4sub3,
};

static static_codebook **_floor_books[10]={
  _floor_128x4_books,
  _floor_256x4_books,
  _floor_128x7_books,
  _floor_256x7_books,
  _floor_128x11_books,
  _floor_128x17_books,
  _floor_128x17_books,
  _floor_1024x27_books,
  _floor_1024x27_books,
  _floor_512x17_books,
};

static vorbis_info_floor1 _floor[10]={

  {
    1,{0},{4},{2},{0},
    {{1,2,3,4}},
    4,{0,128, 33,8,16,70},

    60,30,500, 1.,18., -1
  },

  {
    1,{0},{4},{2},{0},
    {{1,2,3,4}},
    4,{0,256, 66,16,32,140},

    60,30,500, 1.,18., -1
  },

  {
    2,{0,1},{3,4},{2,2},{0,1},
    {{-1,2,3,4},{-1,5,6,7}},
    4,{0,128, 14,4,58, 2,8,28,90},

    60,30,500, 1.,18., -1
  },

  {
    2,{0,1},{3,4},{2,2},{0,1},
    {{-1,2,3,4},{-1,5,6,7}},
    4,{0,256, 28,8,116, 4,16,56,180},

    60,30,500, 1.,18., -1
  },


  {
    4,{0,1,2,3},{2,3,3,3},{0,1,2,2},{-1,0,1,2},
    {{3},{4,5},{-1,6,7,8},{-1,9,10,11}},

    2,{0,128, 8,33, 4,16,70, 2,6,12, 23,46,90},

     60,30,500, 1,18., -1
  },


  {
    6,{0,1,1,2,3,3},{2,3,3,3},{0,1,2,2},{-1,0,1,2},
    {{3},{4,5},{-1,6,7,8},{-1,9,10,11}},
    2,{0,128, 12,46, 4,8,16, 23,33,70, 2,6,10, 14,19,28, 39,58,90},

    60,30,500, 1,18., -1
  },


  {
    6,{0,1,1,2,3,3},{2,3,3,3},{0,1,2,2},{-1,0,1,2},
    {{3},{4,5},{-1,6,7,8},{-1,9,10,11}},
    2,{0,1024, 93,372, 33,65,130, 186,260,556,
       14,46,79, 111,158,220, 312,464,720},

    60,30,500, 1,18., -1
  },

  {
    8,{0,1,2,2,3,3,4,4},{3,4,3,4,3},{0,1,1,2,2},{-1,0,1,2,3},
    {{4},{5,6},{7,8},{-1,9,10,11},{-1,12,13,14}},
    2,{0,1024, 93,23,372, 6,46,186,750, 14,33,65, 130,260,556,
       3,10,18,28, 39,55,79,111, 158,220,312, 464,650,850},

    60,30,500, 3,18., -1
  },

  {
    8,{0,1,2,2,3,3,4,4},{3,4,3,4,3},{0,1,1,2,2},{-1,0,1,2,3},
    {{4},{5,6},{7,8},{-1,9,10,11},{-1,12,13,14}},
    2,{0,2048, 186,46,744, 12,92,372,1500, 28,66,130, 260,520,1112,
       6,20,36,56, 78,110,158,222, 316,440,624, 928,1300,1700},

    60,30,500, 3,18., -1
  },

  {
    6,{0,1,1,2,3,3},{2,3,3,3},{0,1,2,2},{-1,0,1,2},
    {{3},{4,5},{-1,6,7,8},{-1,9,10,11}},
    2,{0,512, 46,186, 16,33,65, 93,130,278,
       7,23,39, 55,79,110, 156,232,360},

    60,30,500, 1,18., -1
  },

};
# 7450 "oggenc.c"
static long _vq_quantlist__16c0_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c0_s_p1_0[] = {
  1, 4, 4, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9,10, 0, 0, 0,
  0, 0, 0, 7, 9,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 8, 0, 0, 0, 0,
  0, 0, 8,10,10, 0, 0, 0, 0, 0, 0, 8,10,10, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,10,10, 0, 0, 0,
  0, 0, 0, 9, 9,12, 0, 0, 0, 0, 0, 0,10,12,11, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,10,10, 0, 0,
  0, 0, 0, 0, 9,12,10, 0, 0, 0, 0, 0, 0,10,11,12,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 8,10,10, 0, 0,
  0, 0, 0, 0, 8,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7,10,10, 0, 0, 0, 0, 0, 0,10,12,11, 0,
  0, 0, 0, 0, 0, 9,10,12, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7,10,10, 0, 0, 0, 0, 0, 0,10,11,12,
  0, 0, 0, 0, 0, 0, 9,12, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c0_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16c0_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p1_0 = {
 _vq_quantthresh__16c0_s_p1_0,
 _vq_quantmap__16c0_s_p1_0,
 3,
 3
};

static static_codebook _16c0_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__16c0_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16c0_s_p1_0,
 
# 7890 "oggenc.c" 3 4
((void *)0)
# 7890 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p1_0,
 
# 7892 "oggenc.c" 3 4
((void *)0)
# 7892 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c0_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c0_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c0_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p2_0 = {
 _vq_quantthresh__16c0_s_p2_0,
 _vq_quantmap__16c0_s_p2_0,
 5,
 5
};

static static_codebook _16c0_s_p2_0 = {
 4, 625,
 _vq_lengthlist__16c0_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c0_s_p2_0,
 
# 7967 "oggenc.c" 3 4
((void *)0)
# 7967 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p2_0,
 
# 7969 "oggenc.c" 3 4
((void *)0)
# 7969 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c0_s_p3_0[] = {
  1, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 6, 7, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 9, 9,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c0_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c0_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p3_0 = {
 _vq_quantthresh__16c0_s_p3_0,
 _vq_quantmap__16c0_s_p3_0,
 5,
 5
};

static static_codebook _16c0_s_p3_0 = {
 4, 625,
 _vq_lengthlist__16c0_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c0_s_p3_0,
 
# 8044 "oggenc.c" 3 4
((void *)0)
# 8044 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p3_0,
 
# 8046 "oggenc.c" 3 4
((void *)0)
# 8046 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16c0_s_p4_0[] = {
  1, 3, 2, 7, 8, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c0_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16c0_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p4_0 = {
 _vq_quantthresh__16c0_s_p4_0,
 _vq_quantmap__16c0_s_p4_0,
 9,
 9
};

static static_codebook _16c0_s_p4_0 = {
 2, 81,
 _vq_lengthlist__16c0_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16c0_s_p4_0,
 
# 8092 "oggenc.c" 3 4
((void *)0)
# 8092 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p4_0,
 
# 8094 "oggenc.c" 3 4
((void *)0)
# 8094 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16c0_s_p5_0[] = {
  1, 3, 3, 6, 6, 6, 6, 8, 8, 0, 0, 0, 7, 7, 7, 7,
  8, 8, 0, 0, 0, 7, 7, 7, 7, 8, 8, 0, 0, 0, 7, 7,
  8, 8, 9, 9, 0, 0, 0, 7, 7, 8, 8, 9, 9, 0, 0, 0,
  8, 9, 8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0,
  0, 0,10,10, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__16c0_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16c0_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p5_0 = {
 _vq_quantthresh__16c0_s_p5_0,
 _vq_quantmap__16c0_s_p5_0,
 9,
 9
};

static static_codebook _16c0_s_p5_0 = {
 2, 81,
 _vq_lengthlist__16c0_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16c0_s_p5_0,
 
# 8140 "oggenc.c" 3 4
((void *)0)
# 8140 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p5_0,
 
# 8142 "oggenc.c" 3 4
((void *)0)
# 8142 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16c0_s_p6_0[] = {
  1, 3, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,11,
 11,11, 0, 0, 0, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,
 11,11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,10,
 11,11,12,12,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,
 10,11,11,12,12,12,13, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,10,10,10,
 10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,
 10,10,11,11,12,12,13,13,13,13, 0, 0, 0, 0, 0, 9,
  9,10,10,11,11,12,12,13,13,13,14, 0, 0, 0, 0, 0,
 10,10,10,11,11,11,12,12,13,13,13,14, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,12,12,13,13,14,14, 0, 0, 0,
  0, 0, 0, 0,11,11,12,12,13,13,13,13,14,14, 0, 0,
  0, 0, 0, 0, 0,11,11,12,12,12,13,13,14,15,14, 0,
  0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,14,14,15,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,13,13,14,13,14,
 14,
};

static float _vq_quantthresh__16c0_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__16c0_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p6_0 = {
 _vq_quantthresh__16c0_s_p6_0,
 _vq_quantmap__16c0_s_p6_0,
 17,
 17
};

static static_codebook _16c0_s_p6_0 = {
 2, 289,
 _vq_lengthlist__16c0_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__16c0_s_p6_0,
 
# 8211 "oggenc.c" 3 4
((void *)0)
# 8211 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p6_0,
 
# 8213 "oggenc.c" 3 4
((void *)0)
# 8213 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c0_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,11,10,10,11,
 11,10, 4, 7, 7,10,10,10,11,10,10, 6,10,10,11,11,
 11,11,11,10, 6, 9, 9,11,12,12,11, 9, 9, 6, 9,10,
 11,12,12,11, 9,10, 7,11,11,11,11,11,12,13,12, 6,
  9,10,11,10,10,12,13,13, 6,10, 9,11,10,10,11,12,
 13,
};

static float _vq_quantthresh__16c0_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__16c0_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p7_0 = {
 _vq_quantthresh__16c0_s_p7_0,
 _vq_quantmap__16c0_s_p7_0,
 3,
 3
};

static static_codebook _16c0_s_p7_0 = {
 4, 81,
 _vq_lengthlist__16c0_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__16c0_s_p7_0,
 
# 8252 "oggenc.c" 3 4
((void *)0)
# 8252 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p7_0,
 
# 8254 "oggenc.c" 3 4
((void *)0)
# 8254 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16c0_s_p7_1[] = {
  1, 3, 4, 6, 6, 7, 7, 8, 8, 8, 8,10,10,10, 7, 7,
  8, 8, 8, 9, 9, 9,10,10,10, 6, 7, 8, 8, 8, 8, 9,
  8,10,10,10, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10, 7,
  7, 8, 8, 9, 9, 8, 9,10,10,10, 8, 8, 9, 9, 9, 9,
  9, 9,11,11,11, 8, 8, 9, 9, 9, 9, 9,10,10,11,11,
  9, 9, 9, 9, 9, 9, 9,10,11,11,11,10,11, 9, 9, 9,
  9,10, 9,11,11,11,10,11,10,10, 9, 9,10,10,11,11,
 11,11,11, 9, 9, 9, 9,10,10,
};

static float _vq_quantthresh__16c0_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16c0_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p7_1 = {
 _vq_quantthresh__16c0_s_p7_1,
 _vq_quantmap__16c0_s_p7_1,
 11,
 11
};

static static_codebook _16c0_s_p7_1 = {
 2, 121,
 _vq_lengthlist__16c0_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16c0_s_p7_1,
 
# 8305 "oggenc.c" 3 4
((void *)0)
# 8305 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p7_1,
 
# 8307 "oggenc.c" 3 4
((void *)0)
# 8307 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c0_s_p8_0[] = {
  1, 4, 4, 7, 7, 7, 7, 7, 6, 8, 8,10,10, 6, 5, 6,
  8, 8, 8, 8, 8, 8, 8, 9,10,10, 7, 6, 6, 8, 8, 8,
  8, 8, 8, 8, 8,10,10, 0, 8, 8, 8, 8, 9, 8, 9, 9,
  9,10,10,10, 0, 9, 8, 8, 8, 9, 9, 8, 8, 9, 9,10,
 10, 0,12,11, 8, 8, 9, 9, 9, 9,10,10,11,10, 0,12,
 13, 8, 8, 9,10, 9, 9,11,11,11,12, 0, 0, 0, 8, 8,
  8, 8,10, 9,12,13,12,14, 0, 0, 0, 8, 8, 8, 9,10,
 10,12,12,13,14, 0, 0, 0,13,13, 9, 9,11,11, 0, 0,
 14, 0, 0, 0, 0,14,14,10,10,12,11,12,14,14,14, 0,
  0, 0, 0, 0,11,11,13,13,14,13,14,14, 0, 0, 0, 0,
  0,12,13,13,12,13,14,14,14,
};

static float _vq_quantthresh__16c0_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__16c0_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p8_0 = {
 _vq_quantthresh__16c0_s_p8_0,
 _vq_quantmap__16c0_s_p8_0,
 13,
 13
};

static static_codebook _16c0_s_p8_0 = {
 2, 169,
 _vq_lengthlist__16c0_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__16c0_s_p8_0,
 
# 8363 "oggenc.c" 3 4
((void *)0)
# 8363 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p8_0,
 
# 8365 "oggenc.c" 3 4
((void *)0)
# 8365 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c0_s_p8_1[] = {
  1, 4, 3, 5, 5, 7, 7, 7, 6, 6, 7, 7, 7, 5, 5, 7,
  7, 7, 6, 6, 7, 7, 7, 6, 6,
};

static float _vq_quantthresh__16c0_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c0_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p8_1 = {
 _vq_quantthresh__16c0_s_p8_1,
 _vq_quantmap__16c0_s_p8_1,
 5,
 5
};

static static_codebook _16c0_s_p8_1 = {
 2, 25,
 _vq_lengthlist__16c0_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c0_s_p8_1,
 
# 8402 "oggenc.c" 3 4
((void *)0)
# 8402 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p8_1,
 
# 8404 "oggenc.c" 3 4
((void *)0)
# 8404 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p9_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c0_s_p9_0[] = {
  1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__16c0_s_p9_0[] = {
 -157.5, 157.5,
};

static long _vq_quantmap__16c0_s_p9_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p9_0 = {
 _vq_quantthresh__16c0_s_p9_0,
 _vq_quantmap__16c0_s_p9_0,
 3,
 3
};

static static_codebook _16c0_s_p9_0 = {
 4, 81,
 _vq_lengthlist__16c0_s_p9_0,
 1, -518803456, 1628680192, 2, 0,
 _vq_quantlist__16c0_s_p9_0,
 
# 8443 "oggenc.c" 3 4
((void *)0)
# 8443 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p9_0,
 
# 8445 "oggenc.c" 3 4
((void *)0)
# 8445 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16c0_s_p9_1[] = {
  1, 5, 5, 5, 5, 9,11,11,10,10,10,10,10,10,10, 7,
  6, 6, 6, 6,10,10,10,10,10,10,10,10,10,10, 7, 6,
  6, 6, 6,10, 9,10,10,10,10,10,10,10,10,10, 7, 7,
  8, 9,10,10,10,10,10,10,10,10,10,10,10, 8, 7,10,
 10,10, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__16c0_s_p9_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__16c0_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p9_1 = {
 _vq_quantthresh__16c0_s_p9_1,
 _vq_quantmap__16c0_s_p9_1,
 15,
 15
};

static static_codebook _16c0_s_p9_1 = {
 2, 225,
 _vq_lengthlist__16c0_s_p9_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__16c0_s_p9_1,
 
# 8507 "oggenc.c" 3 4
((void *)0)
# 8507 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p9_1,
 
# 8509 "oggenc.c" 3 4
((void *)0)
# 8509 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c0_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__16c0_s_p9_2[] = {
  1, 5, 5, 7, 8, 8, 7, 9, 9, 9,12,12,11,12,12,10,
 10,11,12,12,12,11,12,12, 8, 9, 8, 7, 9,10,10,11,
 11,10,11,12,10,12,10,12,12,12,11,12,11, 9, 8, 8,
  9,10, 9, 8, 9,10,12,12,11,11,12,11,10,11,12,11,
 12,12, 8, 9, 9, 9,10,11,12,11,12,11,11,11,11,12,
 12,11,11,12,12,11,11, 9, 9, 8, 9, 9,11, 9, 9,10,
  9,11,11,11,11,12,11,11,10,12,12,12, 9,12,11,10,
 11,11,11,11,12,12,12,11,11,11,12,10,12,12,12,10,
 10, 9,10, 9,10,10, 9, 9, 9,10,10,12,10,11,11, 9,
 11,11,10,11,11,11,10,10,10, 9, 9,10,10, 9, 9,10,
 11,11,10,11,10,11,10,11,11,10,11,11,11,10, 9,10,
 10, 9,10, 9, 9,11, 9, 9,11,10,10,11,11,10,10,11,
 10,11, 8, 9,11,11,10, 9,10,11,11,10,11,11,10,10,
 10,11,10, 9,10,10,11, 9,10,10, 9,11,10,10,10,10,
 11,10,11,11, 9,11,10,11,10,10,11,11,10,10,10, 9,
 10,10,11,11,11, 9,10,10,10,10,10,11,10,10,10, 9,
 10,10,11,10,10,10,10,10, 9,10,11,10,10,10,10,11,
 11,11,10,10,10,10,10,11,10,11,10,11,10,10,10, 9,
 11,11,10,10,10,11,11,10,10,10,10,10,10,10,10,11,
 11, 9,10,10,10,11,10,11,10,10,10,11, 9,10,11,10,
 11,10,10, 9,10,10,10,11,10,11,10,10,10,10,10,11,
 11,10,11,11,10,10,11,11,10, 9, 9,10,10,10,10,10,
  9,11, 9,10,10,10,11,11,10,10,10,10,11,11,11,10,
  9, 9,10,10,11,10,10,10,10,10,11,11,11,10,10,10,
 11,11,11, 9,10,10,10,10, 9,10, 9,10,11,10,11,10,
 10,11,11,10,11,11,11,11,11,10,11,10,10,10, 9,11,
 11,10,11,11,11,11,11,11,11,11,11,10,11,10,10,10,
 10,11,10,10,11, 9,10,10,10,
};

static float _vq_quantthresh__16c0_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__16c0_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__16c0_s_p9_2 = {
 _vq_quantthresh__16c0_s_p9_2,
 _vq_quantmap__16c0_s_p9_2,
 21,
 21
};

static static_codebook _16c0_s_p9_2 = {
 2, 441,
 _vq_lengthlist__16c0_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__16c0_s_p9_2,
 
# 8592 "oggenc.c" 3 4
((void *)0)
# 8592 "oggenc.c"
    ,
 &_vq_auxt__16c0_s_p9_2,
 
# 8594 "oggenc.c" 3 4
((void *)0)
# 8594 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16c0_s_single[] = {
  3, 4,19, 7, 9, 7, 8,11, 9,12, 4, 1,19, 6, 7, 7,
  8,10,11,13,18,18,18,18,18,18,18,18,18,18, 8, 6,
 18, 8, 9, 9,11,12,14,18, 9, 6,18, 9, 7, 8, 9,11,
 12,18, 7, 6,18, 8, 7, 7, 7, 9,11,17, 8, 8,18, 9,
  7, 6, 6, 8,11,17,10,10,18,12, 9, 8, 7, 9,12,18,
 13,15,18,15,13,11,10,11,15,18,14,18,18,18,18,18,
 16,16,18,18,
};

static static_codebook _huff_book__16c0_s_single = {
 2, 100,
 _huff_lengthlist__16c0_s_single,
 0, 0, 0, 0, 0,
 
# 8612 "oggenc.c" 3 4
((void *)0)
# 8612 "oggenc.c"
    ,
 
# 8613 "oggenc.c" 3 4
((void *)0)
# 8613 "oggenc.c"
    ,
 
# 8614 "oggenc.c" 3 4
((void *)0)
# 8614 "oggenc.c"
    ,
 
# 8615 "oggenc.c" 3 4
((void *)0)
# 8615 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16c1_s_long[] = {
  2, 5,20, 7,10, 7, 8,10,11,11, 4, 2,20, 5, 8, 6,
  7, 9,10,10,20,20,20,20,19,19,19,19,19,19, 7, 5,
 19, 6,10, 7, 9,11,13,17,11, 8,19,10, 7, 7, 8,10,
 11,15, 7, 5,19, 7, 7, 5, 6, 9,11,16, 7, 6,19, 8,
  7, 6, 6, 7, 9,13, 9, 9,19,11, 9, 8, 6, 7, 8,13,
 12,14,19,16,13,10, 9, 8, 9,13,14,17,19,18,18,17,
 12,11,11,13,
};

static static_codebook _huff_book__16c1_s_long = {
 2, 100,
 _huff_lengthlist__16c1_s_long,
 0, 0, 0, 0, 0,
 
# 8633 "oggenc.c" 3 4
((void *)0)
# 8633 "oggenc.c"
    ,
 
# 8634 "oggenc.c" 3 4
((void *)0)
# 8634 "oggenc.c"
    ,
 
# 8635 "oggenc.c" 3 4
((void *)0)
# 8635 "oggenc.c"
    ,
 
# 8636 "oggenc.c" 3 4
((void *)0)
# 8636 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c1_s_p1_0[] = {
  1, 5, 5, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 7, 0, 0, 0, 0,
  0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 9, 9,11, 0, 0, 0, 0, 0, 0, 9,11,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8,11, 9, 0, 0, 0, 0, 0, 0, 9,10,11,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,11,10, 0,
  0, 0, 0, 0, 0, 8, 9,11, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,11,
  0, 0, 0, 0, 0, 0, 9,11, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c1_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16c1_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p1_0 = {
 _vq_quantthresh__16c1_s_p1_0,
 _vq_quantmap__16c1_s_p1_0,
 3,
 3
};

static static_codebook _16c1_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__16c1_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16c1_s_p1_0,
 
# 9080 "oggenc.c" 3 4
((void *)0)
# 9080 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p1_0,
 
# 9082 "oggenc.c" 3 4
((void *)0)
# 9082 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c1_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c1_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c1_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p2_0 = {
 _vq_quantthresh__16c1_s_p2_0,
 _vq_quantmap__16c1_s_p2_0,
 5,
 5
};

static static_codebook _16c1_s_p2_0 = {
 4, 625,
 _vq_lengthlist__16c1_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c1_s_p2_0,
 
# 9157 "oggenc.c" 3 4
((void *)0)
# 9157 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p2_0,
 
# 9159 "oggenc.c" 3 4
((void *)0)
# 9159 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c1_s_p3_0[] = {
  1, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 7, 7, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 5, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 9, 9,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 7, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c1_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c1_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p3_0 = {
 _vq_quantthresh__16c1_s_p3_0,
 _vq_quantmap__16c1_s_p3_0,
 5,
 5
};

static static_codebook _16c1_s_p3_0 = {
 4, 625,
 _vq_lengthlist__16c1_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c1_s_p3_0,
 
# 9234 "oggenc.c" 3 4
((void *)0)
# 9234 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p3_0,
 
# 9236 "oggenc.c" 3 4
((void *)0)
# 9236 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16c1_s_p4_0[] = {
  1, 2, 3, 7, 7, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c1_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16c1_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p4_0 = {
 _vq_quantthresh__16c1_s_p4_0,
 _vq_quantmap__16c1_s_p4_0,
 9,
 9
};

static static_codebook _16c1_s_p4_0 = {
 2, 81,
 _vq_lengthlist__16c1_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16c1_s_p4_0,
 
# 9282 "oggenc.c" 3 4
((void *)0)
# 9282 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p4_0,
 
# 9284 "oggenc.c" 3 4
((void *)0)
# 9284 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16c1_s_p5_0[] = {
  1, 3, 3, 5, 5, 6, 6, 8, 8, 0, 0, 0, 7, 7, 7, 7,
  9, 9, 0, 0, 0, 7, 7, 7, 7, 9, 9, 0, 0, 0, 8, 8,
  8, 8, 9, 9, 0, 0, 0, 8, 8, 8, 8,10,10, 0, 0, 0,
  9, 9, 8, 8,10,10, 0, 0, 0, 9, 9, 8, 8,10,10, 0,
  0, 0,10,10, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__16c1_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16c1_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p5_0 = {
 _vq_quantthresh__16c1_s_p5_0,
 _vq_quantmap__16c1_s_p5_0,
 9,
 9
};

static static_codebook _16c1_s_p5_0 = {
 2, 81,
 _vq_lengthlist__16c1_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16c1_s_p5_0,
 
# 9330 "oggenc.c" 3 4
((void *)0)
# 9330 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p5_0,
 
# 9332 "oggenc.c" 3 4
((void *)0)
# 9332 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16c1_s_p6_0[] = {
  1, 3, 3, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,11,12,
 12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 0, 0, 0, 8, 8, 8, 9,10, 9,10,10,10,10,
 11,11,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,10,11,
 11,11,12,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,10,
 11,11,12,12,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,
 10,11,11,12,12,13,13, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,
 10,10,11,11,12,12,12,12,13,13, 0, 0, 0, 0, 0, 9,
  9,10,10,11,11,12,12,12,12,13,13, 0, 0, 0, 0, 0,
 10,10,11,10,11,11,12,12,13,13,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,12,12,13,13,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,12,12,12,12,13,13,14,14, 0, 0,
  0, 0, 0, 0, 0,11,11,12,12,12,12,13,13,14,14, 0,
  0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,13,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,13,13,13,13,14,
 14,
};

static float _vq_quantthresh__16c1_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__16c1_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p6_0 = {
 _vq_quantthresh__16c1_s_p6_0,
 _vq_quantmap__16c1_s_p6_0,
 17,
 17
};

static static_codebook _16c1_s_p6_0 = {
 2, 289,
 _vq_lengthlist__16c1_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__16c1_s_p6_0,
 
# 9401 "oggenc.c" 3 4
((void *)0)
# 9401 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p6_0,
 
# 9403 "oggenc.c" 3 4
((void *)0)
# 9403 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c1_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9,10,10,
 10, 9, 4, 7, 7,10,10,10,11,10,10, 6,10,10,11,11,
 11,11,10,10, 6,10, 9,11,11,11,11,10,10, 6,10,10,
 11,11,11,11,10,10, 7,11,11,11,11,11,12,12,11, 6,
 10,10,11,10,10,11,11,11, 6,10,10,10,11,10,11,11,
 11,
};

static float _vq_quantthresh__16c1_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__16c1_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p7_0 = {
 _vq_quantthresh__16c1_s_p7_0,
 _vq_quantmap__16c1_s_p7_0,
 3,
 3
};

static static_codebook _16c1_s_p7_0 = {
 4, 81,
 _vq_lengthlist__16c1_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__16c1_s_p7_0,
 
# 9442 "oggenc.c" 3 4
((void *)0)
# 9442 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p7_0,
 
# 9444 "oggenc.c" 3 4
((void *)0)
# 9444 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16c1_s_p7_1[] = {
  2, 3, 3, 5, 6, 7, 7, 7, 7, 8, 8,10,10,10, 6, 6,
  7, 7, 8, 8, 8, 8,10,10,10, 6, 6, 7, 7, 8, 8, 8,
  8,10,10,10, 7, 7, 7, 7, 8, 8, 8, 8,10,10,10, 7,
  7, 7, 7, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 9, 9,10,10,10,10,10, 8, 8, 8,
  8, 9, 9,10,10,10,10,10, 9, 9, 8, 8, 9, 9,10,10,
 10,10,10, 8, 8, 8, 8, 9, 9,
};

static float _vq_quantthresh__16c1_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16c1_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p7_1 = {
 _vq_quantthresh__16c1_s_p7_1,
 _vq_quantmap__16c1_s_p7_1,
 11,
 11
};

static static_codebook _16c1_s_p7_1 = {
 2, 121,
 _vq_lengthlist__16c1_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16c1_s_p7_1,
 
# 9495 "oggenc.c" 3 4
((void *)0)
# 9495 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p7_1,
 
# 9497 "oggenc.c" 3 4
((void *)0)
# 9497 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c1_s_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 6, 5, 5,
  7, 8, 8, 9, 8, 8, 9, 9,10,11, 6, 5, 5, 8, 8, 9,
  9, 8, 8, 9,10,10,11, 0, 8, 8, 8, 9, 9, 9, 9, 9,
 10,10,11,11, 0, 9, 9, 9, 8, 9, 9, 9, 9,10,10,11,
 11, 0,13,13, 9, 9,10,10,10,10,11,11,12,12, 0,14,
 13, 9, 9,10,10,10,10,11,11,12,12, 0, 0, 0,10,10,
  9, 9,11,11,12,12,13,12, 0, 0, 0,10,10, 9, 9,10,
 10,12,12,13,13, 0, 0, 0,13,14,11,10,11,11,12,12,
 13,14, 0, 0, 0,14,14,10,10,11,11,12,12,13,13, 0,
  0, 0, 0, 0,12,12,12,12,13,13,14,15, 0, 0, 0, 0,
  0,12,12,12,12,13,13,14,15,
};

static float _vq_quantthresh__16c1_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__16c1_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p8_0 = {
 _vq_quantthresh__16c1_s_p8_0,
 _vq_quantmap__16c1_s_p8_0,
 13,
 13
};

static static_codebook _16c1_s_p8_0 = {
 2, 169,
 _vq_lengthlist__16c1_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__16c1_s_p8_0,
 
# 9553 "oggenc.c" 3 4
((void *)0)
# 9553 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p8_0,
 
# 9555 "oggenc.c" 3 4
((void *)0)
# 9555 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c1_s_p8_1[] = {
  2, 3, 3, 5, 5, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 6,
  6, 6, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__16c1_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c1_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p8_1 = {
 _vq_quantthresh__16c1_s_p8_1,
 _vq_quantmap__16c1_s_p8_1,
 5,
 5
};

static static_codebook _16c1_s_p8_1 = {
 2, 25,
 _vq_lengthlist__16c1_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c1_s_p8_1,
 
# 9592 "oggenc.c" 3 4
((void *)0)
# 9592 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p8_1,
 
# 9594 "oggenc.c" 3 4
((void *)0)
# 9594 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c1_s_p9_0[] = {
  1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__16c1_s_p9_0[] = {
 -1732.5, -1417.5, -1102.5, -787.5, -472.5, -157.5, 157.5, 472.5,
 787.5, 1102.5, 1417.5, 1732.5,
};

static long _vq_quantmap__16c1_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p9_0 = {
 _vq_quantthresh__16c1_s_p9_0,
 _vq_quantmap__16c1_s_p9_0,
 13,
 13
};

static static_codebook _16c1_s_p9_0 = {
 2, 169,
 _vq_lengthlist__16c1_s_p9_0,
 1, -513964032, 1628680192, 4, 0,
 _vq_quantlist__16c1_s_p9_0,
 
# 9650 "oggenc.c" 3 4
((void *)0)
# 9650 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p9_0,
 
# 9652 "oggenc.c" 3 4
((void *)0)
# 9652 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16c1_s_p9_1[] = {
  1, 4, 4, 4, 4, 8, 8,12,13,14,14,14,14,14,14, 6,
  6, 6, 6, 6,10, 9,14,14,14,14,14,14,14,14, 7, 6,
  5, 6, 6,10, 9,12,13,13,13,13,13,13,13,13, 7, 7,
  9, 9,11,11,12,13,13,13,13,13,13,13,13, 7, 7, 8,
  8,11,12,13,13,13,13,13,13,13,13,13,12,12,10,10,
 13,12,13,13,13,13,13,13,13,13,13,12,12,10,10,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,12,
 13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,
 13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
 13,
};

static float _vq_quantthresh__16c1_s_p9_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__16c1_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p9_1 = {
 _vq_quantthresh__16c1_s_p9_1,
 _vq_quantmap__16c1_s_p9_1,
 15,
 15
};

static static_codebook _16c1_s_p9_1 = {
 2, 225,
 _vq_lengthlist__16c1_s_p9_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__16c1_s_p9_1,
 
# 9714 "oggenc.c" 3 4
((void *)0)
# 9714 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p9_1,
 
# 9716 "oggenc.c" 3 4
((void *)0)
# 9716 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c1_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__16c1_s_p9_2[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 7, 8, 8, 9, 9, 9, 9,10,
 10,10, 9,10,10,11,12,12, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,10,10,10,11,11,10,12,11,11,13,11, 7, 7, 8,
  8, 8, 8, 9, 9, 9,10,10,10,10, 9,10,10,11,11,12,
 11,11, 8, 8, 8, 8, 9, 9,10,10,10,10,11,11,11,11,
 11,11,11,12,11,12,12, 8, 8, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,11,11,11,11,11,11,12,11, 9, 9, 9, 9,
 10,10,10,10,11,10,11,11,11,11,11,11,12,12,12,12,
 11, 9, 9, 9, 9,10,10,10,10,11,11,11,11,11,11,11,
 11,11,12,12,12,13, 9,10,10, 9,11,10,10,10,10,11,
 11,11,11,11,10,11,12,11,12,12,11,12,11,10, 9,10,
 10,11,10,11,11,11,11,11,11,11,11,11,12,12,11,12,
 12,12,10,10,10,11,10,11,11,11,11,11,11,11,11,11,
 11,11,12,13,12,12,11, 9,10,10,11,11,10,11,11,11,
 12,11,11,11,11,11,12,12,13,13,12,13,10,10,12,10,
 11,11,11,11,11,11,11,11,11,12,12,11,13,12,12,12,
 12,13,12,11,11,11,11,11,11,12,11,12,11,11,11,11,
 12,12,13,12,11,12,12,11,11,11,11,11,12,11,11,11,
 11,12,11,11,12,11,12,13,13,12,12,12,12,11,11,11,
 11,11,12,11,11,12,11,12,11,11,11,11,13,12,12,12,
 12,13,11,11,11,12,12,11,11,11,12,11,12,12,12,11,
 12,13,12,11,11,12,12,11,12,11,11,11,12,12,11,12,
 11,11,11,12,12,12,12,13,12,13,12,12,12,12,11,11,
 12,11,11,11,11,11,11,12,12,12,13,12,11,13,13,12,
 12,11,12,10,11,11,11,11,12,11,12,12,11,12,12,13,
 12,12,13,12,12,12,12,12,11,12,12,12,11,12,11,11,
 11,12,13,12,13,13,13,13,13,12,13,13,12,12,13,11,
 11,11,11,11,12,11,11,12,11,
};

static float _vq_quantthresh__16c1_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__16c1_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__16c1_s_p9_2 = {
 _vq_quantthresh__16c1_s_p9_2,
 _vq_quantmap__16c1_s_p9_2,
 21,
 21
};

static static_codebook _16c1_s_p9_2 = {
 2, 441,
 _vq_lengthlist__16c1_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__16c1_s_p9_2,
 
# 9799 "oggenc.c" 3 4
((void *)0)
# 9799 "oggenc.c"
    ,
 &_vq_auxt__16c1_s_p9_2,
 
# 9801 "oggenc.c" 3 4
((void *)0)
# 9801 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16c1_s_short[] = {
  5, 6,17, 8,12, 9,10,10,12,13, 5, 2,17, 4, 9, 5,
  7, 8,11,13,16,16,16,16,16,16,16,16,16,16, 6, 4,
 16, 5,10, 5, 7,10,14,16,13, 9,16,11, 8, 7, 8, 9,
 13,16, 7, 4,16, 5, 7, 4, 6, 8,11,13, 8, 6,16, 7,
  8, 5, 5, 7, 9,13, 9, 8,16, 9, 8, 6, 6, 7, 9,13,
 11,11,16,10,10, 7, 7, 7, 9,13,13,13,16,13,13, 9,
  9, 9,10,13,
};

static static_codebook _huff_book__16c1_s_short = {
 2, 100,
 _huff_lengthlist__16c1_s_short,
 0, 0, 0, 0, 0,
 
# 9819 "oggenc.c" 3 4
((void *)0)
# 9819 "oggenc.c"
    ,
 
# 9820 "oggenc.c" 3 4
((void *)0)
# 9820 "oggenc.c"
    ,
 
# 9821 "oggenc.c" 3 4
((void *)0)
# 9821 "oggenc.c"
    ,
 
# 9822 "oggenc.c" 3 4
((void *)0)
# 9822 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16c2_s_long[] = {
  4, 7, 9, 9, 9, 8, 9,10,15,19, 5, 4, 5, 6, 7, 7,
  8, 9,14,16, 6, 5, 4, 5, 6, 7, 8,10,12,19, 7, 6,
  5, 4, 5, 6, 7, 9,11,18, 8, 7, 6, 5, 5, 5, 7, 9,
 10,17, 8, 7, 7, 5, 5, 5, 6, 7,12,18, 8, 8, 8, 7,
  7, 5, 5, 7,12,18, 8, 9,10, 9, 9, 7, 6, 7,12,17,
 14,18,16,16,15,12,11,10,12,18,15,17,18,18,18,15,
 14,14,16,18,
};

static static_codebook _huff_book__16c2_s_long = {
 2, 100,
 _huff_lengthlist__16c2_s_long,
 0, 0, 0, 0, 0,
 
# 9840 "oggenc.c" 3 4
((void *)0)
# 9840 "oggenc.c"
    ,
 
# 9841 "oggenc.c" 3 4
((void *)0)
# 9841 "oggenc.c"
    ,
 
# 9842 "oggenc.c" 3 4
((void *)0)
# 9842 "oggenc.c"
    ,
 
# 9843 "oggenc.c" 3 4
((void *)0)
# 9843 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c2_s_p1_0[] = {
  1, 3, 3, 0, 0, 0, 0, 0, 0, 4, 5, 5, 0, 0, 0, 0,
  0, 0, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c2_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16c2_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p1_0 = {
 _vq_quantthresh__16c2_s_p1_0,
 _vq_quantmap__16c2_s_p1_0,
 3,
 3
};

static static_codebook _16c2_s_p1_0 = {
 4, 81,
 _vq_lengthlist__16c2_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16c2_s_p1_0,
 
# 9882 "oggenc.c" 3 4
((void *)0)
# 9882 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p1_0,
 
# 9884 "oggenc.c" 3 4
((void *)0)
# 9884 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c2_s_p2_0[] = {
  2, 4, 3, 7, 7, 0, 0, 0, 7, 8, 0, 0, 0, 8, 8, 0,
  0, 0, 8, 8, 0, 0, 0, 8, 8, 4, 5, 4, 8, 8, 0, 0,
  0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 9, 9, 0, 0, 0,
  9, 9, 4, 4, 5, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8,
  8, 0, 0, 0, 9, 9, 0, 0, 0, 9, 9, 7, 8, 8,10,10,
  0, 0, 0,12,11, 0, 0, 0,11,11, 0, 0, 0,14,13, 0,
  0, 0,14,13, 7, 8, 8, 9,10, 0, 0, 0,11,12, 0, 0,
  0,11,11, 0, 0, 0,14,14, 0, 0, 0,13,14, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8,11,11, 0, 0, 0,
 11,11, 0, 0, 0,12,11, 0, 0, 0,12,12, 0, 0, 0,13,
 13, 8, 8, 8,11,11, 0, 0, 0,11,11, 0, 0, 0,11,12,
  0, 0, 0,12,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 8, 8, 8,12,11, 0, 0, 0,12,11, 0,
  0, 0,11,11, 0, 0, 0,13,13, 0, 0, 0,13,12, 8, 8,
  8,11,12, 0, 0, 0,11,12, 0, 0, 0,11,11, 0, 0, 0,
 13,13, 0, 0, 0,12,13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 8, 9, 9,14,13, 0, 0, 0,13,12, 0, 0, 0,13,
 13, 0, 0, 0,13,12, 0, 0, 0,13,13, 8, 9, 9,13,14,
  0, 0, 0,12,13, 0, 0, 0,13,13, 0, 0, 0,12,13, 0,
  0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
  9, 9,14,13, 0, 0, 0,13,13, 0, 0, 0,13,12, 0, 0,
  0,13,13, 0, 0, 0,13,12, 8, 9, 9,14,14, 0, 0, 0,
 13,13, 0, 0, 0,12,13, 0, 0, 0,13,13, 0, 0, 0,12,
 13,
};

static float _vq_quantthresh__16c2_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c2_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p2_0 = {
 _vq_quantthresh__16c2_s_p2_0,
 _vq_quantmap__16c2_s_p2_0,
 5,
 5
};

static static_codebook _16c2_s_p2_0 = {
 4, 625,
 _vq_lengthlist__16c2_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c2_s_p2_0,
 
# 9959 "oggenc.c" 3 4
((void *)0)
# 9959 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p2_0,
 
# 9961 "oggenc.c" 3 4
((void *)0)
# 9961 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16c2_s_p3_0[] = {
  1, 3, 3, 6, 6, 7, 7, 8, 8, 0, 0, 0, 6, 6, 7, 7,
  9, 9, 0, 0, 0, 6, 6, 7, 7, 9, 9, 0, 0, 0, 7, 7,
  8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0, 0, 0,
  7, 7, 9, 9,10,10, 0, 0, 0, 7, 7, 9, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c2_s_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16c2_s_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p3_0 = {
 _vq_quantthresh__16c2_s_p3_0,
 _vq_quantmap__16c2_s_p3_0,
 9,
 9
};

static static_codebook _16c2_s_p3_0 = {
 2, 81,
 _vq_lengthlist__16c2_s_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16c2_s_p3_0,
 
# 10007 "oggenc.c" 3 4
((void *)0)
# 10007 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p3_0,
 
# 10009 "oggenc.c" 3 4
((void *)0)
# 10009 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16c2_s_p4_0[] = {
  2, 3, 3, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9,10,
 10, 0, 0, 0, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,
 11,11, 0, 0, 0, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,
 10,10,11, 0, 0, 0, 6, 6, 8, 8, 8, 8, 9, 9,10,10,
 10,11,11,11, 0, 0, 0, 6, 6, 8, 8, 9, 9, 9, 9,10,
 10,11,11,11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,
 10,10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9,
  9,10,10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,
 10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8, 8, 9,
  9,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__16c2_s_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__16c2_s_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p4_0 = {
 _vq_quantthresh__16c2_s_p4_0,
 _vq_quantmap__16c2_s_p4_0,
 17,
 17
};

static static_codebook _16c2_s_p4_0 = {
 2, 289,
 _vq_lengthlist__16c2_s_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__16c2_s_p4_0,
 
# 10078 "oggenc.c" 3 4
((void *)0)
# 10078 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p4_0,
 
# 10080 "oggenc.c" 3 4
((void *)0)
# 10080 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16c2_s_p5_0[] = {
  1, 4, 4, 5, 7, 7, 6, 7, 7, 4, 6, 6,10,10,10,10,
 10,10, 4, 7, 6,10,10,10,10,10,10, 5, 9, 9, 9,12,
 11,10,11,12, 7,10,10,12,12,12,12,12,12, 7,10,10,
 11,12,12,12,12,13, 6,10,10,10,12,12,10,12,12, 7,
 10,10,11,13,12,12,12,12, 7,10,10,11,12,12,12,12,
 12,
};

static float _vq_quantthresh__16c2_s_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__16c2_s_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p5_0 = {
 _vq_quantthresh__16c2_s_p5_0,
 _vq_quantmap__16c2_s_p5_0,
 3,
 3
};

static static_codebook _16c2_s_p5_0 = {
 4, 81,
 _vq_lengthlist__16c2_s_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__16c2_s_p5_0,
 
# 10119 "oggenc.c" 3 4
((void *)0)
# 10119 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p5_0,
 
# 10121 "oggenc.c" 3 4
((void *)0)
# 10121 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16c2_s_p5_1[] = {
  2, 3, 3, 6, 6, 7, 7, 7, 7, 8, 8,11,11,11, 6, 6,
  7, 7, 8, 8, 8, 8,11,11,11, 6, 6, 7, 7, 8, 8, 8,
  8,11,11,11, 6, 6, 8, 8, 8, 8, 9, 9,11,11,11, 6,
  6, 8, 8, 8, 8, 9, 9,11,11,11, 7, 7, 8, 8, 8, 8,
  8, 8,11,11,11, 7, 7, 8, 8, 8, 8, 8, 9,11,11,11,
  8, 8, 8, 8, 8, 8, 8, 8,11,11,11,11,11, 8, 8, 8,
  8, 8, 8,11,11,11,11,11, 8, 8, 8, 8, 8, 8,11,11,
 11,11,11, 7, 7, 8, 8, 8, 8,
};

static float _vq_quantthresh__16c2_s_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16c2_s_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p5_1 = {
 _vq_quantthresh__16c2_s_p5_1,
 _vq_quantmap__16c2_s_p5_1,
 11,
 11
};

static static_codebook _16c2_s_p5_1 = {
 2, 121,
 _vq_lengthlist__16c2_s_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16c2_s_p5_1,
 
# 10172 "oggenc.c" 3 4
((void *)0)
# 10172 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p5_1,
 
# 10174 "oggenc.c" 3 4
((void *)0)
# 10174 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c2_s_p6_0[] = {
  1, 4, 4, 7, 6, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  7, 7, 9, 9, 9, 9,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9,10,10,11,11,12,12, 0, 6, 6, 7, 7, 9, 9,10,10,
 11,11,12,12, 0, 7, 7, 7, 7, 9, 9,10,10,11,12,12,
 12, 0,11,11, 8, 8,10,10,11,11,12,12,13,13, 0,11,
 12, 8, 8,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__16c2_s_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__16c2_s_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p6_0 = {
 _vq_quantthresh__16c2_s_p6_0,
 _vq_quantmap__16c2_s_p6_0,
 13,
 13
};

static static_codebook _16c2_s_p6_0 = {
 2, 169,
 _vq_lengthlist__16c2_s_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__16c2_s_p6_0,
 
# 10230 "oggenc.c" 3 4
((void *)0)
# 10230 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p6_0,
 
# 10232 "oggenc.c" 3 4
((void *)0)
# 10232 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16c2_s_p6_1[] = {
  2, 3, 3, 5, 5, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 6,
  6, 6, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__16c2_s_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16c2_s_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p6_1 = {
 _vq_quantthresh__16c2_s_p6_1,
 _vq_quantmap__16c2_s_p6_1,
 5,
 5
};

static static_codebook _16c2_s_p6_1 = {
 2, 25,
 _vq_lengthlist__16c2_s_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16c2_s_p6_1,
 
# 10269 "oggenc.c" 3 4
((void *)0)
# 10269 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p6_1,
 
# 10271 "oggenc.c" 3 4
((void *)0)
# 10271 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c2_s_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  8, 8, 9, 9,10,10,11,11,12,12, 6, 5, 5, 8, 8, 9,
  9,10,10,11,11,12,13,18, 6, 6, 7, 7, 9, 9,10,10,
 12,12,13,13,18, 6, 6, 7, 7, 9, 9,10,10,12,12,13,
 13,18,11,10, 8, 8,10,10,11,11,12,12,13,13,18,11,
 11, 8, 8,10,10,11,11,12,13,13,13,18,18,18,10,11,
 11,11,12,12,13,13,14,14,18,18,18,11,11,11,11,12,
 12,13,13,14,14,18,18,18,14,14,12,12,12,12,14,14,
 15,14,18,18,18,15,15,11,12,12,12,13,13,15,15,18,
 18,18,18,18,13,13,13,13,13,14,17,16,18,18,18,18,
 18,13,14,13,13,14,13,15,14,
};

static float _vq_quantthresh__16c2_s_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__16c2_s_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p7_0 = {
 _vq_quantthresh__16c2_s_p7_0,
 _vq_quantmap__16c2_s_p7_0,
 13,
 13
};

static static_codebook _16c2_s_p7_0 = {
 2, 169,
 _vq_lengthlist__16c2_s_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__16c2_s_p7_0,
 
# 10327 "oggenc.c" 3 4
((void *)0)
# 10327 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p7_0,
 
# 10329 "oggenc.c" 3 4
((void *)0)
# 10329 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16c2_s_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 7, 7, 7, 7, 9, 9, 9, 6, 6,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 6, 6, 7, 7, 8, 8, 8,
  8, 9, 9, 9, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 7,
  7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 7, 7, 7, 7, 8, 8,
  8, 8, 9, 9, 9, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9,
  7, 7, 8, 8, 7, 7, 8, 8, 9, 9, 9, 9, 9, 7, 7, 7,
  7, 8, 8, 9, 9, 9, 9, 9, 8, 8, 7, 7, 8, 8, 9, 9,
  9, 9, 9, 7, 7, 7, 7, 8, 8,
};

static float _vq_quantthresh__16c2_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16c2_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p7_1 = {
 _vq_quantthresh__16c2_s_p7_1,
 _vq_quantmap__16c2_s_p7_1,
 11,
 11
};

static static_codebook _16c2_s_p7_1 = {
 2, 121,
 _vq_lengthlist__16c2_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16c2_s_p7_1,
 
# 10380 "oggenc.c" 3 4
((void *)0)
# 10380 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p7_1,
 
# 10382 "oggenc.c" 3 4
((void *)0)
# 10382 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16c2_s_p8_0[] = {
  1, 4, 4, 7, 6, 7, 7, 6, 6, 8, 8, 9, 9,10,10, 6,
  6, 6, 8, 8, 9, 8, 8, 8, 9, 9,11,10,11,11, 7, 6,
  6, 8, 8, 9, 8, 7, 7, 9, 9,10,10,12,11,14, 8, 8,
  8, 9, 9, 9, 9, 9,10, 9,10,10,11,13,14, 8, 8, 8,
  8, 9, 9, 8, 8, 9, 9,10,10,11,12,14,13,11, 9, 9,
  9, 9, 9, 9, 9,10,11,10,13,12,14,11,13, 8, 9, 9,
  9, 9, 9,10,10,11,10,13,12,14,14,14, 8, 9, 9, 9,
 11,11,11,11,11,12,13,13,14,14,14, 9, 8, 9, 9,10,
 10,12,10,11,12,12,14,14,14,14,11,12,10,10,12,12,
 12,12,13,14,12,12,14,14,14,12,12, 9,10,11,11,12,
 14,12,14,14,14,14,14,14,14,14,11,11,12,11,12,14,
 14,14,14,14,14,14,14,14,14,12,11,11,11,11,14,14,
 14,14,14,14,14,14,14,14,14,14,13,12,14,14,14,14,
 14,14,14,14,14,14,14,14,14,12,12,12,13,14,14,13,
 13,
};

static float _vq_quantthresh__16c2_s_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__16c2_s_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p8_0 = {
 _vq_quantthresh__16c2_s_p8_0,
 _vq_quantmap__16c2_s_p8_0,
 15,
 15
};

static static_codebook _16c2_s_p8_0 = {
 2, 225,
 _vq_lengthlist__16c2_s_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__16c2_s_p8_0,
 
# 10444 "oggenc.c" 3 4
((void *)0)
# 10444 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p8_0,
 
# 10446 "oggenc.c" 3 4
((void *)0)
# 10446 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__16c2_s_p8_1[] = {
  2, 4, 4, 6, 6, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8,11,12,11, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9, 9,11,11,10, 7, 7, 8,
  8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,
 11,11, 8, 7, 8, 8, 9, 9, 9, 9, 9, 9,10,10, 9,10,
 10, 9,10,10,11,11,12, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9,10, 9,10,10,10,10,11,11,11, 8, 8, 9, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,11,11,
 11, 8, 8, 9, 8, 9, 9, 9, 9,10, 9, 9, 9,10,10,10,
 10, 9,10,11,11,11, 9, 9, 9, 9,10, 9, 9, 9,10,10,
  9,10, 9,10,10,10,10,10,11,12,11,11,11, 9, 9, 9,
  9, 9,10,10, 9,10,10,10,10,10,10,10,10,12,11,13,
 13,11, 9, 9, 9, 9,10,10, 9,10,10,10,10,11,10,10,
 10,10,11,12,11,12,11, 9, 9, 9,10,10, 9,10,10,10,
 10,10,10,10,10,10,10,11,11,11,12,11, 9,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,
 11,11,11,10, 9,10,10,10,10,10,10,10,10,11,10,10,
 10,11,11,11,11,11,11,11,10,10,10,11,10,10,10,10,
 10,10,10,10,10,10,11,11,11,11,12,12,11,10,10,10,
 10,10,10,10,10,11,10,10,10,11,10,12,11,11,12,11,
 11,11,10,10,10,10,10,11,10,10,10,10,10,11,10,10,
 11,11,11,12,11,12,11,11,12,10,10,10,10,10,10,10,
 11,10,10,11,10,12,11,11,11,12,11,11,11,11,10,10,
 10,10,10,10,10,11,11,11,10,11,12,11,11,11,12,11,
 12,11,12,10,11,10,10,10,10,11,10,10,10,10,10,10,
 12,11,11,11,11,11,12,12,10,10,10,10,10,11,10,10,
 11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,
 10,11,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__16c2_s_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__16c2_s_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p8_1 = {
 _vq_quantthresh__16c2_s_p8_1,
 _vq_quantmap__16c2_s_p8_1,
 21,
 21
};

static static_codebook _16c2_s_p8_1 = {
 2, 441,
 _vq_lengthlist__16c2_s_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__16c2_s_p8_1,
 
# 10529 "oggenc.c" 3 4
((void *)0)
# 10529 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p8_1,
 
# 10531 "oggenc.c" 3 4
((void *)0)
# 10531 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16c2_s_p9_0[] = {
  1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__16c2_s_p9_0[] = {
 -5120.5, -4189.5, -3258.5, -2327.5, -1396.5, -465.5, 465.5, 1396.5,
 2327.5, 3258.5, 4189.5, 5120.5,
};

static long _vq_quantmap__16c2_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p9_0 = {
 _vq_quantthresh__16c2_s_p9_0,
 _vq_quantmap__16c2_s_p9_0,
 13,
 13
};

static static_codebook _16c2_s_p9_0 = {
 2, 169,
 _vq_lengthlist__16c2_s_p9_0,
 1, -510275072, 1631393792, 4, 0,
 _vq_quantlist__16c2_s_p9_0,
 
# 10587 "oggenc.c" 3 4
((void *)0)
# 10587 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p9_0,
 
# 10589 "oggenc.c" 3 4
((void *)0)
# 10589 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p9_1[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16c2_s_p9_1[] = {
  1, 5, 5, 9, 8, 7, 7, 7, 6,10,11,11,11,11,11,11,
 11, 8, 7, 6, 8, 8,10, 9,10,10,10, 9,11,10,10,10,
 10,10, 8, 6, 6, 8, 8, 9, 8, 9, 8, 9,10,10,10,10,
 10,10,10,10, 8,10, 9, 9, 9, 9,10,10,10,10,10,10,
 10,10,10,10,10, 8, 9, 9, 9,10,10, 9,10,10,10,10,
 10,10,10,10,10,10,10,10, 9, 8, 9, 9,10,10,10,10,
 10,10,10,10,10,10,10,10, 9, 8, 8, 9, 9,10,10,10,
 10,10,10,10,10,10,10,10,10,10, 9,10, 9, 9,10,10,
 10,10,10,10,10,10,10,10,10,10,10, 9, 8, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 9,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10, 9,10, 9,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10, 9,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__16c2_s_p9_1[] = {
 -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5, -24.5,
 24.5, 73.5, 122.5, 171.5, 220.5, 269.5, 318.5, 367.5,
};

static long _vq_quantmap__16c2_s_p9_1[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p9_1 = {
 _vq_quantthresh__16c2_s_p9_1,
 _vq_quantmap__16c2_s_p9_1,
 17,
 17
};

static static_codebook _16c2_s_p9_1 = {
 2, 289,
 _vq_lengthlist__16c2_s_p9_1,
 1, -518488064, 1622704128, 5, 0,
 _vq_quantlist__16c2_s_p9_1,
 
# 10658 "oggenc.c" 3 4
((void *)0)
# 10658 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p9_1,
 
# 10660 "oggenc.c" 3 4
((void *)0)
# 10660 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16c2_s_p9_2[] = {
 13,
 12,
 14,
 11,
 15,
 10,
 16,
 9,
 17,
 8,
 18,
 7,
 19,
 6,
 20,
 5,
 21,
 4,
 22,
 3,
 23,
 2,
 24,
 1,
 25,
 0,
 26,
};

static long _vq_lengthlist__16c2_s_p9_2[] = {
  1, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 8, 7, 8, 7, 7, 4, 4,
};

static float _vq_quantthresh__16c2_s_p9_2[] = {
 -12.5, -11.5, -10.5, -9.5, -8.5, -7.5, -6.5, -5.5,
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5,
 11.5, 12.5,
};

static long _vq_quantmap__16c2_s_p9_2[] = {
    25, 23, 21, 19, 17, 15, 13, 11,
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10, 12, 14, 16, 18, 20,
    22, 24, 26,
};

static encode_aux_threshmatch _vq_auxt__16c2_s_p9_2 = {
 _vq_quantthresh__16c2_s_p9_2,
 _vq_quantmap__16c2_s_p9_2,
 27,
 27
};

static static_codebook _16c2_s_p9_2 = {
 1, 27,
 _vq_lengthlist__16c2_s_p9_2,
 1, -528875520, 1611661312, 5, 0,
 _vq_quantlist__16c2_s_p9_2,
 
# 10725 "oggenc.c" 3 4
((void *)0)
# 10725 "oggenc.c"
    ,
 &_vq_auxt__16c2_s_p9_2,
 
# 10727 "oggenc.c" 3 4
((void *)0)
# 10727 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16c2_s_short[] = {
  7,10,11,11,11,14,15,15,17,14, 8, 6, 7, 7, 8, 9,
 11,11,14,17, 9, 6, 6, 6, 7, 7,10,11,15,16, 9, 6,
  6, 4, 4, 5, 8, 9,12,16,10, 6, 6, 4, 4, 4, 6, 9,
 13,16,10, 7, 6, 5, 4, 3, 5, 7,13,16,11, 9, 8, 7,
  6, 5, 5, 6,12,15,10,10,10, 9, 7, 6, 6, 7,11,15,
 13,13,13,13,11,10,10, 9,12,16,16,16,16,14,16,15,
 15,12,14,14,
};

static static_codebook _huff_book__16c2_s_short = {
 2, 100,
 _huff_lengthlist__16c2_s_short,
 0, 0, 0, 0, 0,
 
# 10745 "oggenc.c" 3 4
((void *)0)
# 10745 "oggenc.c"
    ,
 
# 10746 "oggenc.c" 3 4
((void *)0)
# 10746 "oggenc.c"
    ,
 
# 10747 "oggenc.c" 3 4
((void *)0)
# 10747 "oggenc.c"
    ,
 
# 10748 "oggenc.c" 3 4
((void *)0)
# 10748 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c0_s_long[] = {
  3, 4,18, 8, 8, 8, 9,10,11,13, 3, 2,18, 5, 5, 6,
  8,11,12,12,18,18,18,18,18,18,18,18,18,18, 8, 5,
 18, 7, 8, 8,10,14,14,16, 8, 5,18, 7, 5, 6, 7,11,
 12,13, 8, 6,18, 7, 5, 6, 7,10,12,14, 8, 7,18,10,
  7, 6, 6, 8,11,14, 9,10,18,13, 9, 7, 6, 8,10,13,
 11,13,18,16,13,10, 9, 8, 8,11,12,17,18,17,18,14,
 11, 9,10,14,
};

static static_codebook _huff_book__44c0_s_long = {
 2, 100,
 _huff_lengthlist__44c0_s_long,
 0, 0, 0, 0, 0,
 
# 10766 "oggenc.c" 3 4
((void *)0)
# 10766 "oggenc.c"
    ,
 
# 10767 "oggenc.c" 3 4
((void *)0)
# 10767 "oggenc.c"
    ,
 
# 10768 "oggenc.c" 3 4
((void *)0)
# 10768 "oggenc.c"
    ,
 
# 10769 "oggenc.c" 3 4
((void *)0)
# 10769 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c0_s_p1_0[] = {
  1, 5, 5, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 7, 0, 0, 0, 0,
  0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 9, 9,11, 0, 0, 0, 0, 0, 0, 9,11,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 9,10,11,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,11,10, 0,
  0, 0, 0, 0, 0, 8, 9,11, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 9,11,10, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c0_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p1_0 = {
 _vq_quantthresh__44c0_s_p1_0,
 _vq_quantmap__44c0_s_p1_0,
 3,
 3
};

static static_codebook _44c0_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c0_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c0_s_p1_0,
 
# 11213 "oggenc.c" 3 4
((void *)0)
# 11213 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p1_0,
 
# 11215 "oggenc.c" 3 4
((void *)0)
# 11215 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p2_0 = {
 _vq_quantthresh__44c0_s_p2_0,
 _vq_quantmap__44c0_s_p2_0,
 5,
 5
};

static static_codebook _44c0_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c0_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_s_p2_0,
 
# 11290 "oggenc.c" 3 4
((void *)0)
# 11290 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p2_0,
 
# 11292 "oggenc.c" 3 4
((void *)0)
# 11292 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_s_p3_0[] = {
  1, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 7, 7, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 5, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 9, 9,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 7, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p3_0 = {
 _vq_quantthresh__44c0_s_p3_0,
 _vq_quantmap__44c0_s_p3_0,
 5,
 5
};

static static_codebook _44c0_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c0_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_s_p3_0,
 
# 11367 "oggenc.c" 3 4
((void *)0)
# 11367 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p3_0,
 
# 11369 "oggenc.c" 3 4
((void *)0)
# 11369 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c0_s_p4_0[] = {
  1, 3, 2, 8, 7, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c0_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p4_0 = {
 _vq_quantthresh__44c0_s_p4_0,
 _vq_quantmap__44c0_s_p4_0,
 9,
 9
};

static static_codebook _44c0_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c0_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c0_s_p4_0,
 
# 11415 "oggenc.c" 3 4
((void *)0)
# 11415 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p4_0,
 
# 11417 "oggenc.c" 3 4
((void *)0)
# 11417 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c0_s_p5_0[] = {
  1, 3, 3, 6, 6, 6, 6, 8, 8, 0, 0, 0, 6, 7, 7, 7,
  9, 9, 0, 0, 0, 7, 7, 7, 7, 9, 9, 0, 0, 0, 7, 7,
  8, 8, 9, 9, 0, 0, 0, 7, 7, 8, 8,10, 9, 0, 0, 0,
  8, 8, 8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0,
  0, 0,10, 9, 9, 9,11,11, 0, 0, 0, 0, 0, 9, 9,11,
 11,
};

static float _vq_quantthresh__44c0_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c0_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p5_0 = {
 _vq_quantthresh__44c0_s_p5_0,
 _vq_quantmap__44c0_s_p5_0,
 9,
 9
};

static static_codebook _44c0_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c0_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c0_s_p5_0,
 
# 11463 "oggenc.c" 3 4
((void *)0)
# 11463 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p5_0,
 
# 11465 "oggenc.c" 3 4
((void *)0)
# 11465 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c0_s_p6_0[] = {
  1, 3, 4, 6, 6, 7, 8, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,10,
 11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,
 11,11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9, 9,10,10,10,
 10,11,11,11,12,12, 0, 0, 0, 8, 8, 9, 9, 9, 9,10,
 10,11,11,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,12,12,13, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 9, 9,
  9,10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9,
  9, 9, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
 10, 9,10,10,11,11,11,12,12,13,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,12,12,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,13,13,13,13, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,12,13,12,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,12,12,12,12,13,13,13,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,
 14,
};

static float _vq_quantthresh__44c0_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c0_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p6_0 = {
 _vq_quantthresh__44c0_s_p6_0,
 _vq_quantmap__44c0_s_p6_0,
 17,
 17
};

static static_codebook _44c0_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c0_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c0_s_p6_0,
 
# 11534 "oggenc.c" 3 4
((void *)0)
# 11534 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p6_0,
 
# 11536 "oggenc.c" 3 4
((void *)0)
# 11536 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c0_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 4, 7, 7,10, 9, 9,11, 9, 9, 7,10,10,10,11,
 10,11,10,10, 6, 9, 9,11,10,10,11, 9,10, 6, 9, 9,
 11,10,10,11, 9, 9, 7,10,10,11,11,11,12,11,11, 7,
  9, 9,10, 9, 9,11,11,10, 7, 9, 9,10,10,10,12,10,
 11,
};

static float _vq_quantthresh__44c0_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c0_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p7_0 = {
 _vq_quantthresh__44c0_s_p7_0,
 _vq_quantmap__44c0_s_p7_0,
 3,
 3
};

static static_codebook _44c0_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c0_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c0_s_p7_0,
 
# 11575 "oggenc.c" 3 4
((void *)0)
# 11575 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p7_0,
 
# 11577 "oggenc.c" 3 4
((void *)0)
# 11577 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c0_s_p7_1[] = {
  2, 3, 3, 6, 6, 7, 7, 7, 7, 7, 7,10, 9, 9, 6, 6,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 6, 6, 7, 7, 8, 8, 8,
  8,10, 9,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 7, 7, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 8, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 9, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c0_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c0_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p7_1 = {
 _vq_quantthresh__44c0_s_p7_1,
 _vq_quantmap__44c0_s_p7_1,
 11,
 11
};

static static_codebook _44c0_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c0_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c0_s_p7_1,
 
# 11628 "oggenc.c" 3 4
((void *)0)
# 11628 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p7_1,
 
# 11630 "oggenc.c" 3 4
((void *)0)
# 11630 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c0_s_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 7, 7, 8, 8,10, 9, 7, 5, 5,
  7, 7, 8, 8, 8, 8, 9, 9,10,10, 7, 6, 6, 7, 7, 8,
  8, 8, 8, 9, 9,10,10, 0, 8, 8, 8, 8, 9, 8, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 8, 9, 9,10,10,10,11,12,11, 0,13,
 13, 9, 8, 9, 9,10,10,10,11,11,11, 0, 0, 0,10,10,
  9, 9,10,10,11,11,12,12, 0, 0, 0,10,10, 9, 8,10,
 10,11,11,12,12, 0, 0, 0,13,13,10,10,11,11,12,12,
 12,12, 0, 0, 0,15,15,10,10,11, 9,12,12,13,13, 0,
  0, 0, 0, 0,12,11,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,11,12,11,14,13,
};

static float _vq_quantthresh__44c0_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c0_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p8_0 = {
 _vq_quantthresh__44c0_s_p8_0,
 _vq_quantmap__44c0_s_p8_0,
 13,
 13
};

static static_codebook _44c0_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c0_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c0_s_p8_0,
 
# 11686 "oggenc.c" 3 4
((void *)0)
# 11686 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p8_0,
 
# 11688 "oggenc.c" 3 4
((void *)0)
# 11688 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_s_p8_1[] = {
  2, 3, 4, 4, 4, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 6,
  6, 6, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c0_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p8_1 = {
 _vq_quantthresh__44c0_s_p8_1,
 _vq_quantmap__44c0_s_p8_1,
 5,
 5
};

static static_codebook _44c0_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c0_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_s_p8_1,
 
# 11725 "oggenc.c" 3 4
((void *)0)
# 11725 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p8_1,
 
# 11727 "oggenc.c" 3 4
((void *)0)
# 11727 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p9_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_s_p9_0[] = {
  1, 7, 7,11,11,10,11,11,11,11, 9,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11, 8,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11, 8,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44c0_s_p9_0[] = {
 -331.5, -110.5, 110.5, 331.5,
};

static long _vq_quantmap__44c0_s_p9_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p9_0 = {
 _vq_quantthresh__44c0_s_p9_0,
 _vq_quantmap__44c0_s_p9_0,
 5,
 5
};

static static_codebook _44c0_s_p9_0 = {
 4, 625,
 _vq_lengthlist__44c0_s_p9_0,
 1, -518283264, 1627103232, 3, 0,
 _vq_quantlist__44c0_s_p9_0,
 
# 11802 "oggenc.c" 3 4
((void *)0)
# 11802 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p9_0,
 
# 11804 "oggenc.c" 3 4
((void *)0)
# 11804 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c0_s_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 9,12,12,13,12, 6, 5, 5,
  7, 7, 8, 8,10,10,12,11,14,13, 6, 5, 5, 7, 7, 7,
  8, 9, 9,11,12,13,12,15, 7, 7, 7, 7, 9, 9,11,11,
 14,13,14,13,15, 7, 7, 8, 8, 8, 9,10,10,11,11,12,
 11,15,10,10, 8, 8,10,10,12,11,13,15,14,14,15,11,
 10, 8, 8,11,11,11,11,13,13,12,13,15,15,15,10,10,
 10,10,12,13,13,13,15,14,15,15,15,10,10,10,11,13,
 14,13,14,14,14,15,15,15,15,15,11,12,11,13,14,14,
 15,15,15,15,15,14,15,11,11,13,12,14,13,15,15,15,
 15,15,15,15,13,12,13,12,15,15,15,15,15,15,15,15,
 15,12,13,12,12,15,14,15,15,
};

static float _vq_quantthresh__44c0_s_p9_1[] = {
 -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5, 25.5,
 42.5, 59.5, 76.5, 93.5,
};

static long _vq_quantmap__44c0_s_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p9_1 = {
 _vq_quantthresh__44c0_s_p9_1,
 _vq_quantmap__44c0_s_p9_1,
 13,
 13
};

static static_codebook _44c0_s_p9_1 = {
 2, 169,
 _vq_lengthlist__44c0_s_p9_1,
 1, -522616832, 1620115456, 4, 0,
 _vq_quantlist__44c0_s_p9_1,
 
# 11860 "oggenc.c" 3 4
((void *)0)
# 11860 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p9_1,
 
# 11862 "oggenc.c" 3 4
((void *)0)
# 11862 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_s_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c0_s_p9_2[] = {
  2, 4, 4, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 8,
  9,10,10,10, 7, 7, 8, 7, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9,10,10,10, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,11,10,10, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9,10, 9, 9,10,10,11, 9, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,11, 9, 8, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,11,11,10,11,11, 9, 9,
  9, 9, 9, 9,10, 9, 9, 9,10, 9,10,10,10,11,11, 9,
  9, 9, 9, 9, 9, 9,10, 9, 9, 9,10,11,10,10,10,11,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,
 11,11,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 11,11,10,10, 9,10,10,10, 9,10, 9, 9, 9, 9,10,10,
 11,10,11,11,11, 9,10, 9, 9, 9, 9, 9, 9, 9,10,10,
 11,10,11,11,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,11,11,10,11,11, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c0_s_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c0_s_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c0_s_p9_2 = {
 _vq_quantthresh__44c0_s_p9_2,
 _vq_quantmap__44c0_s_p9_2,
 17,
 17
};

static static_codebook _44c0_s_p9_2 = {
 2, 289,
 _vq_lengthlist__44c0_s_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c0_s_p9_2,
 
# 11931 "oggenc.c" 3 4
((void *)0)
# 11931 "oggenc.c"
    ,
 &_vq_auxt__44c0_s_p9_2,
 
# 11933 "oggenc.c" 3 4
((void *)0)
# 11933 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c0_s_short[] = {
  6, 8,17,12,12,12,14,15,17,16, 5, 1,16, 5, 6, 6,
  9,12,14,13,16,16,16,16,16,16,16,16,16,16, 9, 4,
 16, 6, 9, 7,10,14,14,14, 8, 5,16, 8, 6, 7,10,13,
 15,16, 9, 6,16, 7, 7, 7,10,12,15,14,10, 8,16, 9,
  9, 9,10,12,15,14,13, 7,16, 8, 7, 7,10,12,14,13,
 15, 6,16, 7, 5, 5, 7, 9,13,16,14, 7,16, 8, 6, 6,
  8, 9,11,14,
};

static static_codebook _huff_book__44c0_s_short = {
 2, 100,
 _huff_lengthlist__44c0_s_short,
 0, 0, 0, 0, 0,
 
# 11951 "oggenc.c" 3 4
((void *)0)
# 11951 "oggenc.c"
    ,
 
# 11952 "oggenc.c" 3 4
((void *)0)
# 11952 "oggenc.c"
    ,
 
# 11953 "oggenc.c" 3 4
((void *)0)
# 11953 "oggenc.c"
    ,
 
# 11954 "oggenc.c" 3 4
((void *)0)
# 11954 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c0_sm_long[] = {
  3, 4,10, 8,11, 9,10,10,11,13, 3, 2,10, 5, 8, 6,
  8,11,12,13,10, 8, 7,10, 7, 8, 9,11,12,13, 8, 5,
 12, 6, 9, 7,10,13,14,16,11, 7, 7, 9, 5, 6, 7,10,
 13,13, 8, 6, 7, 7, 5, 5, 6, 9,12,13, 9, 8, 8, 8,
  7, 6, 6, 8,11,14,10,10,10,11, 9, 8, 7, 8,10,13,
 11,14,12,15,13,11, 9, 8, 9,12,12,18,15,18,17,15,
 12,10,10,14,
};

static static_codebook _huff_book__44c0_sm_long = {
 2, 100,
 _huff_lengthlist__44c0_sm_long,
 0, 0, 0, 0, 0,
 
# 11972 "oggenc.c" 3 4
((void *)0)
# 11972 "oggenc.c"
    ,
 
# 11973 "oggenc.c" 3 4
((void *)0)
# 11973 "oggenc.c"
    ,
 
# 11974 "oggenc.c" 3 4
((void *)0)
# 11974 "oggenc.c"
    ,
 
# 11975 "oggenc.c" 3 4
((void *)0)
# 11975 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c0_sm_p1_0[] = {
  1, 5, 5, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 7, 0, 0, 0, 0,
  0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 9, 9,10, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 9,10, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_sm_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c0_sm_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p1_0 = {
 _vq_quantthresh__44c0_sm_p1_0,
 _vq_quantmap__44c0_sm_p1_0,
 3,
 3
};

static static_codebook _44c0_sm_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c0_sm_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c0_sm_p1_0,
 
# 12419 "oggenc.c" 3 4
((void *)0)
# 12419 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p1_0,
 
# 12421 "oggenc.c" 3 4
((void *)0)
# 12421 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_sm_p2_0[] = {
  1, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 6, 6, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 8,
  8, 0, 0, 0, 8, 8, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0, 0, 8, 8, 0, 0,
  0, 8, 8, 0, 0, 0,10, 9, 0, 0, 0, 0, 0, 0, 0, 6,
  8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 9,
 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8,
  0, 0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0,
  0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0,10,10, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  8,10,10, 0, 0, 0,10,10, 0, 0, 0, 9,10, 0, 0, 0,
 10,10, 0, 0, 0, 0, 0, 0, 0, 8,10,10, 0, 0, 0,10,
 10, 0, 0, 0,10, 9, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_sm_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_sm_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p2_0 = {
 _vq_quantthresh__44c0_sm_p2_0,
 _vq_quantmap__44c0_sm_p2_0,
 5,
 5
};

static static_codebook _44c0_sm_p2_0 = {
 4, 625,
 _vq_lengthlist__44c0_sm_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_sm_p2_0,
 
# 12496 "oggenc.c" 3 4
((void *)0)
# 12496 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p2_0,
 
# 12498 "oggenc.c" 3 4
((void *)0)
# 12498 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_sm_p3_0[] = {
  2, 3, 4, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 8, 8,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 8, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_sm_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_sm_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p3_0 = {
 _vq_quantthresh__44c0_sm_p3_0,
 _vq_quantmap__44c0_sm_p3_0,
 5,
 5
};

static static_codebook _44c0_sm_p3_0 = {
 4, 625,
 _vq_lengthlist__44c0_sm_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_sm_p3_0,
 
# 12573 "oggenc.c" 3 4
((void *)0)
# 12573 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p3_0,
 
# 12575 "oggenc.c" 3 4
((void *)0)
# 12575 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c0_sm_p4_0[] = {
  2, 3, 3, 6, 6, 0, 0, 0, 0, 0, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 4, 4, 6, 6, 0, 0, 0, 0, 0, 5, 5, 6, 6,
  0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0,
  7, 8, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c0_sm_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c0_sm_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p4_0 = {
 _vq_quantthresh__44c0_sm_p4_0,
 _vq_quantmap__44c0_sm_p4_0,
 9,
 9
};

static static_codebook _44c0_sm_p4_0 = {
 2, 81,
 _vq_lengthlist__44c0_sm_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c0_sm_p4_0,
 
# 12621 "oggenc.c" 3 4
((void *)0)
# 12621 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p4_0,
 
# 12623 "oggenc.c" 3 4
((void *)0)
# 12623 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c0_sm_p5_0[] = {
  1, 3, 3, 6, 6, 7, 7, 9, 9, 0, 6, 6, 7, 7, 8, 8,
  9, 9, 0, 6, 6, 7, 7, 8, 8,10,10, 0, 7, 7, 8, 8,
  8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0, 0, 0,
  8, 8, 9, 9,11,11, 0, 0, 0, 9, 9, 9, 9,11,11, 0,
  0, 0,10,10, 9, 9,11,11, 0, 0, 0, 0, 0, 9, 9,11,
 11,
};

static float _vq_quantthresh__44c0_sm_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c0_sm_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p5_0 = {
 _vq_quantthresh__44c0_sm_p5_0,
 _vq_quantmap__44c0_sm_p5_0,
 9,
 9
};

static static_codebook _44c0_sm_p5_0 = {
 2, 81,
 _vq_lengthlist__44c0_sm_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c0_sm_p5_0,
 
# 12669 "oggenc.c" 3 4
((void *)0)
# 12669 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p5_0,
 
# 12671 "oggenc.c" 3 4
((void *)0)
# 12671 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c0_sm_p6_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9, 9, 8, 8,10,10,10,10,11,
 11, 0, 6, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 12,12, 0, 6, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 0, 7, 7, 8, 8, 8, 8,10,10,10,10,11,11,
 11,11,12,12, 0, 0, 0, 8, 7, 8, 8,10,10,10,10,11,
 11,11,11,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,10,
 11,11,12,12,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,
 10,11,11,12,12,12,13, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,
 10,10,11,11,12,12,12,13,13,13, 0, 0, 0, 0, 0, 9,
  9,10, 9,11,11,12,12,13,13,13,13, 0, 0, 0, 0, 0,
 10,10,10,10,11,11,12,12,13,13,14,14, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,12,12,13,13,14,14, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,13,13,14,14, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,12,13,13,14,14, 0,
  0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,13,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,12,12,13,13,14,
 14,
};

static float _vq_quantthresh__44c0_sm_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c0_sm_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p6_0 = {
 _vq_quantthresh__44c0_sm_p6_0,
 _vq_quantmap__44c0_sm_p6_0,
 17,
 17
};

static static_codebook _44c0_sm_p6_0 = {
 2, 289,
 _vq_lengthlist__44c0_sm_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c0_sm_p6_0,
 
# 12740 "oggenc.c" 3 4
((void *)0)
# 12740 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p6_0,
 
# 12742 "oggenc.c" 3 4
((void *)0)
# 12742 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c0_sm_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 5, 7, 6,10, 9, 9,10,
  9, 9, 4, 7, 7,10, 9, 9,11, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10,10,10,11, 9,10, 6, 9, 9,
 10,10,10,11,10, 9, 7,10,10,11,11,11,11,11,11, 6,
  9, 9,10, 9,10,11,11,10, 6, 9, 9,10,10,10,11,10,
 11,
};

static float _vq_quantthresh__44c0_sm_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c0_sm_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p7_0 = {
 _vq_quantthresh__44c0_sm_p7_0,
 _vq_quantmap__44c0_sm_p7_0,
 3,
 3
};

static static_codebook _44c0_sm_p7_0 = {
 4, 81,
 _vq_lengthlist__44c0_sm_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c0_sm_p7_0,
 
# 12781 "oggenc.c" 3 4
((void *)0)
# 12781 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p7_0,
 
# 12783 "oggenc.c" 3 4
((void *)0)
# 12783 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c0_sm_p7_1[] = {
  2, 4, 4, 5, 5, 7, 7, 7, 7, 7, 7, 9, 5, 5, 7, 7,
  7, 7, 8, 8, 8, 8, 9, 5, 5, 7, 7, 7, 7, 8, 8, 8,
  8,10, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 7, 7, 8, 8, 8, 8,10,10,10, 8, 8, 8, 8, 8, 8,
  8, 8,10,10,10, 8, 8, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 8, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c0_sm_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c0_sm_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p7_1 = {
 _vq_quantthresh__44c0_sm_p7_1,
 _vq_quantmap__44c0_sm_p7_1,
 11,
 11
};

static static_codebook _44c0_sm_p7_1 = {
 2, 121,
 _vq_lengthlist__44c0_sm_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c0_sm_p7_1,
 
# 12834 "oggenc.c" 3 4
((void *)0)
# 12834 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p7_1,
 
# 12836 "oggenc.c" 3 4
((void *)0)
# 12836 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c0_sm_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 7, 7, 9, 9,10,10, 7, 5, 5,
  7, 7, 8, 8, 8, 8, 9, 9,10,10, 7, 5, 6, 7, 7, 8,
  8, 8, 8, 9, 9,10,10, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 9, 9, 9,10,10,11,11,12,11, 0,12,
 12, 9, 9, 9, 9,10,10,11,11,12,11, 0, 0, 0, 9, 9,
  9,10,11,11,11,11,12,12, 0, 0, 0,10,10, 9, 9,11,
 11,11,11,12,12, 0, 0, 0,13,13,10,10,11,11,12,12,
 13,13, 0, 0, 0,14,14,10,10,11,10,12,12,13,13, 0,
  0, 0, 0, 0,12,12,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,10,12,11,14,14,
};

static float _vq_quantthresh__44c0_sm_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c0_sm_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p8_0 = {
 _vq_quantthresh__44c0_sm_p8_0,
 _vq_quantmap__44c0_sm_p8_0,
 13,
 13
};

static static_codebook _44c0_sm_p8_0 = {
 2, 169,
 _vq_lengthlist__44c0_sm_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c0_sm_p8_0,
 
# 12892 "oggenc.c" 3 4
((void *)0)
# 12892 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p8_0,
 
# 12894 "oggenc.c" 3 4
((void *)0)
# 12894 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c0_sm_p8_1[] = {
  2, 4, 4, 4, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c0_sm_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c0_sm_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p8_1 = {
 _vq_quantthresh__44c0_sm_p8_1,
 _vq_quantmap__44c0_sm_p8_1,
 5,
 5
};

static static_codebook _44c0_sm_p8_1 = {
 2, 25,
 _vq_lengthlist__44c0_sm_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c0_sm_p8_1,
 
# 12931 "oggenc.c" 3 4
((void *)0)
# 12931 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p8_1,
 
# 12933 "oggenc.c" 3 4
((void *)0)
# 12933 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p9_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c0_sm_p9_0[] = {
  1, 3, 4,11,11,11,11,11,11, 4, 6, 6,10,10,10,10,
 10,10, 4, 6, 5,10,10,10,10,10,10,10, 6, 7,10, 9,
 10,10,10,10,10, 7, 9,10, 9,10,10,10,10,10, 9,10,
  7, 9,10,10,10,10,10,10,10, 9,10,10,10,10,10,10,
 10,10, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44c0_sm_p9_0[] = {
 -773.5, -552.5, -331.5, -110.5, 110.5, 331.5, 552.5, 773.5,
};

static long _vq_quantmap__44c0_sm_p9_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p9_0 = {
 _vq_quantthresh__44c0_sm_p9_0,
 _vq_quantmap__44c0_sm_p9_0,
 9,
 9
};

static static_codebook _44c0_sm_p9_0 = {
 2, 81,
 _vq_lengthlist__44c0_sm_p9_0,
 1, -516186112, 1627103232, 4, 0,
 _vq_quantlist__44c0_sm_p9_0,
 
# 12979 "oggenc.c" 3 4
((void *)0)
# 12979 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p9_0,
 
# 12981 "oggenc.c" 3 4
((void *)0)
# 12981 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c0_sm_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 9,12,12,13,13, 6, 5, 5,
  7, 7, 8, 8,10,10,12,12,14,13, 6, 5, 5, 6, 7, 8,
  8,10, 9,11,12,13,12,18, 7, 7, 7, 7, 9, 9,11,11,
 14,14,14,13,17, 7, 7, 8, 7, 9, 9,10,10,12,11,13,
 12,18,10,10, 8, 8,10,10,12,11,13,14,16,15,17,11,
 11, 8, 8,11,11,11,12,13,13,13,15,18,18,18,10,11,
 10,10,12,13,14,13,17,14,17,17,17,10,10,11,11,14,
 14,14,13,14,14,18,18,18,17,15,11,12,12,13,15,15,
 16,17,18,16,18,14,15,11,11,14,13,14,14,16,17,18,
 17,17,17,18,14,13,13,12,17,15,17,16,18,17,18,18,
 18,12,13,12,13,16,14,18,18,
};

static float _vq_quantthresh__44c0_sm_p9_1[] = {
 -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5, 25.5,
 42.5, 59.5, 76.5, 93.5,
};

static long _vq_quantmap__44c0_sm_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p9_1 = {
 _vq_quantthresh__44c0_sm_p9_1,
 _vq_quantmap__44c0_sm_p9_1,
 13,
 13
};

static static_codebook _44c0_sm_p9_1 = {
 2, 169,
 _vq_lengthlist__44c0_sm_p9_1,
 1, -522616832, 1620115456, 4, 0,
 _vq_quantlist__44c0_sm_p9_1,
 
# 13037 "oggenc.c" 3 4
((void *)0)
# 13037 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p9_1,
 
# 13039 "oggenc.c" 3 4
((void *)0)
# 13039 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c0_sm_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c0_sm_p9_2[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9,10, 6, 6, 7, 7, 8, 7, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9,10, 6, 6, 7, 7, 7, 7, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9,10, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,11,10,10, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10, 9,10,11,10, 9, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,10,11,11, 9, 8, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,11,10,11,11, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,11,11, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,10,10,11,11,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,10,
 11,11,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,11,10,
 11,11,10,10, 9,10,10,10, 9, 9, 9, 9, 9, 9,10,10,
 10,11,11,11,11,10,10, 9, 9, 9, 9, 9, 9, 9, 9,10,
 11,10,11,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,11,11,11,10,11,11, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c0_sm_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c0_sm_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c0_sm_p9_2 = {
 _vq_quantthresh__44c0_sm_p9_2,
 _vq_quantmap__44c0_sm_p9_2,
 17,
 17
};

static static_codebook _44c0_sm_p9_2 = {
 2, 289,
 _vq_lengthlist__44c0_sm_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c0_sm_p9_2,
 
# 13108 "oggenc.c" 3 4
((void *)0)
# 13108 "oggenc.c"
    ,
 &_vq_auxt__44c0_sm_p9_2,
 
# 13110 "oggenc.c" 3 4
((void *)0)
# 13110 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c0_sm_short[] = {
  5, 7,12,12,13,13,13,15,16,18, 4, 2,11, 5, 9, 7,
  9,12,13,14,13, 7, 8, 9, 8, 9,11,13,19,19, 9, 4,
 12, 5,10, 7, 9,12,15,14,11, 6, 7, 7, 5, 6, 8,11,
 15,17,10, 5, 8, 6, 6, 5, 6, 9,14,14,10, 5, 9, 7,
  7, 6, 6, 9,12,14,12, 6,10, 7, 7, 7, 8, 9,13,14,
 14, 7, 9, 7, 5, 5, 6, 9,11,13,14, 9,10, 9, 6, 6,
  7, 8,10,13,
};

static static_codebook _huff_book__44c0_sm_short = {
 2, 100,
 _huff_lengthlist__44c0_sm_short,
 0, 0, 0, 0, 0,
 
# 13128 "oggenc.c" 3 4
((void *)0)
# 13128 "oggenc.c"
    ,
 
# 13129 "oggenc.c" 3 4
((void *)0)
# 13129 "oggenc.c"
    ,
 
# 13130 "oggenc.c" 3 4
((void *)0)
# 13130 "oggenc.c"
    ,
 
# 13131 "oggenc.c" 3 4
((void *)0)
# 13131 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c1_s_long[] = {
  3, 4,19, 9,10, 9, 9,10,11,12, 4, 2,19, 5, 6, 6,
  8,10,12,11,19,19,19,19,19,19,19,19,18,18, 8, 4,
 18, 6, 8, 7,10,13,14,13,10, 5,18, 7, 4, 6, 7,10,
 12,13, 9, 6,18, 7, 5, 6, 7,10,12,13, 9, 7,18, 9,
  7, 6, 6, 7,10,13, 9, 9,18,12, 9, 8, 6, 6, 9,12,
 10,12,18,15,12,11, 9, 8, 8,11,11,14,18,17,15,13,
 12, 9,10,12,
};

static static_codebook _huff_book__44c1_s_long = {
 2, 100,
 _huff_lengthlist__44c1_s_long,
 0, 0, 0, 0, 0,
 
# 13149 "oggenc.c" 3 4
((void *)0)
# 13149 "oggenc.c"
    ,
 
# 13150 "oggenc.c" 3 4
((void *)0)
# 13150 "oggenc.c"
    ,
 
# 13151 "oggenc.c" 3 4
((void *)0)
# 13151 "oggenc.c"
    ,
 
# 13152 "oggenc.c" 3 4
((void *)0)
# 13152 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c1_s_p1_0[] = {
  2, 4, 4, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 0, 0, 0, 0,
  0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0,
  0, 0, 0, 0, 8, 9, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9,
  0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c1_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p1_0 = {
 _vq_quantthresh__44c1_s_p1_0,
 _vq_quantmap__44c1_s_p1_0,
 3,
 3
};

static static_codebook _44c1_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c1_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c1_s_p1_0,
 
# 13596 "oggenc.c" 3 4
((void *)0)
# 13596 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p1_0,
 
# 13598 "oggenc.c" 3 4
((void *)0)
# 13598 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p2_0 = {
 _vq_quantthresh__44c1_s_p2_0,
 _vq_quantmap__44c1_s_p2_0,
 5,
 5
};

static static_codebook _44c1_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c1_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_s_p2_0,
 
# 13673 "oggenc.c" 3 4
((void *)0)
# 13673 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p2_0,
 
# 13675 "oggenc.c" 3 4
((void *)0)
# 13675 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_s_p3_0[] = {
  2, 3, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p3_0 = {
 _vq_quantthresh__44c1_s_p3_0,
 _vq_quantmap__44c1_s_p3_0,
 5,
 5
};

static static_codebook _44c1_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c1_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_s_p3_0,
 
# 13750 "oggenc.c" 3 4
((void *)0)
# 13750 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p3_0,
 
# 13752 "oggenc.c" 3 4
((void *)0)
# 13752 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c1_s_p4_0[] = {
  1, 3, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 9, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c1_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p4_0 = {
 _vq_quantthresh__44c1_s_p4_0,
 _vq_quantmap__44c1_s_p4_0,
 9,
 9
};

static static_codebook _44c1_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c1_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c1_s_p4_0,
 
# 13798 "oggenc.c" 3 4
((void *)0)
# 13798 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p4_0,
 
# 13800 "oggenc.c" 3 4
((void *)0)
# 13800 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c1_s_p5_0[] = {
  1, 3, 3, 5, 5, 6, 6, 8, 8, 0, 0, 0, 7, 7, 8, 7,
  9, 9, 0, 0, 0, 7, 7, 8, 8, 9, 9, 0, 0, 0, 7, 7,
  8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0, 0, 0,
  8, 8, 9, 9,10,10, 0, 0, 0, 8, 8, 9, 9,10,10, 0,
  0, 0,10,10, 9, 9,11,11, 0, 0, 0, 0, 0, 9, 9,11,
 11,
};

static float _vq_quantthresh__44c1_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c1_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p5_0 = {
 _vq_quantthresh__44c1_s_p5_0,
 _vq_quantmap__44c1_s_p5_0,
 9,
 9
};

static static_codebook _44c1_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c1_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c1_s_p5_0,
 
# 13846 "oggenc.c" 3 4
((void *)0)
# 13846 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p5_0,
 
# 13848 "oggenc.c" 3 4
((void *)0)
# 13848 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c1_s_p6_0[] = {
  1, 3, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,
 11,11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9,10,10,10,10,
 10,10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9, 9,10,10,
 10,11,11,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,12,13,12, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 9, 9,
 10,10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9,
  9,10, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
 10,10,10,10,11,11,11,11,12,12,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,11,11,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,13,12,13,13, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,12,13,13,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,11,12,12,12,13,13,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,12,12,13,13,14,
 14,
};

static float _vq_quantthresh__44c1_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c1_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p6_0 = {
 _vq_quantthresh__44c1_s_p6_0,
 _vq_quantmap__44c1_s_p6_0,
 17,
 17
};

static static_codebook _44c1_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c1_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c1_s_p6_0,
 
# 13917 "oggenc.c" 3 4
((void *)0)
# 13917 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p6_0,
 
# 13919 "oggenc.c" 3 4
((void *)0)
# 13919 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c1_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10,11,10,10, 9, 9, 6, 9, 9,
 10,10,10,10, 9, 9, 7,10,10,11,10,10,11,11,11, 6,
  9, 9,10, 9, 9,11,10,10, 6, 9, 9,10, 9, 9,11,10,
 10,
};

static float _vq_quantthresh__44c1_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c1_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p7_0 = {
 _vq_quantthresh__44c1_s_p7_0,
 _vq_quantmap__44c1_s_p7_0,
 3,
 3
};

static static_codebook _44c1_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c1_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c1_s_p7_0,
 
# 13958 "oggenc.c" 3 4
((void *)0)
# 13958 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p7_0,
 
# 13960 "oggenc.c" 3 4
((void *)0)
# 13960 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c1_s_p7_1[] = {
  2, 3, 3, 6, 6, 7, 7, 7, 7, 8, 8,10,10,10, 6, 6,
  7, 7, 8, 8, 8, 8,10,10,10, 6, 6, 7, 7, 8, 8, 8,
  8,10,10,10, 7, 7, 7, 7, 8, 8, 8, 8,10,10,10, 7,
  7, 7, 7, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 8, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c1_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c1_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p7_1 = {
 _vq_quantthresh__44c1_s_p7_1,
 _vq_quantmap__44c1_s_p7_1,
 11,
 11
};

static static_codebook _44c1_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c1_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c1_s_p7_1,
 
# 14011 "oggenc.c" 3 4
((void *)0)
# 14011 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p7_1,
 
# 14013 "oggenc.c" 3 4
((void *)0)
# 14013 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_s_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 7, 7, 9, 8,10,10, 6, 5, 5,
  7, 7, 8, 8, 8, 8, 9, 9,10,10, 7, 6, 6, 7, 7, 8,
  8, 8, 8, 9, 9,10,10, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 9, 9, 9,10,10,10,11,12,11, 0,12,
 13, 9, 8, 9, 9,10,10,11,11,11,11, 0, 0, 0, 9, 9,
  9, 9,10,10,11,11,12,12, 0, 0, 0,10,10, 9, 9,10,
 10,11,11,12,12, 0, 0, 0,13,14,10,10,11,11,12,12,
 12,13, 0, 0, 0,14,14,10,10,11,10,12,12,13,13, 0,
  0, 0, 0, 0,12,11,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,10,12,11,14,13,
};

static float _vq_quantthresh__44c1_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c1_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p8_0 = {
 _vq_quantthresh__44c1_s_p8_0,
 _vq_quantmap__44c1_s_p8_0,
 13,
 13
};

static static_codebook _44c1_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c1_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c1_s_p8_0,
 
# 14069 "oggenc.c" 3 4
((void *)0)
# 14069 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p8_0,
 
# 14071 "oggenc.c" 3 4
((void *)0)
# 14071 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_s_p8_1[] = {
  2, 3, 3, 5, 5, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 6,
  6, 6, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c1_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p8_1 = {
 _vq_quantthresh__44c1_s_p8_1,
 _vq_quantmap__44c1_s_p8_1,
 5,
 5
};

static static_codebook _44c1_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c1_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_s_p8_1,
 
# 14108 "oggenc.c" 3 4
((void *)0)
# 14108 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p8_1,
 
# 14110 "oggenc.c" 3 4
((void *)0)
# 14110 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_s_p9_0[] = {
  1, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 6,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 6, 6, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 8,
};

static float _vq_quantthresh__44c1_s_p9_0[] = {
 -1215.5, -994.5, -773.5, -552.5, -331.5, -110.5, 110.5, 331.5,
 552.5, 773.5, 994.5, 1215.5,
};

static long _vq_quantmap__44c1_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p9_0 = {
 _vq_quantthresh__44c1_s_p9_0,
 _vq_quantmap__44c1_s_p9_0,
 13,
 13
};

static static_codebook _44c1_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c1_s_p9_0,
 1, -514541568, 1627103232, 4, 0,
 _vq_quantlist__44c1_s_p9_0,
 
# 14166 "oggenc.c" 3 4
((void *)0)
# 14166 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p9_0,
 
# 14168 "oggenc.c" 3 4
((void *)0)
# 14168 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_s_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 9,12,12,13,12, 6, 5, 5,
  7, 7, 8, 8,10,10,11,12,13,13, 6, 5, 5, 7, 7, 8,
  8, 9, 9,11,11,12,12,15, 7, 7, 7, 7, 9, 9,11,11,
 13,13,14,13,15, 7, 7, 8, 7, 9, 9,10,10,12,11,14,
 12,15,10,10, 8, 8,10,10,12,11,12,13,14,13,15,10,
 10, 8, 8,11,10,11,11,13,12,13,15,14,15,15,10,10,
 10,10,12,13,13,12,15,14,15,15,13,10,10,11,11,13,
 13,13,12,13,13,15,15,15,14,15,11,11,13,13,13,13,
 14,15,15,15,15,13,13,11,11,12,13,13,14,13,15,15,
 15,14,15,15,13,12,12,11,13,13,15,15,15,15,15,15,
 14,13,12,13,12,15,13,15,15,
};

static float _vq_quantthresh__44c1_s_p9_1[] = {
 -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5, 25.5,
 42.5, 59.5, 76.5, 93.5,
};

static long _vq_quantmap__44c1_s_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p9_1 = {
 _vq_quantthresh__44c1_s_p9_1,
 _vq_quantmap__44c1_s_p9_1,
 13,
 13
};

static static_codebook _44c1_s_p9_1 = {
 2, 169,
 _vq_lengthlist__44c1_s_p9_1,
 1, -522616832, 1620115456, 4, 0,
 _vq_quantlist__44c1_s_p9_1,
 
# 14224 "oggenc.c" 3 4
((void *)0)
# 14224 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p9_1,
 
# 14226 "oggenc.c" 3 4
((void *)0)
# 14226 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_s_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c1_s_p9_2[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 8, 9, 9,
  9,10,10,10, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9,10,10,10, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9,10,10,11,10, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9,10, 9, 9, 9,10,10,10, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,11, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10, 9,10,10,10,11,11, 9, 8, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,11,11,11,11, 9, 9,
  9, 9, 9, 9,10, 9,10, 9, 9, 9,10,10,10,11,10, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,11,11,11,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,10,
 11,11,10, 9, 9,10, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 11,11,11,10, 9,10,10,10, 9, 9, 9, 9,10, 9,10,10,
 10,10,11,11,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
 11,10,10,10,10,10,10, 9, 9, 9, 9,10, 9, 9, 9, 9,
 10,10,10,11,11,10,10,11,11, 9, 9,10, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c1_s_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c1_s_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c1_s_p9_2 = {
 _vq_quantthresh__44c1_s_p9_2,
 _vq_quantmap__44c1_s_p9_2,
 17,
 17
};

static static_codebook _44c1_s_p9_2 = {
 2, 289,
 _vq_lengthlist__44c1_s_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c1_s_p9_2,
 
# 14295 "oggenc.c" 3 4
((void *)0)
# 14295 "oggenc.c"
    ,
 &_vq_auxt__44c1_s_p9_2,
 
# 14297 "oggenc.c" 3 4
((void *)0)
# 14297 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c1_s_short[] = {
  5, 7,17,13,12,12,14,16,15,16, 4, 2,17, 5, 7, 6,
  8,11,14,13,16,16,16,16,16,16,16,16,16,16,10, 4,
 16, 4, 8, 6, 7,11,14,14,10, 5,16, 6, 5, 6, 8,12,
 15,15,10, 5,16, 5, 6, 5, 7,10,14,15,11, 6,16, 7,
  8, 7, 7,10,14,14,13, 8,16, 8, 7, 7, 8,10,12,13,
 12, 8,16, 7, 5, 5, 6, 8,11,13,13, 9,16, 9, 6, 6,
  7, 8,10,13,
};

static static_codebook _huff_book__44c1_s_short = {
 2, 100,
 _huff_lengthlist__44c1_s_short,
 0, 0, 0, 0, 0,
 
# 14315 "oggenc.c" 3 4
((void *)0)
# 14315 "oggenc.c"
    ,
 
# 14316 "oggenc.c" 3 4
((void *)0)
# 14316 "oggenc.c"
    ,
 
# 14317 "oggenc.c" 3 4
((void *)0)
# 14317 "oggenc.c"
    ,
 
# 14318 "oggenc.c" 3 4
((void *)0)
# 14318 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c1_sm_long[] = {
  3, 4,10, 9,11, 9,10,11,11,13, 4, 2,11, 5, 7, 7,
  8,10,12,13,10,10, 7,12, 8, 9, 9,10,12,13, 8, 5,
 13, 6, 9, 7,10,12,15,15,10, 6, 7, 8, 5, 5, 7,10,
 12,13, 9, 6, 8, 7, 5, 5, 6, 9,11,12, 9, 8, 9, 9,
  6, 5, 5, 7,10,13,10,10,10,12, 9, 7, 6, 7, 9,13,
 10,13,11,17,11,11, 9, 8, 9,12,12,16,14,17,15,14,
 12,10,10,12,
};

static static_codebook _huff_book__44c1_sm_long = {
 2, 100,
 _huff_lengthlist__44c1_sm_long,
 0, 0, 0, 0, 0,
 
# 14336 "oggenc.c" 3 4
((void *)0)
# 14336 "oggenc.c"
    ,
 
# 14337 "oggenc.c" 3 4
((void *)0)
# 14337 "oggenc.c"
    ,
 
# 14338 "oggenc.c" 3 4
((void *)0)
# 14338 "oggenc.c"
    ,
 
# 14339 "oggenc.c" 3 4
((void *)0)
# 14339 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c1_sm_p1_0[] = {
  1, 5, 5, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 7, 0, 0, 0, 0,
  0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 9, 9,10, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 9,10, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_sm_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c1_sm_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p1_0 = {
 _vq_quantthresh__44c1_sm_p1_0,
 _vq_quantmap__44c1_sm_p1_0,
 3,
 3
};

static static_codebook _44c1_sm_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c1_sm_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c1_sm_p1_0,
 
# 14783 "oggenc.c" 3 4
((void *)0)
# 14783 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p1_0,
 
# 14785 "oggenc.c" 3 4
((void *)0)
# 14785 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_sm_p2_0[] = {
  1, 5, 5, 0, 0, 0, 5, 6, 0, 0, 0, 5, 6, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 8,
  8, 0, 0, 0, 8, 8, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0, 0, 8, 8, 0, 0,
  0, 8, 8, 0, 0, 0,10, 9, 0, 0, 0, 0, 0, 0, 0, 6,
  8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 9,
 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8,
  0, 0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0,
  0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0,10,10, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  8,10,10, 0, 0, 0,10,10, 0, 0, 0, 9,10, 0, 0, 0,
 10,10, 0, 0, 0, 0, 0, 0, 0, 8,10,10, 0, 0, 0,10,
 10, 0, 0, 0,10, 9, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_sm_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_sm_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p2_0 = {
 _vq_quantthresh__44c1_sm_p2_0,
 _vq_quantmap__44c1_sm_p2_0,
 5,
 5
};

static static_codebook _44c1_sm_p2_0 = {
 4, 625,
 _vq_lengthlist__44c1_sm_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_sm_p2_0,
 
# 14860 "oggenc.c" 3 4
((void *)0)
# 14860 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p2_0,
 
# 14862 "oggenc.c" 3 4
((void *)0)
# 14862 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_sm_p3_0[] = {
  2, 3, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 8, 8,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_sm_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_sm_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p3_0 = {
 _vq_quantthresh__44c1_sm_p3_0,
 _vq_quantmap__44c1_sm_p3_0,
 5,
 5
};

static static_codebook _44c1_sm_p3_0 = {
 4, 625,
 _vq_lengthlist__44c1_sm_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_sm_p3_0,
 
# 14937 "oggenc.c" 3 4
((void *)0)
# 14937 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p3_0,
 
# 14939 "oggenc.c" 3 4
((void *)0)
# 14939 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c1_sm_p4_0[] = {
  1, 3, 3, 7, 7, 0, 0, 0, 0, 0, 5, 5, 6, 6, 0, 0,
  0, 0, 0, 5, 5, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 9, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c1_sm_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c1_sm_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p4_0 = {
 _vq_quantthresh__44c1_sm_p4_0,
 _vq_quantmap__44c1_sm_p4_0,
 9,
 9
};

static static_codebook _44c1_sm_p4_0 = {
 2, 81,
 _vq_lengthlist__44c1_sm_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c1_sm_p4_0,
 
# 14985 "oggenc.c" 3 4
((void *)0)
# 14985 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p4_0,
 
# 14987 "oggenc.c" 3 4
((void *)0)
# 14987 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c1_sm_p5_0[] = {
  2, 3, 3, 5, 5, 6, 6, 8, 8, 0, 5, 5, 6, 6, 7, 7,
  9, 9, 0, 5, 5, 6, 6, 7, 7, 9, 9, 0, 6, 6, 7, 7,
  7, 7, 9, 9, 0, 0, 0, 7, 7, 7, 7, 9, 9, 0, 0, 0,
  7, 7, 8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0,
  0, 0, 9, 9, 9, 9,10,10, 0, 0, 0, 0, 0, 8, 8,10,
 10,
};

static float _vq_quantthresh__44c1_sm_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c1_sm_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p5_0 = {
 _vq_quantthresh__44c1_sm_p5_0,
 _vq_quantmap__44c1_sm_p5_0,
 9,
 9
};

static static_codebook _44c1_sm_p5_0 = {
 2, 81,
 _vq_lengthlist__44c1_sm_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c1_sm_p5_0,
 
# 15033 "oggenc.c" 3 4
((void *)0)
# 15033 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p5_0,
 
# 15035 "oggenc.c" 3 4
((void *)0)
# 15035 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c1_sm_p6_0[] = {
  2, 3, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,10,10,10,10,
 11,11, 0, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,10,10,10,
 10,11,11, 0, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,
 10,10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9,
  9,10,10,11,11,12,12, 0, 0, 0, 8, 8, 8, 8,10,10,
 10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8, 8,10,
 10,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8, 8,
  9, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 8,
  8, 9, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  9, 9,10,10,10,10,11,11,12,12,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,10,10,11,11,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,10,10,11,11,11,11,13,12,13,13, 0, 0,
  0, 0, 0, 0, 0,10,10,11,11,11,11,13,13,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,11,11,12,12,13,13,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,12,12,13,12,14,
 14,
};

static float _vq_quantthresh__44c1_sm_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c1_sm_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p6_0 = {
 _vq_quantthresh__44c1_sm_p6_0,
 _vq_quantmap__44c1_sm_p6_0,
 17,
 17
};

static static_codebook _44c1_sm_p6_0 = {
 2, 289,
 _vq_lengthlist__44c1_sm_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c1_sm_p6_0,
 
# 15104 "oggenc.c" 3 4
((void *)0)
# 15104 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p6_0,
 
# 15106 "oggenc.c" 3 4
((void *)0)
# 15106 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c1_sm_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,10,10,10, 6, 9, 9,10,10,10,10, 9, 9, 6, 9, 9,
 10,10,10,10,10, 9, 7,10,10,11,10,10,11,11,11, 6,
  9, 9,10, 9, 9,11,10,10, 6, 9, 9,10, 9, 9,11,10,
 10,
};

static float _vq_quantthresh__44c1_sm_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c1_sm_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p7_0 = {
 _vq_quantthresh__44c1_sm_p7_0,
 _vq_quantmap__44c1_sm_p7_0,
 3,
 3
};

static static_codebook _44c1_sm_p7_0 = {
 4, 81,
 _vq_lengthlist__44c1_sm_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c1_sm_p7_0,
 
# 15145 "oggenc.c" 3 4
((void *)0)
# 15145 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p7_0,
 
# 15147 "oggenc.c" 3 4
((void *)0)
# 15147 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c1_sm_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 7, 7, 8, 8,10, 5, 5, 6, 6,
  7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8,10, 7, 6, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 8, 8, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 9, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 8, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c1_sm_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c1_sm_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p7_1 = {
 _vq_quantthresh__44c1_sm_p7_1,
 _vq_quantmap__44c1_sm_p7_1,
 11,
 11
};

static static_codebook _44c1_sm_p7_1 = {
 2, 121,
 _vq_lengthlist__44c1_sm_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c1_sm_p7_1,
 
# 15198 "oggenc.c" 3 4
((void *)0)
# 15198 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p7_1,
 
# 15200 "oggenc.c" 3 4
((void *)0)
# 15200 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_sm_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 6, 5, 5,
  7, 7, 8, 8, 8, 8, 9, 9,10,10, 7, 5, 6, 7, 7, 8,
  8, 8, 8, 9, 9,11,10, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 9, 9, 9,10,10,11,11,12,11, 0,13,
 13, 9, 9, 9, 9,10,10,11,11,12,12, 0, 0, 0, 9, 9,
  9, 9,10,10,11,12,12,12, 0, 0, 0,10,10, 9, 9,11,
 11,12,12,13,13, 0, 0, 0,13,13,10,10,11,11,12,12,
 13,13, 0, 0, 0,14,14,10,10,11,10,12,12,13,13, 0,
  0, 0, 0, 0,12,11,11,11,12,12,14,13, 0, 0, 0, 0,
  0,12,12,11,10,12,12,14,13,
};

static float _vq_quantthresh__44c1_sm_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c1_sm_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p8_0 = {
 _vq_quantthresh__44c1_sm_p8_0,
 _vq_quantmap__44c1_sm_p8_0,
 13,
 13
};

static static_codebook _44c1_sm_p8_0 = {
 2, 169,
 _vq_lengthlist__44c1_sm_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c1_sm_p8_0,
 
# 15256 "oggenc.c" 3 4
((void *)0)
# 15256 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p8_0,
 
# 15258 "oggenc.c" 3 4
((void *)0)
# 15258 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c1_sm_p8_1[] = {
  2, 4, 4, 4, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c1_sm_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c1_sm_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p8_1 = {
 _vq_quantthresh__44c1_sm_p8_1,
 _vq_quantmap__44c1_sm_p8_1,
 5,
 5
};

static static_codebook _44c1_sm_p8_1 = {
 2, 25,
 _vq_lengthlist__44c1_sm_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c1_sm_p8_1,
 
# 15295 "oggenc.c" 3 4
((void *)0)
# 15295 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p8_1,
 
# 15297 "oggenc.c" 3 4
((void *)0)
# 15297 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_sm_p9_0[] = {
  1, 5, 5,11,11,11,11,11,11,11,11,11,11, 4, 5, 5,
 11,10,11,11,11,11,11,11,11,11, 4, 5, 4,11,11,11,
 11,11,11,11,11,11,11,11, 6, 7,11, 9,11,11,11,11,
 11,11,11,11,11, 6, 7, 9, 8,11,11,11,11,11,11,11,
 11,11, 9, 9, 7, 8,11,11,11,11,11,11,11,11,11,10,
 10, 9,10,11,11,11,11,11,11,11,11,11,11,11, 8,11,
 10,10,11,11,11,11,11,11,11,11,11, 9,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11, 9,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,10,10,10,10,10,
};

static float _vq_quantthresh__44c1_sm_p9_0[] = {
 -1215.5, -994.5, -773.5, -552.5, -331.5, -110.5, 110.5, 331.5,
 552.5, 773.5, 994.5, 1215.5,
};

static long _vq_quantmap__44c1_sm_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p9_0 = {
 _vq_quantthresh__44c1_sm_p9_0,
 _vq_quantmap__44c1_sm_p9_0,
 13,
 13
};

static static_codebook _44c1_sm_p9_0 = {
 2, 169,
 _vq_lengthlist__44c1_sm_p9_0,
 1, -514541568, 1627103232, 4, 0,
 _vq_quantlist__44c1_sm_p9_0,
 
# 15353 "oggenc.c" 3 4
((void *)0)
# 15353 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p9_0,
 
# 15355 "oggenc.c" 3 4
((void *)0)
# 15355 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c1_sm_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7,10,10,12,12,13,13, 6, 5, 5,
  7, 7, 8, 8,10,10,12,12,14,13, 6, 5, 5, 7, 7, 8,
  8,10,10,12,12,13,13,16, 7, 7, 7, 7, 9, 9,11,11,
 13,14,13,15,18, 7, 6, 8, 7, 9, 9,11,10,12,12,14,
 12,19,10,10, 8, 8,10,10,12,11,13,15,15,15,17,11,
 11, 8, 7,11,10,12,12,13,13,14,15,16,17,17,10,11,
 10,10,13,13,14,13,16,15,17,17,16,10,10,11,11,14,
 14,16,13,14,14,17,19,17,15,14,11,11,13,13,15,14,
 16,15,17,16,17,14,14,11,11,14,13,14,14,14,15,17,
 16,16,16,17,13,13,13,13,16,14,17,15,16,17,18,18,
 17,13,13,13,13,15,15,16,16,
};

static float _vq_quantthresh__44c1_sm_p9_1[] = {
 -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5, 25.5,
 42.5, 59.5, 76.5, 93.5,
};

static long _vq_quantmap__44c1_sm_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p9_1 = {
 _vq_quantthresh__44c1_sm_p9_1,
 _vq_quantmap__44c1_sm_p9_1,
 13,
 13
};

static static_codebook _44c1_sm_p9_1 = {
 2, 169,
 _vq_lengthlist__44c1_sm_p9_1,
 1, -522616832, 1620115456, 4, 0,
 _vq_quantlist__44c1_sm_p9_1,
 
# 15411 "oggenc.c" 3 4
((void *)0)
# 15411 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p9_1,
 
# 15413 "oggenc.c" 3 4
((void *)0)
# 15413 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c1_sm_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c1_sm_p9_2[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9,10, 6, 6, 7, 7, 8, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9,10, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9,10, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9, 9, 9,11,11,11, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10,10, 7, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10, 9,10,10,10, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,10,11,11, 8, 8, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9,10,11,10,11,11, 9, 9,
  9, 9, 9, 9, 9,10,10, 9, 9, 9,10,11,10,11,11, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,11,11,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,11,10,11,
 11,10,11, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,
 11,11,11,11, 9,10,10,10, 9, 9, 9, 9,10, 9,10,10,
 10,11,11,11,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,10,
 11,10,11,10,11,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,11,11,10,10,10,11, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c1_sm_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c1_sm_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c1_sm_p9_2 = {
 _vq_quantthresh__44c1_sm_p9_2,
 _vq_quantmap__44c1_sm_p9_2,
 17,
 17
};

static static_codebook _44c1_sm_p9_2 = {
 2, 289,
 _vq_lengthlist__44c1_sm_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c1_sm_p9_2,
 
# 15482 "oggenc.c" 3 4
((void *)0)
# 15482 "oggenc.c"
    ,
 &_vq_auxt__44c1_sm_p9_2,
 
# 15484 "oggenc.c" 3 4
((void *)0)
# 15484 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c1_sm_short[] = {
  4, 7,13,13,13,13,14,16,16,19, 4, 2,13, 5, 8, 7,
  9,12,14,13,16, 9,10,10, 9,10,11,13,17,19, 9, 4,
 13, 5,10, 6, 8,11,15,15,11, 6, 9, 7, 6, 6, 8,11,
 14,18,11, 5, 9, 6, 6, 5, 6, 9,13,15,12, 6, 9, 7,
  6, 5, 5, 8,12,15,13, 7,10, 8, 6, 6, 7, 9,12,13,
 13, 9,11, 9, 6, 5, 6, 8,11,13,13,11,13,11, 7, 6,
  7, 8,10,12,
};

static static_codebook _huff_book__44c1_sm_short = {
 2, 100,
 _huff_lengthlist__44c1_sm_short,
 0, 0, 0, 0, 0,
 
# 15502 "oggenc.c" 3 4
((void *)0)
# 15502 "oggenc.c"
    ,
 
# 15503 "oggenc.c" 3 4
((void *)0)
# 15503 "oggenc.c"
    ,
 
# 15504 "oggenc.c" 3 4
((void *)0)
# 15504 "oggenc.c"
    ,
 
# 15505 "oggenc.c" 3 4
((void *)0)
# 15505 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c2_s_long[] = {
  5, 5,12,10,11,10,10,10,11,13, 5, 1, 9, 5, 8, 7,
  8,10,13,13,12, 9, 8,11, 7, 8, 9,11,13,15, 9, 5,
 12, 6, 9, 8,10,12,15,14,12, 7, 6, 8, 5, 6, 7,10,
 12,13,10, 7, 8, 7, 6, 6, 7, 9,12,12,10, 8, 9, 9,
  7, 6, 6, 7,10,11,10, 9,10,11, 9, 8, 6, 6, 8,11,
 10,12,13,15,11,10, 8, 7, 8,11,11,13,16,16,14,13,
 11, 9, 9,10,
};

static static_codebook _huff_book__44c2_s_long = {
 2, 100,
 _huff_lengthlist__44c2_s_long,
 0, 0, 0, 0, 0,
 
# 15523 "oggenc.c" 3 4
((void *)0)
# 15523 "oggenc.c"
    ,
 
# 15524 "oggenc.c" 3 4
((void *)0)
# 15524 "oggenc.c"
    ,
 
# 15525 "oggenc.c" 3 4
((void *)0)
# 15525 "oggenc.c"
    ,
 
# 15526 "oggenc.c" 3 4
((void *)0)
# 15526 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c2_s_p1_0[] = {
  2, 4, 4, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 0, 0, 0, 0,
  0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0,
  0, 0, 0, 0, 8, 9, 8, 0, 0, 0, 0, 0, 0, 8, 9,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 0, 0, 0, 8,10, 9, 0,
  0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9,
  0, 0, 0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c2_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c2_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p1_0 = {
 _vq_quantthresh__44c2_s_p1_0,
 _vq_quantmap__44c2_s_p1_0,
 3,
 3
};

static static_codebook _44c2_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c2_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c2_s_p1_0,
 
# 15970 "oggenc.c" 3 4
((void *)0)
# 15970 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p1_0,
 
# 15972 "oggenc.c" 3 4
((void *)0)
# 15972 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c2_s_p2_0[] = {
  1, 4, 4, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0,
  7, 7, 0, 0, 0, 0, 0, 0, 0, 4, 6, 6, 0, 0, 0, 8,
  8, 0, 0, 0, 8, 8, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0,
  0, 0, 4, 6, 6, 0, 0, 0, 8, 9, 0, 0, 0, 8, 8, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,11,10, 0, 0,
  0,11,11, 0, 0, 0,11,11, 0, 0, 0, 0, 0, 0, 0, 7,
  8, 8, 0, 0, 0,10,11, 0, 0, 0,11,11, 0, 0, 0,11,
 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 8, 8, 0, 0, 0,11,11, 0, 0, 0,11,11,
  0, 0, 0,11,11, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0,
  0, 0,11,11, 0, 0, 0,11,11, 0, 0, 0,11,11, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7, 9, 9, 0, 0, 0,11,12, 0, 0, 0,11,12, 0, 0, 0,
 12,11, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,12,
 11, 0, 0, 0,11,11, 0, 0, 0,11,11, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c2_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c2_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p2_0 = {
 _vq_quantthresh__44c2_s_p2_0,
 _vq_quantmap__44c2_s_p2_0,
 5,
 5
};

static static_codebook _44c2_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c2_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c2_s_p2_0,
 
# 16047 "oggenc.c" 3 4
((void *)0)
# 16047 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p2_0,
 
# 16049 "oggenc.c" 3 4
((void *)0)
# 16049 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c2_s_p3_0[] = {
  2, 4, 3, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 5, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c2_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c2_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p3_0 = {
 _vq_quantthresh__44c2_s_p3_0,
 _vq_quantmap__44c2_s_p3_0,
 5,
 5
};

static static_codebook _44c2_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c2_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c2_s_p3_0,
 
# 16124 "oggenc.c" 3 4
((void *)0)
# 16124 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p3_0,
 
# 16126 "oggenc.c" 3 4
((void *)0)
# 16126 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c2_s_p4_0[] = {
  1, 3, 3, 6, 6, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0,
  0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  7, 8, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c2_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c2_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p4_0 = {
 _vq_quantthresh__44c2_s_p4_0,
 _vq_quantmap__44c2_s_p4_0,
 9,
 9
};

static static_codebook _44c2_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c2_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c2_s_p4_0,
 
# 16172 "oggenc.c" 3 4
((void *)0)
# 16172 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p4_0,
 
# 16174 "oggenc.c" 3 4
((void *)0)
# 16174 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c2_s_p5_0[] = {
  1, 3, 3, 6, 6, 6, 6, 8, 8, 0, 7, 7, 7, 7, 8, 8,
  9, 9, 0, 7, 7, 7, 7, 8, 8, 9, 9, 0, 7, 7, 8, 7,
  8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0, 0, 0,
  8, 8, 9, 9,10,10, 0, 0, 0, 8, 8, 9, 9,10,10, 0,
  0, 0,10,10, 9, 9,11,11, 0, 0, 0, 0, 0, 9, 9,11,
 11,
};

static float _vq_quantthresh__44c2_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c2_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p5_0 = {
 _vq_quantthresh__44c2_s_p5_0,
 _vq_quantmap__44c2_s_p5_0,
 9,
 9
};

static static_codebook _44c2_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c2_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c2_s_p5_0,
 
# 16220 "oggenc.c" 3 4
((void *)0)
# 16220 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p5_0,
 
# 16222 "oggenc.c" 3 4
((void *)0)
# 16222 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c2_s_p6_0[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,10,
 11,11, 0, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9,10,10,10,
 10,11,11, 0, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,11,11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9, 9, 9, 9, 9,
 10,10,11,11,12,12, 0, 0, 0, 8, 8, 9, 9, 9, 9, 9,
  9,10,11,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,11,12,12,12, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 9, 9,
  9, 9,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 9,
  9, 9, 9,10,10,11,11,12,12,12,13, 0, 0, 0, 0, 0,
 10,10,10,10,10,11,11,11,12,12,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,10,10,11,11,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,12,12,13,13, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,11,12,12,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,11,11,12,12,13,12,14,13,
  0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,12,12,12,13,13,
 14,
};

static float _vq_quantthresh__44c2_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c2_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p6_0 = {
 _vq_quantthresh__44c2_s_p6_0,
 _vq_quantmap__44c2_s_p6_0,
 17,
 17
};

static static_codebook _44c2_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c2_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c2_s_p6_0,
 
# 16291 "oggenc.c" 3 4
((void *)0)
# 16291 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p6_0,
 
# 16293 "oggenc.c" 3 4
((void *)0)
# 16293 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c2_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10, 9,10,10,
 10,11,10,10, 6, 9, 9,10,10,10,11, 9, 9, 6, 9, 9,
 10,10,10,11, 9, 9, 7,10,10,11,10,10,11,11,10, 6,
  9, 9,10, 9, 9,11,10,10, 6, 9, 9,10, 9,10,11,10,
 10,
};

static float _vq_quantthresh__44c2_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c2_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p7_0 = {
 _vq_quantthresh__44c2_s_p7_0,
 _vq_quantmap__44c2_s_p7_0,
 3,
 3
};

static static_codebook _44c2_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c2_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c2_s_p7_0,
 
# 16332 "oggenc.c" 3 4
((void *)0)
# 16332 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p7_0,
 
# 16334 "oggenc.c" 3 4
((void *)0)
# 16334 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c2_s_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 7, 7, 7, 7,10, 6, 6, 6, 6,
  7, 7, 8, 7, 8, 8, 9, 6, 6, 6, 6, 7, 7, 7, 7, 7,
  7,10, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8,10, 9, 9, 6,
  6, 7, 7, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10, 9, 8, 8, 8,
  8, 8, 8,10,10,10, 9,10, 8, 8, 8, 8, 8, 8,10,10,
 10,10, 9, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c2_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c2_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p7_1 = {
 _vq_quantthresh__44c2_s_p7_1,
 _vq_quantmap__44c2_s_p7_1,
 11,
 11
};

static static_codebook _44c2_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c2_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c2_s_p7_1,
 
# 16385 "oggenc.c" 3 4
((void *)0)
# 16385 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p7_1,
 
# 16387 "oggenc.c" 3 4
((void *)0)
# 16387 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c2_s_p8_0[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 6, 5, 5,
  7, 7, 8, 8, 9, 8, 9, 9,10,10, 7, 5, 5, 7, 7, 8,
  8, 8, 9,10, 9,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9,10,10,10,11,
 11, 0,12,12, 9, 9,10,10,10,10,11,11,12,12, 0,13,
 12, 9, 9,10, 9,10,10,11,11,11,12, 0, 0, 0,10,10,
 10,10,11,11,11,11,12,12, 0, 0, 0,10,10, 9, 9,11,
 11,12,12,12,13, 0, 0, 0,13,13,10,10,11,11,12,12,
 13,13, 0, 0, 0,14,14,10,10,11,11,12,12,13,13, 0,
  0, 0, 0, 0,12,12,11,12,12,12,14,13, 0, 0, 0, 0,
  0,12,12,12,12,12,12,14,13,
};

static float _vq_quantthresh__44c2_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c2_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p8_0 = {
 _vq_quantthresh__44c2_s_p8_0,
 _vq_quantmap__44c2_s_p8_0,
 13,
 13
};

static static_codebook _44c2_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c2_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c2_s_p8_0,
 
# 16443 "oggenc.c" 3 4
((void *)0)
# 16443 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p8_0,
 
# 16445 "oggenc.c" 3 4
((void *)0)
# 16445 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c2_s_p8_1[] = {
  2, 4, 4, 4, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c2_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c2_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p8_1 = {
 _vq_quantthresh__44c2_s_p8_1,
 _vq_quantmap__44c2_s_p8_1,
 5,
 5
};

static static_codebook _44c2_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c2_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c2_s_p8_1,
 
# 16482 "oggenc.c" 3 4
((void *)0)
# 16482 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p8_1,
 
# 16484 "oggenc.c" 3 4
((void *)0)
# 16484 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c2_s_p9_0[] = {
  1, 5, 4,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 5, 7, 7,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9, 6, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44c2_s_p9_0[] = {
 -1215.5, -994.5, -773.5, -552.5, -331.5, -110.5, 110.5, 331.5,
 552.5, 773.5, 994.5, 1215.5,
};

static long _vq_quantmap__44c2_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p9_0 = {
 _vq_quantthresh__44c2_s_p9_0,
 _vq_quantmap__44c2_s_p9_0,
 13,
 13
};

static static_codebook _44c2_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c2_s_p9_0,
 1, -514541568, 1627103232, 4, 0,
 _vq_quantlist__44c2_s_p9_0,
 
# 16540 "oggenc.c" 3 4
((void *)0)
# 16540 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p9_0,
 
# 16542 "oggenc.c" 3 4
((void *)0)
# 16542 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c2_s_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 9,11,11,12,12, 6, 5, 5,
  7, 7, 8, 8,10,10,12,11,13,13, 6, 5, 5, 7, 7, 8,
  8, 9, 9,11,11,12,13,16, 7, 7, 8, 8, 9, 9,10,10,
 13,13,16,14,16, 7, 7, 8, 8, 9, 9,10,10,13,13,15,
 13,16,10,10, 8, 8,10,10,11,11,12,12,15,14,16,11,
 11, 8, 8,10,10,11,11,12,12,14,13,16,16,16,10,11,
 10,10,12,12,14,13,13,13,16,16,16,10, 9,10, 7,13,
 12,13,13,13,13,16,16,16,14,15,11,11,12,12,13,13,
 15,14,16,16,16,16,14,11, 9,12, 9,15,13,13,14,16,
 16,16,16,16,13,13,12,12,14,15,16,15,16,16,15,16,
 16,13,12,12,11,15,13,14,15,
};

static float _vq_quantthresh__44c2_s_p9_1[] = {
 -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5, 25.5,
 42.5, 59.5, 76.5, 93.5,
};

static long _vq_quantmap__44c2_s_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p9_1 = {
 _vq_quantthresh__44c2_s_p9_1,
 _vq_quantmap__44c2_s_p9_1,
 13,
 13
};

static static_codebook _44c2_s_p9_1 = {
 2, 169,
 _vq_lengthlist__44c2_s_p9_1,
 1, -522616832, 1620115456, 4, 0,
 _vq_quantlist__44c2_s_p9_1,
 
# 16598 "oggenc.c" 3 4
((void *)0)
# 16598 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p9_1,
 
# 16600 "oggenc.c" 3 4
((void *)0)
# 16600 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c2_s_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c2_s_p9_2[] = {
  2, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9,
  9,10, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9,10, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9,10, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10,11,10, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10,10, 7, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,11,11, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 8, 8, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,11,11,10,11,10, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,11,10, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,10,10,11,11,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9, 9,11,10,10,11,
 10,10,11, 9, 9,10,10, 9, 9,10,10, 9, 9,10,10,10,
 11,10,11,10,10, 9, 9,10, 9, 9, 9, 9, 9, 9,10,10,
 10,10,11,10,10, 9,10, 9, 9, 9, 9,10, 9, 9, 9,10,
 10,10,11,11,10,10,10,10, 9, 9,10, 9, 9, 9,10, 9,
 10,10,10,10,11,10,11,11,10, 9, 9, 9, 9, 9, 9, 9,
 10,
};

static float _vq_quantthresh__44c2_s_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c2_s_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c2_s_p9_2 = {
 _vq_quantthresh__44c2_s_p9_2,
 _vq_quantmap__44c2_s_p9_2,
 17,
 17
};

static static_codebook _44c2_s_p9_2 = {
 2, 289,
 _vq_lengthlist__44c2_s_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c2_s_p9_2,
 
# 16669 "oggenc.c" 3 4
((void *)0)
# 16669 "oggenc.c"
    ,
 &_vq_auxt__44c2_s_p9_2,
 
# 16671 "oggenc.c" 3 4
((void *)0)
# 16671 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c2_s_short[] = {
  9, 9,12,11,11,11,12,12,12,13, 6, 2, 9, 4, 7, 6,
  8,11,15,17,12, 7, 8, 9, 7, 9,10,13,15,17,11, 4,
 12, 4, 9, 5, 8,11,16,17,12, 6, 7, 6, 6, 6, 8,11,
 15,17,11, 5, 9, 5, 6, 5, 6,10,15,15,12, 7,11, 7,
  7, 6, 7,10,13,16,13, 8,11, 9, 8, 6, 7,10,12,16,
 13, 9, 9, 8, 5, 5, 6, 9,12,14,16,10, 9, 9, 6, 5,
  6, 8,11,14,
};

static static_codebook _huff_book__44c2_s_short = {
 2, 100,
 _huff_lengthlist__44c2_s_short,
 0, 0, 0, 0, 0,
 
# 16689 "oggenc.c" 3 4
((void *)0)
# 16689 "oggenc.c"
    ,
 
# 16690 "oggenc.c" 3 4
((void *)0)
# 16690 "oggenc.c"
    ,
 
# 16691 "oggenc.c" 3 4
((void *)0)
# 16691 "oggenc.c"
    ,
 
# 16692 "oggenc.c" 3 4
((void *)0)
# 16692 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c3_s_long[] = {
  4, 5,11,10,12,10,10,10,11,12, 4, 2,11, 5,11, 6,
  7, 9,13,16,11,11, 7,11, 6, 8, 8, 9,11,12,10, 5,
 11, 6,10, 7, 9,11,16,16,14, 9, 6, 9, 4, 5, 7, 8,
 11,13,10, 6, 7, 7, 5, 5, 6, 8,10,11,10, 7, 8, 8,
  6, 6, 5, 7, 9,10,10, 9, 8,11, 8, 7, 6, 6, 7,10,
 10,12,10,14, 9, 9, 7, 7, 7, 9,10,14,11,16,12,12,
  9, 8, 8, 9,
};

static static_codebook _huff_book__44c3_s_long = {
 2, 100,
 _huff_lengthlist__44c3_s_long,
 0, 0, 0, 0, 0,
 
# 16710 "oggenc.c" 3 4
((void *)0)
# 16710 "oggenc.c"
    ,
 
# 16711 "oggenc.c" 3 4
((void *)0)
# 16711 "oggenc.c"
    ,
 
# 16712 "oggenc.c" 3 4
((void *)0)
# 16712 "oggenc.c"
    ,
 
# 16713 "oggenc.c" 3 4
((void *)0)
# 16713 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c3_s_p1_0[] = {
  2, 4, 4, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 0, 0, 0, 0,
  0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0,
  0, 0, 0, 0, 8, 9, 8, 0, 0, 0, 0, 0, 0, 8, 9,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 0, 0, 0, 8,10, 9, 0,
  0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9,
  0, 0, 0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c3_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c3_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p1_0 = {
 _vq_quantthresh__44c3_s_p1_0,
 _vq_quantmap__44c3_s_p1_0,
 3,
 3
};

static static_codebook _44c3_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c3_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c3_s_p1_0,
 
# 17157 "oggenc.c" 3 4
((void *)0)
# 17157 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p1_0,
 
# 17159 "oggenc.c" 3 4
((void *)0)
# 17159 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c3_s_p2_0[] = {
  2, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0,
  8, 7, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 0, 0, 0, 8,
  7, 0, 0, 0, 7, 7, 0, 0, 0,10, 9, 0, 0, 0, 0, 0,
  0, 0, 5, 5, 6, 0, 0, 0, 7, 8, 0, 0, 0, 7, 7, 0,
  0, 0, 9,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 7, 7, 0, 0,
  0, 7, 8, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 5,
  7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 9,
  9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 5, 8, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7,
  0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 8, 0,
  0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  8, 9,10, 0, 0, 0, 9, 9, 0, 0, 0, 9, 9, 0, 0, 0,
 10,10, 0, 0, 0, 0, 0, 0, 0, 8,10, 9, 0, 0, 0, 9,
  9, 0, 0, 0, 9, 9, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c3_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c3_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p2_0 = {
 _vq_quantthresh__44c3_s_p2_0,
 _vq_quantmap__44c3_s_p2_0,
 5,
 5
};

static static_codebook _44c3_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c3_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c3_s_p2_0,
 
# 17234 "oggenc.c" 3 4
((void *)0)
# 17234 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p2_0,
 
# 17236 "oggenc.c" 3 4
((void *)0)
# 17236 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c3_s_p3_0[] = {
  2, 3, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 8, 8,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c3_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c3_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p3_0 = {
 _vq_quantthresh__44c3_s_p3_0,
 _vq_quantmap__44c3_s_p3_0,
 5,
 5
};

static static_codebook _44c3_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c3_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c3_s_p3_0,
 
# 17311 "oggenc.c" 3 4
((void *)0)
# 17311 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p3_0,
 
# 17313 "oggenc.c" 3 4
((void *)0)
# 17313 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c3_s_p4_0[] = {
  2, 3, 3, 6, 6, 0, 0, 0, 0, 0, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 4, 4, 6, 6, 0, 0, 0, 0, 0, 5, 5, 6, 6,
  0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0,
  7, 7, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c3_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c3_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p4_0 = {
 _vq_quantthresh__44c3_s_p4_0,
 _vq_quantmap__44c3_s_p4_0,
 9,
 9
};

static static_codebook _44c3_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c3_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c3_s_p4_0,
 
# 17359 "oggenc.c" 3 4
((void *)0)
# 17359 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p4_0,
 
# 17361 "oggenc.c" 3 4
((void *)0)
# 17361 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c3_s_p5_0[] = {
  2, 3, 3, 5, 5, 7, 7, 9, 8, 0, 4, 4, 7, 7, 7, 7,
  9, 9, 0, 5, 5, 6, 7, 7, 7, 9, 9, 0, 6, 6, 7, 7,
  7, 7, 9, 9, 0, 0, 0, 7, 7, 7, 7, 9, 9, 0, 0, 0,
  8, 8, 8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0,
  0, 0,10,10, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__44c3_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c3_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p5_0 = {
 _vq_quantthresh__44c3_s_p5_0,
 _vq_quantmap__44c3_s_p5_0,
 9,
 9
};

static static_codebook _44c3_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c3_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c3_s_p5_0,
 
# 17407 "oggenc.c" 3 4
((void *)0)
# 17407 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p5_0,
 
# 17409 "oggenc.c" 3 4
((void *)0)
# 17409 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c3_s_p6_0[] = {
  2, 3, 3, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 5, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 11,11, 0, 5, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,
 11,11,11, 0, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 8, 8, 9, 9,10, 9,
 10,10,11,11,12,12, 0, 0, 0, 8, 8, 8, 8, 9, 9,10,
  9,10,10,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,12,11,12,12, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8, 8,
  9, 9,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8,
  8, 9, 9,10,10,11,11,12,12,13,12, 0, 0, 0, 0, 0,
  9, 9,10,10,11,10,11,11,12,12,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,10,10,11,11,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,10,10,11,11,12,12,12,12,13,13, 0, 0,
  0, 0, 0, 0, 0,10,10,11,11,11,11,12,12,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,12,12,12,12,12,13,13,13,
  0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,12,12,12,12,13,
 13,
};

static float _vq_quantthresh__44c3_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c3_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p6_0 = {
 _vq_quantthresh__44c3_s_p6_0,
 _vq_quantmap__44c3_s_p6_0,
 17,
 17
};

static static_codebook _44c3_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c3_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c3_s_p6_0,
 
# 17478 "oggenc.c" 3 4
((void *)0)
# 17478 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p6_0,
 
# 17480 "oggenc.c" 3 4
((void *)0)
# 17480 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c3_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10,10,10,10, 9, 9, 6, 9, 9,
 10,10,10,10, 9, 9, 7,10,10,10,11,11,11,10,11, 6,
  9, 9,10,10, 9,11,10,10, 6, 9, 9,10, 9, 9,10,10,
 10,
};

static float _vq_quantthresh__44c3_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c3_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p7_0 = {
 _vq_quantthresh__44c3_s_p7_0,
 _vq_quantmap__44c3_s_p7_0,
 3,
 3
};

static static_codebook _44c3_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c3_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c3_s_p7_0,
 
# 17519 "oggenc.c" 3 4
((void *)0)
# 17519 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p7_0,
 
# 17521 "oggenc.c" 3 4
((void *)0)
# 17521 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c3_s_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6,
  7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8,10, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 8, 8, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 8, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 9,
};

static float _vq_quantthresh__44c3_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c3_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p7_1 = {
 _vq_quantthresh__44c3_s_p7_1,
 _vq_quantmap__44c3_s_p7_1,
 11,
 11
};

static static_codebook _44c3_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c3_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c3_s_p7_1,
 
# 17572 "oggenc.c" 3 4
((void *)0)
# 17572 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p7_1,
 
# 17574 "oggenc.c" 3 4
((void *)0)
# 17574 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c3_s_p8_0[] = {
  1, 4, 4, 6, 6, 7, 8, 8, 8, 9, 9,10,10, 6, 5, 5,
  7, 7, 8, 8, 9, 9, 9, 9,10,10, 7, 5, 5, 7, 7, 8,
  8, 9, 9, 9,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,11,12, 9, 9, 9,10,10,10,11,11,11,12, 0,13,
 13, 9, 9, 9, 9,10,10,11,11,12,12, 0, 0, 0,10, 9,
  9, 9,10,11,11,11,12,12, 0, 0, 0,10,10, 9, 9,11,
 11,11,11,12,13, 0, 0, 0,13,13,10,10,11,11,12,12,
 13,13, 0, 0, 0,14,14,10,10,11,11,12,12,13,13, 0,
  0, 0, 0, 0,12,12,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,11,12,12,13,13,
};

static float _vq_quantthresh__44c3_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c3_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p8_0 = {
 _vq_quantthresh__44c3_s_p8_0,
 _vq_quantmap__44c3_s_p8_0,
 13,
 13
};

static static_codebook _44c3_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c3_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c3_s_p8_0,
 
# 17630 "oggenc.c" 3 4
((void *)0)
# 17630 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p8_0,
 
# 17632 "oggenc.c" 3 4
((void *)0)
# 17632 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c3_s_p8_1[] = {
  2, 4, 4, 5, 5, 6, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c3_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c3_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p8_1 = {
 _vq_quantthresh__44c3_s_p8_1,
 _vq_quantmap__44c3_s_p8_1,
 5,
 5
};

static static_codebook _44c3_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c3_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c3_s_p8_1,
 
# 17669 "oggenc.c" 3 4
((void *)0)
# 17669 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p8_1,
 
# 17671 "oggenc.c" 3 4
((void *)0)
# 17671 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c3_s_p9_0[] = {
  1, 4, 4,10,10,10,10,10,10,10,10,10,10, 5,10, 7,
 10,10,10,10,10,10,10,10,10,10, 5, 8, 6,10,10,10,
 10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44c3_s_p9_0[] = {
 -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5, 382.5,
 637.5, 892.5, 1147.5, 1402.5,
};

static long _vq_quantmap__44c3_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p9_0 = {
 _vq_quantthresh__44c3_s_p9_0,
 _vq_quantmap__44c3_s_p9_0,
 13,
 13
};

static static_codebook _44c3_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c3_s_p9_0,
 1, -514332672, 1627381760, 4, 0,
 _vq_quantlist__44c3_s_p9_0,
 
# 17727 "oggenc.c" 3 4
((void *)0)
# 17727 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p9_0,
 
# 17729 "oggenc.c" 3 4
((void *)0)
# 17729 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c3_s_p9_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 9,11,11,11,12,12,12, 6,
  5, 5, 7, 7, 8, 8,10, 9,11,11,13,12,13,14, 6, 5,
  5, 7, 7, 8, 8,10,10,11,11,12,12,13,13,17, 7, 7,
  8, 8, 9, 9,10,10,12,12,14,13,14,14,17, 8, 7, 8,
  7, 9, 9,10,10,12,12,13,13,13,14,17,11,11, 8, 8,
 10,10,11,11,12,12,13,13,15,14,17,11,11, 8, 7,10,
 10,11,11,12,12,13,14,14,13,17,17,17,10,11,10,10,
 12,12,13,12,13,13,14,14,17,16,16,10,10,11, 9,13,
 12,13,13,13,13,14,14,16,16,15,13,15,11,12,12,12,
 14,14,14,14,14,15,16,16,16,14,14,11, 9,12,10,13,
 13,14,14,14,14,16,16,16,16,16,12,13,12,12,13,14,
 14,14,15,15,15,16,16,15,16,13,11,13,10,14,12,15,
 14,16,14,15,16,16,16,16,15,15,13,13,13,13,14,14,
 16,16,16,16,16,15,16,16,14,13,12,13,13,14,16,16,
 16,
};

static float _vq_quantthresh__44c3_s_p9_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__44c3_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p9_1 = {
 _vq_quantthresh__44c3_s_p9_1,
 _vq_quantmap__44c3_s_p9_1,
 15,
 15
};

static static_codebook _44c3_s_p9_1 = {
 2, 225,
 _vq_lengthlist__44c3_s_p9_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__44c3_s_p9_1,
 
# 17791 "oggenc.c" 3 4
((void *)0)
# 17791 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p9_1,
 
# 17793 "oggenc.c" 3 4
((void *)0)
# 17793 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c3_s_p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c3_s_p9_2[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9,
  8,10, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9,10, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9,
  9, 9, 9,10, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10,10, 8, 7, 8, 8, 9, 8, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,10,11,10, 8, 8, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,11, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,11,10,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,
 10,10,11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 11,10,11,10, 9, 9, 9,10, 9, 9, 9, 9, 9, 9,10,10,
 10,10,11,11,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,10, 9,
 10,10,10,10,11,10,11,10,10, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c3_s_p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c3_s_p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c3_s_p9_2 = {
 _vq_quantthresh__44c3_s_p9_2,
 _vq_quantmap__44c3_s_p9_2,
 17,
 17
};

static static_codebook _44c3_s_p9_2 = {
 2, 289,
 _vq_lengthlist__44c3_s_p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c3_s_p9_2,
 
# 17862 "oggenc.c" 3 4
((void *)0)
# 17862 "oggenc.c"
    ,
 &_vq_auxt__44c3_s_p9_2,
 
# 17864 "oggenc.c" 3 4
((void *)0)
# 17864 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c3_s_short[] = {
 10,10,13,12,13,12,12,12,12,13, 8, 3,11, 5,10, 5,
  7,11,14,16,11, 6, 9, 8, 7, 7, 9,12,15,16,12, 4,
 12, 4,10, 5, 8,12,15,16,12, 6, 8, 7, 5, 5, 7,11,
 14,15,11, 4, 9, 4, 6, 4, 6, 9,13,15,10, 6,10, 7,
  7, 5, 6, 9,13,15,12, 9,11, 9, 8, 6, 7, 9,12,15,
 13,11,10, 9, 6, 5, 5, 8,11,14,16,12,11,10, 6, 5,
  6, 8,10,14,
};

static static_codebook _huff_book__44c3_s_short = {
 2, 100,
 _huff_lengthlist__44c3_s_short,
 0, 0, 0, 0, 0,
 
# 17882 "oggenc.c" 3 4
((void *)0)
# 17882 "oggenc.c"
    ,
 
# 17883 "oggenc.c" 3 4
((void *)0)
# 17883 "oggenc.c"
    ,
 
# 17884 "oggenc.c" 3 4
((void *)0)
# 17884 "oggenc.c"
    ,
 
# 17885 "oggenc.c" 3 4
((void *)0)
# 17885 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c4_s_long[] = {
  3, 5,11,11,13,11,11,11,12,12, 5, 2,11, 6,10, 7,
  8,10,13,16,10, 9, 6,10, 6, 7, 8, 9,11,12,11, 5,
 11, 7,10, 8,10,12,15,17,12, 8, 5, 9, 4, 5, 7, 8,
 10,12,10, 6, 7, 8, 5, 5, 6, 8,10,11,10, 8, 8, 9,
  6, 6, 6, 7, 9,10,11,10, 9,11, 8, 7, 6, 6, 7, 9,
 11,13,10,15, 9, 9, 7, 7, 7, 8,10,15,11,17,11,11,
  9, 8, 7, 8,
};

static static_codebook _huff_book__44c4_s_long = {
 2, 100,
 _huff_lengthlist__44c4_s_long,
 0, 0, 0, 0, 0,
 
# 17903 "oggenc.c" 3 4
((void *)0)
# 17903 "oggenc.c"
    ,
 
# 17904 "oggenc.c" 3 4
((void *)0)
# 17904 "oggenc.c"
    ,
 
# 17905 "oggenc.c" 3 4
((void *)0)
# 17905 "oggenc.c"
    ,
 
# 17906 "oggenc.c" 3 4
((void *)0)
# 17906 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c4_s_p1_0[] = {
  2, 4, 4, 0, 0, 0, 0, 0, 0, 5, 7, 6, 0, 0, 0, 0,
  0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0, 0,
  0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 0, 0, 0, 0,
  0, 0, 7, 9, 8, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0, 0,
  0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 8, 0, 0,
  0, 0, 0, 0, 8,10, 8, 0, 0, 0, 0, 0, 0, 8, 9,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 7, 7, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 0,
  0, 0, 0, 0, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 8, 0, 0, 0, 0, 0, 0, 8,10, 9, 0,
  0, 0, 0, 0, 0, 8, 8,10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9,
  0, 0, 0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c4_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c4_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p1_0 = {
 _vq_quantthresh__44c4_s_p1_0,
 _vq_quantmap__44c4_s_p1_0,
 3,
 3
};

static static_codebook _44c4_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c4_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c4_s_p1_0,
 
# 18350 "oggenc.c" 3 4
((void *)0)
# 18350 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p1_0,
 
# 18352 "oggenc.c" 3 4
((void *)0)
# 18352 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c4_s_p2_0[] = {
  2, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0,
  7, 7, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 0, 0, 0, 8,
  7, 0, 0, 0, 7, 7, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 5, 6, 6, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 7, 7, 0, 0,
  0, 7, 7, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 5,
  7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 9,
  9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 5, 8, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7,
  0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 5, 7, 8, 0,
  0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7,10,10, 0, 0, 0, 9, 9, 0, 0, 0, 9, 9, 0, 0, 0,
 10,10, 0, 0, 0, 0, 0, 0, 0, 7,10,10, 0, 0, 0, 9,
  9, 0, 0, 0, 9, 9, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c4_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c4_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p2_0 = {
 _vq_quantthresh__44c4_s_p2_0,
 _vq_quantmap__44c4_s_p2_0,
 5,
 5
};

static static_codebook _44c4_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c4_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c4_s_p2_0,
 
# 18427 "oggenc.c" 3 4
((void *)0)
# 18427 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p2_0,
 
# 18429 "oggenc.c" 3 4
((void *)0)
# 18429 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c4_s_p3_0[] = {
  2, 3, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c4_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c4_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p3_0 = {
 _vq_quantthresh__44c4_s_p3_0,
 _vq_quantmap__44c4_s_p3_0,
 5,
 5
};

static static_codebook _44c4_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c4_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c4_s_p3_0,
 
# 18504 "oggenc.c" 3 4
((void *)0)
# 18504 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p3_0,
 
# 18506 "oggenc.c" 3 4
((void *)0)
# 18506 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c4_s_p4_0[] = {
  2, 3, 3, 6, 6, 0, 0, 0, 0, 0, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 4, 4, 6, 6, 0, 0, 0, 0, 0, 5, 5, 6, 6,
  0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0,
  7, 8, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c4_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c4_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p4_0 = {
 _vq_quantthresh__44c4_s_p4_0,
 _vq_quantmap__44c4_s_p4_0,
 9,
 9
};

static static_codebook _44c4_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c4_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c4_s_p4_0,
 
# 18552 "oggenc.c" 3 4
((void *)0)
# 18552 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p4_0,
 
# 18554 "oggenc.c" 3 4
((void *)0)
# 18554 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c4_s_p5_0[] = {
  2, 3, 3, 6, 6, 7, 7, 9, 9, 0, 4, 4, 7, 7, 7, 7,
  9, 9, 0, 4, 4, 7, 7, 7, 7, 9, 9, 0, 6, 6, 7, 7,
  8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0, 0, 0,
  8, 8, 8, 8,10,10, 0, 0, 0, 8, 8, 8, 8,10,10, 0,
  0, 0,10,10, 9, 9,11,11, 0, 0, 0, 0, 0, 9, 9,11,
 11,
};

static float _vq_quantthresh__44c4_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c4_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p5_0 = {
 _vq_quantthresh__44c4_s_p5_0,
 _vq_quantmap__44c4_s_p5_0,
 9,
 9
};

static static_codebook _44c4_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c4_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c4_s_p5_0,
 
# 18600 "oggenc.c" 3 4
((void *)0)
# 18600 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p5_0,
 
# 18602 "oggenc.c" 3 4
((void *)0)
# 18602 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c4_s_p6_0[] = {
  2, 4, 4, 6, 6, 8, 8, 8, 8, 9, 9,10, 9,10,10,11,
 11, 0, 4, 4, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 11,11, 0, 4, 4, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 0, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 8, 8, 8, 8, 9, 9,10, 9,
 10,11,11,11,12,12, 0, 0, 0, 8, 8, 8, 8, 9, 9,10,
 10,11,10,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,
 10,10,11,11,11,11,12,12, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,11,12,12, 0, 0, 0, 0, 0, 8, 8,
  9, 9,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0, 8,
  8, 9, 9,10,10,11,11,12,12,12,12, 0, 0, 0, 0, 0,
  9, 9,10,10,11,10,11,11,12,12,12,12, 0, 0, 0, 0,
  0, 0, 0,10,10,10,10,11,11,12,12,13,12, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,11,12,12,12,13,12, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,11,11,12,12,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,12,12,12,12,12,12,13,13,
  0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,12,12,12,12,13,
 13,
};

static float _vq_quantthresh__44c4_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c4_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p6_0 = {
 _vq_quantthresh__44c4_s_p6_0,
 _vq_quantmap__44c4_s_p6_0,
 17,
 17
};

static static_codebook _44c4_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c4_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c4_s_p6_0,
 
# 18671 "oggenc.c" 3 4
((void *)0)
# 18671 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p6_0,
 
# 18673 "oggenc.c" 3 4
((void *)0)
# 18673 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c4_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10,10,10,10,10, 9, 6, 9, 9,
 10, 9,10,11, 9, 9, 7,10,10,11,11,11,11,10,10, 6,
  9, 9,10, 9, 9,10,10, 9, 6, 9, 9,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44c4_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c4_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p7_0 = {
 _vq_quantthresh__44c4_s_p7_0,
 _vq_quantmap__44c4_s_p7_0,
 3,
 3
};

static static_codebook _44c4_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c4_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c4_s_p7_0,
 
# 18712 "oggenc.c" 3 4
((void *)0)
# 18712 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p7_0,
 
# 18714 "oggenc.c" 3 4
((void *)0)
# 18714 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c4_s_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6,
  7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8,10, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 8, 8, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 8, 9,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c4_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c4_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p7_1 = {
 _vq_quantthresh__44c4_s_p7_1,
 _vq_quantmap__44c4_s_p7_1,
 11,
 11
};

static static_codebook _44c4_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c4_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c4_s_p7_1,
 
# 18765 "oggenc.c" 3 4
((void *)0)
# 18765 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p7_1,
 
# 18767 "oggenc.c" 3 4
((void *)0)
# 18767 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c4_s_p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 8, 8, 9, 9,10,10, 6, 5, 5,
  7, 7, 8, 8, 9, 9,10,10,11,11, 7, 5, 5, 7, 7, 8,
  8, 9, 9,10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 9, 9, 9,10,10,10,10,11,11, 0,12,
 12, 9, 8, 9, 9,10,10,11,11,12,11, 0, 0, 0, 9,10,
  9, 9,10,10,11,11,12,12, 0, 0, 0,10,10, 9, 9,10,
 10,11,11,12,12, 0, 0, 0,13,13,10,10,10,11,12,12,
 12,12, 0, 0, 0,14,14,10,10,11,11,11,11,12,12, 0,
  0, 0, 0, 0,11,12,11,11,12,12,12,13, 0, 0, 0, 0,
  0,12,12,11,11,12,12,13,13,
};

static float _vq_quantthresh__44c4_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c4_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p8_0 = {
 _vq_quantthresh__44c4_s_p8_0,
 _vq_quantmap__44c4_s_p8_0,
 13,
 13
};

static static_codebook _44c4_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c4_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c4_s_p8_0,
 
# 18823 "oggenc.c" 3 4
((void *)0)
# 18823 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p8_0,
 
# 18825 "oggenc.c" 3 4
((void *)0)
# 18825 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c4_s_p8_1[] = {
  2, 4, 4, 5, 5, 6, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c4_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c4_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p8_1 = {
 _vq_quantthresh__44c4_s_p8_1,
 _vq_quantmap__44c4_s_p8_1,
 5,
 5
};

static static_codebook _44c4_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c4_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c4_s_p8_1,
 
# 18862 "oggenc.c" 3 4
((void *)0)
# 18862 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p8_1,
 
# 18864 "oggenc.c" 3 4
((void *)0)
# 18864 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c4_s_p9_0[] = {
  1, 3, 3,10,10,10,10,10,10,10,10,10,10, 5, 7, 7,
 10,10,10,10,10,10,10,10,10,10, 5, 7, 8,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10, 9, 9, 9, 9,
};

static float _vq_quantthresh__44c4_s_p9_0[] = {
 -1732.5, -1417.5, -1102.5, -787.5, -472.5, -157.5, 157.5, 472.5,
 787.5, 1102.5, 1417.5, 1732.5,
};

static long _vq_quantmap__44c4_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p9_0 = {
 _vq_quantthresh__44c4_s_p9_0,
 _vq_quantmap__44c4_s_p9_0,
 13,
 13
};

static static_codebook _44c4_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c4_s_p9_0,
 1, -513964032, 1628680192, 4, 0,
 _vq_quantlist__44c4_s_p9_0,
 
# 18920 "oggenc.c" 3 4
((void *)0)
# 18920 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p9_0,
 
# 18922 "oggenc.c" 3 4
((void *)0)
# 18922 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c4_s_p9_1[] = {
  1, 4, 4, 5, 6, 7, 7, 9, 9,11,11,12,12,12,13, 6,
  5, 5, 6, 7, 8, 8,10,10,11,11,13,13,13,13, 6, 5,
  5, 7, 7, 8, 8,11,10,11,11,12,13,12,13,17, 7, 7,
  8, 8, 9, 9,11,11,12,12,12,13,15,14,17, 7, 7, 8,
  8, 9, 9,11,10,12,12,13,13,14,13,17,11,12, 9, 9,
 10,10,12,12,13,13,14,14,14,14,17,12,11, 9, 8,11,
 10,11,12,13,13,13,14,14,14,17,17,17,11,11,11,11,
 13,13,13,13,14,13,15,14,17,17,17,11,10,11, 9,13,
 12,13,14,15,14,15,14,17,17,17,14,14,11,12,12,13,
 14,14,16,15,15,15,17,17,17,15,15,12,11,13,11,13,
 13,13,15,16,14,17,17,17,17,17,13,13,14,13,14,14,
 15,15,16,15,17,17,17,17,17,14,14,14,12,14,12,16,
 14,15,14,17,17,17,17,17,16,17,13,14,14,15,15,15,
 17,15,17,17,17,17,17,16,17,13,14,14,14,15,17,15,
 15,
};

static float _vq_quantthresh__44c4_s_p9_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44c4_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p9_1 = {
 _vq_quantthresh__44c4_s_p9_1,
 _vq_quantmap__44c4_s_p9_1,
 15,
 15
};

static static_codebook _44c4_s_p9_1 = {
 2, 225,
 _vq_lengthlist__44c4_s_p9_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44c4_s_p9_1,
 
# 18984 "oggenc.c" 3 4
((void *)0)
# 18984 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p9_1,
 
# 18986 "oggenc.c" 3 4
((void *)0)
# 18986 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c4_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c4_s_p9_2[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9,11, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,11, 5, 5, 7, 7, 7,
  7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,
  7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,11,11,11, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9,10,10,10,10,10,10,11,11,11, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,11,11,
 11, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,
 10,10,10,11,11,11, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,10,10,10,10,11,11,11,11,11, 8, 8, 9,
  9, 9, 9, 9,10,10,10,10,10,10,10,10,10,11,11,11,
 11,11, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,
 10,10,11,11,11,11,11, 9, 9, 9, 9, 9,10,10,10,10,
 10,10,10,10,10,10,10,11,11,11,11,11, 9, 9, 9, 9,
 10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,
 11,11,11, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,
 10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,11,11,11,11,11,11,11,10,10, 9,
 10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,
 11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,
 10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,
 10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,
 12,11,11,10,10,10,10,10,10,10,10,10,10,10,10,12,
 11,12,12,11,11,11,11,11,10,10,10,10,10,10,10,10,
 10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44c4_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c4_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c4_s_p9_2 = {
 _vq_quantthresh__44c4_s_p9_2,
 _vq_quantmap__44c4_s_p9_2,
 21,
 21
};

static static_codebook _44c4_s_p9_2 = {
 2, 441,
 _vq_lengthlist__44c4_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c4_s_p9_2,
 
# 19069 "oggenc.c" 3 4
((void *)0)
# 19069 "oggenc.c"
    ,
 &_vq_auxt__44c4_s_p9_2,
 
# 19071 "oggenc.c" 3 4
((void *)0)
# 19071 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c4_s_short[] = {
  4, 9,13,12,16,11,12,15,15,16, 4, 2,11, 5,10, 6,
  8,11,14,14,13,11, 8,11, 7, 8,10,13,17,17,10, 4,
 11, 5, 9, 6, 9,13,17,17,13, 9, 6, 9, 5, 5, 7,11,
 15,17,10, 5, 7, 6, 5, 4, 7,10,15,15,10, 7, 9, 8,
  7, 6, 7,10,14,13,13,10,11,10, 8, 7, 8,10,14,14,
 12,11,10, 9, 6, 5, 6, 9,13,17,14,13,11,10, 6, 6,
  6, 8,11,16,
};

static static_codebook _huff_book__44c4_s_short = {
 2, 100,
 _huff_lengthlist__44c4_s_short,
 0, 0, 0, 0, 0,
 
# 19089 "oggenc.c" 3 4
((void *)0)
# 19089 "oggenc.c"
    ,
 
# 19090 "oggenc.c" 3 4
((void *)0)
# 19090 "oggenc.c"
    ,
 
# 19091 "oggenc.c" 3 4
((void *)0)
# 19091 "oggenc.c"
    ,
 
# 19092 "oggenc.c" 3 4
((void *)0)
# 19092 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c5_s_long[] = {
  3, 6, 9,14,11,13,12,12,12,12, 6, 3, 5, 8, 6, 8,
 10,11,12,14, 9, 5, 4,10, 5, 7, 8, 9,11,12,13, 8,
 10, 9, 9, 9,12,15,16,17,10, 6, 5, 9, 3, 5, 6, 8,
 10,12,10, 8, 7, 9, 5, 5, 6, 8,10,11,10, 9, 8,11,
  6, 6, 6, 7, 8,10,12,11, 9,13, 8, 7, 6, 6, 7, 9,
 11,13,10,15, 9, 9, 7, 7, 7, 8,10,15,10,17,11,10,
  9, 8, 7, 7,
};

static static_codebook _huff_book__44c5_s_long = {
 2, 100,
 _huff_lengthlist__44c5_s_long,
 0, 0, 0, 0, 0,
 
# 19110 "oggenc.c" 3 4
((void *)0)
# 19110 "oggenc.c"
    ,
 
# 19111 "oggenc.c" 3 4
((void *)0)
# 19111 "oggenc.c"
    ,
 
# 19112 "oggenc.c" 3 4
((void *)0)
# 19112 "oggenc.c"
    ,
 
# 19113 "oggenc.c" 3 4
((void *)0)
# 19113 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c5_s_p1_0[] = {
  2, 4, 4, 0, 0, 0, 0, 0, 0, 4, 7, 6, 0, 0, 0, 0,
  0, 0, 4, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 0, 0, 0, 0,
  0, 0, 7, 9, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 9,10,11, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 8, 0, 0,
  0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 9,10,11,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 7, 7, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 9, 8, 0, 0, 0, 0, 0, 0, 9,11,10, 0,
  0, 0, 0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 9,11,10, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c5_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c5_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p1_0 = {
 _vq_quantthresh__44c5_s_p1_0,
 _vq_quantmap__44c5_s_p1_0,
 3,
 3
};

static static_codebook _44c5_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__44c5_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c5_s_p1_0,
 
# 19557 "oggenc.c" 3 4
((void *)0)
# 19557 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p1_0,
 
# 19559 "oggenc.c" 3 4
((void *)0)
# 19559 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c5_s_p2_0[] = {
  2, 4, 4, 0, 0, 0, 6, 5, 0, 0, 0, 5, 5, 0, 0, 0,
  7, 7, 0, 0, 0, 0, 0, 0, 0, 4, 6, 5, 0, 0, 0, 8,
  7, 0, 0, 0, 8, 8, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0,
  0, 0, 4, 5, 6, 0, 0, 0, 7, 8, 0, 0, 0, 7, 8, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5, 8, 7, 0, 0, 0, 8, 8, 0, 0,
  0, 8, 8, 0, 0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 6,
  7, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0,10,
 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 7, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8,
  0, 0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 0,
  0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0,10,10, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7, 9, 9, 0, 0, 0,10,10, 0, 0, 0,10,10, 0, 0, 0,
 10,10, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,10,
 10, 0, 0, 0,10,10, 0, 0, 0,10,10, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c5_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c5_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p2_0 = {
 _vq_quantthresh__44c5_s_p2_0,
 _vq_quantmap__44c5_s_p2_0,
 5,
 5
};

static static_codebook _44c5_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c5_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c5_s_p2_0,
 
# 19634 "oggenc.c" 3 4
((void *)0)
# 19634 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p2_0,
 
# 19636 "oggenc.c" 3 4
((void *)0)
# 19636 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c5_s_p3_0[] = {
  2, 4, 3, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 5, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c5_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c5_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p3_0 = {
 _vq_quantthresh__44c5_s_p3_0,
 _vq_quantmap__44c5_s_p3_0,
 5,
 5
};

static static_codebook _44c5_s_p3_0 = {
 4, 625,
 _vq_lengthlist__44c5_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c5_s_p3_0,
 
# 19711 "oggenc.c" 3 4
((void *)0)
# 19711 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p3_0,
 
# 19713 "oggenc.c" 3 4
((void *)0)
# 19713 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c5_s_p4_0[] = {
  2, 3, 3, 6, 6, 0, 0, 0, 0, 0, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 4, 4, 6, 6, 0, 0, 0, 0, 0, 5, 5, 6, 6,
  0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0,
  8, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0,
  0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c5_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c5_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p4_0 = {
 _vq_quantthresh__44c5_s_p4_0,
 _vq_quantmap__44c5_s_p4_0,
 9,
 9
};

static static_codebook _44c5_s_p4_0 = {
 2, 81,
 _vq_lengthlist__44c5_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c5_s_p4_0,
 
# 19759 "oggenc.c" 3 4
((void *)0)
# 19759 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p4_0,
 
# 19761 "oggenc.c" 3 4
((void *)0)
# 19761 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c5_s_p5_0[] = {
  2, 3, 4, 5, 6, 7, 7, 9, 9, 0, 4, 4, 6, 6, 7, 7,
  9, 9, 0, 4, 4, 6, 6, 7, 7, 9, 9, 0, 6, 6, 7, 7,
  8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0, 0, 0,
  7, 7, 8, 8,10,10, 0, 0, 0, 7, 8, 8, 8,10,10, 0,
  0, 0, 9, 9, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__44c5_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c5_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p5_0 = {
 _vq_quantthresh__44c5_s_p5_0,
 _vq_quantmap__44c5_s_p5_0,
 9,
 9
};

static static_codebook _44c5_s_p5_0 = {
 2, 81,
 _vq_lengthlist__44c5_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c5_s_p5_0,
 
# 19807 "oggenc.c" 3 4
((void *)0)
# 19807 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p5_0,
 
# 19809 "oggenc.c" 3 4
((void *)0)
# 19809 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c5_s_p6_0[] = {
  2, 4, 4, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,11,12,
 12, 0, 4, 4, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,11,
 12,12, 0, 4, 4, 6, 6, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 0, 6, 6, 7, 7, 8, 8, 9,10,10,10,11,11,
 11,12,12,12, 0, 0, 0, 7, 7, 8, 8,10,10,10,10,11,
 11,12,12,12,12, 0, 0, 0, 7, 7, 9, 9,10,10,10,10,
 11,11,12,12,12,12, 0, 0, 0, 7, 7, 8, 9,10,10,10,
 10,11,11,12,12,12,13, 0, 0, 0, 8, 8, 9, 9,10,10,
 10,10,11,11,12,12,13,12, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 8, 8,
  9, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 8,
  8, 9, 9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  9, 9,10,10,11,11,11,12,12,12,13,13, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,11,12,12,12,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,12,13,13,13, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,12,13,12,13,13, 0,
  0, 0, 0, 0, 0, 0,11,11,12,12,12,12,13,13,13,13,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,
 13,
};

static float _vq_quantthresh__44c5_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c5_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p6_0 = {
 _vq_quantthresh__44c5_s_p6_0,
 _vq_quantmap__44c5_s_p6_0,
 17,
 17
};

static static_codebook _44c5_s_p6_0 = {
 2, 289,
 _vq_lengthlist__44c5_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c5_s_p6_0,
 
# 19878 "oggenc.c" 3 4
((void *)0)
# 19878 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p6_0,
 
# 19880 "oggenc.c" 3 4
((void *)0)
# 19880 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c5_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10,10, 9,11,10,10, 6, 9, 9,
 10, 9,10,11,10, 9, 7,10,10,11,11,11,11,10,10, 6,
  9, 9,10,10, 9,10, 9, 9, 6, 9, 9,10,10,10,11, 9,
  9,
};

static float _vq_quantthresh__44c5_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c5_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p7_0 = {
 _vq_quantthresh__44c5_s_p7_0,
 _vq_quantmap__44c5_s_p7_0,
 3,
 3
};

static static_codebook _44c5_s_p7_0 = {
 4, 81,
 _vq_lengthlist__44c5_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c5_s_p7_0,
 
# 19919 "oggenc.c" 3 4
((void *)0)
# 19919 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p7_0,
 
# 19921 "oggenc.c" 3 4
((void *)0)
# 19921 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c5_s_p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6,
  7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8,10, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10, 7,
  7, 8, 8, 8, 8, 8, 8,10,10,10, 7, 7, 8, 8, 8, 8,
  8, 8,10,10,10, 7, 7, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 9, 9, 8, 8, 9, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c5_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c5_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p7_1 = {
 _vq_quantthresh__44c5_s_p7_1,
 _vq_quantmap__44c5_s_p7_1,
 11,
 11
};

static static_codebook _44c5_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c5_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c5_s_p7_1,
 
# 19972 "oggenc.c" 3 4
((void *)0)
# 19972 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p7_1,
 
# 19974 "oggenc.c" 3 4
((void *)0)
# 19974 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c5_s_p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 8, 8, 9, 9,10,10, 6, 5, 5,
  7, 7, 8, 8, 9, 9,10,10,10,10, 7, 5, 5, 7, 7, 8,
  8, 9, 9,10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,11,12, 9, 9, 9, 9, 9,10,10,10,11,11, 0,13,
 12, 9, 9, 9, 9,10,10,11,11,11,11, 0, 0, 0, 9,10,
  9, 9,10,10,11,11,12,11, 0, 0, 0,10,10, 9, 9,10,
 10,11,11,12,12, 0, 0, 0,13,13,10,10,11,11,11,12,
 12,12, 0, 0, 0,14,14,10,10,11,11,11,11,12,12, 0,
  0, 0, 0, 0,12,12,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,11,12,12,13,13,
};

static float _vq_quantthresh__44c5_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c5_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p8_0 = {
 _vq_quantthresh__44c5_s_p8_0,
 _vq_quantmap__44c5_s_p8_0,
 13,
 13
};

static static_codebook _44c5_s_p8_0 = {
 2, 169,
 _vq_lengthlist__44c5_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c5_s_p8_0,
 
# 20030 "oggenc.c" 3 4
((void *)0)
# 20030 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p8_0,
 
# 20032 "oggenc.c" 3 4
((void *)0)
# 20032 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c5_s_p8_1[] = {
  2, 4, 4, 5, 5, 6, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c5_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c5_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p8_1 = {
 _vq_quantthresh__44c5_s_p8_1,
 _vq_quantmap__44c5_s_p8_1,
 5,
 5
};

static static_codebook _44c5_s_p8_1 = {
 2, 25,
 _vq_lengthlist__44c5_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c5_s_p8_1,
 
# 20069 "oggenc.c" 3 4
((void *)0)
# 20069 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p8_1,
 
# 20071 "oggenc.c" 3 4
((void *)0)
# 20071 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p9_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c5_s_p9_0[] = {
  1, 3, 3,11,11,11,11,11,11,11,11,11,11,11,11, 5,
  7, 7,11,11,11,11,11,11,11,11,11,11,11,11, 5, 9,
  7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44c5_s_p9_0[] = {
 -2320.5, -1963.5, -1606.5, -1249.5, -892.5, -535.5, -178.5, 178.5,
 535.5, 892.5, 1249.5, 1606.5, 1963.5, 2320.5,
};

static long _vq_quantmap__44c5_s_p9_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p9_0 = {
 _vq_quantthresh__44c5_s_p9_0,
 _vq_quantmap__44c5_s_p9_0,
 15,
 15
};

static static_codebook _44c5_s_p9_0 = {
 2, 225,
 _vq_lengthlist__44c5_s_p9_0,
 1, -512522752, 1628852224, 4, 0,
 _vq_quantlist__44c5_s_p9_0,
 
# 20133 "oggenc.c" 3 4
((void *)0)
# 20133 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p9_0,
 
# 20135 "oggenc.c" 3 4
((void *)0)
# 20135 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p9_1[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c5_s_p9_1[] = {
  1, 4, 4, 6, 6, 8, 7, 9, 9,10,10,11,11,12,12,13,
 13, 6, 5, 5, 6, 6, 8, 8,10,10,11,11,12,12,13,13,
 13,13, 6, 5, 5, 7, 7, 8, 8,10,10,11,11,12,12,13,
 13,13,13,18, 7, 7, 8, 8, 9, 9,10,11,11,11,12,12,
 13,13,13,14,18, 7, 7, 8, 8, 9, 9,11,10,12,12,13,
 13,13,13,14,15,18,12,12, 9, 9,10,10,11,11,12,12,
 13,13,13,14,14,14,18,12,12, 9, 8,10,10,11,11,12,
 12,14,13,13,14,15,15,18,16,18,11,11,11,11,12,12,
 13,13,13,14,14,14,14,15,17,18,17,11,10,11, 9,12,
 13,13,13,14,14,13,14,14,14,18,18,18,13,14,11,12,
 12,12,13,14,13,13,14,15,16,15,18,18,18,15,13,12,
  9,12,11,13,14,14,15,14,14,16,14,18,18,18,18,18,
 12,13,13,13,13,14,15,14,15,15,15,15,18,18,18,18,
 17,14,12,13,11,14,12,15,14,14,15,16,15,18,18,18,
 17,18,15,18,13,13,14,13,15,14,16,15,17,16,18,18,
 17,18,18,15,17,14,13,14,12,14,14,15,15,15,15,18,
 18,18,17,17,18,18,14,15,14,14,14,14,15,14,16,16,
 17,18,18,18,18,17,17,15,15,13,13,15,13,15,13,15,
 15,
};

static float _vq_quantthresh__44c5_s_p9_1[] = {
 -157.5, -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5,
 10.5, 31.5, 52.5, 73.5, 94.5, 115.5, 136.5, 157.5,
};

static long _vq_quantmap__44c5_s_p9_1[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p9_1 = {
 _vq_quantthresh__44c5_s_p9_1,
 _vq_quantmap__44c5_s_p9_1,
 17,
 17
};

static static_codebook _44c5_s_p9_1 = {
 2, 289,
 _vq_lengthlist__44c5_s_p9_1,
 1, -520814592, 1620377600, 5, 0,
 _vq_quantlist__44c5_s_p9_1,
 
# 20204 "oggenc.c" 3 4
((void *)0)
# 20204 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p9_1,
 
# 20206 "oggenc.c" 3 4
((void *)0)
# 20206 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c5_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c5_s_p9_2[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,11, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10,11, 5, 5, 7, 7, 7,
  7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,
  7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,11,11,11, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,11,11,11, 8, 8, 8, 8,
  8, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,11,11,
 11, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9,10,10,10,
 10,10,10,11,11,11, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9,10,10,10,10,10,10,10,11,11,11,11,11, 8, 8, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,11,11,11,
 11,11, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,
 10,10,11,11,11,11,11, 9, 9, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,10,10,10,11,11,11,11,11, 9, 9, 9, 9,
  9, 9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,
 11,11,11, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,
 10,11,11,11,11,11,11,11,10, 9,10,10,10,10,10,10,
 10,10,10, 9,10,10,11,11,11,11,11,11,11, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,
 11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 11,11,11,11,11,11,11,11,11,10,10,10,10,10, 9,10,
 10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,
 10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,
 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,
 11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,
 10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44c5_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c5_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c5_s_p9_2 = {
 _vq_quantthresh__44c5_s_p9_2,
 _vq_quantmap__44c5_s_p9_2,
 21,
 21
};

static static_codebook _44c5_s_p9_2 = {
 2, 441,
 _vq_lengthlist__44c5_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c5_s_p9_2,
 
# 20289 "oggenc.c" 3 4
((void *)0)
# 20289 "oggenc.c"
    ,
 &_vq_auxt__44c5_s_p9_2,
 
# 20291 "oggenc.c" 3 4
((void *)0)
# 20291 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c5_s_short[] = {
  3, 9,10,15,10,10,11,15,15,17, 4, 5, 7, 8, 7, 7,
  9,13,15,16, 7, 6, 6,10, 6, 8, 9,12,12,16,10, 8,
 11, 8, 8, 7,11,15,17,17, 8, 5, 5, 8, 3, 4, 6,10,
 15,17,10, 7, 7, 7, 4, 4, 5,10,14,17,10, 9, 8, 9,
  6, 5, 6,10,14,17,12,12,11,12, 9, 8, 8,11,14,17,
 13,14,13,10, 7, 5, 6, 9,13,17,14,14,14,10, 7, 5,
  6, 7,10,15,
};

static static_codebook _huff_book__44c5_s_short = {
 2, 100,
 _huff_lengthlist__44c5_s_short,
 0, 0, 0, 0, 0,
 
# 20309 "oggenc.c" 3 4
((void *)0)
# 20309 "oggenc.c"
    ,
 
# 20310 "oggenc.c" 3 4
((void *)0)
# 20310 "oggenc.c"
    ,
 
# 20311 "oggenc.c" 3 4
((void *)0)
# 20311 "oggenc.c"
    ,
 
# 20312 "oggenc.c" 3 4
((void *)0)
# 20312 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c6_s_long[] = {
  3, 8,11,13,13,13,12,12,13,18, 6, 3, 4, 7, 9, 9,
 11,11,13,16, 9, 4, 3, 5, 7, 7, 9,10,14,18,11, 7,
  4, 4, 6, 6, 8,10,14,15,11, 9, 6, 6, 6, 6, 8,10,
 13,15,10, 9, 7, 6, 6, 6, 7, 8,12,12,12,10, 9, 8,
  7, 6, 6, 7,11,12,11,10,10, 9, 9, 7, 7, 6, 9,12,
 12,12,13,13,13,10, 9, 8,10,12,13,14,16,16,17,14,
 12,11,11,13,
};

static static_codebook _huff_book__44c6_s_long = {
 2, 100,
 _huff_lengthlist__44c6_s_long,
 0, 0, 0, 0, 0,
 
# 20330 "oggenc.c" 3 4
((void *)0)
# 20330 "oggenc.c"
    ,
 
# 20331 "oggenc.c" 3 4
((void *)0)
# 20331 "oggenc.c"
    ,
 
# 20332 "oggenc.c" 3 4
((void *)0)
# 20332 "oggenc.c"
    ,
 
# 20333 "oggenc.c" 3 4
((void *)0)
# 20333 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c6_s_p1_0[] = {
  1, 5, 5, 0, 5, 5, 0, 5, 5, 5, 8, 7, 0, 9, 8, 0,
  8, 8, 6, 7, 8, 0, 8, 9, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 5, 8, 8, 0, 8, 8, 0, 8, 8, 5, 8, 8,
  0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
  9, 8, 0, 8, 8, 0, 8, 8, 5, 8, 9, 0, 8, 8, 0, 8,
  8,
};

static float _vq_quantthresh__44c6_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c6_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p1_0 = {
 _vq_quantthresh__44c6_s_p1_0,
 _vq_quantmap__44c6_s_p1_0,
 3,
 3
};

static static_codebook _44c6_s_p1_0 = {
 4, 81,
 _vq_lengthlist__44c6_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c6_s_p1_0,
 
# 20372 "oggenc.c" 3 4
((void *)0)
# 20372 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p1_0,
 
# 20374 "oggenc.c" 3 4
((void *)0)
# 20374 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c6_s_p2_0[] = {
  3, 5, 5, 8, 8, 0, 5, 5, 9, 9, 0, 5, 5, 9, 9, 0,
  7, 7,10,10, 0, 0, 0,10,10, 5, 7, 7, 9, 9, 0, 8,
  7,10, 9, 0, 8, 8,10,10, 0,10,10,11,11, 0, 0, 0,
 11,11, 5, 7, 7, 9, 9, 0, 7, 8, 9,10, 0, 7, 8,10,
 10, 0,10,10,11,11, 0, 0, 0,11,11, 8, 9, 9,11,10,
  0,11,10,12,12, 0,11,11,12,12, 0,13,13,14,14, 0,
  0, 0,14,14, 8, 9, 9,10,11, 0,10,11,12,12, 0,11,
 11,12,12, 0,13,13,14,14, 0, 0, 0,14,14, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5, 8, 8,11,11, 0, 7, 7,10,10,
  0, 7, 7,10,10, 0, 9, 8,11,10, 0, 0, 0,11,11, 5,
  7, 8,11,11, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 8,
  9,10,11, 0, 0, 0,11,11, 9,10,10,12,12, 0,10,10,
 12,11, 0,10,10,12,12, 0,12,12,13,13, 0, 0, 0,13,
 13, 9,10,10,12,12, 0,10,10,11,12, 0,10,10,12,12,
  0,12,12,13,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 5, 8, 7,11,10, 0, 7, 7,10,10, 0, 7, 7,
 10,10, 0, 8, 9,11,11, 0, 0, 0,11,10, 5, 7, 8,10,
 11, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 9, 8,11,11,
  0, 0, 0,11,11, 9,10,10,12,12, 0,10,10,12,12, 0,
 10,10,12,12, 0,12,12,13,13, 0, 0, 0,13,13, 9, 9,
 10,12,12, 0,10,10,12,12, 0,10,10,12,12, 0,12,12,
 13,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7,10,10,13,13, 0, 9, 8,12,12, 0, 8, 9,12,12, 0,
 10, 9,12,12, 0, 0, 0,12,12, 7,10,10,13,13, 0, 9,
  9,12,12, 0, 9, 8,12,12, 0, 9,10,12,12, 0, 0, 0,
 12,12,10,11,11,14,14, 0,11,10,13,13, 0,11,11,13,
 13, 0,12,12,13,13, 0, 0, 0,13,13,10,11,11,14,14,
  0,10,11,13,13, 0,11,11,13,13, 0,12,12,13,13, 0,
  0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,
 11,11,14,14, 0,11,11,13,13, 0,11,10,13,13, 0,12,
 12,13,13, 0, 0, 0,13,13,10,11,11,14,14, 0,11,11,
 13,13, 0,10,11,13,13, 0,12,12,13,13, 0, 0, 0,13,
 13,
};

static float _vq_quantthresh__44c6_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c6_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p2_0 = {
 _vq_quantthresh__44c6_s_p2_0,
 _vq_quantmap__44c6_s_p2_0,
 5,
 5
};

static static_codebook _44c6_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c6_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c6_s_p2_0,
 
# 20449 "oggenc.c" 3 4
((void *)0)
# 20449 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p2_0,
 
# 20451 "oggenc.c" 3 4
((void *)0)
# 20451 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c6_s_p3_0[] = {
  2, 4, 4, 5, 5, 7, 7, 9, 9, 0, 4, 4, 6, 6, 7, 7,
  9, 9, 0, 4, 4, 6, 6, 7, 7, 9, 9, 0, 5, 5, 6, 6,
  8, 8,10,10, 0, 0, 0, 6, 6, 8, 8,10,10, 0, 0, 0,
  7, 7, 8, 8,10,10, 0, 0, 0, 7, 7, 9, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c6_s_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c6_s_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p3_0 = {
 _vq_quantthresh__44c6_s_p3_0,
 _vq_quantmap__44c6_s_p3_0,
 9,
 9
};

static static_codebook _44c6_s_p3_0 = {
 2, 81,
 _vq_lengthlist__44c6_s_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c6_s_p3_0,
 
# 20497 "oggenc.c" 3 4
((void *)0)
# 20497 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p3_0,
 
# 20499 "oggenc.c" 3 4
((void *)0)
# 20499 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c6_s_p4_0[] = {
  3, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 0, 4, 4, 6, 6, 7, 7, 8, 8, 8, 9,10,10,11,11,
 11,11, 0, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10,11,
 11,11,11, 0, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 6, 6, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,
 10,11,11,12,12,12,12, 0, 0, 0, 6, 6, 7, 7, 9, 9,
 10,10,11,11,12,12,12,13, 0, 0, 0, 0, 0, 7, 7, 9,
  9,10,10,11,11,12,12,12,13, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c6_s_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c6_s_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p4_0 = {
 _vq_quantthresh__44c6_s_p4_0,
 _vq_quantmap__44c6_s_p4_0,
 17,
 17
};

static static_codebook _44c6_s_p4_0 = {
 2, 289,
 _vq_lengthlist__44c6_s_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c6_s_p4_0,
 
# 20568 "oggenc.c" 3 4
((void *)0)
# 20568 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p4_0,
 
# 20570 "oggenc.c" 3 4
((void *)0)
# 20570 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c6_s_p5_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 4, 7, 7, 9,10,10,10,
 10,10, 4, 7, 7, 9,10,10,10,10,10, 5, 9, 9, 9,11,
 11, 9,11,11, 7,10,10,11,12,11,12,12,12, 7,10,10,
 11,12,12,12,12,12, 6,10,10, 9,11,11,10,11,11, 7,
 10, 9,11,12,12,11,12,11, 7,10,10,11,12,12,11,12,
 12,
};

static float _vq_quantthresh__44c6_s_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c6_s_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p5_0 = {
 _vq_quantthresh__44c6_s_p5_0,
 _vq_quantmap__44c6_s_p5_0,
 3,
 3
};

static static_codebook _44c6_s_p5_0 = {
 4, 81,
 _vq_lengthlist__44c6_s_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c6_s_p5_0,
 
# 20609 "oggenc.c" 3 4
((void *)0)
# 20609 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p5_0,
 
# 20611 "oggenc.c" 3 4
((void *)0)
# 20611 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c6_s_p5_1[] = {
  3, 4, 4, 6, 6, 8, 8, 8, 8, 9, 9,11, 4, 4, 6, 6,
  8, 8, 9, 9, 9, 9,11, 4, 4, 6, 6, 8, 8, 9, 8, 9,
  9,12, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,12,12,12, 6,
  6, 8, 8, 9, 9, 9, 9,11,11,11, 7, 7, 8, 8, 9, 9,
  9, 9,11,11,11, 7, 7, 8, 8, 8, 8, 9, 9,11,11,11,
  7, 7, 8, 8, 8, 8, 9, 9,11,11,11,11,11, 8, 8, 8,
  8, 9, 9,11,11,11,11,11, 7, 7, 8, 8, 8, 8,11,11,
 11,11,11, 7, 7, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c6_s_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c6_s_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p5_1 = {
 _vq_quantthresh__44c6_s_p5_1,
 _vq_quantmap__44c6_s_p5_1,
 11,
 11
};

static static_codebook _44c6_s_p5_1 = {
 2, 121,
 _vq_lengthlist__44c6_s_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c6_s_p5_1,
 
# 20662 "oggenc.c" 3 4
((void *)0)
# 20662 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p5_1,
 
# 20664 "oggenc.c" 3 4
((void *)0)
# 20664 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c6_s_p6_0[] = {
  1, 4, 4, 6, 7, 8, 8, 8, 8, 9, 9,10,10, 5, 5, 5,
  7, 7, 9, 9, 9, 9,10,10,11,11, 6, 5, 5, 7, 7, 9,
  9, 9, 9,10,10,11,11, 0, 7, 7, 7, 7, 9, 9,10,10,
 11,11,11,11, 0, 7, 7, 7, 7, 9, 9,10,10,11,11,12,
 12, 0,11,11, 8, 8,10, 9,10,11,11,11,12,12, 0,12,
 12, 8, 8,10, 9,11,11,12,11,13,13, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__44c6_s_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c6_s_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p6_0 = {
 _vq_quantthresh__44c6_s_p6_0,
 _vq_quantmap__44c6_s_p6_0,
 13,
 13
};

static static_codebook _44c6_s_p6_0 = {
 2, 169,
 _vq_lengthlist__44c6_s_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c6_s_p6_0,
 
# 20720 "oggenc.c" 3 4
((void *)0)
# 20720 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p6_0,
 
# 20722 "oggenc.c" 3 4
((void *)0)
# 20722 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c6_s_p6_1[] = {
  3, 4, 4, 5, 5, 6, 4, 4, 5, 5, 6, 4, 4, 5, 4, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c6_s_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c6_s_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p6_1 = {
 _vq_quantthresh__44c6_s_p6_1,
 _vq_quantmap__44c6_s_p6_1,
 5,
 5
};

static static_codebook _44c6_s_p6_1 = {
 2, 25,
 _vq_lengthlist__44c6_s_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c6_s_p6_1,
 
# 20759 "oggenc.c" 3 4
((void *)0)
# 20759 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p6_1,
 
# 20761 "oggenc.c" 3 4
((void *)0)
# 20761 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c6_s_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  7, 7, 8, 8, 9, 9,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9, 9, 9,11,11,12,12,19, 7, 7, 7, 7, 9, 9,10,10,
 11,11,12,12,19, 7, 7, 7, 7, 9, 9,10,10,11,11,12,
 12,19,11,11, 8, 8,10,10,11,11,11,12,12,12,19,12,
 12, 8, 8,10, 9,11,11,12,12,13,12,19,19,19,11,11,
 10,10,11,11,12,12,13,13,19,19,19,11,11,10,10,11,
 11,12,12,13,13,19,19,19,14,14,11,11,11,12,13,13,
 13,13,19,19,19,15,15,11,11,12,12,13,12,14,14,19,
 19,19,19,18,13,13,12,12,13,13,14,14,18,18,18,18,
 18,13,12,12,12,13,13,14,14,
};

static float _vq_quantthresh__44c6_s_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44c6_s_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p7_0 = {
 _vq_quantthresh__44c6_s_p7_0,
 _vq_quantmap__44c6_s_p7_0,
 13,
 13
};

static static_codebook _44c6_s_p7_0 = {
 2, 169,
 _vq_lengthlist__44c6_s_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44c6_s_p7_0,
 
# 20817 "oggenc.c" 3 4
((void *)0)
# 20817 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p7_0,
 
# 20819 "oggenc.c" 3 4
((void *)0)
# 20819 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c6_s_p7_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 9, 5, 5, 7, 7,
  7, 7, 7, 7, 8, 8, 9, 5, 5, 6, 6, 7, 7, 7, 7, 7,
  7, 9, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 9, 9, 9, 7,
  7, 7, 7, 7, 8, 7, 8, 9, 9, 9, 7, 7, 7, 7, 8, 8,
  8, 8, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9,
  7, 7, 8, 8, 7, 7, 8, 8, 9, 9, 9, 8, 9, 8, 8, 7,
  7, 7, 7, 9, 9, 8, 8, 9, 8, 8, 7, 7, 8, 8, 9, 9,
  9, 9, 8, 7, 7, 7, 7, 8, 8,
};

static float _vq_quantthresh__44c6_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c6_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p7_1 = {
 _vq_quantthresh__44c6_s_p7_1,
 _vq_quantmap__44c6_s_p7_1,
 11,
 11
};

static static_codebook _44c6_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c6_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c6_s_p7_1,
 
# 20870 "oggenc.c" 3 4
((void *)0)
# 20870 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p7_1,
 
# 20872 "oggenc.c" 3 4
((void *)0)
# 20872 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c6_s_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 7, 7, 9, 9, 9,10,11,11, 6,
  5, 5, 8, 8, 9, 9, 8, 8, 9, 9,10,10,11,11, 6, 5,
  5, 8, 8, 9, 9, 8, 8, 9, 9,10,10,11,11,17, 8, 8,
  8, 8,10,10, 8, 9,10,10,11,11,12,11,17, 8, 8, 9,
  9,10,10, 9, 9,10,10,11,12,12,12,17,12,13, 9, 9,
 10,10, 9,10,10,10,11,11,13,12,17,13,13,10, 9,10,
 10,10,10,10,11,12,11,12,12,17,17,17, 9, 9, 9, 9,
 10,10,11,11,11,12,12,13,17,17,17, 9, 9, 9, 9,11,
 10,11,11,12,12,12,13,17,17,17,13,13,10,10,11,11,
 12,11,12,13,13,13,17,17,17,14,13,10, 9,11, 9,12,
 12,12,13,13,14,17,17,17,17,17,11,12,11,11,12,12,
 13,14,13,14,17,17,17,17,17,12,10,11, 8,12,11,13,
 14,14,14,17,17,16,16,16,13,15,11,12,12,13,13,13,
 14,14,16,16,16,16,16,14,13,12, 9,13,10,14,13,14,
 13,
};

static float _vq_quantthresh__44c6_s_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44c6_s_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p8_0 = {
 _vq_quantthresh__44c6_s_p8_0,
 _vq_quantmap__44c6_s_p8_0,
 15,
 15
};

static static_codebook _44c6_s_p8_0 = {
 2, 225,
 _vq_lengthlist__44c6_s_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44c6_s_p8_0,
 
# 20934 "oggenc.c" 3 4
((void *)0)
# 20934 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p8_0,
 
# 20936 "oggenc.c" 3 4
((void *)0)
# 20936 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c6_s_p8_1[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9,
  9, 8, 9, 9, 9,11, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8,
  7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,
  7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,11,10,11, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,11,11,11, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9,11,11,
 11, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10,10, 9,10, 9,
 10,10, 9,11,11,11, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10, 9,10, 9, 9, 9, 9,11,11,11,11,11, 8, 8, 9,
  9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,11,11,11,
 11,11, 9, 9, 9, 9, 9, 9,10, 9, 9, 9,10,10, 9, 9,
  9, 9,11,11,11,11,11, 9, 9, 9, 9, 9, 9, 9,10,10,
  9,10, 9,10,10,10,10,11,11,11,11,11, 9, 9, 9, 9,
  9, 9,10,10,10,10, 9,10,10, 9,10, 9,11,11,11,11,
 11,11,11, 9, 9, 9, 9,10, 9,10, 9, 9,10,10,10,10,
 10,10,11,11,11,11,11,11, 9, 9, 9, 9,10,10,10,10,
  9,10, 9,10,10, 9,11,11,11,11,11,11,10, 9, 9, 9,
  9, 9,10, 9,10,10,10,10,10,10,10,11,11,11,11,11,
 11,11, 9, 9,10,10,10,10,10,10,10,10,10,10,10,10,
 11,11,11,11,11,11,11,11,11, 9,10, 9,10, 9,10,10,
 10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,
 10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,
 11,11,11,10,10, 9,10,10,10,10, 9,10, 9,10,10,11,
 11,11,11,11,11,11,11,11,10,10,10, 9,10,10,10,10,
 10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,
 10, 9,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44c6_s_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c6_s_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p8_1 = {
 _vq_quantthresh__44c6_s_p8_1,
 _vq_quantmap__44c6_s_p8_1,
 21,
 21
};

static static_codebook _44c6_s_p8_1 = {
 2, 441,
 _vq_lengthlist__44c6_s_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c6_s_p8_1,
 
# 21019 "oggenc.c" 3 4
((void *)0)
# 21019 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p8_1,
 
# 21021 "oggenc.c" 3 4
((void *)0)
# 21021 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c6_s_p9_0[] = {
  1, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44c6_s_p9_0[] = {
 -3503.5, -2866.5, -2229.5, -1592.5, -955.5, -318.5, 318.5, 955.5,
 1592.5, 2229.5, 2866.5, 3503.5,
};

static long _vq_quantmap__44c6_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p9_0 = {
 _vq_quantthresh__44c6_s_p9_0,
 _vq_quantmap__44c6_s_p9_0,
 13,
 13
};

static static_codebook _44c6_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c6_s_p9_0,
 1, -511845376, 1630791680, 4, 0,
 _vq_quantlist__44c6_s_p9_0,
 
# 21077 "oggenc.c" 3 4
((void *)0)
# 21077 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p9_0,
 
# 21079 "oggenc.c" 3 4
((void *)0)
# 21079 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c6_s_p9_1[] = {
  1, 4, 4, 7, 7, 7, 7, 7, 7, 8, 9,10,11, 6, 6, 6,
  7, 8, 8, 8, 7, 8, 9,10,11,10, 6, 5, 6, 7, 8, 8,
  8, 8, 8, 9,10,10,11,14, 9, 8, 8, 8, 9, 8, 8, 9,
 10,10,12,11,14, 8, 8, 9, 8, 9, 8, 8, 8,11,10,11,
 11,14,14,13, 8, 9, 9, 9, 9,10,11,11,12,12,13,12,
 12, 8, 7,10, 9, 9, 9,11,11,11,10,13,13,13, 8, 9,
  9, 8,12,11,11,11,13,11,13,13,13, 9, 8, 9, 8,10,
 10,11,10,11,10,13,13,13,12,12, 9,10,11,11,11,12,
 13,12,13,13,13,13,12,10,10,10, 9,13,12,12,13,13,
 13,13,13,13,12,12,10,10,12,12,13,13,13,13,13,13,
 13,12,12,11,12,12,12,12,13,
};

static float _vq_quantthresh__44c6_s_p9_1[] = {
 -269.5, -220.5, -171.5, -122.5, -73.5, -24.5, 24.5, 73.5,
 122.5, 171.5, 220.5, 269.5,
};

static long _vq_quantmap__44c6_s_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p9_1 = {
 _vq_quantthresh__44c6_s_p9_1,
 _vq_quantmap__44c6_s_p9_1,
 13,
 13
};

static static_codebook _44c6_s_p9_1 = {
 2, 169,
 _vq_lengthlist__44c6_s_p9_1,
 1, -518889472, 1622704128, 4, 0,
 _vq_quantlist__44c6_s_p9_1,
 
# 21135 "oggenc.c" 3 4
((void *)0)
# 21135 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p9_1,
 
# 21137 "oggenc.c" 3 4
((void *)0)
# 21137 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c6_s_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44c6_s_p9_2[] = {
  2, 4, 3, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44c6_s_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44c6_s_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44c6_s_p9_2 = {
 _vq_quantthresh__44c6_s_p9_2,
 _vq_quantmap__44c6_s_p9_2,
 49,
 49
};

static static_codebook _44c6_s_p9_2 = {
 1, 49,
 _vq_lengthlist__44c6_s_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44c6_s_p9_2,
 
# 21231 "oggenc.c" 3 4
((void *)0)
# 21231 "oggenc.c"
    ,
 &_vq_auxt__44c6_s_p9_2,
 
# 21233 "oggenc.c" 3 4
((void *)0)
# 21233 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c6_s_short[] = {
  4, 9,11,11,13,13,17,16,17,17, 4, 4, 6, 7, 9, 9,
 12,15,17,17, 7, 5, 4, 5, 7, 8,11,12,17,17, 9, 6,
  4, 3, 5, 6,10,14,17,17,11, 8, 6, 4, 5, 6, 9,13,
 17,17,11,10, 7, 5, 5, 5, 8,12,17,17,13,12, 9, 8,
  7, 6, 8,11,17,17,13,13, 9, 6, 6, 5, 6, 9,17,17,
 17,16,10, 8, 7, 7, 8, 9,17,17,17,17,14,12,11,11,
 11,13,17,17,
};

static static_codebook _huff_book__44c6_s_short = {
 2, 100,
 _huff_lengthlist__44c6_s_short,
 0, 0, 0, 0, 0,
 
# 21251 "oggenc.c" 3 4
((void *)0)
# 21251 "oggenc.c"
    ,
 
# 21252 "oggenc.c" 3 4
((void *)0)
# 21252 "oggenc.c"
    ,
 
# 21253 "oggenc.c" 3 4
((void *)0)
# 21253 "oggenc.c"
    ,
 
# 21254 "oggenc.c" 3 4
((void *)0)
# 21254 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c7_s_long[] = {
  3, 8,11,13,14,13,13,12,14,16, 6, 4, 5, 7, 9,10,
 11,11,13,15,10, 4, 3, 5, 7, 7,10,10,14,16,11, 7,
  4, 4, 5, 6, 8,10,13,15,12, 9, 6, 5, 5, 6, 8, 9,
 13,15,11, 9, 7, 6, 5, 5, 6, 8,11,13,11,10, 9, 8,
  7, 6, 6, 7,11,12,12,11,10, 9, 8, 7, 6, 6, 9,11,
 12,12,12,12,12,10, 9, 8,10,12,12,14,15,16,16,14,
 12,10,11,13,
};

static static_codebook _huff_book__44c7_s_long = {
 2, 100,
 _huff_lengthlist__44c7_s_long,
 0, 0, 0, 0, 0,
 
# 21272 "oggenc.c" 3 4
((void *)0)
# 21272 "oggenc.c"
    ,
 
# 21273 "oggenc.c" 3 4
((void *)0)
# 21273 "oggenc.c"
    ,
 
# 21274 "oggenc.c" 3 4
((void *)0)
# 21274 "oggenc.c"
    ,
 
# 21275 "oggenc.c" 3 4
((void *)0)
# 21275 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c7_s_p1_0[] = {
  1, 5, 5, 0, 5, 5, 0, 5, 5, 6, 8, 7, 0, 9, 8, 0,
  8, 8, 5, 7, 8, 0, 8, 9, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 5, 8, 8, 0, 8, 8, 0, 8, 8, 5, 8, 8,
  0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
  9, 8, 0, 8, 8, 0, 8, 8, 5, 8, 9, 0, 8, 8, 0, 8,
  8,
};

static float _vq_quantthresh__44c7_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c7_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p1_0 = {
 _vq_quantthresh__44c7_s_p1_0,
 _vq_quantmap__44c7_s_p1_0,
 3,
 3
};

static static_codebook _44c7_s_p1_0 = {
 4, 81,
 _vq_lengthlist__44c7_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c7_s_p1_0,
 
# 21314 "oggenc.c" 3 4
((void *)0)
# 21314 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p1_0,
 
# 21316 "oggenc.c" 3 4
((void *)0)
# 21316 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c7_s_p2_0[] = {
  3, 5, 5, 8, 8, 0, 5, 5, 9, 9, 0, 5, 5, 9, 9, 0,
  7, 7,10, 9, 0, 0, 0, 9,10, 5, 7, 7, 9, 9, 0, 8,
  7,10, 9, 0, 8, 7,10, 9, 0,10, 9,11,11, 0, 0, 0,
 11,11, 6, 7, 7, 9, 9, 0, 7, 8, 9,10, 0, 7, 8,10,
 10, 0, 9, 9,11,11, 0, 0, 0,11,11, 8, 9, 9,11,10,
  0,11,10,12,12, 0,11,11,12,12, 0,13,13,14,14, 0,
  0, 0,14,14, 8, 9, 9,10,11, 0,10,11,11,12, 0,11,
 11,12,12, 0,13,13,14,14, 0, 0, 0,14,14, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5, 8, 7,11,11, 0, 7, 7,10,10,
  0, 7, 7,10,10, 0, 9, 8,11,10, 0, 0, 0,11,11, 5,
  7, 8,11,11, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 8,
  9,10,11, 0, 0, 0,11,11, 9,10,10,12,12, 0,10,10,
 12,11, 0,10,10,12,12, 0,12,12,13,13, 0, 0, 0,13,
 13, 9,10,10,12,12, 0,10,10,11,12, 0,10,10,12,12,
  0,12,12,13,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 5, 8, 7,11,10, 0, 7, 7,10,10, 0, 7, 7,
 10,10, 0, 9, 9,11,11, 0, 0, 0,11,10, 5, 7, 8,10,
 11, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 9, 9,11,11,
  0, 0, 0,10,11, 9,10, 9,12,11, 0,10,10,12,12, 0,
 10,10,12,11, 0,12,12,13,13, 0, 0, 0,13,13, 9, 9,
 10,11,12, 0,10,10,12,12, 0,10,10,11,12, 0,12,12,
 13,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7, 9, 9,13,13, 0, 9, 8,12,12, 0, 8, 9,12,12, 0,
 10, 9,12,12, 0, 0, 0,12,12, 7,10, 9,13,13, 0, 9,
  9,12,12, 0, 9, 8,12,12, 0, 9,10,12,12, 0, 0, 0,
 12,12,10,11,11,14,14, 0,11,10,13,12, 0,11,11,13,
 13, 0,12,12,13,13, 0, 0, 0,13,13,10,11,11,14,14,
  0,10,11,12,13, 0,11,11,13,13, 0,12,12,13,13, 0,
  0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,
 11,11,14,14, 0,11,11,13,13, 0,11,10,13,13, 0,12,
 12,13,13, 0, 0, 0,13,13,10,11,11,14,14, 0,11,11,
 13,13, 0,10,11,13,13, 0,12,12,13,13, 0, 0, 0,13,
 13,
};

static float _vq_quantthresh__44c7_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c7_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p2_0 = {
 _vq_quantthresh__44c7_s_p2_0,
 _vq_quantmap__44c7_s_p2_0,
 5,
 5
};

static static_codebook _44c7_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c7_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c7_s_p2_0,
 
# 21391 "oggenc.c" 3 4
((void *)0)
# 21391 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p2_0,
 
# 21393 "oggenc.c" 3 4
((void *)0)
# 21393 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c7_s_p3_0[] = {
  2, 4, 4, 5, 5, 7, 7, 8, 8, 0, 4, 4, 6, 6, 7, 7,
  9, 9, 0, 4, 4, 6, 6, 7, 7, 9, 9, 0, 5, 5, 6, 6,
  8, 8,10,10, 0, 0, 0, 6, 6, 8, 8,10,10, 0, 0, 0,
  7, 7, 9, 9,10,10, 0, 0, 0, 7, 7, 9, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c7_s_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c7_s_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p3_0 = {
 _vq_quantthresh__44c7_s_p3_0,
 _vq_quantmap__44c7_s_p3_0,
 9,
 9
};

static static_codebook _44c7_s_p3_0 = {
 2, 81,
 _vq_lengthlist__44c7_s_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c7_s_p3_0,
 
# 21439 "oggenc.c" 3 4
((void *)0)
# 21439 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p3_0,
 
# 21441 "oggenc.c" 3 4
((void *)0)
# 21441 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c7_s_p4_0[] = {
  3, 4, 4, 6, 5, 7, 7, 7, 7, 8, 8, 9, 9,10,10,11,
 11, 0, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9,10,10,10,
 11,11, 0, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8,10,10,10,
 11,11,11, 0, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 6, 6, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,12,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,
 10,11,11,12,12,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 8, 8, 9,
  9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c7_s_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c7_s_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p4_0 = {
 _vq_quantthresh__44c7_s_p4_0,
 _vq_quantmap__44c7_s_p4_0,
 17,
 17
};

static static_codebook _44c7_s_p4_0 = {
 2, 289,
 _vq_lengthlist__44c7_s_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c7_s_p4_0,
 
# 21510 "oggenc.c" 3 4
((void *)0)
# 21510 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p4_0,
 
# 21512 "oggenc.c" 3 4
((void *)0)
# 21512 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c7_s_p5_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 4, 7, 7,10,11,10,10,
 11,11, 4, 7, 7,10,10,11,10,10,11, 5,10,10, 9,12,
 11,10,12,12, 7,11,10,12,12,12,12,13,13, 7,10,11,
 11,12,12,12,13,13, 5,10,10,10,12,12,10,12,12, 7,
 11,10,12,13,13,12,12,12, 7,10,11,12,13,13,12,12,
 12,
};

static float _vq_quantthresh__44c7_s_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c7_s_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p5_0 = {
 _vq_quantthresh__44c7_s_p5_0,
 _vq_quantmap__44c7_s_p5_0,
 3,
 3
};

static static_codebook _44c7_s_p5_0 = {
 4, 81,
 _vq_lengthlist__44c7_s_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c7_s_p5_0,
 
# 21551 "oggenc.c" 3 4
((void *)0)
# 21551 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p5_0,
 
# 21553 "oggenc.c" 3 4
((void *)0)
# 21553 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c7_s_p5_1[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9,12, 4, 4, 6, 6,
  7, 7, 8, 8, 9, 9,11, 5, 5, 6, 6, 7, 7, 8, 8, 9,
  9,12, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,12,12,12, 6,
  6, 7, 7, 8, 8, 9, 9,12,12,12, 6, 6, 7, 7, 8, 8,
  9, 9,12,11,11, 6, 6, 7, 7, 8, 8, 9, 9,12,12,11,
  7, 7, 8, 8, 8, 8, 8, 8,12,12,12,11,11, 8, 8, 8,
  8, 8, 8,12,12,12,11,11, 7, 7, 7, 7, 8, 8,12,12,
 12,11,11, 7, 7, 7, 7, 8, 8,
};

static float _vq_quantthresh__44c7_s_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c7_s_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p5_1 = {
 _vq_quantthresh__44c7_s_p5_1,
 _vq_quantmap__44c7_s_p5_1,
 11,
 11
};

static static_codebook _44c7_s_p5_1 = {
 2, 121,
 _vq_lengthlist__44c7_s_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c7_s_p5_1,
 
# 21604 "oggenc.c" 3 4
((void *)0)
# 21604 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p5_1,
 
# 21606 "oggenc.c" 3 4
((void *)0)
# 21606 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c7_s_p6_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10, 9,10,10, 5, 5, 5,
  7, 7, 9, 9, 9, 9,10,10,11,11, 6, 5, 5, 7, 7, 9,
  9, 9, 9,11,10,11,11, 0, 6, 6, 7, 7, 9, 9,10,10,
 11,11,12,12, 0, 7, 7, 7, 7, 9, 9,10,10,11,11,12,
 12, 0,11,10, 8, 8,10,10,11,11,11,12,12,12, 0,11,
 11, 8, 8,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__44c7_s_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c7_s_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p6_0 = {
 _vq_quantthresh__44c7_s_p6_0,
 _vq_quantmap__44c7_s_p6_0,
 13,
 13
};

static static_codebook _44c7_s_p6_0 = {
 2, 169,
 _vq_lengthlist__44c7_s_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c7_s_p6_0,
 
# 21662 "oggenc.c" 3 4
((void *)0)
# 21662 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p6_0,
 
# 21664 "oggenc.c" 3 4
((void *)0)
# 21664 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c7_s_p6_1[] = {
  3, 4, 4, 5, 5, 6, 4, 4, 5, 5, 6, 4, 4, 4, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c7_s_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c7_s_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p6_1 = {
 _vq_quantthresh__44c7_s_p6_1,
 _vq_quantmap__44c7_s_p6_1,
 5,
 5
};

static static_codebook _44c7_s_p6_1 = {
 2, 25,
 _vq_lengthlist__44c7_s_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c7_s_p6_1,
 
# 21701 "oggenc.c" 3 4
((void *)0)
# 21701 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p6_1,
 
# 21703 "oggenc.c" 3 4
((void *)0)
# 21703 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c7_s_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  7, 7, 9, 8, 9, 9,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9, 9,10,11,11,12,12,20, 7, 7, 7, 7, 9, 9,10,10,
 11,11,12,12,20, 7, 7, 7, 7, 9, 9,10,10,11,11,12,
 12,20,11,11, 8, 8,10, 9,11,11,11,11,12,12,20,12,
 12, 8, 8, 9, 9,11,11,12,12,12,12,20,20,20,11,11,
 10,10,11,11,12,12,13,13,20,20,20,11,11,10,10,11,
 11,12,12,13,13,20,20,20,14,14,11,11,11,12,13,13,
 13,13,20,20,20,15,14,11,11,11,11,13,13,14,14,20,
 20,20,20,19,12,12,12,12,13,13,14,14,19,19,19,19,
 19,13,12,12,12,13,13,14,14,
};

static float _vq_quantthresh__44c7_s_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44c7_s_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p7_0 = {
 _vq_quantthresh__44c7_s_p7_0,
 _vq_quantmap__44c7_s_p7_0,
 13,
 13
};

static static_codebook _44c7_s_p7_0 = {
 2, 169,
 _vq_lengthlist__44c7_s_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44c7_s_p7_0,
 
# 21759 "oggenc.c" 3 4
((void *)0)
# 21759 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p7_0,
 
# 21761 "oggenc.c" 3 4
((void *)0)
# 21761 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c7_s_p7_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 9, 5, 5, 6, 6,
  7, 7, 7, 7, 8, 8, 9, 5, 5, 6, 6, 7, 7, 7, 7, 7,
  7, 9, 6, 6, 7, 7, 7, 7, 8, 8, 7, 8, 9, 9, 9, 7,
  7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 7, 7, 7, 7, 8, 8,
  8, 8, 9, 9, 9, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9,
  7, 7, 8, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 7, 7, 7,
  7, 8, 7, 9, 9, 9, 9, 9, 8, 8, 7, 7, 8, 8, 9, 9,
  9, 9, 9, 7, 7, 7, 7, 8, 8,
};

static float _vq_quantthresh__44c7_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c7_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p7_1 = {
 _vq_quantthresh__44c7_s_p7_1,
 _vq_quantmap__44c7_s_p7_1,
 11,
 11
};

static static_codebook _44c7_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c7_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c7_s_p7_1,
 
# 21812 "oggenc.c" 3 4
((void *)0)
# 21812 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p7_1,
 
# 21814 "oggenc.c" 3 4
((void *)0)
# 21814 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c7_s_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9, 9, 9,10,11,11, 6,
  5, 5, 8, 8, 9, 9, 8, 8, 9, 9,10,10,11,11, 6, 5,
  5, 8, 8, 9, 9, 8, 8, 9, 9,10,10,11,11,17, 8, 8,
  8, 8,10, 9, 8, 9,10,10,11,11,11,11,17, 8, 8, 8,
  8,10,10, 9, 9,10,10,11,11,12,12,17,12,13, 9, 9,
 10,10, 9, 9,10,11,11,11,12,12,17,13,13, 9, 9,10,
 10,10,10,10,10,11,11,12,12,17,17,17, 9, 9, 9, 9,
 10,10,11,11,11,12,12,12,17,17,17, 9, 9, 9, 9,11,
 10,11,12,11,12,13,12,17,17,17,13,14,10,10,10,11,
 12,11,12,12,12,13,17,17,17,14,14,10, 9,10, 9,12,
 12,12,12,13,13,17,17,17,17,17,11,11,11,11,11,12,
 13,13,13,14,17,17,17,17,17,12,10,11, 9,12,11,13,
 15,14,14,17,17,17,17,17,14,15,11,12,12,13,13,12,
 14,14,17,16,16,16,16,15,13,12, 9,12,10,14,12,15,
 14,
};

static float _vq_quantthresh__44c7_s_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44c7_s_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p8_0 = {
 _vq_quantthresh__44c7_s_p8_0,
 _vq_quantmap__44c7_s_p8_0,
 15,
 15
};

static static_codebook _44c7_s_p8_0 = {
 2, 225,
 _vq_lengthlist__44c7_s_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44c7_s_p8_0,
 
# 21876 "oggenc.c" 3 4
((void *)0)
# 21876 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p8_0,
 
# 21878 "oggenc.c" 3 4
((void *)0)
# 21878 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c7_s_p8_1[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9,
  9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,
  7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,11,11,11, 7, 7, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,11,11,11, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,11,11,
 11, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9,
 10,10, 9,11,11,11, 8, 9, 9, 8, 9, 9, 9, 9, 9, 9,
  9, 9,10,10, 9, 9,10, 9,11,11,11,11,11, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,11,10,11,
 11,11, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,10,10, 9,
  9,10,11,11,11,11,11, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10, 9, 9,10,10,10,10,11,11,11,11,11, 9, 9, 9, 9,
  9, 9, 9,10,10,10, 9,10,10,10,10, 9,11,11,10,11,
 11,11,11, 9, 9, 9, 9,10,10,10,10,10,10,10, 9,10,
 10,10,11,11,11,11,11,11, 9, 9, 9, 9, 9,10,10,10,
 10,10, 9, 9,10, 9,11,10,11,11,11,11,11, 9, 9, 9,
  9, 9,10,10, 9,10,10,10,10,10,10,11,11,11,11,11,
 11,11,10, 9,10, 9,10,10,10,10,10,10,10,10,10, 9,
 10,11,10,11,11,11,11,11,10, 9, 9,10,10,10,10,10,
 10,10,10,10,10,11,11,11,11,11,11,11,10,11,10,10,
 10,10,10,10,10,10, 9,10,10, 9,11,11,11,11,11,10,
 11,11,11,10,10, 9, 9,10,10,10,10,10, 9,10,10,11,
 11,11,11,11,10,11,11,11,10,10, 9, 9,10,10,10,10,
 10,10,10,10,11,11,11,11,11,11,11,11,11,11,11, 9,
  9, 9, 9,10,10,10,10,10,10,
};

static float _vq_quantthresh__44c7_s_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c7_s_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p8_1 = {
 _vq_quantthresh__44c7_s_p8_1,
 _vq_quantmap__44c7_s_p8_1,
 21,
 21
};

static static_codebook _44c7_s_p8_1 = {
 2, 441,
 _vq_lengthlist__44c7_s_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c7_s_p8_1,
 
# 21961 "oggenc.c" 3 4
((void *)0)
# 21961 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p8_1,
 
# 21963 "oggenc.c" 3 4
((void *)0)
# 21963 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c7_s_p9_0[] = {
  1, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 8, 8, 8,
};

static float _vq_quantthresh__44c7_s_p9_0[] = {
 -3503.5, -2866.5, -2229.5, -1592.5, -955.5, -318.5, 318.5, 955.5,
 1592.5, 2229.5, 2866.5, 3503.5,
};

static long _vq_quantmap__44c7_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p9_0 = {
 _vq_quantthresh__44c7_s_p9_0,
 _vq_quantmap__44c7_s_p9_0,
 13,
 13
};

static static_codebook _44c7_s_p9_0 = {
 2, 169,
 _vq_lengthlist__44c7_s_p9_0,
 1, -511845376, 1630791680, 4, 0,
 _vq_quantlist__44c7_s_p9_0,
 
# 22019 "oggenc.c" 3 4
((void *)0)
# 22019 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p9_0,
 
# 22021 "oggenc.c" 3 4
((void *)0)
# 22021 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c7_s_p9_1[] = {
  1, 4, 4, 7, 7, 7, 7, 7, 7, 9, 8,10,10, 6, 6, 6,
  7, 8, 8, 8, 8, 8, 9, 9,10,11, 6, 5, 6, 8, 7, 8,
  8, 8, 8, 9, 9,10,11,14, 9, 8, 9, 8, 9, 8, 8, 9,
 10,10,11,11,14, 8, 9, 8, 8, 8, 9, 9, 8,12,10,11,
 11,14,13,13, 8, 9, 9, 9, 9,10,10,12,12,12,14,14,
 13, 8, 7,10, 9, 9,10,10,11,11,10,14,14,14, 8, 9,
  9, 8,11,10,12,11,11,11,14,14,14, 9, 7, 9, 8,10,
 10,11,11,11,10,14,14,14,12,12,10, 9,11,11,11,13,
 12,13,14,14,14,12,12,10,10,11, 8,11,11,14,13,14,
 14,14,14,14,12,13,11,12,12,11,14,13,13,13,13,13,
 13,12,11,11, 9,12,12,12,13,
};

static float _vq_quantthresh__44c7_s_p9_1[] = {
 -269.5, -220.5, -171.5, -122.5, -73.5, -24.5, 24.5, 73.5,
 122.5, 171.5, 220.5, 269.5,
};

static long _vq_quantmap__44c7_s_p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p9_1 = {
 _vq_quantthresh__44c7_s_p9_1,
 _vq_quantmap__44c7_s_p9_1,
 13,
 13
};

static static_codebook _44c7_s_p9_1 = {
 2, 169,
 _vq_lengthlist__44c7_s_p9_1,
 1, -518889472, 1622704128, 4, 0,
 _vq_quantlist__44c7_s_p9_1,
 
# 22077 "oggenc.c" 3 4
((void *)0)
# 22077 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p9_1,
 
# 22079 "oggenc.c" 3 4
((void *)0)
# 22079 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c7_s_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44c7_s_p9_2[] = {
  2, 4, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44c7_s_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44c7_s_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44c7_s_p9_2 = {
 _vq_quantthresh__44c7_s_p9_2,
 _vq_quantmap__44c7_s_p9_2,
 49,
 49
};

static static_codebook _44c7_s_p9_2 = {
 1, 49,
 _vq_lengthlist__44c7_s_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44c7_s_p9_2,
 
# 22173 "oggenc.c" 3 4
((void *)0)
# 22173 "oggenc.c"
    ,
 &_vq_auxt__44c7_s_p9_2,
 
# 22175 "oggenc.c" 3 4
((void *)0)
# 22175 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c7_s_short[] = {
  4,10,12,13,15,15,16,16,17,17, 5, 5, 7, 8, 9, 9,
 12,17,18,18, 7, 5, 4, 5, 7, 8,10,13,18,18, 8, 6,
  5, 4, 5, 6, 9,12,17,18,10, 9, 6, 4, 4, 5, 8,12,
 18,17,11, 9, 7, 5, 4, 4, 6,10,17,17,13,12,10, 8,
  6, 5, 6, 9,17,17,14,13,12, 7, 6, 5, 5, 8,16,17,
 16,15,14, 8, 8, 7, 7, 9,14,17,17,17,17,12,11,11,
 11,12,16,17,
};

static static_codebook _huff_book__44c7_s_short = {
 2, 100,
 _huff_lengthlist__44c7_s_short,
 0, 0, 0, 0, 0,
 
# 22193 "oggenc.c" 3 4
((void *)0)
# 22193 "oggenc.c"
    ,
 
# 22194 "oggenc.c" 3 4
((void *)0)
# 22194 "oggenc.c"
    ,
 
# 22195 "oggenc.c" 3 4
((void *)0)
# 22195 "oggenc.c"
    ,
 
# 22196 "oggenc.c" 3 4
((void *)0)
# 22196 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c8_s_long[] = {
  3, 8,12,14,14,13,13,12,13,15, 6, 4, 6, 8,10,10,
 11,11,13,15, 9, 5, 4, 5, 7, 8, 9,10,13,15,11, 7,
  4, 4, 5, 6, 8, 9,13,14,12, 9, 6, 5, 5, 5, 7, 9,
 12,14,11,10, 7, 6, 5, 4, 6, 7,11,12,11,10, 9, 8,
  7, 5, 6, 6,10,11,12,11,10, 9, 8, 6, 6, 5, 8,10,
 12,12,12,11,11,10, 9, 7, 8,11,12,13,14,14,15,13,
 10, 9, 9,11,
};

static static_codebook _huff_book__44c8_s_long = {
 2, 100,
 _huff_lengthlist__44c8_s_long,
 0, 0, 0, 0, 0,
 
# 22214 "oggenc.c" 3 4
((void *)0)
# 22214 "oggenc.c"
    ,
 
# 22215 "oggenc.c" 3 4
((void *)0)
# 22215 "oggenc.c"
    ,
 
# 22216 "oggenc.c" 3 4
((void *)0)
# 22216 "oggenc.c"
    ,
 
# 22217 "oggenc.c" 3 4
((void *)0)
# 22217 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c8_s_p1_0[] = {
  1, 5, 5, 0, 5, 5, 0, 5, 5, 6, 7, 7, 0, 9, 8, 0,
  8, 8, 6, 7, 8, 0, 8, 9, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 5, 8, 8, 0, 8, 8, 0, 8, 8, 5, 8, 8,
  0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
  8, 8, 0, 8, 8, 0, 8, 7, 5, 8, 8, 0, 8, 8, 0, 7,
  8,
};

static float _vq_quantthresh__44c8_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c8_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p1_0 = {
 _vq_quantthresh__44c8_s_p1_0,
 _vq_quantmap__44c8_s_p1_0,
 3,
 3
};

static static_codebook _44c8_s_p1_0 = {
 4, 81,
 _vq_lengthlist__44c8_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c8_s_p1_0,
 
# 22256 "oggenc.c" 3 4
((void *)0)
# 22256 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p1_0,
 
# 22258 "oggenc.c" 3 4
((void *)0)
# 22258 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c8_s_p2_0[] = {
  3, 5, 5, 8, 8, 0, 6, 6, 8, 8, 0, 5, 6, 8, 8, 0,
  7, 7, 9, 9, 0, 0, 0, 9, 9, 5, 7, 6, 9, 9, 0, 7,
  7,10, 9, 0, 7, 7,10, 9, 0, 9, 9,11,11, 0, 0, 0,
 11,11, 5, 6, 7, 9, 9, 0, 7, 7, 9,10, 0, 7, 7, 9,
 10, 0, 9, 9,11,11, 0, 0, 0,11,11, 8, 9, 9,11,10,
  0,11,10,12,11, 0,10,10,12,11, 0,13,13,14,13, 0,
  0, 0,14,13, 8, 9, 9,10,11, 0,10,11,11,12, 0,10,
 10,12,12, 0,13,13,13,14, 0, 0, 0,13,14, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 6, 7, 7,10,10, 0, 7, 7,10,10,
  0, 7, 7,10,10, 0, 9, 8,10,10, 0, 0, 0,10,10, 6,
  7, 7,10,10, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 8,
  9,10,10, 0, 0, 0,10,10, 8,10, 9,12,12, 0,10, 9,
 12,11, 0,10,10,11,12, 0,12,11,13,12, 0, 0, 0,13,
 13, 8, 9,10,11,12, 0, 9,10,11,12, 0,10,10,11,12,
  0,11,12,12,13, 0, 0, 0,13,13, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 6, 8, 7,11,10, 0, 7, 7,10,10, 0, 7, 7,
 10, 9, 0, 8, 9,10,10, 0, 0, 0,10,10, 6, 7, 8,10,
 11, 0, 7, 7,10,10, 0, 7, 7,10,10, 0, 9, 8,10,10,
  0, 0, 0,10,10, 8,10, 9,12,11, 0,10,10,12,11, 0,
 10,10,12,11, 0,11,12,13,12, 0, 0, 0,13,12, 9, 9,
 10,11,12, 0,10,10,11,12, 0,10,10,11,12, 0,12,11,
 12,13, 0, 0, 0,12,13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7, 9, 9,12,13, 0, 9, 8,12,11, 0, 8, 9,11,12, 0,
 10, 9,12,11, 0, 0, 0,11,12, 7, 9, 9,13,13, 0, 9,
  9,11,12, 0, 9, 8,12,11, 0, 9,10,11,12, 0, 0, 0,
 12,11, 9,11,11,14,13, 0,10,10,13,12, 0,10,10,13,
 13, 0,12,11,13,12, 0, 0, 0,13,13, 9,11,11,13,14,
  0,10,10,12,13, 0,10,10,13,13, 0,11,12,12,13, 0,
  0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
 11,11,14,13, 0,10,10,13,12, 0,10,10,13,12, 0,11,
 12,13,13, 0, 0, 0,13,12, 9,11,11,13,14, 0,10,10,
 13,13, 0,10,10,12,13, 0,12,11,13,13, 0, 0, 0,12,
 13,
};

static float _vq_quantthresh__44c8_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c8_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p2_0 = {
 _vq_quantthresh__44c8_s_p2_0,
 _vq_quantmap__44c8_s_p2_0,
 5,
 5
};

static static_codebook _44c8_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c8_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c8_s_p2_0,
 
# 22333 "oggenc.c" 3 4
((void *)0)
# 22333 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p2_0,
 
# 22335 "oggenc.c" 3 4
((void *)0)
# 22335 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c8_s_p3_0[] = {
  3, 3, 4, 5, 5, 7, 6, 8, 8, 0, 4, 4, 5, 5, 7, 7,
  9, 9, 0, 4, 4, 5, 6, 7, 7, 9, 9, 0, 5, 5, 6, 6,
  8, 8,10,10, 0, 0, 0, 6, 6, 8, 8,10,10, 0, 0, 0,
  7, 7, 8, 8,10,10, 0, 0, 0, 7, 7, 8, 8,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c8_s_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c8_s_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p3_0 = {
 _vq_quantthresh__44c8_s_p3_0,
 _vq_quantmap__44c8_s_p3_0,
 9,
 9
};

static static_codebook _44c8_s_p3_0 = {
 2, 81,
 _vq_lengthlist__44c8_s_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c8_s_p3_0,
 
# 22381 "oggenc.c" 3 4
((void *)0)
# 22381 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p3_0,
 
# 22383 "oggenc.c" 3 4
((void *)0)
# 22383 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c8_s_p4_0[] = {
  3, 4, 4, 5, 5, 7, 7, 8, 8, 8, 8, 9, 9,10,10,10,
 10, 0, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10,10,10,
 11,11, 0, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10,11,
 10,11,11, 0, 5, 5, 6, 6, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 6, 6, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,12,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,10,
 10,11,11,12,12,12,12, 0, 0, 0, 7, 7, 8, 8, 9, 9,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 8, 8, 9,
  9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c8_s_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c8_s_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p4_0 = {
 _vq_quantthresh__44c8_s_p4_0,
 _vq_quantmap__44c8_s_p4_0,
 17,
 17
};

static static_codebook _44c8_s_p4_0 = {
 2, 289,
 _vq_lengthlist__44c8_s_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c8_s_p4_0,
 
# 22452 "oggenc.c" 3 4
((void *)0)
# 22452 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p4_0,
 
# 22454 "oggenc.c" 3 4
((void *)0)
# 22454 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c8_s_p5_0[] = {
  1, 4, 4, 5, 7, 7, 6, 7, 7, 4, 6, 6,10,10,10,10,
 10,10, 4, 6, 6,10,10,10,10,10,10, 5,10,10, 9,12,
 12,10,12,12, 7,10,10,12,12,12,12,12,12, 7,10,10,
 12,12,12,12,12,13, 6,10,10,10,12,12,11,12,12, 8,
 10,10,12,13,12,12,12,12, 7,10,10,12,12,13,12,13,
 12,
};

static float _vq_quantthresh__44c8_s_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c8_s_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p5_0 = {
 _vq_quantthresh__44c8_s_p5_0,
 _vq_quantmap__44c8_s_p5_0,
 3,
 3
};

static static_codebook _44c8_s_p5_0 = {
 4, 81,
 _vq_lengthlist__44c8_s_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c8_s_p5_0,
 
# 22493 "oggenc.c" 3 4
((void *)0)
# 22493 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p5_0,
 
# 22495 "oggenc.c" 3 4
((void *)0)
# 22495 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c8_s_p5_1[] = {
  4, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7,10, 4, 4, 6, 6,
  7, 7, 8, 8, 8, 8,10, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8,11, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8,11,11,11, 6,
  6, 7, 7, 8, 8, 8, 8,11,11,11, 6, 6, 7, 7, 8, 8,
  8, 8,11,11,11, 6, 6, 7, 7, 8, 8, 8, 8,11,11,11,
  7, 7, 7, 7, 8, 8, 8, 8,11,11,11,11,11, 7, 7, 8,
  8, 8, 8,11,11,11,11,11, 7, 7, 7, 7, 8, 8,11,11,
 11,11,11, 7, 7, 7, 7, 8, 8,
};

static float _vq_quantthresh__44c8_s_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c8_s_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p5_1 = {
 _vq_quantthresh__44c8_s_p5_1,
 _vq_quantmap__44c8_s_p5_1,
 11,
 11
};

static static_codebook _44c8_s_p5_1 = {
 2, 121,
 _vq_lengthlist__44c8_s_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c8_s_p5_1,
 
# 22546 "oggenc.c" 3 4
((void *)0)
# 22546 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p5_1,
 
# 22548 "oggenc.c" 3 4
((void *)0)
# 22548 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c8_s_p6_0[] = {
  1, 4, 4, 7, 6, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  7, 7, 9, 9,10, 9,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9,10,10,11,11,12,12, 0, 6, 6, 7, 7, 9, 9,10,10,
 11,11,12,12, 0, 7, 7, 7, 7, 9, 9,10,10,12,12,12,
 12, 0,10,10, 8, 8,10,10,11,11,12,12,13,13, 0,11,
 11, 8, 8,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__44c8_s_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c8_s_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p6_0 = {
 _vq_quantthresh__44c8_s_p6_0,
 _vq_quantmap__44c8_s_p6_0,
 13,
 13
};

static static_codebook _44c8_s_p6_0 = {
 2, 169,
 _vq_lengthlist__44c8_s_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c8_s_p6_0,
 
# 22604 "oggenc.c" 3 4
((void *)0)
# 22604 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p6_0,
 
# 22606 "oggenc.c" 3 4
((void *)0)
# 22606 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c8_s_p6_1[] = {
  3, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 6,
  5, 5, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__44c8_s_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c8_s_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p6_1 = {
 _vq_quantthresh__44c8_s_p6_1,
 _vq_quantmap__44c8_s_p6_1,
 5,
 5
};

static static_codebook _44c8_s_p6_1 = {
 2, 25,
 _vq_lengthlist__44c8_s_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c8_s_p6_1,
 
# 22643 "oggenc.c" 3 4
((void *)0)
# 22643 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p6_1,
 
# 22645 "oggenc.c" 3 4
((void *)0)
# 22645 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c8_s_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10,10,11,11, 5, 5, 5,
  7, 7, 9, 9,10,10,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9,10,10,11,11,12,12,20, 6, 7, 7, 7, 9, 9,10,10,
 11,11,12,12,20, 7, 7, 7, 7, 9, 9,10,10,11,11,12,
 12,20,11,11, 8, 8,10,10,11,11,12,12,12,12,20,12,
 12, 8, 8,10, 9,11,11,12,12,13,13,20,20,20,11,10,
 10,10,11,11,12,12,13,13,20,20,20,10,11,10,10,11,
 11,12,12,13,13,20,20,20,14,15,11,11,12,12,13,13,
 14,13,20,20,20,15,15,11,11,12,12,13,13,14,14,20,
 20,20,20,19,13,13,12,12,13,13,14,14,19,19,19,19,
 19,13,13,12,12,13,13,14,14,
};

static float _vq_quantthresh__44c8_s_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44c8_s_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p7_0 = {
 _vq_quantthresh__44c8_s_p7_0,
 _vq_quantmap__44c8_s_p7_0,
 13,
 13
};

static static_codebook _44c8_s_p7_0 = {
 2, 169,
 _vq_lengthlist__44c8_s_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44c8_s_p7_0,
 
# 22701 "oggenc.c" 3 4
((void *)0)
# 22701 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p7_0,
 
# 22703 "oggenc.c" 3 4
((void *)0)
# 22703 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c8_s_p7_1[] = {
  4, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 5, 5, 7, 7,
  7, 7, 7, 7, 7, 7, 8, 5, 5, 7, 7, 7, 7, 7, 7, 7,
  7, 8, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7,
  7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7,
  7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,
  7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8,
  8, 8, 8, 7, 7, 7, 7, 7, 7,
};

static float _vq_quantthresh__44c8_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c8_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p7_1 = {
 _vq_quantthresh__44c8_s_p7_1,
 _vq_quantmap__44c8_s_p7_1,
 11,
 11
};

static static_codebook _44c8_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c8_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c8_s_p7_1,
 
# 22754 "oggenc.c" 3 4
((void *)0)
# 22754 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p7_1,
 
# 22756 "oggenc.c" 3 4
((void *)0)
# 22756 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c8_s_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,11, 6,
  5, 5, 7, 7, 9, 9, 8, 8,10,10,11,11,11,12, 6, 5,
  5, 7, 7, 9, 9, 9, 8,10,10,11,10,11,12,18, 8, 8,
  8, 8, 9, 9, 9, 9,10,10,11,11,12,12,18, 8, 8, 8,
  8, 9, 9, 9, 9,10,10,11,11,12,13,18,12,12, 9, 9,
 10,10, 9, 9,10,11,11,12,13,12,18,12,12, 9, 9,10,
 10,10,10,10,11,11,12,13,13,18,18,18, 9, 9, 9, 9,
 10,10,11,11,12,12,12,12,18,18,18, 9, 9, 9, 9,10,
 10,11,11,12,12,13,13,18,18,18,13,13,10,10,11,11,
 12,11,12,12,13,13,18,18,18,14,14,10, 9,11,10,12,
 12,12,12,13,13,18,18,18,18,18,11,12,11,11,12,12,
 13,13,14,13,18,18,18,18,18,12,11,11,10,12,11,13,
 13,13,14,18,18,18,18,18,15,16,12,12,12,13,13,13,
 14,14,18,17,17,17,17,16,14,12,11,12,11,13,12,15,
 14,
};

static float _vq_quantthresh__44c8_s_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44c8_s_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p8_0 = {
 _vq_quantthresh__44c8_s_p8_0,
 _vq_quantmap__44c8_s_p8_0,
 15,
 15
};

static static_codebook _44c8_s_p8_0 = {
 2, 225,
 _vq_lengthlist__44c8_s_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44c8_s_p8_0,
 
# 22818 "oggenc.c" 3 4
((void *)0)
# 22818 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p8_0,
 
# 22820 "oggenc.c" 3 4
((void *)0)
# 22820 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c8_s_p8_1[] = {
  4, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 9, 9, 9, 9,10, 6, 6, 7, 7, 8, 8, 8, 8, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
  7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,
 10, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9,10,10,11, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,11,11,10,11,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,
  9, 9,10,11,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,11,10,10, 9, 9, 9, 9,
  9, 9, 9, 9,10, 9, 9, 9, 9, 9, 9, 9,11,10,11,10,
 10,10,10, 9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9, 9, 9,
  9,11,11,11,10,10,11,10, 9, 9, 9, 9, 9, 9,10,10,
  9, 9, 9, 9, 9, 9,10,11,10,10,10,11,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9,10, 9,11,11,10,10,10,
 10,10, 9, 9, 9,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,11,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9,10,10,11,11,10,11,10,10,10,10,10,10, 9,
 10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,
 10,10,10, 9,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,
  9, 9,10, 9,10,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9, 9,10, 9, 9,10, 9, 9,
};

static float _vq_quantthresh__44c8_s_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c8_s_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p8_1 = {
 _vq_quantthresh__44c8_s_p8_1,
 _vq_quantmap__44c8_s_p8_1,
 21,
 21
};

static static_codebook _44c8_s_p8_1 = {
 2, 441,
 _vq_lengthlist__44c8_s_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c8_s_p8_1,
 
# 22903 "oggenc.c" 3 4
((void *)0)
# 22903 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p8_1,
 
# 22905 "oggenc.c" 3 4
((void *)0)
# 22905 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p9_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c8_s_p9_0[] = {
  1, 5, 5,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10, 7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10, 6, 8,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44c8_s_p9_0[] = {
 -6982.5, -6051.5, -5120.5, -4189.5, -3258.5, -2327.5, -1396.5, -465.5,
 465.5, 1396.5, 2327.5, 3258.5, 4189.5, 5120.5, 6051.5, 6982.5,
};

static long _vq_quantmap__44c8_s_p9_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p9_0 = {
 _vq_quantthresh__44c8_s_p9_0,
 _vq_quantmap__44c8_s_p9_0,
 17,
 17
};

static static_codebook _44c8_s_p9_0 = {
 2, 289,
 _vq_lengthlist__44c8_s_p9_0,
 1, -509798400, 1631393792, 5, 0,
 _vq_quantlist__44c8_s_p9_0,
 
# 22974 "oggenc.c" 3 4
((void *)0)
# 22974 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p9_0,
 
# 22976 "oggenc.c" 3 4
((void *)0)
# 22976 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p9_1[] = {
 9,
 8,
 10,
 7,
 11,
 6,
 12,
 5,
 13,
 4,
 14,
 3,
 15,
 2,
 16,
 1,
 17,
 0,
 18,
};

static long _vq_lengthlist__44c8_s_p9_1[] = {
  1, 4, 4, 7, 7, 7, 7, 7, 7, 9, 9,10,10,11,10,13,
 12,11,12, 6, 6, 6, 8, 8, 8, 8, 8, 8, 9,10,10,10,
 12,12,12,12,13,15, 5, 5, 5, 8, 8, 8, 8, 8, 8,10,
  9,10,11,12,13,12,13,13,12,15, 9, 8, 9, 9, 9, 9,
  9, 9,10,10,10,11,14,12,13,15,12,14,15, 8, 9, 9,
  9, 9, 9, 9, 9,10,10,12,11,12,11,12,13,13,13,15,
 13,13, 9, 9,10, 9,10,10,11,10,11,12,12,12,14,13,
 14,15,15,13,13, 9, 8,10, 9,10,10,11,10,12,12,13,
 13,14,13,14,15,15,15,15, 9, 9, 9, 9,10,11,12,12,
 12,13,13,13,14,15,15,14,15,15,15, 9, 7, 9, 8,12,
 11,11,13,12,12,13,12,14,13,13,14,15,15,15,13,13,
 10,10,12,11,13,13,12,12,13,13,14,13,13,15,15,15,
 15,12,13,11, 9,11,10,12,12,15,13,13,13,14,13,14,
 13,15,15,15,15,15,12,12,11,11,12,13,15,13,13,14,
 14,14,15,14,15,15,15,15,15,13,11,12,11,12,11,13,
 14,13,13,14,14,13,14,15,15,15,15,15,15,15,12,12,
 12,13,15,13,15,14,15,14,13,15,15,15,15,15,15,14,
 15,13,13,12,11,14,12,15,13,14,14,14,13,15,15,15,
 15,15,15,15,14,13,14,13,15,13,15,15,15,14,15,14,
 15,15,15,15,15,15,15,14,14,14,13,13,13,15,15,15,
 15,14,15,15,15,15,15,15,15,15,15,15,12,13,13,13,
 14,15,15,13,15,15,15,15,15,15,15,15,15,15,15,15,
 15,14,14,15,15,15,14,14,15,
};

static float _vq_quantthresh__44c8_s_p9_1[] = {
 -416.5, -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5,
 -24.5, 24.5, 73.5, 122.5, 171.5, 220.5, 269.5, 318.5,
 367.5, 416.5,
};

static long _vq_quantmap__44c8_s_p9_1[] = {
    17, 15, 13, 11, 9, 7, 5, 3,
     1, 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p9_1 = {
 _vq_quantthresh__44c8_s_p9_1,
 _vq_quantmap__44c8_s_p9_1,
 19,
 19
};

static static_codebook _44c8_s_p9_1 = {
 2, 361,
 _vq_lengthlist__44c8_s_p9_1,
 1, -518287360, 1622704128, 5, 0,
 _vq_quantlist__44c8_s_p9_1,
 
# 23052 "oggenc.c" 3 4
((void *)0)
# 23052 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p9_1,
 
# 23054 "oggenc.c" 3 4
((void *)0)
# 23054 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c8_s_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44c8_s_p9_2[] = {
  3, 4, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44c8_s_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44c8_s_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44c8_s_p9_2 = {
 _vq_quantthresh__44c8_s_p9_2,
 _vq_quantmap__44c8_s_p9_2,
 49,
 49
};

static static_codebook _44c8_s_p9_2 = {
 1, 49,
 _vq_lengthlist__44c8_s_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44c8_s_p9_2,
 
# 23148 "oggenc.c" 3 4
((void *)0)
# 23148 "oggenc.c"
    ,
 &_vq_auxt__44c8_s_p9_2,
 
# 23150 "oggenc.c" 3 4
((void *)0)
# 23150 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c8_s_short[] = {
  4,11,13,14,16,15,16,16,17,16, 5, 6, 8, 9,10, 9,
 11,17,16,17, 6, 6, 6, 6, 7, 8, 9,14,16,17, 8, 6,
  5, 4, 6, 7, 9,12,14,17, 9, 7, 6, 5, 5, 5, 8,11,
 14,17,10, 9, 7, 6, 5, 3, 5, 8,13,17,12,11, 9, 8,
  7, 4, 4, 6,14,17,13,13,12, 8, 7, 5, 4, 5,12,17,
 17,14,15,10, 8, 7, 7, 7,11,17,17,16,17,14,12,10,
 11,11,15,17,
};

static static_codebook _huff_book__44c8_s_short = {
 2, 100,
 _huff_lengthlist__44c8_s_short,
 0, 0, 0, 0, 0,
 
# 23168 "oggenc.c" 3 4
((void *)0)
# 23168 "oggenc.c"
    ,
 
# 23169 "oggenc.c" 3 4
((void *)0)
# 23169 "oggenc.c"
    ,
 
# 23170 "oggenc.c" 3 4
((void *)0)
# 23170 "oggenc.c"
    ,
 
# 23171 "oggenc.c" 3 4
((void *)0)
# 23171 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c9_s_long[] = {
  3, 8,13,14,15,15,13,13,14,14, 6, 5, 8,10,12,12,
 13,12,13,14,10, 6, 5, 6, 8, 9,11,11,13,14,13, 8,
  5, 4, 5, 6, 9,10,13,14,14,11, 7, 5, 4, 5, 8, 9,
 12,14,12,11, 8, 6, 5, 3, 5, 7,10,13,12,10,10, 8,
  7, 5, 4, 6, 9,12,13,12,11,10, 9, 6, 5, 5, 7,10,
 13,12,12,11,11, 9, 8, 7, 8,10,12,12,13,13,14,12,
 10, 9, 9,10,
};

static static_codebook _huff_book__44c9_s_long = {
 2, 100,
 _huff_lengthlist__44c9_s_long,
 0, 0, 0, 0, 0,
 
# 23189 "oggenc.c" 3 4
((void *)0)
# 23189 "oggenc.c"
    ,
 
# 23190 "oggenc.c" 3 4
((void *)0)
# 23190 "oggenc.c"
    ,
 
# 23191 "oggenc.c" 3 4
((void *)0)
# 23191 "oggenc.c"
    ,
 
# 23192 "oggenc.c" 3 4
((void *)0)
# 23192 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c9_s_p1_0[] = {
  1, 5, 5, 0, 5, 5, 0, 5, 5, 6, 8, 8, 0, 9, 8, 0,
  8, 8, 6, 8, 8, 0, 8, 9, 0, 8, 8, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 5, 8, 8, 0, 8, 7, 0, 8, 8, 5, 8, 8,
  0, 7, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
  9, 8, 0, 8, 8, 0, 7, 7, 5, 8, 9, 0, 8, 8, 0, 7,
  7,
};

static float _vq_quantthresh__44c9_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44c9_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p1_0 = {
 _vq_quantthresh__44c9_s_p1_0,
 _vq_quantmap__44c9_s_p1_0,
 3,
 3
};

static static_codebook _44c9_s_p1_0 = {
 4, 81,
 _vq_lengthlist__44c9_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44c9_s_p1_0,
 
# 23231 "oggenc.c" 3 4
((void *)0)
# 23231 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p1_0,
 
# 23233 "oggenc.c" 3 4
((void *)0)
# 23233 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c9_s_p2_0[] = {
  3, 6, 6, 8, 8, 0, 6, 6, 8, 8, 0, 5, 5, 8, 8, 0,
  7, 7, 9, 9, 0, 0, 0, 9, 9, 6, 7, 7, 9, 8, 0, 8,
  7, 9, 9, 0, 7, 7, 9, 9, 0, 9, 9,11,10, 0, 0, 0,
 10,10, 6, 7, 7, 8, 9, 0, 7, 8, 9, 9, 0, 7, 7, 9,
  9, 0, 9, 9,10,11, 0, 0, 0,10,10, 8, 9, 9,10,10,
  0,10,10,11,11, 0,10,10,11,11, 0,12,12,13,12, 0,
  0, 0,13,13, 8, 8, 9,10,10, 0,10,10,11,12, 0,10,
 10,11,11, 0,12,12,13,13, 0, 0, 0,13,13, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 6, 8, 7,10,10, 0, 7, 7,10, 9,
  0, 7, 7,10,10, 0, 9, 8,10,10, 0, 0, 0,10,10, 6,
  7, 7,10,10, 0, 7, 7, 9,10, 0, 7, 7,10,10, 0, 8,
  9,10,10, 0, 0, 0,10,10, 8, 9, 9,11,11, 0,10, 9,
 11,11, 0,10,10,11,11, 0,11,11,12,12, 0, 0, 0,12,
 12, 8, 9, 9,11,11, 0, 9,10,11,11, 0,10,10,11,11,
  0,11,11,12,12, 0, 0, 0,12,12, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 5, 8, 7,10,10, 0, 7, 7,10,10, 0, 7, 7,
 10, 9, 0, 8, 9,10,10, 0, 0, 0,10, 9, 5, 7, 8,10,
 10, 0, 7, 7,10,10, 0, 7, 7, 9,10, 0, 9, 8,10,10,
  0, 0, 0,10,10, 8, 9, 9,12,11, 0,10,10,11,11, 0,
 10, 9,11,11, 0,11,11,12,12, 0, 0, 0,12,12, 8, 9,
  9,11,11, 0,10,10,11,11, 0, 9,10,11,11, 0,11,11,
 12,12, 0, 0, 0,12,12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  7, 9, 9,12,12, 0, 9, 9,11,11, 0, 8, 9,11,11, 0,
 10, 9,12,11, 0, 0, 0,11,11, 7, 9, 9,12,12, 0, 8,
  9,11,11, 0, 9, 8,11,11, 0, 9,10,11,11, 0, 0, 0,
 11,11, 9,11,11,13,13, 0,10,10,12,12, 0,10,10,12,
 12, 0,12,11,12,12, 0, 0, 0,13,13, 9,10,11,13,13,
  0,10,10,12,12, 0,10,10,12,12, 0,11,11,12,12, 0,
  0, 0,12,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
 11,10,13,13, 0,10,10,12,12, 0,10, 9,12,12, 0,11,
 11,12,13, 0, 0, 0,12,11, 9,10,10,12,13, 0,10,10,
 12,12, 0,10,10,12,12, 0,11,11,13,12, 0, 0, 0,12,
 12,
};

static float _vq_quantthresh__44c9_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c9_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p2_0 = {
 _vq_quantthresh__44c9_s_p2_0,
 _vq_quantmap__44c9_s_p2_0,
 5,
 5
};

static static_codebook _44c9_s_p2_0 = {
 4, 625,
 _vq_lengthlist__44c9_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c9_s_p2_0,
 
# 23308 "oggenc.c" 3 4
((void *)0)
# 23308 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p2_0,
 
# 23310 "oggenc.c" 3 4
((void *)0)
# 23310 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44c9_s_p3_0[] = {
  3, 4, 4, 5, 5, 6, 6, 8, 8, 0, 4, 4, 5, 5, 7, 6,
  8, 8, 0, 4, 4, 5, 5, 7, 7, 8, 8, 0, 5, 5, 6, 6,
  7, 7, 9, 9, 0, 0, 0, 6, 6, 7, 7, 9, 9, 0, 0, 0,
  7, 7, 8, 8, 9, 9, 0, 0, 0, 7, 7, 8, 8, 9, 9, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c9_s_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44c9_s_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p3_0 = {
 _vq_quantthresh__44c9_s_p3_0,
 _vq_quantmap__44c9_s_p3_0,
 9,
 9
};

static static_codebook _44c9_s_p3_0 = {
 2, 81,
 _vq_lengthlist__44c9_s_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44c9_s_p3_0,
 
# 23356 "oggenc.c" 3 4
((void *)0)
# 23356 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p3_0,
 
# 23358 "oggenc.c" 3 4
((void *)0)
# 23358 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44c9_s_p4_0[] = {
  4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9,10,
 10, 0, 5, 5, 5, 5, 6, 6, 8, 7, 8, 8, 9, 9,10,10,
 11,11, 0, 5, 5, 5, 5, 7, 7, 8, 8, 8, 8, 9, 9,10,
 10,11,11, 0, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 6, 6, 7, 7, 8, 8, 9, 9,10,
 10,11,11,12,12, 0, 0, 0, 7, 7, 7, 7, 9, 9, 9, 9,
 11,11,11,11,12,12, 0, 0, 0, 7, 7, 7, 8, 9, 9, 9,
  9,11,10,11,11,12,12, 0, 0, 0, 7, 7, 7, 7, 9, 9,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 7, 7, 9,
  9,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__44c9_s_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44c9_s_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p4_0 = {
 _vq_quantthresh__44c9_s_p4_0,
 _vq_quantmap__44c9_s_p4_0,
 17,
 17
};

static static_codebook _44c9_s_p4_0 = {
 2, 289,
 _vq_lengthlist__44c9_s_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44c9_s_p4_0,
 
# 23427 "oggenc.c" 3 4
((void *)0)
# 23427 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p4_0,
 
# 23429 "oggenc.c" 3 4
((void *)0)
# 23429 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44c9_s_p5_0[] = {
  1, 4, 4, 5, 7, 7, 6, 7, 7, 4, 6, 6,10,10,10,10,
 10,10, 4, 6, 6,10,10,10,10,10,10, 5,10,10, 9,12,
 12,10,12,12, 7,10,10,12,12,12,12,12,13, 7,10,10,
 12,12,12,12,13,13, 6,10,10,10,12,12,11,12,12, 8,
 10,10,12,12,12,12,12,12, 7,10,10,12,12,13,12,12,
 12,
};

static float _vq_quantthresh__44c9_s_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44c9_s_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p5_0 = {
 _vq_quantthresh__44c9_s_p5_0,
 _vq_quantmap__44c9_s_p5_0,
 3,
 3
};

static static_codebook _44c9_s_p5_0 = {
 4, 81,
 _vq_lengthlist__44c9_s_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44c9_s_p5_0,
 
# 23468 "oggenc.c" 3 4
((void *)0)
# 23468 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p5_0,
 
# 23470 "oggenc.c" 3 4
((void *)0)
# 23470 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c9_s_p5_1[] = {
  4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7,10, 5, 5, 6, 6,
  7, 7, 7, 7, 8, 8,10, 5, 5, 6, 6, 7, 7, 7, 7, 8,
  8,11, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8,11,11,11, 6,
  6, 7, 7, 8, 8, 8, 8,11,11,11, 6, 6, 7, 7, 8, 8,
  8, 8,11,11,11, 6, 6, 7, 7, 7, 7, 8, 8,11,11,11,
  7, 7, 7, 7, 7, 7, 8, 8,11,11,11,11,11, 7, 7, 7,
  7, 8, 8,11,11,11,11,11, 7, 7, 7, 7, 7, 7,11,11,
 11,11,11, 7, 7, 7, 7, 7, 7,
};

static float _vq_quantthresh__44c9_s_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c9_s_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p5_1 = {
 _vq_quantthresh__44c9_s_p5_1,
 _vq_quantmap__44c9_s_p5_1,
 11,
 11
};

static static_codebook _44c9_s_p5_1 = {
 2, 121,
 _vq_lengthlist__44c9_s_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c9_s_p5_1,
 
# 23521 "oggenc.c" 3 4
((void *)0)
# 23521 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p5_1,
 
# 23523 "oggenc.c" 3 4
((void *)0)
# 23523 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c9_s_p6_0[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 5, 4, 4,
  6, 6, 8, 8, 9, 9,10,10,11,11, 6, 4, 4, 6, 6, 8,
  8, 9, 9,10,10,12,12, 0, 6, 6, 6, 6, 8, 8,10,10,
 11,11,12,12, 0, 6, 6, 6, 6, 8, 8,10,10,11,11,12,
 12, 0,10,10, 8, 8, 9, 9,11,11,12,12,13,13, 0,11,
 11, 8, 8, 9,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__44c9_s_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44c9_s_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p6_0 = {
 _vq_quantthresh__44c9_s_p6_0,
 _vq_quantmap__44c9_s_p6_0,
 13,
 13
};

static static_codebook _44c9_s_p6_0 = {
 2, 169,
 _vq_lengthlist__44c9_s_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44c9_s_p6_0,
 
# 23579 "oggenc.c" 3 4
((void *)0)
# 23579 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p6_0,
 
# 23581 "oggenc.c" 3 4
((void *)0)
# 23581 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44c9_s_p6_1[] = {
  4, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5,
};

static float _vq_quantthresh__44c9_s_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44c9_s_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p6_1 = {
 _vq_quantthresh__44c9_s_p6_1,
 _vq_quantmap__44c9_s_p6_1,
 5,
 5
};

static static_codebook _44c9_s_p6_1 = {
 2, 25,
 _vq_lengthlist__44c9_s_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44c9_s_p6_1,
 
# 23618 "oggenc.c" 3 4
((void *)0)
# 23618 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p6_1,
 
# 23620 "oggenc.c" 3 4
((void *)0)
# 23620 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44c9_s_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9,10,10,11,11, 6, 5, 5,
  7, 7, 9, 8,10,10,11,11,12,12, 6, 5, 5, 7, 7, 9,
  9,10,10,11,11,12,12,20, 6, 6, 7, 7, 9, 9,10,10,
 11,11,12,12,20, 7, 7, 7, 7, 9, 9,10,10,11,11,13,
 12,20,10,10, 8, 8, 9, 9,11,11,12,12,13,13,20,11,
 11, 8, 8, 9, 9,11,11,12,12,13,13,20,20,20,10,10,
 10,10,11,11,12,12,13,13,20,20,20,10,10,10,10,11,
 11,12,12,13,13,20,20,20,14,14,11,11,12,12,13,13,
 14,13,20,20,20,14,15,11,11,11,11,13,13,14,13,20,
 20,20,20,19,12,12,12,12,13,13,14,14,19,19,19,19,
 19,13,13,12,12,13,13,14,14,
};

static float _vq_quantthresh__44c9_s_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44c9_s_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p7_0 = {
 _vq_quantthresh__44c9_s_p7_0,
 _vq_quantmap__44c9_s_p7_0,
 13,
 13
};

static static_codebook _44c9_s_p7_0 = {
 2, 169,
 _vq_lengthlist__44c9_s_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44c9_s_p7_0,
 
# 23676 "oggenc.c" 3 4
((void *)0)
# 23676 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p7_0,
 
# 23678 "oggenc.c" 3 4
((void *)0)
# 23678 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44c9_s_p7_1[] = {
  5, 6, 6, 6, 6, 7, 6, 7, 7, 7, 7, 8, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7, 8, 6, 6, 6, 6, 7, 7, 7, 7, 7,
  7, 8, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 6,
  6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7,
  7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,
  7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8,
  8, 8, 8, 7, 7, 7, 7, 7, 7,
};

static float _vq_quantthresh__44c9_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44c9_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p7_1 = {
 _vq_quantthresh__44c9_s_p7_1,
 _vq_quantmap__44c9_s_p7_1,
 11,
 11
};

static static_codebook _44c9_s_p7_1 = {
 2, 121,
 _vq_lengthlist__44c9_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44c9_s_p7_1,
 
# 23729 "oggenc.c" 3 4
((void *)0)
# 23729 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p7_1,
 
# 23731 "oggenc.c" 3 4
((void *)0)
# 23731 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44c9_s_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,11, 6,
  5, 5, 7, 7, 9, 9, 8, 9,10,10,11,11,12,12, 6, 5,
  5, 7, 7, 9, 9, 9, 9,10,10,11,11,12,12,19, 7, 8,
  8, 8, 9, 9, 9, 9,10,10,11,11,12,13,19, 8, 8, 8,
  8, 9, 9, 9, 9,10,10,11,12,12,12,19,12,12, 9, 9,
  9,10, 9,10,10,10,12,12,12,12,19,12,12, 9, 9,10,
  9,10,10,11,11,12,11,13,13,19,19,19, 9, 9, 9, 9,
 10,10,11,11,12,12,12,12,19,19,19, 9, 9, 9, 9,10,
 10,11,11,12,12,13,13,19,19,19,13,13,10,10,10,10,
 12,12,12,12,13,13,19,19,19,13,13,10,10,10,10,12,
 12,12,12,13,13,19,19,19,19,19,11,12,11,11,12,12,
 13,12,13,13,19,19,19,18,18,12,11,11,10,12,11,13,
 13,13,14,18,18,18,18,18,15,16,12,12,13,12,13,13,
 14,14,18,18,18,18,18,16,15,12,11,12,11,13,13,14,
 14,
};

static float _vq_quantthresh__44c9_s_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44c9_s_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p8_0 = {
 _vq_quantthresh__44c9_s_p8_0,
 _vq_quantmap__44c9_s_p8_0,
 15,
 15
};

static static_codebook _44c9_s_p8_0 = {
 2, 225,
 _vq_lengthlist__44c9_s_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44c9_s_p8_0,
 
# 23793 "oggenc.c" 3 4
((void *)0)
# 23793 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p8_0,
 
# 23795 "oggenc.c" 3 4
((void *)0)
# 23795 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44c9_s_p8_1[] = {
  4, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 6, 6, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,
 10, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9,10,10,10, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,
 10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,10,10,10,10,10,10,10, 9, 9, 9, 9,10,10,10,10,
  9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,
 10,10, 9, 9, 9, 9, 9,10, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,10,
 10,10, 9, 9, 9,10, 9, 9, 9, 9,10,10,10,10,10,10,
 10,10,10, 9,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44c9_s_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44c9_s_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p8_1 = {
 _vq_quantthresh__44c9_s_p8_1,
 _vq_quantmap__44c9_s_p8_1,
 21,
 21
};

static static_codebook _44c9_s_p8_1 = {
 2, 441,
 _vq_lengthlist__44c9_s_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44c9_s_p8_1,
 
# 23878 "oggenc.c" 3 4
((void *)0)
# 23878 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p8_1,
 
# 23880 "oggenc.c" 3 4
((void *)0)
# 23880 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p9_0[] = {
 9,
 8,
 10,
 7,
 11,
 6,
 12,
 5,
 13,
 4,
 14,
 3,
 15,
 2,
 16,
 1,
 17,
 0,
 18,
};

static long _vq_lengthlist__44c9_s_p9_0[] = {
  1, 4, 4,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10, 7, 9,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10, 7, 9,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44c9_s_p9_0[] = {
 -7913.5, -6982.5, -6051.5, -5120.5, -4189.5, -3258.5, -2327.5, -1396.5,
 -465.5, 465.5, 1396.5, 2327.5, 3258.5, 4189.5, 5120.5, 6051.5,
 6982.5, 7913.5,
};

static long _vq_quantmap__44c9_s_p9_0[] = {
    17, 15, 13, 11, 9, 7, 5, 3,
     1, 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p9_0 = {
 _vq_quantthresh__44c9_s_p9_0,
 _vq_quantmap__44c9_s_p9_0,
 19,
 19
};

static static_codebook _44c9_s_p9_0 = {
 2, 361,
 _vq_lengthlist__44c9_s_p9_0,
 1, -508535424, 1631393792, 5, 0,
 _vq_quantlist__44c9_s_p9_0,
 
# 23956 "oggenc.c" 3 4
((void *)0)
# 23956 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p9_0,
 
# 23958 "oggenc.c" 3 4
((void *)0)
# 23958 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p9_1[] = {
 9,
 8,
 10,
 7,
 11,
 6,
 12,
 5,
 13,
 4,
 14,
 3,
 15,
 2,
 16,
 1,
 17,
 0,
 18,
};

static long _vq_lengthlist__44c9_s_p9_1[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9,10,10,10,12,11,12,
 13,13,12, 6, 5, 5, 8, 8, 8, 9, 8, 9,10,10,11,11,
 12,12,14,13,13,12, 5, 5, 5, 8, 8, 9, 8, 8, 9,10,
 10,11,11,12,12,14,12,13,13,16, 8, 8, 9, 9, 9, 9,
  9, 9,10,10,11,12,13,13,13,13,14,14,16, 8, 8, 9,
  9, 9, 9, 9, 9,11,11,12,11,13,13,14,13,13,13,16,
 14,13, 9, 9, 9, 9,10,10,11,12,12,13,13,13,14,13,
 15,14,16,13,13, 9, 8, 9, 9,10,10,12,11,13,13,14,
 14,14,14,15,14,16,16,16, 9, 9, 9, 9,10,10,12,12,
 12,13,13,13,15,13,15,15,16,16,16, 9, 7, 9, 8,10,
 11,11,12,12,13,13,16,15,14,14,14,16,16,16,13,13,
 10,10,11,11,13,15,13,14,13,14,14,13,14,14,16,16,
 16,13,12,10, 9,11,11,12,12,14,14,13,14,14,14,14,
 14,16,16,16,16,16,12,13,11,11,12,13,13,13,14,15,
 14,14,16,15,16,16,16,16,16,12,11,12,12,15,13,13,
 13,14,13,15,14,15,14,16,16,16,16,16,14,15,12,13,
 13,12,14,15,15,14,15,14,15,13,16,16,16,16,16,16,
 16,13,13,14,12,16,12,16,15,14,15,14,14,16,16,16,
 16,16,16,16,15,14,14,14,15,16,16,16,16,14,16,16,
 16,16,16,16,16,16,16,14,14,14,12,15,11,15,13,16,
 15,16,15,16,16,16,16,16,16,16,15,16,14,14,15,13,
 15,16,16,16,16,15,16,16,16,16,16,16,16,16,16,15,
 15,14,13,14,16,16,14,15,16,
};

static float _vq_quantthresh__44c9_s_p9_1[] = {
 -416.5, -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5,
 -24.5, 24.5, 73.5, 122.5, 171.5, 220.5, 269.5, 318.5,
 367.5, 416.5,
};

static long _vq_quantmap__44c9_s_p9_1[] = {
    17, 15, 13, 11, 9, 7, 5, 3,
     1, 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p9_1 = {
 _vq_quantthresh__44c9_s_p9_1,
 _vq_quantmap__44c9_s_p9_1,
 19,
 19
};

static static_codebook _44c9_s_p9_1 = {
 2, 361,
 _vq_lengthlist__44c9_s_p9_1,
 1, -518287360, 1622704128, 5, 0,
 _vq_quantlist__44c9_s_p9_1,
 
# 24034 "oggenc.c" 3 4
((void *)0)
# 24034 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p9_1,
 
# 24036 "oggenc.c" 3 4
((void *)0)
# 24036 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44c9_s_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44c9_s_p9_2[] = {
  3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44c9_s_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44c9_s_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44c9_s_p9_2 = {
 _vq_quantthresh__44c9_s_p9_2,
 _vq_quantmap__44c9_s_p9_2,
 49,
 49
};

static static_codebook _44c9_s_p9_2 = {
 1, 49,
 _vq_lengthlist__44c9_s_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44c9_s_p9_2,
 
# 24130 "oggenc.c" 3 4
((void *)0)
# 24130 "oggenc.c"
    ,
 &_vq_auxt__44c9_s_p9_2,
 
# 24132 "oggenc.c" 3 4
((void *)0)
# 24132 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44c9_s_short[] = {
  5,13,17,15,16,16,18,17,18,18, 5, 7,10,12,12,12,
 12,17,18,17, 7, 6, 7, 8, 9, 9, 9,13,17,17, 8, 6,
  6, 5, 6, 7, 8,11,16,18, 9, 7, 7, 5, 5, 6, 7,10,
 15,18, 9, 8, 7, 6, 5, 4, 5, 7,13,17,11,11, 9, 8,
  7, 4, 3, 5,12,18,13,13,12,10, 7, 5, 4, 3, 8,13,
 16,16,16,13, 8, 8, 7, 5, 8,12,15,18,17,15,11,10,
  9, 8,10,14,
};

static static_codebook _huff_book__44c9_s_short = {
 2, 100,
 _huff_lengthlist__44c9_s_short,
 0, 0, 0, 0, 0,
 
# 24150 "oggenc.c" 3 4
((void *)0)
# 24150 "oggenc.c"
    ,
 
# 24151 "oggenc.c" 3 4
((void *)0)
# 24151 "oggenc.c"
    ,
 
# 24152 "oggenc.c" 3 4
((void *)0)
# 24152 "oggenc.c"
    ,
 
# 24153 "oggenc.c" 3 4
((void *)0)
# 24153 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8c0_s_p1_0[] = {
  1, 5, 4, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 7, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 8, 0, 0, 0, 0,
  0, 0, 8,10,10, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,10, 9, 0, 0, 0,
  0, 0, 0, 8, 9,11, 0, 0, 0, 0, 0, 0, 9,11,11, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9,10, 0, 0,
  0, 0, 0, 0, 9,11,10, 0, 0, 0, 0, 0, 0, 9,11,11,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,11,11, 0,
  0, 0, 0, 0, 0, 9,10,11, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9,10, 0, 0, 0, 0, 0, 0, 9,11,11,
  0, 0, 0, 0, 0, 0, 8,11, 9, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c0_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8c0_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p1_0 = {
 _vq_quantthresh__8c0_s_p1_0,
 _vq_quantmap__8c0_s_p1_0,
 3,
 3
};

static static_codebook _8c0_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__8c0_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8c0_s_p1_0,
 
# 24597 "oggenc.c" 3 4
((void *)0)
# 24597 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p1_0,
 
# 24599 "oggenc.c" 3 4
((void *)0)
# 24599 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c0_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c0_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c0_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p2_0 = {
 _vq_quantthresh__8c0_s_p2_0,
 _vq_quantmap__8c0_s_p2_0,
 5,
 5
};

static static_codebook _8c0_s_p2_0 = {
 4, 625,
 _vq_lengthlist__8c0_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c0_s_p2_0,
 
# 24674 "oggenc.c" 3 4
((void *)0)
# 24674 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p2_0,
 
# 24676 "oggenc.c" 3 4
((void *)0)
# 24676 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c0_s_p3_0[] = {
  1, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 7, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 5, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 8, 8,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c0_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c0_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p3_0 = {
 _vq_quantthresh__8c0_s_p3_0,
 _vq_quantmap__8c0_s_p3_0,
 5,
 5
};

static static_codebook _8c0_s_p3_0 = {
 4, 625,
 _vq_lengthlist__8c0_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c0_s_p3_0,
 
# 24751 "oggenc.c" 3 4
((void *)0)
# 24751 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p3_0,
 
# 24753 "oggenc.c" 3 4
((void *)0)
# 24753 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8c0_s_p4_0[] = {
  1, 2, 3, 7, 7, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c0_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8c0_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p4_0 = {
 _vq_quantthresh__8c0_s_p4_0,
 _vq_quantmap__8c0_s_p4_0,
 9,
 9
};

static static_codebook _8c0_s_p4_0 = {
 2, 81,
 _vq_lengthlist__8c0_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8c0_s_p4_0,
 
# 24799 "oggenc.c" 3 4
((void *)0)
# 24799 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p4_0,
 
# 24801 "oggenc.c" 3 4
((void *)0)
# 24801 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8c0_s_p5_0[] = {
  1, 3, 3, 5, 5, 7, 6, 8, 8, 0, 0, 0, 7, 7, 7, 7,
  8, 8, 0, 0, 0, 7, 7, 7, 7, 8, 9, 0, 0, 0, 8, 8,
  8, 8, 9, 9, 0, 0, 0, 8, 8, 8, 8, 9, 9, 0, 0, 0,
  9, 9, 8, 8,10,10, 0, 0, 0, 9, 9, 8, 8,10,10, 0,
  0, 0,10,10, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__8c0_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8c0_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p5_0 = {
 _vq_quantthresh__8c0_s_p5_0,
 _vq_quantmap__8c0_s_p5_0,
 9,
 9
};

static static_codebook _8c0_s_p5_0 = {
 2, 81,
 _vq_lengthlist__8c0_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8c0_s_p5_0,
 
# 24847 "oggenc.c" 3 4
((void *)0)
# 24847 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p5_0,
 
# 24849 "oggenc.c" 3 4
((void *)0)
# 24849 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__8c0_s_p6_0[] = {
  1, 3, 3, 6, 6, 8, 8, 9, 9, 8, 8,10, 9,10,10,11,
 11, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 11,12, 0, 0, 0, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,11, 0, 0, 0, 8, 8, 9, 9,10,10, 9, 9,10,10,
 11,11,12,12, 0, 0, 0, 8, 8, 9, 9,10,10, 9, 9,11,
 10,11,11,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,10,10,
 11,11,11,12,12,12, 0, 0, 0, 9, 9, 9, 9,10,10,10,
 10,11,11,12,12,13,13, 0, 0, 0,10,10,10,10,11,11,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0,10, 9,10,
 11,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,
 10, 9,10,11,12,12,13,13,14,13, 0, 0, 0, 0, 0, 9,
  9, 9,10,10,10,11,11,13,12,13,13, 0, 0, 0, 0, 0,
 10,10,10,10,11,11,12,12,13,13,14,14, 0, 0, 0, 0,
  0, 0, 0,10,10,11,11,12,12,13,13,13,14, 0, 0, 0,
  0, 0, 0, 0,11,11,11,11,12,12,13,14,14,14, 0, 0,
  0, 0, 0, 0, 0,11,11,11,11,12,12,13,13,14,13, 0,
  0, 0, 0, 0, 0, 0,11,11,12,12,13,13,14,14,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,12,12,13,13,14,
 14,
};

static float _vq_quantthresh__8c0_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__8c0_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p6_0 = {
 _vq_quantthresh__8c0_s_p6_0,
 _vq_quantmap__8c0_s_p6_0,
 17,
 17
};

static static_codebook _8c0_s_p6_0 = {
 2, 289,
 _vq_lengthlist__8c0_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__8c0_s_p6_0,
 
# 24918 "oggenc.c" 3 4
((void *)0)
# 24918 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p6_0,
 
# 24920 "oggenc.c" 3 4
((void *)0)
# 24920 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8c0_s_p7_0[] = {
  1, 4, 4, 7, 6, 6, 7, 6, 6, 4, 7, 7,11, 9,10,12,
  9,10, 4, 7, 7,10,10,10,11, 9, 9, 6,11,10,11,11,
 12,11,11,11, 6,10,10,11,11,12,11,10,10, 6, 9,10,
 11,11,11,11,10,10, 7,10,11,12,11,11,12,11,12, 6,
  9, 9,10, 9, 9,11,10,10, 6, 9, 9,10,10,10,11,10,
 10,
};

static float _vq_quantthresh__8c0_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__8c0_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p7_0 = {
 _vq_quantthresh__8c0_s_p7_0,
 _vq_quantmap__8c0_s_p7_0,
 3,
 3
};

static static_codebook _8c0_s_p7_0 = {
 4, 81,
 _vq_lengthlist__8c0_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__8c0_s_p7_0,
 
# 24959 "oggenc.c" 3 4
((void *)0)
# 24959 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p7_0,
 
# 24961 "oggenc.c" 3 4
((void *)0)
# 24961 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__8c0_s_p7_1[] = {
  1, 3, 3, 6, 6, 8, 8, 9, 9, 9, 9,10,10,10, 7, 7,
  8, 8, 9, 9, 9, 9,10,10, 9, 7, 7, 8, 8, 9, 9, 9,
  9,10,10,10, 8, 8, 9, 9, 9, 9, 9, 9,10,10,10, 8,
  8, 9, 9, 9, 9, 8, 9,10,10,10, 8, 8, 9, 9, 9,10,
 10,10,10,10,10, 9, 9, 9, 9, 9, 9,10,10,11,10,11,
  9, 9, 9, 9,10,10,10,10,11,11,11,10,10, 9, 9,10,
 10,10, 9,11,10,10,10,10,10,10, 9, 9,10,10,11,11,
 10,10,10, 9, 9, 9,10,10,10,
};

static float _vq_quantthresh__8c0_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__8c0_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p7_1 = {
 _vq_quantthresh__8c0_s_p7_1,
 _vq_quantmap__8c0_s_p7_1,
 11,
 11
};

static static_codebook _8c0_s_p7_1 = {
 2, 121,
 _vq_lengthlist__8c0_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__8c0_s_p7_1,
 
# 25012 "oggenc.c" 3 4
((void *)0)
# 25012 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p7_1,
 
# 25014 "oggenc.c" 3 4
((void *)0)
# 25014 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__8c0_s_p8_0[] = {
  1, 4, 4, 7, 6, 7, 7, 7, 7, 8, 8, 9, 9, 7, 6, 6,
  7, 7, 8, 8, 7, 7, 8, 9,10,10, 7, 6, 6, 7, 7, 8,
  7, 7, 7, 9, 9,10,12, 0, 8, 8, 8, 8, 8, 9, 8, 8,
  9, 9,10,10, 0, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9,11,
 10, 0, 0,13, 9, 8, 9, 9, 9, 9,10,10,11,11, 0,13,
  0, 9, 9, 9, 9, 9, 9,11,10,11,11, 0, 0, 0, 8, 9,
 10, 9,10,10,13,11,12,12, 0, 0, 0, 8, 9, 9, 9,10,
 10,13,12,12,13, 0, 0, 0,12, 0,10,10,12,11,10,11,
 12,12, 0, 0, 0,13,13,10,10,10,11,12, 0,13, 0, 0,
  0, 0, 0, 0,13,11, 0,12,12,12,13,12, 0, 0, 0, 0,
  0, 0,13,13,11,13,13,11,12,
};

static float _vq_quantthresh__8c0_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__8c0_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p8_0 = {
 _vq_quantthresh__8c0_s_p8_0,
 _vq_quantmap__8c0_s_p8_0,
 13,
 13
};

static static_codebook _8c0_s_p8_0 = {
 2, 169,
 _vq_lengthlist__8c0_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__8c0_s_p8_0,
 
# 25070 "oggenc.c" 3 4
((void *)0)
# 25070 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p8_0,
 
# 25072 "oggenc.c" 3 4
((void *)0)
# 25072 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c0_s_p8_1[] = {
  1, 3, 4, 5, 5, 7, 6, 6, 6, 5, 7, 7, 7, 6, 6, 7,
  7, 7, 6, 6, 7, 7, 7, 6, 6,
};

static float _vq_quantthresh__8c0_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c0_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p8_1 = {
 _vq_quantthresh__8c0_s_p8_1,
 _vq_quantmap__8c0_s_p8_1,
 5,
 5
};

static static_codebook _8c0_s_p8_1 = {
 2, 25,
 _vq_lengthlist__8c0_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c0_s_p8_1,
 
# 25109 "oggenc.c" 3 4
((void *)0)
# 25109 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p8_1,
 
# 25111 "oggenc.c" 3 4
((void *)0)
# 25111 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p9_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8c0_s_p9_0[] = {
  1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__8c0_s_p9_0[] = {
 -157.5, 157.5,
};

static long _vq_quantmap__8c0_s_p9_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p9_0 = {
 _vq_quantthresh__8c0_s_p9_0,
 _vq_quantmap__8c0_s_p9_0,
 3,
 3
};

static static_codebook _8c0_s_p9_0 = {
 4, 81,
 _vq_lengthlist__8c0_s_p9_0,
 1, -518803456, 1628680192, 2, 0,
 _vq_quantlist__8c0_s_p9_0,
 
# 25150 "oggenc.c" 3 4
((void *)0)
# 25150 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p9_0,
 
# 25152 "oggenc.c" 3 4
((void *)0)
# 25152 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__8c0_s_p9_1[] = {
  1, 4, 4, 5, 5,10, 8,11,11,11,11,11,11,11,11, 6,
  6, 6, 7, 6,11,10,11,11,11,11,11,11,11,11, 7, 5,
  6, 6, 6, 8, 7,11,11,11,11,11,11,11,11,11, 7, 8,
  8, 8, 9, 9,11,11,11,11,11,11,11,11,11, 9, 8, 7,
  8, 9,11,11,11,11,11,11,11,11,11,11,11,10,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,
};

static float _vq_quantthresh__8c0_s_p9_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__8c0_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p9_1 = {
 _vq_quantthresh__8c0_s_p9_1,
 _vq_quantmap__8c0_s_p9_1,
 15,
 15
};

static static_codebook _8c0_s_p9_1 = {
 2, 225,
 _vq_lengthlist__8c0_s_p9_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__8c0_s_p9_1,
 
# 25214 "oggenc.c" 3 4
((void *)0)
# 25214 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p9_1,
 
# 25216 "oggenc.c" 3 4
((void *)0)
# 25216 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c0_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__8c0_s_p9_2[] = {
  1, 5, 5, 7, 7, 8, 7, 8, 8,10,10, 9, 9,10,10,10,
 11,11,10,12,11,12,12,12, 9, 8, 8, 8, 8, 8, 9,10,
 10,10,10,11,11,11,10,11,11,12,12,11,12, 8, 8, 7,
  7, 8, 9,10,10,10, 9,10,10, 9,10,10,11,11,11,11,
 11,11, 9, 9, 9, 9, 8, 9,10,10,11,10,10,11,11,12,
 10,10,12,12,11,11,10, 9, 9,10, 8, 9,10,10,10, 9,
 10,10,11,11,10,11,10,10,10,12,12,12, 9,10, 9,10,
  9, 9,10,10,11,11,11,11,10,10,10,11,12,11,12,11,
 12,10,11,10,11, 9,10, 9,10, 9,10,10, 9,10,10,11,
 10,11,11,11,11,12,11, 9,10,10,10,10,11,11,11,11,
 11,10,11,11,11,11,10,12,10,12,12,11,12,10,10,11,
 10, 9,11,10,11, 9,10,11,10,10,10,11,11,11,11,12,
 12,10, 9, 9,11,10, 9,12,11,10,12,12,11,11,11,11,
 10,11,11,12,11,10,12, 9,11,10,11,10,10,11,10,11,
  9,10,10,10,11,12,11,11,12,11,10,10,11,11, 9,10,
 10,12,10,11,10,10,10, 9,10,10,10,10, 9,10,10,11,
 11,11,11,12,11,10,10,10,10,11,11,10,11,11, 9,11,
 10,12,10,12,11,10,11,10,10,10,11,10,10,11,11,10,
 11,10,10,10,10,11,11,12,10,10,10,11,10,11,12,11,
 10,11,10,10,11,11,10,12,10, 9,10,10,11,11,11,10,
 12,10,10,11,11,11,10,10,11,10,10,10,11,10,11,10,
 12,11,11,10,10,10,12,10,10,11, 9,10,11,11,11,10,
 10,11,10,10, 9,11,11,12,12,11,12,11,11,11,11,11,
 11, 9,10,11,10,12,10,10,10,10,11,10,10,11,10,10,
 12,10,10,10,10,10, 9,12,10,10,10,10,12, 9,11,10,
 10,11,10,12,12,10,12,12,12,10,10,10,10, 9,10,11,
 10,10,12,10,10,12,11,10,11,10,10,12,11,10,12,10,
 10,11, 9,11,10, 9,10, 9,10,
};

static float _vq_quantthresh__8c0_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__8c0_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__8c0_s_p9_2 = {
 _vq_quantthresh__8c0_s_p9_2,
 _vq_quantmap__8c0_s_p9_2,
 21,
 21
};

static static_codebook _8c0_s_p9_2 = {
 2, 441,
 _vq_lengthlist__8c0_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__8c0_s_p9_2,
 
# 25299 "oggenc.c" 3 4
((void *)0)
# 25299 "oggenc.c"
    ,
 &_vq_auxt__8c0_s_p9_2,
 
# 25301 "oggenc.c" 3 4
((void *)0)
# 25301 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__8c0_s_single[] = {
  4, 5,18, 7,10, 6, 7, 8, 9,10, 5, 2,18, 5, 7, 5,
  6, 7, 8,11,17,17,17,17,17,17,17,17,17,17, 7, 4,
 17, 6, 9, 6, 8,10,12,15,11, 7,17, 9, 6, 6, 7, 9,
 11,15, 6, 4,17, 6, 6, 4, 5, 8,11,16, 6, 6,17, 8,
  6, 5, 6, 9,13,16, 8, 9,17,11, 9, 8, 8,11,13,17,
  9,12,17,15,14,13,12,13,14,17,12,15,17,17,17,17,
 17,16,17,17,
};

static static_codebook _huff_book__8c0_s_single = {
 2, 100,
 _huff_lengthlist__8c0_s_single,
 0, 0, 0, 0, 0,
 
# 25319 "oggenc.c" 3 4
((void *)0)
# 25319 "oggenc.c"
    ,
 
# 25320 "oggenc.c" 3 4
((void *)0)
# 25320 "oggenc.c"
    ,
 
# 25321 "oggenc.c" 3 4
((void *)0)
# 25321 "oggenc.c"
    ,
 
# 25322 "oggenc.c" 3 4
((void *)0)
# 25322 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8c1_s_p1_0[] = {
  1, 5, 5, 0, 0, 0, 0, 0, 0, 5, 7, 7, 0, 0, 0, 0,
  0, 0, 5, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 5, 8, 7, 0, 0, 0, 0, 0, 0, 7, 8, 9, 0, 0, 0,
  0, 0, 0, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 7, 9, 8, 0, 0,
  0, 0, 0, 0, 7, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 8, 0, 0, 0, 0,
  0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0, 0,
  0, 0, 0, 8, 8,10, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 9, 0, 0,
  0, 0, 0, 0, 8,10, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 5, 8, 8, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0,
  0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10, 0,
  0, 0, 0, 0, 0, 8, 9,10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7, 9, 9, 0, 0, 0, 0, 0, 0, 9,10,10,
  0, 0, 0, 0, 0, 0, 8,10, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c1_s_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8c1_s_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p1_0 = {
 _vq_quantthresh__8c1_s_p1_0,
 _vq_quantmap__8c1_s_p1_0,
 3,
 3
};

static static_codebook _8c1_s_p1_0 = {
 8, 6561,
 _vq_lengthlist__8c1_s_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8c1_s_p1_0,
 
# 25766 "oggenc.c" 3 4
((void *)0)
# 25766 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p1_0,
 
# 25768 "oggenc.c" 3 4
((void *)0)
# 25768 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c1_s_p2_0[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c1_s_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c1_s_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p2_0 = {
 _vq_quantthresh__8c1_s_p2_0,
 _vq_quantmap__8c1_s_p2_0,
 5,
 5
};

static static_codebook _8c1_s_p2_0 = {
 4, 625,
 _vq_lengthlist__8c1_s_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c1_s_p2_0,
 
# 25843 "oggenc.c" 3 4
((void *)0)
# 25843 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p2_0,
 
# 25845 "oggenc.c" 3 4
((void *)0)
# 25845 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c1_s_p3_0[] = {
  2, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 4, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c1_s_p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c1_s_p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p3_0 = {
 _vq_quantthresh__8c1_s_p3_0,
 _vq_quantmap__8c1_s_p3_0,
 5,
 5
};

static static_codebook _8c1_s_p3_0 = {
 4, 625,
 _vq_lengthlist__8c1_s_p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c1_s_p3_0,
 
# 25920 "oggenc.c" 3 4
((void *)0)
# 25920 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p3_0,
 
# 25922 "oggenc.c" 3 4
((void *)0)
# 25922 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p4_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8c1_s_p4_0[] = {
  1, 2, 3, 7, 7, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
  0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7,
  0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0,
  8, 8, 0, 0, 0, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 0,
  0, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0,
};

static float _vq_quantthresh__8c1_s_p4_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8c1_s_p4_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p4_0 = {
 _vq_quantthresh__8c1_s_p4_0,
 _vq_quantmap__8c1_s_p4_0,
 9,
 9
};

static static_codebook _8c1_s_p4_0 = {
 2, 81,
 _vq_lengthlist__8c1_s_p4_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8c1_s_p4_0,
 
# 25968 "oggenc.c" 3 4
((void *)0)
# 25968 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p4_0,
 
# 25970 "oggenc.c" 3 4
((void *)0)
# 25970 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8c1_s_p5_0[] = {
  1, 3, 3, 4, 5, 6, 6, 8, 8, 0, 0, 0, 8, 8, 7, 7,
  9, 9, 0, 0, 0, 8, 8, 7, 7, 9, 9, 0, 0, 0, 9,10,
  8, 8, 9, 9, 0, 0, 0,10,10, 8, 8, 9, 9, 0, 0, 0,
 11,10, 8, 8,10,10, 0, 0, 0,11,11, 8, 8,10,10, 0,
  0, 0,12,12, 9, 9,10,10, 0, 0, 0, 0, 0, 9, 9,10,
 10,
};

static float _vq_quantthresh__8c1_s_p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8c1_s_p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p5_0 = {
 _vq_quantthresh__8c1_s_p5_0,
 _vq_quantmap__8c1_s_p5_0,
 9,
 9
};

static static_codebook _8c1_s_p5_0 = {
 2, 81,
 _vq_lengthlist__8c1_s_p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8c1_s_p5_0,
 
# 26016 "oggenc.c" 3 4
((void *)0)
# 26016 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p5_0,
 
# 26018 "oggenc.c" 3 4
((void *)0)
# 26018 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p6_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__8c1_s_p6_0[] = {
  1, 3, 3, 5, 5, 8, 8, 8, 8, 9, 9,10,10,11,11,11,
 11, 0, 0, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,11,
 12,12, 0, 0, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 0, 0, 0, 9, 9, 8, 8,10,10,10,10,11,11,
 12,12,12,12, 0, 0, 0, 9, 9, 8, 8,10,10,10,10,11,
 11,12,12,12,12, 0, 0, 0,10,10, 9, 9,10,10,10,10,
 11,11,12,12,13,13, 0, 0, 0,10,10, 9, 9,10,10,10,
 10,11,11,12,12,13,13, 0, 0, 0,11,11, 9, 9,10,10,
 10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,10,
 10,10,10,11,11,12,12,13,13, 0, 0, 0, 0, 0, 9, 9,
 10,10,11,11,12,12,12,12,13,13, 0, 0, 0, 0, 0, 9,
  9,10,10,11,11,12,11,12,12,13,13, 0, 0, 0, 0, 0,
 10,10,11,11,11,11,12,12,13,12,13,13, 0, 0, 0, 0,
  0, 0, 0,11,10,11,11,12,12,13,13,13,13, 0, 0, 0,
  0, 0, 0, 0,11,11,12,12,12,12,13,13,13,14, 0, 0,
  0, 0, 0, 0, 0,11,11,12,12,12,12,13,13,14,13, 0,
  0, 0, 0, 0, 0, 0,12,12,12,12,13,13,13,13,14,14,
  0, 0, 0, 0, 0, 0, 0, 0, 0,12,12,13,13,13,13,14,
 14,
};

static float _vq_quantthresh__8c1_s_p6_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__8c1_s_p6_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p6_0 = {
 _vq_quantthresh__8c1_s_p6_0,
 _vq_quantmap__8c1_s_p6_0,
 17,
 17
};

static static_codebook _8c1_s_p6_0 = {
 2, 289,
 _vq_lengthlist__8c1_s_p6_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__8c1_s_p6_0,
 
# 26087 "oggenc.c" 3 4
((void *)0)
# 26087 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p6_0,
 
# 26089 "oggenc.c" 3 4
((void *)0)
# 26089 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8c1_s_p7_0[] = {
  1, 4, 4, 6, 6, 6, 7, 6, 6, 4, 7, 7,10, 9, 9,10,
  9, 9, 5, 7, 7,10, 9, 9,10, 9, 9, 6,10,10,10,10,
 10,11,10,10, 6, 9, 9,10, 9,10,11,10,10, 6, 9, 9,
 10, 9, 9,11, 9,10, 7,10,10,11,11,11,11,10,10, 6,
  9, 9,10,10,10,11, 9, 9, 6, 9, 9,10,10,10,10, 9,
  9,
};

static float _vq_quantthresh__8c1_s_p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__8c1_s_p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p7_0 = {
 _vq_quantthresh__8c1_s_p7_0,
 _vq_quantmap__8c1_s_p7_0,
 3,
 3
};

static static_codebook _8c1_s_p7_0 = {
 4, 81,
 _vq_lengthlist__8c1_s_p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__8c1_s_p7_0,
 
# 26128 "oggenc.c" 3 4
((void *)0)
# 26128 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p7_0,
 
# 26130 "oggenc.c" 3 4
((void *)0)
# 26130 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__8c1_s_p7_1[] = {
  2, 3, 3, 5, 5, 7, 7, 7, 7, 7, 7,10,10, 9, 7, 7,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 7, 7, 7, 7, 8, 8, 8,
  8,10,10,10, 7, 7, 7, 7, 8, 8, 8, 8,10,10,10, 7,
  7, 7, 7, 8, 8, 8, 8,10,10,10, 8, 8, 8, 8, 8, 8,
  8, 8,10,10,10, 8, 8, 8, 8, 8, 8, 8, 8,10,10,10,
  8, 8, 8, 8, 8, 8, 8, 8,10,10,10,10,10, 8, 8, 8,
  8, 8, 8,10,10,10,10,10, 8, 8, 8, 8, 8, 8,10,10,
 10,10,10, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__8c1_s_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__8c1_s_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p7_1 = {
 _vq_quantthresh__8c1_s_p7_1,
 _vq_quantmap__8c1_s_p7_1,
 11,
 11
};

static static_codebook _8c1_s_p7_1 = {
 2, 121,
 _vq_lengthlist__8c1_s_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__8c1_s_p7_1,
 
# 26181 "oggenc.c" 3 4
((void *)0)
# 26181 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p7_1,
 
# 26183 "oggenc.c" 3 4
((void *)0)
# 26183 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p8_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__8c1_s_p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 8, 8, 9, 9,10,10, 7, 5, 5,
  7, 7, 8, 8, 8, 8, 9,10,11,11, 7, 5, 5, 7, 7, 8,
  8, 9, 9,10,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,
  9,10,11,11, 0, 8, 8, 8, 8, 9, 9, 9, 9,10,10,11,
 11, 0,12,12, 9, 9, 9, 9,10, 9,10,11,11,11, 0,13,
 12, 9, 8, 9, 9,10,10,11,11,12,11, 0, 0, 0, 9, 9,
  9, 9,10,10,11,11,12,12, 0, 0, 0,10,10, 9, 9,10,
 10,11,11,12,12, 0, 0, 0,13,13,10,10,11,11,12,11,
 13,12, 0, 0, 0,14,14,10,10,11,10,11,11,12,12, 0,
  0, 0, 0, 0,12,12,11,11,12,12,13,13, 0, 0, 0, 0,
  0,12,12,11,10,12,11,13,12,
};

static float _vq_quantthresh__8c1_s_p8_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__8c1_s_p8_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p8_0 = {
 _vq_quantthresh__8c1_s_p8_0,
 _vq_quantmap__8c1_s_p8_0,
 13,
 13
};

static static_codebook _8c1_s_p8_0 = {
 2, 169,
 _vq_lengthlist__8c1_s_p8_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__8c1_s_p8_0,
 
# 26239 "oggenc.c" 3 4
((void *)0)
# 26239 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p8_0,
 
# 26241 "oggenc.c" 3 4
((void *)0)
# 26241 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p8_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8c1_s_p8_1[] = {
  2, 3, 3, 5, 5, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 6,
  6, 6, 5, 5, 6, 6, 6, 5, 5,
};

static float _vq_quantthresh__8c1_s_p8_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8c1_s_p8_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p8_1 = {
 _vq_quantthresh__8c1_s_p8_1,
 _vq_quantmap__8c1_s_p8_1,
 5,
 5
};

static static_codebook _8c1_s_p8_1 = {
 2, 25,
 _vq_lengthlist__8c1_s_p8_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8c1_s_p8_1,
 
# 26278 "oggenc.c" 3 4
((void *)0)
# 26278 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p8_1,
 
# 26280 "oggenc.c" 3 4
((void *)0)
# 26280 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__8c1_s_p9_0[] = {
  1, 3, 3,10,10,10,10,10,10,10,10,10,10, 5, 6, 6,
 10,10,10,10,10,10,10,10,10,10, 6, 7, 8,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10, 9, 9, 9, 9,
};

static float _vq_quantthresh__8c1_s_p9_0[] = {
 -1732.5, -1417.5, -1102.5, -787.5, -472.5, -157.5, 157.5, 472.5,
 787.5, 1102.5, 1417.5, 1732.5,
};

static long _vq_quantmap__8c1_s_p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p9_0 = {
 _vq_quantthresh__8c1_s_p9_0,
 _vq_quantmap__8c1_s_p9_0,
 13,
 13
};

static static_codebook _8c1_s_p9_0 = {
 2, 169,
 _vq_lengthlist__8c1_s_p9_0,
 1, -513964032, 1628680192, 4, 0,
 _vq_quantlist__8c1_s_p9_0,
 
# 26336 "oggenc.c" 3 4
((void *)0)
# 26336 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p9_0,
 
# 26338 "oggenc.c" 3 4
((void *)0)
# 26338 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__8c1_s_p9_1[] = {
  1, 4, 4, 5, 5, 7, 7, 9, 9,11,11,12,12,13,13, 6,
  5, 5, 6, 6, 9, 9,10,10,12,12,12,13,15,14, 6, 5,
  5, 7, 7, 9, 9,10,10,12,12,12,13,14,13,17, 7, 7,
  8, 8,10,10,11,11,12,13,13,13,13,13,17, 7, 7, 8,
  8,10,10,11,11,13,13,13,13,14,14,17,11,11, 9, 9,
 11,11,12,12,12,13,13,14,15,13,17,12,12, 9, 9,11,
 11,12,12,13,13,13,13,14,16,17,17,17,11,12,12,12,
 13,13,13,14,15,14,15,15,17,17,17,12,12,11,11,13,
 13,14,14,15,14,15,15,17,17,17,15,15,13,13,14,14,
 15,14,15,15,16,15,17,17,17,15,15,13,13,13,14,14,
 15,15,15,15,16,17,17,17,17,16,14,15,14,14,15,14,
 14,15,15,15,17,17,17,17,17,14,14,16,14,15,15,15,
 15,15,15,17,17,17,17,17,17,16,16,15,17,15,15,14,
 17,15,17,16,17,17,17,17,16,15,14,15,15,15,15,15,
 15,
};

static float _vq_quantthresh__8c1_s_p9_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__8c1_s_p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p9_1 = {
 _vq_quantthresh__8c1_s_p9_1,
 _vq_quantmap__8c1_s_p9_1,
 15,
 15
};

static static_codebook _8c1_s_p9_1 = {
 2, 225,
 _vq_lengthlist__8c1_s_p9_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__8c1_s_p9_1,
 
# 26400 "oggenc.c" 3 4
((void *)0)
# 26400 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p9_1,
 
# 26402 "oggenc.c" 3 4
((void *)0)
# 26402 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8c1_s_p9_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__8c1_s_p9_2[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9, 9, 9,11,11,12, 7, 7, 7, 7, 8, 8, 9, 9,
  9, 9,10,10,10,10,10,10,10,10,11,11,11, 7, 7, 7,
  7, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9,10,10,10,10,11,
 11,12, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,10,10,10,10,
 10,10,10,10,11,11,11, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9,10,10,10,10,10,10,10,10,11,11,11, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,11,11,
 11, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10,10,10,10,10,
 10,10,10,11,12,11, 9, 9, 8, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,10,10,10,10,11,11,11,11,11, 8, 8, 9,
  9, 9, 9,10,10,10,10,10,10,10,10,10,10,11,12,11,
 12,11, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,
 10,10,11,11,11,11,11, 9, 9, 9, 9,10,10,10,10,10,
 10,10,10,10,10,10,10,12,11,12,11,11, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10,10,12,11,11,11,
 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,
 11,11,11,12,11,11,12,11,10,10,10,10,10,10,10,10,
 10,10,10,10,11,10,11,11,11,11,11,11,11,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,12,
 11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 11,11,12,11,12,11,11,11,11,10,10,10,10,10,10,10,
 10,10,10,10,10,11,11,12,11,11,12,11,11,12,10,10,
 11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,
 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,12,
 12,11,12,11,11,12,12,12,11,11,10,10,10,10,10,10,
 10,10,10,11,12,12,11,12,12,11,12,11,11,11,11,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__8c1_s_p9_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__8c1_s_p9_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__8c1_s_p9_2 = {
 _vq_quantthresh__8c1_s_p9_2,
 _vq_quantmap__8c1_s_p9_2,
 21,
 21
};

static static_codebook _8c1_s_p9_2 = {
 2, 441,
 _vq_lengthlist__8c1_s_p9_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__8c1_s_p9_2,
 
# 26485 "oggenc.c" 3 4
((void *)0)
# 26485 "oggenc.c"
    ,
 &_vq_auxt__8c1_s_p9_2,
 
# 26487 "oggenc.c" 3 4
((void *)0)
# 26487 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__8c1_s_single[] = {
  4, 6,18, 8,11, 8, 8, 9, 9,10, 4, 4,18, 5, 9, 5,
  6, 7, 8,10,18,18,18,18,17,17,17,17,17,17, 7, 5,
 17, 6,11, 6, 7, 8, 9,12,12, 9,17,12, 8, 8, 9,10,
 10,13, 7, 5,17, 6, 8, 4, 5, 6, 8,10, 6, 5,17, 6,
  8, 5, 4, 5, 7, 9, 7, 7,17, 8, 9, 6, 5, 5, 6, 8,
  8, 8,17, 9,11, 8, 6, 6, 6, 7, 9,10,17,12,12,10,
  9, 7, 7, 8,
};

static static_codebook _huff_book__8c1_s_single = {
 2, 100,
 _huff_lengthlist__8c1_s_single,
 0, 0, 0, 0, 0,
 
# 26505 "oggenc.c" 3 4
((void *)0)
# 26505 "oggenc.c"
    ,
 
# 26506 "oggenc.c" 3 4
((void *)0)
# 26506 "oggenc.c"
    ,
 
# 26507 "oggenc.c" 3 4
((void *)0)
# 26507 "oggenc.c"
    ,
 
# 26508 "oggenc.c" 3 4
((void *)0)
# 26508 "oggenc.c"
    ,
 0
};



static vorbis_info_residue0 _residue_44_mid={
  0,-1, -1, 10,-1,

  {0},
  {-1},
  { .5, 1.5, 1.5, 2.5, 2.5, 4.5, 8.5, 16.5, 32.5},
  { .5, .5, 999., .5, 999., 4.5, 8.5, 16.5, 32.5},
};

static vorbis_info_residue0 _residue_44_high={
  0,-1, -1, 10,-1,

  {0},
  {-1},
  { .5, 1.5, 2.5, 4.5, 8.5, 16.5, 32.5, 71.5,157.5},
  { .5, 1.5, 2.5, 3.5, 4.5, 8.5, 16.5, 71.5,157.5},
};

static static_bookblock _resbook_44s_0={
  {
    {0},{0,0,&_44c0_s_p1_0},{0,0,&_44c0_s_p2_0},{0,0,&_44c0_s_p3_0},
    {0,0,&_44c0_s_p4_0},{0,0,&_44c0_s_p5_0},{0,0,&_44c0_s_p6_0},
    {&_44c0_s_p7_0,&_44c0_s_p7_1},{&_44c0_s_p8_0,&_44c0_s_p8_1},
    {&_44c0_s_p9_0,&_44c0_s_p9_1,&_44c0_s_p9_2}
   }
};
static static_bookblock _resbook_44sm_0={
  {
    {0},{0,0,&_44c0_sm_p1_0},{0,0,&_44c0_sm_p2_0},{0,0,&_44c0_sm_p3_0},
    {0,0,&_44c0_sm_p4_0},{0,0,&_44c0_sm_p5_0},{0,0,&_44c0_sm_p6_0},
    {&_44c0_sm_p7_0,&_44c0_sm_p7_1},{&_44c0_sm_p8_0,&_44c0_sm_p8_1},
    {&_44c0_sm_p9_0,&_44c0_sm_p9_1,&_44c0_sm_p9_2}
   }
};
static static_bookblock _resbook_44s_1={
  {
    {0},{0,0,&_44c1_s_p1_0},{0,0,&_44c1_s_p2_0},{0,0,&_44c1_s_p3_0},
    {0,0,&_44c1_s_p4_0},{0,0,&_44c1_s_p5_0},{0,0,&_44c1_s_p6_0},
    {&_44c1_s_p7_0,&_44c1_s_p7_1},{&_44c1_s_p8_0,&_44c1_s_p8_1},
    {&_44c1_s_p9_0,&_44c1_s_p9_1,&_44c1_s_p9_2}
   }
};
static static_bookblock _resbook_44sm_1={
  {
    {0},{0,0,&_44c1_sm_p1_0},{0,0,&_44c1_sm_p2_0},{0,0,&_44c1_sm_p3_0},
    {0,0,&_44c1_sm_p4_0},{0,0,&_44c1_sm_p5_0},{0,0,&_44c1_sm_p6_0},
    {&_44c1_sm_p7_0,&_44c1_sm_p7_1},{&_44c1_sm_p8_0,&_44c1_sm_p8_1},
    {&_44c1_sm_p9_0,&_44c1_sm_p9_1,&_44c1_sm_p9_2}
   }
};
static static_bookblock _resbook_44s_2={
  {
    {0},{0,0,&_44c2_s_p1_0},{0,0,&_44c2_s_p2_0},{0,0,&_44c2_s_p3_0},
    {0,0,&_44c2_s_p4_0},{0,0,&_44c2_s_p5_0},{0,0,&_44c2_s_p6_0},
    {&_44c2_s_p7_0,&_44c2_s_p7_1},{&_44c2_s_p8_0,&_44c2_s_p8_1},
    {&_44c2_s_p9_0,&_44c2_s_p9_1,&_44c2_s_p9_2}
   }
};
static static_bookblock _resbook_44s_3={
  {
    {0},{0,0,&_44c3_s_p1_0},{0,0,&_44c3_s_p2_0},{0,0,&_44c3_s_p3_0},
    {0,0,&_44c3_s_p4_0},{0,0,&_44c3_s_p5_0},{0,0,&_44c3_s_p6_0},
    {&_44c3_s_p7_0,&_44c3_s_p7_1},{&_44c3_s_p8_0,&_44c3_s_p8_1},
    {&_44c3_s_p9_0,&_44c3_s_p9_1,&_44c3_s_p9_2}
   }
};
static static_bookblock _resbook_44s_4={
  {
    {0},{0,0,&_44c4_s_p1_0},{0,0,&_44c4_s_p2_0},{0,0,&_44c4_s_p3_0},
    {0,0,&_44c4_s_p4_0},{0,0,&_44c4_s_p5_0},{0,0,&_44c4_s_p6_0},
    {&_44c4_s_p7_0,&_44c4_s_p7_1},{&_44c4_s_p8_0,&_44c4_s_p8_1},
    {&_44c4_s_p9_0,&_44c4_s_p9_1,&_44c4_s_p9_2}
   }
};
static static_bookblock _resbook_44s_5={
  {
    {0},{0,0,&_44c5_s_p1_0},{0,0,&_44c5_s_p2_0},{0,0,&_44c5_s_p3_0},
    {0,0,&_44c5_s_p4_0},{0,0,&_44c5_s_p5_0},{0,0,&_44c5_s_p6_0},
    {&_44c5_s_p7_0,&_44c5_s_p7_1},{&_44c5_s_p8_0,&_44c5_s_p8_1},
    {&_44c5_s_p9_0,&_44c5_s_p9_1,&_44c5_s_p9_2}
   }
};
static static_bookblock _resbook_44s_6={
  {
    {0},{0,0,&_44c6_s_p1_0},{0,0,&_44c6_s_p2_0},{0,0,&_44c6_s_p3_0},
    {0,0,&_44c6_s_p4_0},
    {&_44c6_s_p5_0,&_44c6_s_p5_1},
    {&_44c6_s_p6_0,&_44c6_s_p6_1},
    {&_44c6_s_p7_0,&_44c6_s_p7_1},
    {&_44c6_s_p8_0,&_44c6_s_p8_1},
    {&_44c6_s_p9_0,&_44c6_s_p9_1,&_44c6_s_p9_2}
   }
};
static static_bookblock _resbook_44s_7={
  {
    {0},{0,0,&_44c7_s_p1_0},{0,0,&_44c7_s_p2_0},{0,0,&_44c7_s_p3_0},
    {0,0,&_44c7_s_p4_0},
    {&_44c7_s_p5_0,&_44c7_s_p5_1},
    {&_44c7_s_p6_0,&_44c7_s_p6_1},
    {&_44c7_s_p7_0,&_44c7_s_p7_1},
    {&_44c7_s_p8_0,&_44c7_s_p8_1},
    {&_44c7_s_p9_0,&_44c7_s_p9_1,&_44c7_s_p9_2}
   }
};
static static_bookblock _resbook_44s_8={
  {
    {0},{0,0,&_44c8_s_p1_0},{0,0,&_44c8_s_p2_0},{0,0,&_44c8_s_p3_0},
    {0,0,&_44c8_s_p4_0},
    {&_44c8_s_p5_0,&_44c8_s_p5_1},
    {&_44c8_s_p6_0,&_44c8_s_p6_1},
    {&_44c8_s_p7_0,&_44c8_s_p7_1},
    {&_44c8_s_p8_0,&_44c8_s_p8_1},
    {&_44c8_s_p9_0,&_44c8_s_p9_1,&_44c8_s_p9_2}
   }
};
static static_bookblock _resbook_44s_9={
  {
    {0},{0,0,&_44c9_s_p1_0},{0,0,&_44c9_s_p2_0},{0,0,&_44c9_s_p3_0},
    {0,0,&_44c9_s_p4_0},
    {&_44c9_s_p5_0,&_44c9_s_p5_1},
    {&_44c9_s_p6_0,&_44c9_s_p6_1},
    {&_44c9_s_p7_0,&_44c9_s_p7_1},
    {&_44c9_s_p8_0,&_44c9_s_p8_1},
    {&_44c9_s_p9_0,&_44c9_s_p9_1,&_44c9_s_p9_2}
   }
};


static vorbis_residue_template _res_44s_0[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c0_s_short,&_huff_book__44c0_sm_short,
   &_resbook_44s_0,&_resbook_44sm_0},

  {2,0, &_residue_44_mid,
   &_huff_book__44c0_s_long,&_huff_book__44c0_sm_long,
   &_resbook_44s_0,&_resbook_44sm_0}
};
static vorbis_residue_template _res_44s_1[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c1_s_short,&_huff_book__44c1_sm_short,
   &_resbook_44s_1,&_resbook_44sm_1},

  {2,0, &_residue_44_mid,
   &_huff_book__44c1_s_long,&_huff_book__44c1_sm_long,
   &_resbook_44s_1,&_resbook_44sm_1}
};
static vorbis_residue_template _res_44s_2[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c2_s_short,&_huff_book__44c2_s_short,
   &_resbook_44s_2,&_resbook_44s_2},

  {2,0, &_residue_44_mid,
   &_huff_book__44c2_s_long,&_huff_book__44c2_s_long,
   &_resbook_44s_2,&_resbook_44s_2}
};
static vorbis_residue_template _res_44s_3[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c3_s_short,&_huff_book__44c3_s_short,
   &_resbook_44s_3,&_resbook_44s_3},

  {2,0, &_residue_44_mid,
   &_huff_book__44c3_s_long,&_huff_book__44c3_s_long,
   &_resbook_44s_3,&_resbook_44s_3}
};
static vorbis_residue_template _res_44s_4[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c4_s_short,&_huff_book__44c4_s_short,
   &_resbook_44s_4,&_resbook_44s_4},

  {2,0, &_residue_44_mid,
   &_huff_book__44c4_s_long,&_huff_book__44c4_s_long,
   &_resbook_44s_4,&_resbook_44s_4}
};
static vorbis_residue_template _res_44s_5[]={
  {2,0, &_residue_44_mid,
   &_huff_book__44c5_s_short,&_huff_book__44c5_s_short,
   &_resbook_44s_5,&_resbook_44s_5},

  {2,0, &_residue_44_mid,
   &_huff_book__44c5_s_long,&_huff_book__44c5_s_long,
   &_resbook_44s_5,&_resbook_44s_5}
};
static vorbis_residue_template _res_44s_6[]={
  {2,0, &_residue_44_high,
   &_huff_book__44c6_s_short,&_huff_book__44c6_s_short,
   &_resbook_44s_6,&_resbook_44s_6},

  {2,0, &_residue_44_high,
   &_huff_book__44c6_s_long,&_huff_book__44c6_s_long,
   &_resbook_44s_6,&_resbook_44s_6}
};
static vorbis_residue_template _res_44s_7[]={
  {2,0, &_residue_44_high,
   &_huff_book__44c7_s_short,&_huff_book__44c7_s_short,
   &_resbook_44s_7,&_resbook_44s_7},

  {2,0, &_residue_44_high,
   &_huff_book__44c7_s_long,&_huff_book__44c7_s_long,
   &_resbook_44s_7,&_resbook_44s_7}
};
static vorbis_residue_template _res_44s_8[]={
  {2,0, &_residue_44_high,
   &_huff_book__44c8_s_short,&_huff_book__44c8_s_short,
   &_resbook_44s_8,&_resbook_44s_8},

  {2,0, &_residue_44_high,
   &_huff_book__44c8_s_long,&_huff_book__44c8_s_long,
   &_resbook_44s_8,&_resbook_44s_8}
};
static vorbis_residue_template _res_44s_9[]={
  {2,0, &_residue_44_high,
   &_huff_book__44c9_s_short,&_huff_book__44c9_s_short,
   &_resbook_44s_9,&_resbook_44s_9},

  {2,0, &_residue_44_high,
   &_huff_book__44c9_s_long,&_huff_book__44c9_s_long,
   &_resbook_44s_9,&_resbook_44s_9}
};

static vorbis_mapping_template _mapres_template_44_stereo[]={
  { _map_nominal, _res_44s_0 },
  { _map_nominal, _res_44s_1 },
  { _map_nominal, _res_44s_2 },
  { _map_nominal, _res_44s_3 },
  { _map_nominal, _res_44s_4 },
  { _map_nominal, _res_44s_5 },
  { _map_nominal, _res_44s_6 },
  { _map_nominal, _res_44s_7 },
  { _map_nominal, _res_44s_8 },
  { _map_nominal, _res_44s_9 },
};
# 26766 "oggenc.c"
static vorbis_info_psy_global _psy_global_44[5]={

  {8,
   {20.f,14.f,12.f,12.f,12.f,12.f,12.f},
   {-60.f,-30.f,-40.f,-40.f,-40.f,-40.f,-40.f}, 2,-75.f,
   -6.f,
   {99.},{{99.},{99.}},{0},{0},{{0.},{0.}}
  },
  {8,
   {14.f,10.f,10.f,10.f,10.f,10.f,10.f},
   {-40.f,-30.f,-25.f,-25.f,-25.f,-25.f,-25.f}, 2,-80.f,
   -6.f,
   {99.},{{99.},{99.}},{0},{0},{{0.},{0.}}
  },
  {8,
   {12.f,10.f,10.f,10.f,10.f,10.f,10.f},
   {-20.f,-20.f,-15.f,-15.f,-15.f,-15.f,-15.f}, 0,-80.f,
   -6.f,
   {99.},{{99.},{99.}},{0},{0},{{0.},{0.}}
  },
  {8,
   {10.f,8.f,8.f,8.f,8.f,8.f,8.f},
   {-20.f,-15.f,-12.f,-12.f,-12.f,-12.f,-12.f}, 0,-80.f,
   -6.f,
   {99.},{{99.},{99.}},{0},{0},{{0.},{0.}}
  },
  {8,
   {10.f,6.f,6.f,6.f,6.f,6.f,6.f},
   {-15.f,-15.f,-12.f,-12.f,-12.f,-12.f,-12.f}, 0,-85.f,
   -6.f,
   {99.},{{99.},{99.}},{0},{0},{{0.},{0.}}
  },
};


static compandblock _psy_compand_44[6]={

  {{
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9,10,11,12,13,14, 15,
    16,17,18,19,20,21,22, 23,
    24,25,26,27,28,29,30, 31,
    32,33,34,35,36,37,38, 39,
  }},

  {{
     0, 1, 2, 3, 4, 5, 6, 6,
     7, 7, 7, 7, 6, 6, 6, 7,
     7, 8, 9,10,11,12,13, 14,
    15,16,17,17,17,18,18, 19,
    19,19,20,21,22,23,24, 25,
  }},

  {{
    0, 1, 2, 3, 4, 5, 5, 5,
    6, 6, 6, 5, 4, 4, 4, 4,
    4, 4, 5, 5, 5, 6, 6, 6,
    7, 7, 7, 8, 8, 8, 9, 10,
    11,12,13,14,15,16,17, 18,
  }},

  {{
     0, 1, 2, 3, 4, 5, 6, 7,
     8, 9,10,11,12,13,14, 15,
    16,17,18,19,20,21,22, 23,
    24,25,26,27,28,29,30, 31,
    32,33,34,35,36,37,38, 39,
  }},

  {{
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9,10,11,12,12,13, 13,
    13,14,14,14,15,15,15, 15,
    16,16,17,17,17,18,18, 19,
    19,19,20,21,22,23,24, 25,
  }},

  {{
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 8, 7, 6, 5, 4, 4, 4,
    4, 4, 5, 5, 5, 6, 6, 6,
    7, 7, 7, 8, 8, 8, 9, 10,
    11,12,13,14,15,16,17, 18,
  }}
};


static vp_adjblock _vp_tonemask_adj_longblock[11]={


  {{-15,-15,-15,-15,-10, -8, -4,-2, 0, 0, 0,10, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 5, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-15,-15,-15,-15,-15,-12,-10,-8, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
};
static vp_adjblock _vp_tonemask_adj_otherblock[11]={


  {{-20,-20,-20,-20,-14,-12,-10, -8, -4, 0, 0,10, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 5, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-18,-16,-14,-10, 0, 0, 0, 0, 0, 0, 0, 0}},
};

static noise3 _psy_noisebias_trans_low[2]={


  {{{-10,-10,-10,-10,-10, -4, 0, 0, 4, 8, 8, 8, 8, 10, 12, 14, 20},
    {-30,-30,-30,-30,-26,-20,-16, -8, -6, -6, -2, 2, 2, 4, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2}}},

  {{{-15,-15,-15,-15,-15,-10, -5, 0, 2, 2, 6, 6, 6, 8, 10, 12, 15},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, 0, 0, 0, 2, 4, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -4, -4, -4, -2}}},
};
static noise3 _psy_noisebias_long_low[2]={


  {{{-10,-10,-10,-10,-10, -4, 0, 0, 0, 6, 6, 6, 6, 10, 10, 12, 20},
    {-20,-20,-20,-20,-20,-20,-10, -2, 0, 0, 0, 0, 0, 2, 4, 6, 15},
    {-20,-20,-20,-20,-20,-20,-20,-10, -6, -6, -6, -6, -6, -4, -4, -4, -2}}},

  {{{-10,-10,-10,-10,-10,-10, -8, -8, 0, 2, 4, 4, 5, 5, 5, 8, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14, -8, -2, 0, 0, 0, 0, 2, 4, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14, -6, -6, -6, -6, -6, -4, -4, -4, -2}}},
};

static noise3 _psy_noisebias_trans[11]={


  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 5, 8, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14, -8, -4, 0, 0, 0, 0, 2, 4, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -4, -4, -4, -2}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 5, 8, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, -2, -2, -2, 0, 2, 8},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6, -4}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 2, 2, 4, 4, 5, 6, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, -2, -2, -2, 0, 2, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 2, 2, 4, 4, 4, 5, 8},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -1, 1, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-20,-20,-20,-20,-20,-18,-14, -8, -1, 1, 1, 1, 2, 3, 3, 4, 7},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -1, 1, 5},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-24,-24,-24,-24,-20,-18,-14, -8, -1, 1, 1, 1, 2, 3, 3, 4, 7},
    {-32,-32,-32,-32,-28,-24,-22,-16,-12, -6, -4, -4, -4, -4, -2, -1, 2},
    {-34,-34,-34,-34,-30,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -5}}},

  {{{-24,-24,-24,-24,-20,-18,-14, -8, -1, 1, 1, 1, 2, 3, 3, 4, 7},
    {-32,-32,-32,-32,-28,-24,-24,-18,-14, -8, -6, -6, -6, -6, -4, -2, 1},
    {-34,-34,-34,-34,-30,-26,-24,-18,-17,-15,-15,-15,-15,-13,-13,-12, -8}}},

  {{{-24,-24,-24,-24,-20,-18,-14, -8, -1, 1, 1, 1, 2, 3, 3, 4, 7},
    {-32,-32,-32,-32,-28,-24,-24,-18,-14,-12,-10, -8, -8, -8, -6, -4, 0},
    {-34,-34,-34,-34,-30,-26,-26,-24,-22,-19,-19,-19,-19,-18,-17,-16,-12}}},

  {{{-24,-24,-24,-24,-22,-20,-15,-10, -8, -2, 0, 0, 0, 1, 2, 3, 7},
    {-36,-36,-36,-36,-30,-30,-30,-24,-18,-14,-12,-10,-10,-10, -8, -6, -2},
    {-36,-36,-36,-36,-34,-30,-28,-26,-24,-24,-24,-24,-24,-24,-24,-20,-16}}},

  {{{-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2, 2},
    {-36,-36,-36,-36,-34,-32,-32,-28,-20,-16,-16,-16,-16,-14,-12,-10, -7},
    {-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-24,-20}}},

  {{{-30,-30,-30,-30,-30,-30,-30,-28,-20,-14,-14,-14,-14,-14,-14,-12,-10},
    {-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-30,-30,-30,-30,-30,-30,-20},
    {-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40}}},
};

static noise3 _psy_noisebias_long[11]={


  {{{-10,-10,-10,-10,-10,-10, -8, 2, 2, 2, 4, 4, 5, 5, 5, 8, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14, -6, 0, 0, 0, 0, 0, 2, 4, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14, -8, -6, -6, -6, -6, -4, -4, -4, -2}}},

  {{{-10,-10,-10,-10,-10,-10, -8, -4, 0, 2, 4, 4, 5, 5, 5, 8, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -2, -2, -2, -2, 0, 2, 8},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6, -4}}},

  {{{-10,-10,-10,-10,-10,-10,-10, -8, 0, 2, 2, 2, 4, 4, 5, 6, 10},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -2, -2, -2, -2, 0, 2, 6},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-10,-10,-10,-10,-10,-10,-10, -8, 0, 2, 2, 2, 4, 4, 4, 5, 8},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -1, 1, 6},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4, 1, 1, 1, 2, 3, 3, 4, 7},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -1, 1, 5},
    {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4}}},

  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4, 1, 1, 1, 2, 3, 3, 4, 7},
    {-22,-22,-22,-22,-22,-22,-22,-16,-12, -6, -4, -4, -4, -4, -2, -1, 2},
    {-24,-24,-24,-24,-24,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -5}}},

  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4, 1, 1, 1, 2, 3, 3, 4, 7},
    {-24,-24,-24,-24,-24,-24,-24,-18,-14, -8, -6, -6, -6, -6, -4, -2, 1},
    {-26,-26,-26,-26,-26,-26,-26,-18,-16,-15,-15,-15,-15,-13,-13,-12, -8}}},

  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4, 1, 1, 1, 2, 3, 3, 4, 7},
    {-24,-24,-24,-24,-24,-24,-24,-18,-14,-10, -8, -8, -8, -8, -6, -4, 0},
    {-26,-26,-26,-26,-26,-26,-26,-22,-20,-19,-19,-19,-19,-18,-17,-16,-12}}},

  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4, 0, 0, 0, 0, 1, 2, 3, 7},
    {-26,-26,-26,-26,-26,-26,-26,-20,-16,-12,-10,-10,-10,-10, -8, -6, -2},
    {-28,-28,-28,-28,-28,-28,-28,-26,-24,-24,-24,-24,-24,-24,-24,-20,-16}}},

  {{{-22,-22,-22,-22,-22,-22,-22,-18,-14, -8, -4, -4, -4, -4, -4, -2, 2},
    {-26,-26,-26,-26,-26,-26,-26,-22,-18,-16,-16,-16,-16,-14,-12,-10, -7},
    {-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-24,-20}}},

  {{{-24,-24,-24,-24,-24,-24,-24,-24,-24,-18,-14,-14,-14,-14,-14,-12,-10},
    {-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-20},
    {-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40}}},
};

static noise3 _psy_noisebias_impulse[11]={


  {{{-10,-10,-10,-10,-10, -4, 0, 0, 4, 4, 8, 8, 8, 10, 12, 14, 20},
    {-30,-30,-30,-30,-26,-22,-20,-14, -6, -2, 0, 0, 0, 0, 2, 4, 10},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2}}},

  {{{-12,-12,-12,-12,-12, -8, -6, -4, 0, 4, 4, 4, 4, 10, 12, 14, 20},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -4, -4, -2, -2, -2, -2, 2},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8,-10,-10, -8, -8, -8, -6, -4}}},

  {{{-14,-14,-14,-14,-14,-10, -8, -6, -2, 2, 2, 2, 2, 8, 10, 10, 16},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2, 0},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4}}},

  {{{-14,-14,-14,-14,-14,-10, -8, -6, -2, 2, 2, 2, 2, 6, 8, 8, 14},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2, 0},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4}}},

  {{{-16,-16,-16,-16,-16,-12,-10, -6, -2, 0, 0, 0, 0, 4, 6, 6, 12},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2, 0},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4}}},

  {{{-20,-20,-20,-20,-20,-18,-14,-10, -4, 0, 0, 0, 0, 4, 4, 6, 11},
    {-32,-32,-32,-32,-28,-24,-22,-16,-10, -6, -8, -8, -6, -6, -6, -4, -2},
    {-34,-34,-34,-34,-30,-26,-24,-18,-14,-12,-12,-12,-12,-12,-10, -9, -5}}},

  {{{-20,-20,-20,-20,-20,-18,-14,-10, -4, 0, 0, 0, 0, 4, 4, 6, 11},
    {-34,-34,-34,-34,-30,-30,-24,-20,-12,-12,-14,-14,-10, -9, -8, -6, -4},
    {-34,-34,-34,-34,-34,-30,-26,-20,-16,-15,-15,-15,-15,-15,-13,-12, -8}}},

  {{{-22,-22,-22,-22,-22,-20,-14,-10, -6, 0, 0, 0, 0, 4, 4, 6, 11},
    {-34,-34,-34,-34,-30,-30,-24,-20,-14,-14,-16,-16,-14,-12,-10,-10,-10},
    {-34,-34,-34,-34,-32,-32,-30,-24,-20,-19,-19,-19,-19,-19,-17,-16,-12}}},

  {{{-24,-24,-24,-24,-24,-22,-14,-10, -6, -1, -1, -1, -1, 3, 3, 5, 10},
    {-34,-34,-34,-34,-30,-30,-30,-24,-20,-20,-20,-20,-20,-18,-16,-16,-14},
    {-36,-36,-36,-36,-36,-34,-28,-24,-24,-24,-24,-24,-24,-24,-24,-20,-16}}},

  {{{-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2, 2},
    {-36,-36,-36,-36,-34,-32,-32,-30,-26,-26,-26,-26,-26,-22,-20,-20,-18},
    {-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-24,-20}}},

  {{{-30,-30,-30,-30,-30,-26,-24,-24,-24,-20,-16,-16,-16,-16,-16,-14,-12},
    {-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-30,-30,-30,-30,-30,-30,-26},
    {-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40}}},
};


static noise3 _psy_noisebias_padding[11]={


  {{{-10,-10,-10,-10,-10, -4, 0, 0, 4, 8, 8, 8, 8, 10, 12, 14, 20},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, 2, 3, 6, 6, 8, 10},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -4, -4, -4, -4, -2, 0, 2}}},

  {{{-12,-12,-12,-12,-12, -8, -6, -4, 0, 4, 4, 4, 4, 10, 12, 14, 20},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, 0, 0, 0, 2, 2, 4, 8},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -6, -4, -2, 0}}},

  {{{-14,-14,-14,-14,-14,-10, -8, -6, -2, 2, 2, 2, 2, 8, 10, 10, 16},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, 0, 0, 0, 2, 2, 4, 8},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2}}},

  {{{-14,-14,-14,-14,-14,-10, -8, -6, -2, 2, 2, 2, 2, 6, 8, 8, 14},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -1, -1, -1, 0, 0, 2, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2}}},

  {{{-16,-16,-16,-16,-16,-12,-10, -6, -2, 0, 0, 0, 0, 4, 6, 6, 12},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -1, -1, -1, -1, 0, 2, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2}}},

  {{{-20,-20,-20,-20,-20,-18,-14,-10, -4, 0, 0, 0, 0, 4, 6, 6, 12},
    {-32,-32,-32,-32,-28,-24,-22,-16,-12, -6, -3, -3, -3, -3, -2, 0, 4},
    {-34,-34,-34,-34,-30,-26,-24,-18,-14,-10,-10,-10,-10,-10, -8, -5, -3}}},

  {{{-20,-20,-20,-20,-20,-18,-14,-10, -4, 0, 0, 0, 0, 4, 6, 6, 12},
    {-34,-34,-34,-34,-30,-30,-24,-20,-14, -8, -4, -4, -4, -4, -3, -1, 4},
    {-34,-34,-34,-34,-34,-30,-26,-20,-16,-13,-13,-13,-13,-13,-11, -8, -6}}},

  {{{-20,-20,-20,-20,-20,-18,-14,-10, -4, 0, 0, 0, 0, 4, 6, 6, 12},
    {-34,-34,-34,-34,-30,-30,-30,-24,-16,-10, -8, -6, -6, -6, -5, -3, 1},
    {-34,-34,-34,-34,-32,-32,-28,-22,-18,-16,-16,-16,-16,-16,-14,-12,-10}}},

  {{{-22,-22,-22,-22,-22,-20,-14,-10, -4, 0, 0, 0, 0, 3, 5, 5, 11},
    {-34,-34,-34,-34,-30,-30,-30,-24,-16,-12,-10, -8, -8, -8, -7, -5, -2},
    {-36,-36,-36,-36,-36,-34,-28,-22,-20,-20,-20,-20,-20,-20,-20,-16,-14}}},

  {{{-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -2, -2, -2, -2, 0, 2, 6},
    {-36,-36,-36,-36,-34,-32,-32,-24,-16,-12,-12,-12,-12,-12,-10, -8, -5},
    {-40,-40,-40,-40,-40,-40,-40,-32,-26,-24,-24,-24,-24,-24,-24,-20,-18}}},

  {{{-30,-30,-30,-30,-30,-26,-24,-24,-24,-20,-12,-12,-12,-12,-12,-10, -8},
    {-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-25,-25,-25,-25,-25,-25,-15},
    {-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40}}},
};

static noiseguard _psy_noiseguards_44[4]={
  {3,3,15},
  {3,3,15},
  {10,10,100},
  {10,10,100},
};

static int _psy_tone_suppress[11]={
  -20,-20,-20,-20,-24,-30,-40,-40,-45,-45,-45,
};

static int _psy_tone_0dB[11]={
  90,95,95,95,95,105,105,105,105,105,105,
};

static int _psy_noise_suppress[11]={
 -20,-24,-24,-24,-24,-30,-40,-40,-45,-45,-45,
};

static vorbis_info_psy _psy_info_template={
  -1,
  -140.,-140.,

  {0.f,0.f,0.f}, 0.,0., -40.f, {0.},


  1, -0.f, .5f, .5f, 0,0,0,
  {{-1},{-1},{-1}},{-1},105.f,

  0,0,-1,-1,0.,
};



static int _psy_ath_floater[11]={
  -100,-100,-100,-100,-100,-105,-105,-105,-105,-110,-120,
};

static int _psy_ath_abs[11]={
  -130,-130,-130,-140,-140,-140,-140,-140,-140,-140,-150,
};
# 27151 "oggenc.c"
static adj_stereo _psy_stereo_modes_44_low[2]={

  {{ 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 1, 0, 0, 0, 0},
   { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 4, 3},
   { 1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 8},
   { 12,12.5, 13,13.5, 14,14.5, 15, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 1, 0, 0, 0, 0},
   { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 4, 3},
   { 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8},
   { 12,12.5, 13,13.5, 14,14.5, 15, 99, 99, 99, 99, 99, 99, 99, 99}},
};

static adj_stereo _psy_stereo_modes_44[11]={

  {{ 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 1, 0, 0, 0, 0},
   { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 4, 3},
   { 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8},
   { 12,12.5, 13,13.5, 14,14.5, 15, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, 0, 0, 0, 0},
   { 8, 8, 8, 8, 6, 6, 5, 5, 5, 5, 5, 5, 5, 4, 3},
   { 1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 8, 8, 8, 8},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0},
   { 8, 8, 8, 6, 5, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1},
   { 3, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
   { 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1},
   { 4, 4, 5, 6, 6, 6, 6, 6, 8, 8, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 1, 0},
   { 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0},
   { 6, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 3, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},

  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
};



static att3 _psy_tone_masteratt_44_low[2]={
  {{ 34, 20, 8}, 0, 1.25},
  {{ 34, 20, 8}, -2, 1.25},
};
static att3 _psy_tone_masteratt_44[11]={
  {{ 30, 20, 8}, -2, 1.25},
  {{ 25, 14, 4}, 0, 0},
  {{ 20, 10, -2}, 0, 0},
  {{ 20, 9, -4}, 0, 0},
  {{ 20, 9, -4}, 0, 0},
  {{ 20, 6, -6}, 0, 0},
  {{ 20, 3, -10}, 0, 0},
  {{ 18, 1, -14}, 0, 0},
  {{ 18, 0, -16}, 0, 0},
  {{ 18, -2, -16}, 0, 0},
  {{ 12, -2, -20}, 0, 0},
};


static double _psy_lowpass_44_low[2]={
  15.1,15.1,
};
static double _psy_lowpass_44[11]={
  15.1,15.8,16.5,17.9,20.5,48.,999.,999.,999.,999.,999.
};



static int _noise_start_short_44[10]={
  16,16,16,16,32,32,9999,9999,9999,9999
};
static int _noise_start_long_44[10]={
  128,128,128,256,512,512,9999,9999,9999,9999
};
static int _noise_part_short_44[10]={
  8,8,8,8,8,8,8,8,8,8
};
static int _noise_part_long_44[10]={
  32,32,32,32,32,32,32,32,32,32
};
static double _noise_thresh_44[10]={
  .2,.2,.3,.4,.5,.5,9999.,9999.,9999.,9999.,
};
static double _noise_thresh_44_2[2]={
  .5,.5,
};


static int _noise_start_short_44_low[2]={
  32,32
};
static int _noise_start_long_44_low[2]={
  256,256
};

static double rate_mapping_44_stereo_low[2]={
  22500.,32000.
};

static double rate_mapping_44_stereo[11]={
  32000.,40000.,48000.,56000.,64000.,
  80000.,96000.,112000.,128000.,160000.,250001.
};
static double quality_mapping_44_stereo_low[2]={
  -.1,.0,
};
static double quality_mapping_44[11]={
  .0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0
};

static int blocksize_short_44_low[1]={
  512
};
static int blocksize_long_44_low[1]={
  4096
};

static int blocksize_short_44[10]={
  256,256,256,256,256,256,256,256,256,256
};
static int blocksize_long_44[10]={
  2048,2048,2048,2048,2048,2048,2048,2048,2048,2048
};
static double _psy_compand_short_mapping[11]={
  1., 1., 1.3, 1.6, 2., 2., 2., 2., 2., 2., 2.
};
static double _psy_compand_long_mapping[11]={
  4., 4., 4.3, 4.6, 5., 5., 5., 5., 5., 5., 5.
};
static double _global_mapping_44[11]={
  1., 1., 1.5, 2., 2., 2.5, 2.7, 3.0, 3.5, 4., 4.
};
static double _global_mapping_44_low[2]={
  0., 1.,
};
static int _floor_short_mapping_44_low[1]={
  1,
};
static int _floor_long_mapping_44_low[1]={
  8
};
static int _floor_short_mapping_44[10]={
  0,0,2,2,4,5,5,5,5,5
};
static int _floor_long_mapping_44[10]={
  7,7,7,7,7,7,7,7,7,7
};

ve_setup_data_template ve_setup_44_stereo={
  10,
  rate_mapping_44_stereo,
  quality_mapping_44,
  2,
  40000,
  50000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44,

  _psy_global_44,
  _global_mapping_44,
  _psy_stereo_modes_44,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_stereo
};

ve_setup_data_template ve_setup_44_stereo_low={
  1,
  rate_mapping_44_stereo_low,
  quality_mapping_44_stereo_low,
  2,
  40000,
  50000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44_low,

  _psy_global_44,
  _global_mapping_44_low,
  _psy_stereo_modes_44_low,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_stereo
};
# 27485 "oggenc.c"
static long _vq_quantlist__16u0__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u0__p1_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 8, 5, 8, 8, 8,10,10, 8,
 10,11, 5, 8, 8, 8,10,10, 8,10,10, 4, 9, 9, 9,12,
 11, 8,11,11, 8,12,11,10,12,14,10,13,13, 7,11,11,
 10,14,12,11,14,14, 4, 9, 9, 8,11,11, 9,11,12, 7,
 11,11,10,13,14,10,12,14, 8,11,12,10,14,14,10,13,
 12,
};

static float _vq_quantthresh__16u0__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16u0__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u0__p1_0 = {
 _vq_quantthresh__16u0__p1_0,
 _vq_quantmap__16u0__p1_0,
 3,
 3
};

static static_codebook _16u0__p1_0 = {
 4, 81,
 _vq_lengthlist__16u0__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16u0__p1_0,
 
# 27520 "oggenc.c" 3 4
((void *)0)
# 27520 "oggenc.c"
    ,
 &_vq_auxt__16u0__p1_0,
 
# 27522 "oggenc.c" 3 4
((void *)0)
# 27522 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u0__p2_0[] = {
  2, 4, 4, 5, 6, 6, 5, 6, 6, 5, 7, 7, 7, 8, 9, 7,
  8, 9, 5, 7, 7, 7, 9, 8, 7, 9, 7, 4, 7, 7, 7, 9,
  9, 7, 8, 8, 6, 9, 8, 7, 8,11, 9,11,10, 6, 8, 9,
  8,11, 8, 9,10,11, 4, 7, 7, 7, 8, 8, 7, 9, 9, 6,
  9, 8, 9,11,10, 8, 8,11, 6, 8, 9, 9,10,11, 8,11,
  8,
};

static float _vq_quantthresh__16u0__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16u0__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u0__p2_0 = {
 _vq_quantthresh__16u0__p2_0,
 _vq_quantmap__16u0__p2_0,
 3,
 3
};

static static_codebook _16u0__p2_0 = {
 4, 81,
 _vq_lengthlist__16u0__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16u0__p2_0,
 
# 27561 "oggenc.c" 3 4
((void *)0)
# 27561 "oggenc.c"
    ,
 &_vq_auxt__16u0__p2_0,
 
# 27563 "oggenc.c" 3 4
((void *)0)
# 27563 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u0__p3_0[] = {
  1, 5, 5, 7, 7, 6, 7, 7, 8, 8, 6, 7, 8, 8, 8, 8,
  9, 9,11,11, 8, 9, 9,11,11, 6, 9, 8,10,10, 8,10,
 10,11,11, 8,10,10,11,11,10,11,10,13,12, 9,11,10,
 13,13, 6, 8, 9,10,10, 8,10,10,11,11, 8,10,10,11,
 11, 9,10,11,13,12,10,10,11,12,12, 8,11,11,14,13,
 10,12,11,15,13, 9,12,11,15,14,12,14,13,16,14,12,
 13,13,17,14, 8,11,11,13,14, 9,11,12,14,15,10,11,
 12,13,15,11,13,13,14,16,12,13,14,14,16, 5, 9, 9,
 11,11, 9,11,11,12,12, 8,11,11,12,12,11,12,12,15,
 14,10,12,12,15,15, 8,11,11,13,12,10,12,12,13,13,
 10,12,12,14,13,12,12,13,14,15,11,13,13,17,16, 7,
 11,11,13,13,10,12,12,14,13,10,12,12,13,14,12,13,
 12,15,14,11,13,13,15,14, 9,12,12,16,15,11,13,13,
 17,16,10,13,13,16,16,13,14,15,15,16,13,15,14,19,
 17, 9,12,12,14,16,11,13,13,15,16,10,13,13,17,16,
 13,14,13,17,15,12,15,15,16,17, 5, 9, 9,11,11, 8,
 11,11,13,12, 9,11,11,12,12,10,12,12,14,15,11,12,
 12,14,14, 7,11,10,13,12,10,12,12,14,13,10,11,12,
 13,13,11,13,13,15,16,12,12,13,15,15, 7,11,11,13,
 13,10,13,13,14,14,10,12,12,13,13,11,13,13,16,15,
 12,13,13,15,14, 9,12,12,15,15,10,13,13,17,16,11,
 12,13,15,15,12,15,14,18,18,13,14,14,16,17, 9,12,
 12,15,16,10,13,13,15,16,11,13,13,15,16,13,15,15,
 17,17,13,15,14,16,15, 7,11,11,15,16,10,13,12,16,
 17,10,12,13,15,17,15,16,16,18,17,13,15,15,17,18,
  8,12,12,16,16,11,13,14,17,18,11,13,13,18,16,15,
 17,16,17,19,14,15,15,17,16, 8,12,12,16,15,11,14,
 13,18,17,11,13,14,18,17,15,16,16,18,17,13,16,16,
 18,18,11,15,14,18,17,13,14,15,18, 0,12,15,15, 0,
 17,17,16,17,17,18,14,16,18,18, 0,11,14,14,17, 0,
 12,15,14,17,19,12,15,14,18, 0,15,18,16, 0,17,14,
 18,16,18, 0, 7,11,11,16,15,10,12,12,18,16,10,13,
 13,16,15,13,15,14,17,17,14,16,16,19,18, 8,12,12,
 16,16,11,13,13,18,16,11,13,14,17,16,14,15,15,19,
 18,15,16,16, 0,19, 8,12,12,16,17,11,13,13,17,17,
 11,14,13,17,17,13,15,15,17,19,15,17,17,19, 0,11,
 14,15,19,17,12,15,16,18,18,12,14,15,19,17,14,16,
 17, 0,18,16,16,19,17, 0,11,14,14,18,19,12,15,14,
 17,17,13,16,14,17,16,14,17,16,18,18,15,18,15, 0,
 18,
};

static float _vq_quantthresh__16u0__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u0__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u0__p3_0 = {
 _vq_quantthresh__16u0__p3_0,
 _vq_quantmap__16u0__p3_0,
 5,
 5
};

static static_codebook _16u0__p3_0 = {
 4, 625,
 _vq_lengthlist__16u0__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u0__p3_0,
 
# 27638 "oggenc.c" 3 4
((void *)0)
# 27638 "oggenc.c"
    ,
 &_vq_auxt__16u0__p3_0,
 
# 27640 "oggenc.c" 3 4
((void *)0)
# 27640 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u0__p4_0[] = {
  3, 5, 5, 8, 8, 6, 6, 6, 9, 9, 6, 6, 6, 9, 9, 9,
 10, 9,11,11, 9, 9, 9,11,11, 6, 7, 7,10,10, 7, 7,
  8,10,10, 7, 7, 8,10,10,10,10,10,11,12, 9,10,10,
 11,12, 6, 7, 7,10,10, 7, 8, 7,10,10, 7, 8, 7,10,
 10,10,11,10,12,11,10,10,10,13,10, 9,10,10,12,12,
 10,11,10,14,12, 9,11,11,13,13,11,12,13,13,13,11,
 12,12,15,13, 9,10,10,12,13, 9,11,10,12,13,10,10,
 11,12,13,11,12,12,12,13,11,12,12,13,13, 5, 7, 7,
 10,10, 7, 8, 8,10,10, 7, 8, 8,10,10,10,11,10,12,
 13,10,10,11,12,12, 6, 8, 8,11,10, 7, 8, 9,10,12,
  8, 9, 9,11,11,11,10,11,11,12,10,11,11,13,12, 7,
  8, 8,10,11, 8, 9, 8,11,10, 8, 9, 9,11,11,10,12,
 10,13,11,10,11,11,13,13,10,11,10,14,13,10,10,11,
 13,13,10,12,11,14,13,12,11,13,12,13,13,12,13,14,
 14,10,11,11,13,13,10,11,10,12,13,10,12,12,12,14,
 12,12,12,14,12,12,13,12,17,15, 5, 7, 7,10,10, 7,
  8, 8,10,10, 7, 8, 8,11,10,10,10,11,12,12,10,11,
 11,12,13, 6, 8, 8,11,10, 8, 9, 9,11,11, 7, 8, 9,
 10,11,11,11,11,12,12,10,10,11,12,13, 6, 8, 8,10,
 11, 8, 9, 9,11,11, 7, 9, 7,11,10,10,12,12,13,13,
 11,11,10,13,11, 9,11,10,14,13,11,11,11,15,13,10,
 10,11,13,13,12,13,13,14,14,12,11,12,12,13,10,11,
 11,12,13,10,11,12,13,13,10,11,10,13,12,12,12,13,
 14, 0,12,13,11,13,11, 8,10,10,13,13,10,11,11,14,
 13,10,11,11,13,12,13,14,14,14,15,12,12,12,15,14,
  9,11,10,13,12,10,10,11,13,14,11,11,11,15,12,13,
 12,14,15,16,13,13,13,14,13, 9,11,11,12,12,10,12,
 11,13,13,10,11,11,13,14,13,13,13,15,15,13,13,14,
 17,15,11,12,12,14,14,10,11,12,13,15,12,13,13, 0,
 15,13,11,14,12,16,14,16,14, 0,15,11,12,12,14,16,
 11,13,12,16,15,12,13,13,14,15,12,14,12,15,13,15,
 14,14,16,16, 8,10,10,13,13,10,11,10,13,14,10,11,
 11,13,13,13,13,12,14,14,14,13,13,16,17, 9,10,10,
 12,14,10,12,11,14,13,10,11,12,13,14,12,12,12,15,
 15,13,13,13,14,14, 9,10,10,13,13,10,11,12,12,14,
 10,11,10,13,13,13,13,13,14,16,13,13,13,14,14,11,
 12,13,15,13,12,14,13,14,16,12,12,13,13,14,13,14,
 14,17,15,13,12,17,13,16,11,12,13,14,15,12,13,14,
 14,17,11,12,11,14,14,13,16,14,16, 0,14,15,11,15,
 11,
};

static float _vq_quantthresh__16u0__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u0__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u0__p4_0 = {
 _vq_quantthresh__16u0__p4_0,
 _vq_quantmap__16u0__p4_0,
 5,
 5
};

static static_codebook _16u0__p4_0 = {
 4, 625,
 _vq_lengthlist__16u0__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u0__p4_0,
 
# 27715 "oggenc.c" 3 4
((void *)0)
# 27715 "oggenc.c"
    ,
 &_vq_auxt__16u0__p4_0,
 
# 27717 "oggenc.c" 3 4
((void *)0)
# 27717 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16u0__p5_0[] = {
  1, 4, 4, 7, 7, 7, 7, 9, 9, 4, 6, 6, 8, 8, 8, 8,
  9, 9, 4, 6, 6, 8, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9,
  9, 9,11,10, 7, 8, 8, 9, 9, 9, 9,10,11, 7, 8, 8,
  9, 9,10,10,11,11, 7, 8, 8, 9, 9,10,10,11,11, 9,
  9, 9,10,10,11,11,12,12, 9, 9, 9,10,10,11,11,12,
 12,
};

static float _vq_quantthresh__16u0__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16u0__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16u0__p5_0 = {
 _vq_quantthresh__16u0__p5_0,
 _vq_quantmap__16u0__p5_0,
 9,
 9
};

static static_codebook _16u0__p5_0 = {
 2, 81,
 _vq_lengthlist__16u0__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16u0__p5_0,
 
# 27763 "oggenc.c" 3 4
((void *)0)
# 27763 "oggenc.c"
    ,
 &_vq_auxt__16u0__p5_0,
 
# 27765 "oggenc.c" 3 4
((void *)0)
# 27765 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16u0__p6_0[] = {
  1, 4, 4, 7, 7,10,10,12,12,13,13,18,17, 3, 6, 6,
  9, 9,11,11,13,13,14,14,18,17, 3, 6, 6, 9, 9,11,
 11,13,13,14,14,17,18, 7, 9, 9,11,11,13,13,14,14,
 15,15, 0, 0, 7, 9, 9,11,11,13,13,14,14,15,16,19,
 18,10,11,11,13,13,14,14,16,15,17,18, 0, 0,10,11,
 11,13,13,14,14,15,15,16,18, 0, 0,11,13,13,14,14,
 15,15,17,17, 0,19, 0, 0,11,13,13,14,14,14,15,16,
 18, 0,19, 0, 0,13,14,14,15,15,18,17,18,18, 0,19,
  0, 0,13,14,14,15,16,16,16,18,18,19, 0, 0, 0,16,
 17,17, 0,17,19,19, 0,19, 0, 0, 0, 0,16,19,16,17,
 18, 0,19, 0, 0, 0, 0, 0, 0,
};

static float _vq_quantthresh__16u0__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__16u0__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16u0__p6_0 = {
 _vq_quantthresh__16u0__p6_0,
 _vq_quantmap__16u0__p6_0,
 13,
 13
};

static static_codebook _16u0__p6_0 = {
 2, 169,
 _vq_lengthlist__16u0__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__16u0__p6_0,
 
# 27821 "oggenc.c" 3 4
((void *)0)
# 27821 "oggenc.c"
    ,
 &_vq_auxt__16u0__p6_0,
 
# 27823 "oggenc.c" 3 4
((void *)0)
# 27823 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u0__p6_1[] = {
  1, 4, 5, 6, 6, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6,
  6, 6, 7, 7, 6, 6, 6, 7, 7,
};

static float _vq_quantthresh__16u0__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u0__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u0__p6_1 = {
 _vq_quantthresh__16u0__p6_1,
 _vq_quantmap__16u0__p6_1,
 5,
 5
};

static static_codebook _16u0__p6_1 = {
 2, 25,
 _vq_lengthlist__16u0__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u0__p6_1,
 
# 27860 "oggenc.c" 3 4
((void *)0)
# 27860 "oggenc.c"
    ,
 &_vq_auxt__16u0__p6_1,
 
# 27862 "oggenc.c" 3 4
((void *)0)
# 27862 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u0__p7_0[] = {
  1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__16u0__p7_0[] = {
 -157.5, 157.5,
};

static long _vq_quantmap__16u0__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u0__p7_0 = {
 _vq_quantthresh__16u0__p7_0,
 _vq_quantmap__16u0__p7_0,
 3,
 3
};

static static_codebook _16u0__p7_0 = {
 4, 81,
 _vq_lengthlist__16u0__p7_0,
 1, -518803456, 1628680192, 2, 0,
 _vq_quantlist__16u0__p7_0,
 
# 27901 "oggenc.c" 3 4
((void *)0)
# 27901 "oggenc.c"
    ,
 &_vq_auxt__16u0__p7_0,
 
# 27903 "oggenc.c" 3 4
((void *)0)
# 27903 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p7_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16u0__p7_1[] = {
  1, 5, 5, 6, 5, 9,10,11,11,10,10,10,10,10,10, 5,
  8, 8, 8,10,10,10,10,10,10,10,10,10,10,10, 5, 8,
  9, 9, 9,10,10,10,10,10,10,10,10,10,10, 5,10, 8,
 10,10,10,10,10,10,10,10,10,10,10,10, 4, 8, 9,10,
 10,10,10,10,10,10,10,10,10,10,10, 9,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10, 9,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__16u0__p7_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__16u0__p7_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16u0__p7_1 = {
 _vq_quantthresh__16u0__p7_1,
 _vq_quantmap__16u0__p7_1,
 15,
 15
};

static static_codebook _16u0__p7_1 = {
 2, 225,
 _vq_lengthlist__16u0__p7_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__16u0__p7_1,
 
# 27965 "oggenc.c" 3 4
((void *)0)
# 27965 "oggenc.c"
    ,
 &_vq_auxt__16u0__p7_1,
 
# 27967 "oggenc.c" 3 4
((void *)0)
# 27967 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u0__p7_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__16u0__p7_2[] = {
  1, 6, 6, 7, 8, 7, 7,10, 9,10, 9,11,10, 9,11,10,
  9, 9, 9, 9,10, 6, 8, 7, 9, 9, 8, 8,10,10, 9,11,
 11,12,12,10, 9,11, 9,12,10, 9, 6, 9, 8, 9,12, 8,
  8,11, 9,11,11,12,11,12,12,10,11,11,10,10,11, 7,
 10, 9, 9, 9, 9, 9,10, 9,10, 9,10,10,12,10,10,10,
 11,12,10,10, 7, 9, 9, 9,10, 9, 9,10,10, 9, 9, 9,
 11,11,10,10,10,10, 9, 9,12, 7, 9,10, 9,11, 9,10,
  9,10,11,11,11,10,11,12, 9,12,11,10,10,10, 7, 9,
  9, 9, 9,10,12,10, 9,11,12,10,11,12,12,11, 9,10,
 11,10,11, 7, 9,10,10,11,10, 9,10,11,11,11,10,12,
 12,12,11,11,10,11,11,12, 8, 9,10,12,11,10,10,12,
 12,12,12,12,10,11,11, 9,11,10,12,11,11, 8, 9,10,
 10,11,12,11,11,10,10,10,12,12,12, 9,10,12,12,12,
 12,12, 8,10,11,10,10,12, 9,11,12,12,11,12,12,12,
 12,10,12,10,10,10,10, 8,12,11,11,11,10,10,11,12,
 12,12,12,11,12,12,12,11,11,11,12,10, 9,10,10,12,
 10,12,10,12,12,10,10,10,11,12,12,12,11,12,12,12,
 11,10,11,12,12,12,11,12,12,11,12,12,11,12,12,12,
 12,11,12,12,10,10,10,10,11,11,12,11,12,12,12,12,
 12,12,12,11,12,11,10,11,11,12,11,11, 9,10,10,10,
 12,10,10,11, 9,11,12,11,12,11,12,12,10,11,10,12,
  9, 9, 9,12,11,10,11,10,12,10,12,10,12,12,12,11,
 11,11,11,11,10, 9,10,10,11,10,11,11,12,11,10,11,
 12,12,12,11,11, 9,12,10,12, 9,10,12,10,10,11,10,
 11,11,12,11,10,11,10,11,11,11,11,12,11,11,10, 9,
 10,10,10, 9,11,11,10, 9,12,10,11,12,11,12,12,11,
 12,11,12,11,10,11,10,12,11,12,11,12,11,12,10,11,
 10,10,12,11,10,11,11,11,10,
};

static float _vq_quantthresh__16u0__p7_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__16u0__p7_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__16u0__p7_2 = {
 _vq_quantthresh__16u0__p7_2,
 _vq_quantmap__16u0__p7_2,
 21,
 21
};

static static_codebook _16u0__p7_2 = {
 2, 441,
 _vq_lengthlist__16u0__p7_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__16u0__p7_2,
 
# 28050 "oggenc.c" 3 4
((void *)0)
# 28050 "oggenc.c"
    ,
 &_vq_auxt__16u0__p7_2,
 
# 28052 "oggenc.c" 3 4
((void *)0)
# 28052 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16u0__single[] = {
  3, 5, 8, 7,14, 8, 9,19, 5, 2, 5, 5, 9, 6, 9,19,
  8, 4, 5, 7, 8, 9,13,19, 7, 4, 6, 5, 9, 6, 9,19,
 12, 8, 7, 9,10,11,13,19, 8, 5, 8, 6, 9, 6, 7,19,
  8, 8,10, 7, 7, 4, 5,19,12,17,19,15,18,13,11,18,
};

static static_codebook _huff_book__16u0__single = {
 2, 64,
 _huff_lengthlist__16u0__single,
 0, 0, 0, 0, 0,
 
# 28067 "oggenc.c" 3 4
((void *)0)
# 28067 "oggenc.c"
    ,
 
# 28068 "oggenc.c" 3 4
((void *)0)
# 28068 "oggenc.c"
    ,
 
# 28069 "oggenc.c" 3 4
((void *)0)
# 28069 "oggenc.c"
    ,
 
# 28070 "oggenc.c" 3 4
((void *)0)
# 28070 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16u1__long[] = {
  3, 6,10, 8,12, 8,14, 8,14,19, 5, 3, 5, 5, 7, 6,
 11, 7,16,19, 7, 5, 6, 7, 7, 9,11,12,19,19, 6, 4,
  7, 5, 7, 6,10, 7,18,18, 8, 6, 7, 7, 7, 7, 8, 9,
 18,18, 7, 5, 8, 5, 7, 5, 8, 6,18,18,12, 9,10, 9,
  9, 9, 8, 9,18,18, 8, 7,10, 6, 8, 5, 6, 4,11,18,
 11,15,16,12,11, 8, 8, 6, 9,18,14,18,18,18,16,16,
 16,13,16,18,
};

static static_codebook _huff_book__16u1__long = {
 2, 100,
 _huff_lengthlist__16u1__long,
 0, 0, 0, 0, 0,
 
# 28088 "oggenc.c" 3 4
((void *)0)
# 28088 "oggenc.c"
    ,
 
# 28089 "oggenc.c" 3 4
((void *)0)
# 28089 "oggenc.c"
    ,
 
# 28090 "oggenc.c" 3 4
((void *)0)
# 28090 "oggenc.c"
    ,
 
# 28091 "oggenc.c" 3 4
((void *)0)
# 28091 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u1__p1_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 8, 7, 7,10,10, 7,
  9,10, 5, 7, 8, 7,10, 9, 7,10,10, 5, 8, 8, 8,10,
 10, 8,10,10, 7,10,10,10,11,12,10,12,13, 7,10,10,
  9,13,11,10,12,13, 5, 8, 8, 8,10,10, 8,10,10, 7,
 10,10,10,12,12, 9,11,12, 7,10,11,10,12,12,10,13,
 11,
};

static float _vq_quantthresh__16u1__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16u1__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u1__p1_0 = {
 _vq_quantthresh__16u1__p1_0,
 _vq_quantmap__16u1__p1_0,
 3,
 3
};

static static_codebook _16u1__p1_0 = {
 4, 81,
 _vq_lengthlist__16u1__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16u1__p1_0,
 
# 28130 "oggenc.c" 3 4
((void *)0)
# 28130 "oggenc.c"
    ,
 &_vq_auxt__16u1__p1_0,
 
# 28132 "oggenc.c" 3 4
((void *)0)
# 28132 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u1__p2_0[] = {
  3, 4, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 7, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 7, 5, 6, 6, 6, 8,
  8, 6, 8, 8, 6, 8, 8, 7, 7,10, 8, 9, 9, 6, 8, 8,
  7, 9, 8, 8, 9,10, 5, 6, 6, 6, 8, 8, 7, 8, 8, 6,
  8, 8, 8,10, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 7,10,
  8,
};

static float _vq_quantthresh__16u1__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16u1__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u1__p2_0 = {
 _vq_quantthresh__16u1__p2_0,
 _vq_quantmap__16u1__p2_0,
 3,
 3
};

static static_codebook _16u1__p2_0 = {
 4, 81,
 _vq_lengthlist__16u1__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16u1__p2_0,
 
# 28171 "oggenc.c" 3 4
((void *)0)
# 28171 "oggenc.c"
    ,
 &_vq_auxt__16u1__p2_0,
 
# 28173 "oggenc.c" 3 4
((void *)0)
# 28173 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u1__p3_0[] = {
  1, 5, 5, 8, 8, 6, 7, 7, 9, 9, 5, 7, 7, 9, 9, 9,
 10, 9,11,11, 9, 9,10,11,11, 6, 8, 8,10,10, 8, 9,
 10,11,11, 8, 9,10,11,11,10,11,11,12,13,10,11,11,
 13,13, 6, 8, 8,10,10, 8,10, 9,11,11, 8,10, 9,11,
 11,10,11,11,13,13,10,11,11,13,12, 9,11,11,14,13,
 10,12,12,15,14,10,12,11,14,13,12,13,13,15,15,12,
 13,13,16,14, 9,11,11,13,14,10,11,12,14,14,10,12,
 12,14,15,12,13,13,14,15,12,13,14,15,16, 5, 8, 8,
 11,11, 8,10,10,12,12, 8,10,10,12,12,11,12,12,14,
 14,11,12,12,14,14, 8,10,10,12,12, 9,11,12,12,13,
 10,12,12,13,13,12,12,13,14,15,11,13,13,15,15, 7,
 10,10,12,12, 9,12,11,13,12,10,11,12,13,13,12,13,
 12,15,14,11,12,13,15,15,10,12,12,15,14,11,13,13,
 16,15,11,13,13,16,15,14,13,14,15,16,13,15,15,17,
 17,10,12,12,14,15,11,12,12,15,15,11,13,13,15,16,
 13,15,13,16,15,13,15,15,16,17, 5, 8, 8,11,11, 8,
 10,10,12,12, 8,10,10,12,12,11,12,12,14,14,11,12,
 12,14,14, 7,10,10,12,12,10,12,12,14,13, 9,11,12,
 12,13,12,13,13,15,15,12,12,13,13,15, 7,10,10,12,
 13,10,11,12,13,13,10,12,11,13,13,11,13,13,15,15,
 12,13,12,15,14, 9,12,12,15,14,11,13,13,15,15,11,
 12,13,15,15,13,14,14,17,19,13,13,14,16,16,10,12,
 12,14,15,11,13,13,15,16,11,13,12,16,15,13,15,15,
 17,18,14,15,13,16,15, 8,11,11,15,14,10,12,12,16,
 15,10,12,12,16,16,14,15,15,18,17,13,14,15,16,18,
  9,12,12,15,15,11,12,14,16,17,11,13,13,16,15,15,
 15,15,17,18,14,15,16,17,17, 9,12,12,15,15,11,14,
 13,16,16,11,13,13,16,16,15,16,15,17,18,14,16,15,
 17,16,12,14,14,17,16,12,14,15,18,17,13,15,15,17,
 17,15,15,18,16,20,15,16,17,18,18,11,14,14,16,17,
 13,15,14,18,17,13,15,15,17,17,15,17,15,18,17,15,
 17,16,19,18, 8,11,11,14,15,10,12,12,15,15,10,12,
 12,16,16,13,14,14,17,16,14,15,15,17,17, 9,12,12,
 15,16,11,13,13,16,16,11,12,13,16,16,14,16,15,20,
 17,14,16,16,17,17, 9,12,12,15,16,11,13,13,16,17,
 11,13,13,17,16,14,15,15,17,18,15,15,15,18,18,11,
 14,14,17,16,13,15,15,17,17,13,14,14,18,17,15,16,
 16,18,19,15,15,17,17,19,11,14,14,16,17,13,15,14,
 17,19,13,15,14,18,17,15,17,16,18,18,15,17,15,18,
 16,
};

static float _vq_quantthresh__16u1__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u1__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u1__p3_0 = {
 _vq_quantthresh__16u1__p3_0,
 _vq_quantmap__16u1__p3_0,
 5,
 5
};

static static_codebook _16u1__p3_0 = {
 4, 625,
 _vq_lengthlist__16u1__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u1__p3_0,
 
# 28248 "oggenc.c" 3 4
((void *)0)
# 28248 "oggenc.c"
    ,
 &_vq_auxt__16u1__p3_0,
 
# 28250 "oggenc.c" 3 4
((void *)0)
# 28250 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u1__p4_0[] = {
  4, 5, 5, 8, 8, 6, 6, 7, 9, 9, 6, 6, 6, 9, 9, 9,
 10, 9,11,11, 9, 9,10,11,11, 6, 7, 7,10, 9, 7, 7,
  8, 9,10, 7, 7, 8,10,10,10,10,10,10,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 7, 8, 7,10,10, 7, 8, 7,10,
 10, 9,10, 9,12,11,10,10, 9,12,10, 9,10,10,12,11,
 10,10,10,12,12, 9,10,10,12,12,12,11,12,13,13,11,
 11,12,12,13, 9,10,10,11,12, 9,10,10,12,12,10,10,
 10,12,12,11,12,11,14,13,11,12,12,14,13, 5, 7, 7,
 10,10, 7, 8, 8,10,10, 7, 8, 7,10,10,10,10,10,12,
 12,10,10,10,12,12, 6, 8, 7,10,10, 7, 7, 9,10,11,
  8, 9, 9,11,10,10,10,11,11,13,10,10,11,12,13, 6,
  8, 8,10,10, 7, 9, 8,11,10, 8, 9, 9,10,11,10,11,
 10,13,11,10,11,10,12,12,10,11,10,12,11,10,10,10,
 12,13,10,11,11,13,12,11,11,13,11,14,12,12,13,14,
 14, 9,10,10,12,13,10,11,10,13,12,10,11,11,12,13,
 11,12,11,14,12,12,13,13,15,14, 5, 7, 7,10,10, 7,
  7, 8,10,10, 7, 8, 8,10,10,10,10,10,11,12,10,10,
 10,12,12, 7, 8, 8,10,10, 8, 9, 8,11,10, 7, 8, 9,
 10,11,10,11,11,12,12,10,10,11,11,13, 7, 7, 8,10,
 10, 8, 8, 9,10,11, 7, 9, 7,11,10,10,11,11,13,12,
 11,11,10,13,11, 9,10,10,12,12,10,11,11,13,12,10,
 10,11,12,12,12,13,13,14,14,11,11,12,12,14,10,10,
 11,12,12,10,11,11,12,13,10,10,10,13,12,12,13,13,
 15,14,12,13,10,14,11, 8,10,10,12,12,10,11,10,13,
 13, 9,10,10,12,12,12,13,13,15,14,11,12,12,13,13,
  9,10,10,13,12,10,10,11,13,13,10,11,10,13,12,12,
 12,13,14,15,12,13,12,15,13, 9,10,10,12,13,10,11,
 10,13,12,10,10,11,12,13,12,14,12,15,13,12,12,13,
 14,15,11,12,11,14,13,11,11,12,14,15,12,13,12,15,
 14,13,11,15,11,16,13,14,14,16,15,11,12,12,14,14,
 11,12,11,14,13,12,12,13,14,15,13,14,12,16,12,14,
 14,14,15,15, 8,10,10,12,12, 9,10,10,12,12,10,10,
 11,13,13,11,12,12,13,13,12,13,13,14,15, 9,10,10,
 13,12,10,11,11,13,12,10,10,11,13,13,12,13,12,15,
 14,12,12,13,13,16, 9, 9,10,12,13,10,10,11,12,13,
 10,11,10,13,13,12,12,13,13,15,13,13,12,15,13,11,
 12,12,14,14,12,13,12,15,14,11,11,12,13,14,14,14,
 14,16,15,13,12,15,12,16,11,11,12,13,14,12,13,13,
 14,15,10,12,11,14,13,14,15,14,16,16,13,14,11,15,
 11,
};

static float _vq_quantthresh__16u1__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u1__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u1__p4_0 = {
 _vq_quantthresh__16u1__p4_0,
 _vq_quantmap__16u1__p4_0,
 5,
 5
};

static static_codebook _16u1__p4_0 = {
 4, 625,
 _vq_lengthlist__16u1__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u1__p4_0,
 
# 28325 "oggenc.c" 3 4
((void *)0)
# 28325 "oggenc.c"
    ,
 &_vq_auxt__16u1__p4_0,
 
# 28327 "oggenc.c" 3 4
((void *)0)
# 28327 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16u1__p5_0[] = {
  1, 4, 4, 7, 7, 7, 7, 9, 9, 4, 6, 6, 8, 8, 8, 8,
 10,10, 4, 5, 6, 8, 8, 8, 8,10,10, 7, 8, 8, 9, 9,
  9, 9,11,11, 7, 8, 8, 9, 9, 9, 9,11,11, 7, 8, 8,
 10, 9,11,11,12,11, 7, 8, 8, 9, 9,11,11,12,12, 9,
 10,10,11,11,12,12,13,12, 9,10,10,11,11,12,12,12,
 13,
};

static float _vq_quantthresh__16u1__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16u1__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16u1__p5_0 = {
 _vq_quantthresh__16u1__p5_0,
 _vq_quantmap__16u1__p5_0,
 9,
 9
};

static static_codebook _16u1__p5_0 = {
 2, 81,
 _vq_lengthlist__16u1__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16u1__p5_0,
 
# 28373 "oggenc.c" 3 4
((void *)0)
# 28373 "oggenc.c"
    ,
 &_vq_auxt__16u1__p5_0,
 
# 28375 "oggenc.c" 3 4
((void *)0)
# 28375 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p6_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16u1__p6_0[] = {
  3, 4, 4, 6, 6, 7, 7, 9, 9, 4, 4, 4, 6, 6, 8, 8,
  9, 9, 4, 4, 4, 6, 6, 7, 7, 9, 9, 6, 6, 6, 7, 7,
  8, 8,10, 9, 6, 6, 6, 7, 7, 8, 8, 9,10, 7, 8, 7,
  8, 8, 9, 9,10,10, 7, 8, 8, 8, 8, 9, 9,10,10, 9,
  9, 9,10,10,10,10,11,11, 9, 9, 9,10,10,10,10,11,
 11,
};

static float _vq_quantthresh__16u1__p6_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16u1__p6_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16u1__p6_0 = {
 _vq_quantthresh__16u1__p6_0,
 _vq_quantmap__16u1__p6_0,
 9,
 9
};

static static_codebook _16u1__p6_0 = {
 2, 81,
 _vq_lengthlist__16u1__p6_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16u1__p6_0,
 
# 28421 "oggenc.c" 3 4
((void *)0)
# 28421 "oggenc.c"
    ,
 &_vq_auxt__16u1__p6_0,
 
# 28423 "oggenc.c" 3 4
((void *)0)
# 28423 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u1__p7_0[] = {
  1, 4, 4, 4, 8, 8, 4, 8, 8, 5,11, 9, 8,12,11, 8,
 12,11, 5,10,11, 8,11,12, 8,11,12, 4,11,11,11,14,
 13,10,13,13, 8,14,13,12,14,16,12,16,15, 8,14,14,
 13,16,14,12,15,16, 4,11,11,10,14,13,11,14,14, 8,
 15,14,12,15,15,12,14,16, 8,14,14,11,16,15,12,15,
 13,
};

static float _vq_quantthresh__16u1__p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__16u1__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u1__p7_0 = {
 _vq_quantthresh__16u1__p7_0,
 _vq_quantmap__16u1__p7_0,
 3,
 3
};

static static_codebook _16u1__p7_0 = {
 4, 81,
 _vq_lengthlist__16u1__p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__16u1__p7_0,
 
# 28462 "oggenc.c" 3 4
((void *)0)
# 28462 "oggenc.c"
    ,
 &_vq_auxt__16u1__p7_0,
 
# 28464 "oggenc.c" 3 4
((void *)0)
# 28464 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16u1__p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 4, 6, 5, 7, 7,
  8, 8, 8, 8, 8, 8, 4, 5, 6, 7, 7, 8, 8, 8, 8, 8,
  8, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 6, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 7, 8, 8, 8, 8, 9, 9, 9,10,
  9,10, 7, 8, 8, 8, 8, 9, 9, 9, 9,10, 9, 8, 8, 8,
  9, 9,10,10,10,10,10,10, 8, 8, 8, 9, 9, 9, 9,10,
 10,10,10, 8, 8, 8, 9, 9, 9,10,10,10,10,10, 8, 8,
  8, 9, 9,10,10,10,10,10,10,
};

static float _vq_quantthresh__16u1__p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16u1__p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16u1__p7_1 = {
 _vq_quantthresh__16u1__p7_1,
 _vq_quantmap__16u1__p7_1,
 11,
 11
};

static static_codebook _16u1__p7_1 = {
 2, 121,
 _vq_lengthlist__16u1__p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16u1__p7_1,
 
# 28515 "oggenc.c" 3 4
((void *)0)
# 28515 "oggenc.c"
    ,
 &_vq_auxt__16u1__p7_1,
 
# 28517 "oggenc.c" 3 4
((void *)0)
# 28517 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p8_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16u1__p8_0[] = {
  1, 4, 4, 5, 5, 8, 8,10,10,12,12, 4, 7, 7, 8, 8,
  9, 9,12,11,14,13, 4, 7, 7, 7, 8, 9,10,11,11,13,
 12, 5, 8, 8, 9, 9,11,11,12,13,15,14, 5, 7, 8, 9,
  9,11,11,13,13,17,15, 8, 9,10,11,11,12,13,17,14,
 17,16, 8,10, 9,11,11,12,12,13,15,15,17,10,11,11,
 12,13,14,15,15,16,16,17, 9,11,11,12,12,14,15,17,
 15,15,16,11,14,12,14,15,16,15,16,16,16,15,11,13,
 13,14,14,15,15,16,16,15,16,
};

static float _vq_quantthresh__16u1__p8_0[] = {
 -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5, 27.5,
 38.5, 49.5,
};

static long _vq_quantmap__16u1__p8_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16u1__p8_0 = {
 _vq_quantthresh__16u1__p8_0,
 _vq_quantmap__16u1__p8_0,
 11,
 11
};

static static_codebook _16u1__p8_0 = {
 2, 121,
 _vq_lengthlist__16u1__p8_0,
 1, -524582912, 1618345984, 4, 0,
 _vq_quantlist__16u1__p8_0,
 
# 28568 "oggenc.c" 3 4
((void *)0)
# 28568 "oggenc.c"
    ,
 &_vq_auxt__16u1__p8_0,
 
# 28570 "oggenc.c" 3 4
((void *)0)
# 28570 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p8_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16u1__p8_1[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 4, 6, 6, 7, 7,
  8, 7, 8, 8, 8, 8, 4, 6, 6, 7, 7, 7, 7, 8, 8, 8,
  8, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 6, 7, 7, 7,
  7, 8, 8, 8, 8, 9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8,
  8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 8, 8,
  8, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__16u1__p8_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16u1__p8_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16u1__p8_1 = {
 _vq_quantthresh__16u1__p8_1,
 _vq_quantmap__16u1__p8_1,
 11,
 11
};

static static_codebook _16u1__p8_1 = {
 2, 121,
 _vq_lengthlist__16u1__p8_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16u1__p8_1,
 
# 28621 "oggenc.c" 3 4
((void *)0)
# 28621 "oggenc.c"
    ,
 &_vq_auxt__16u1__p8_1,
 
# 28623 "oggenc.c" 3 4
((void *)0)
# 28623 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p9_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16u1__p9_0[] = {
  1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8,
};

static float _vq_quantthresh__16u1__p9_0[] = {
 -1657.5, -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5,
 382.5, 637.5, 892.5, 1147.5, 1402.5, 1657.5,
};

static long _vq_quantmap__16u1__p9_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16u1__p9_0 = {
 _vq_quantthresh__16u1__p9_0,
 _vq_quantmap__16u1__p9_0,
 15,
 15
};

static static_codebook _16u1__p9_0 = {
 2, 225,
 _vq_lengthlist__16u1__p9_0,
 1, -514071552, 1627381760, 4, 0,
 _vq_quantlist__16u1__p9_0,
 
# 28685 "oggenc.c" 3 4
((void *)0)
# 28685 "oggenc.c"
    ,
 &_vq_auxt__16u1__p9_0,
 
# 28687 "oggenc.c" 3 4
((void *)0)
# 28687 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16u1__p9_1[] = {
  1, 6, 5, 9, 9,10,10, 6, 7, 9, 9,10,10,10,10, 5,
 10, 8,10, 8,10,10, 8, 8,10, 9,10,10,10,10, 5, 8,
  9,10,10,10,10, 8,10,10,10,10,10,10,10, 9,10,10,
 10,10,10,10, 9, 9,10,10,10,10,10,10, 9, 9, 8, 9,
 10,10,10, 9,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10, 8,10,10,10,10,
 10,10,10,10,10,10,10,10,10, 6, 8, 8,10,10,10, 8,
 10,10,10,10,10,10,10,10, 5, 8, 8,10,10,10, 9, 9,
 10,10,10,10,10,10,10,10, 9,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__16u1__p9_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__16u1__p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16u1__p9_1 = {
 _vq_quantthresh__16u1__p9_1,
 _vq_quantmap__16u1__p9_1,
 15,
 15
};

static static_codebook _16u1__p9_1 = {
 2, 225,
 _vq_lengthlist__16u1__p9_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__16u1__p9_1,
 
# 28749 "oggenc.c" 3 4
((void *)0)
# 28749 "oggenc.c"
    ,
 &_vq_auxt__16u1__p9_1,
 
# 28751 "oggenc.c" 3 4
((void *)0)
# 28751 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u1__p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16u1__p9_2[] = {
  1, 6, 6, 7, 8, 8,11,10, 9, 9,11, 9,10, 9,11,11,
  9, 6, 7, 6,11, 8,11, 9,10,10,11, 9,11,10,10,10,
 11, 9, 5, 7, 7, 8, 8,10,11, 8, 8,11, 9, 9,10,11,
  9,10,11, 8, 9, 6, 8, 8, 9, 9,10,10,11,11,11, 9,
 11,10, 9,11, 8, 8, 8, 9, 8, 9,10,11, 9, 9,11,11,
 10, 9, 9,11,10, 8,11, 8, 9, 8,11, 9,10, 9,10,11,
 11,10,10, 9,10,10, 8, 8, 9,10,10,10, 9,11, 9,10,
 11,11,11,11,10, 9,11, 9, 9,11,11,10, 8,11,11,11,
  9,10,10,11,10,11,11, 9,11,10, 9,11,10,10,10,10,
  9,11,10,11,10, 9, 9,10,11, 9, 8,10,11,11,10,10,
 11, 9,11,10,11,11,10,11, 9, 9, 8,10, 8, 9,11, 9,
  8,10,10, 9,11,10,11,10,11, 9,11, 8,10,11,11,11,
 11,10,10,11,11,11,11,10,11,11,10, 9, 8,10,10, 9,
 11,10,11,11,11, 9, 9, 9,11,11,11,10,10, 9, 9,10,
  9,11,11,11,11, 8,10,11,10,11,11,10,11,11, 9, 9,
  9,10, 9,11, 9,11,11,11,11,11,10,11,11,10,11,10,
 11,11, 9,11,10,11,10, 9,10, 9,10,10,11,11,11,11,
  9,10, 9,10,11,11,10,11,11,11,11,11,11,10,11,11,
 10,
};

static float _vq_quantthresh__16u1__p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__16u1__p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16u1__p9_2 = {
 _vq_quantthresh__16u1__p9_2,
 _vq_quantmap__16u1__p9_2,
 17,
 17
};

static static_codebook _16u1__p9_2 = {
 2, 289,
 _vq_lengthlist__16u1__p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__16u1__p9_2,
 
# 28820 "oggenc.c" 3 4
((void *)0)
# 28820 "oggenc.c"
    ,
 &_vq_auxt__16u1__p9_2,
 
# 28822 "oggenc.c" 3 4
((void *)0)
# 28822 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16u1__short[] = {
  5, 7,10, 9,11,10,15,11,13,16, 6, 4, 6, 6, 7, 7,
 10, 9,12,16,10, 6, 5, 6, 6, 7,10,11,16,16, 9, 6,
  7, 6, 7, 7,10, 8,14,16,11, 6, 5, 4, 5, 6, 8, 9,
 15,16, 9, 6, 6, 5, 6, 6, 9, 8,14,16,12, 7, 6, 6,
  5, 6, 6, 7,13,16, 8, 6, 7, 6, 5, 5, 4, 4,11,16,
  9, 8, 9, 9, 7, 7, 6, 5,13,16,14,14,16,15,16,15,
 16,16,16,16,
};

static static_codebook _huff_book__16u1__short = {
 2, 100,
 _huff_lengthlist__16u1__short,
 0, 0, 0, 0, 0,
 
# 28840 "oggenc.c" 3 4
((void *)0)
# 28840 "oggenc.c"
    ,
 
# 28841 "oggenc.c" 3 4
((void *)0)
# 28841 "oggenc.c"
    ,
 
# 28842 "oggenc.c" 3 4
((void *)0)
# 28842 "oggenc.c"
    ,
 
# 28843 "oggenc.c" 3 4
((void *)0)
# 28843 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16u2__long[] = {
  5, 7,10,10,10,11,11,13,18,19, 6, 5, 5, 6, 7, 8,
  9,12,19,19, 8, 5, 4, 4, 6, 7, 9,13,19,19, 8, 5,
  4, 4, 5, 6, 8,12,17,19, 7, 5, 5, 4, 4, 5, 7,12,
 18,18, 8, 7, 7, 6, 5, 5, 6,10,18,18, 9, 9, 9, 8,
  6, 5, 6, 9,18,18,11,13,13,13, 8, 7, 7, 9,16,18,
 13,17,18,16,11, 9, 9, 9,17,18,15,18,18,18,15,13,
 13,14,18,18,
};

static static_codebook _huff_book__16u2__long = {
 2, 100,
 _huff_lengthlist__16u2__long,
 0, 0, 0, 0, 0,
 
# 28861 "oggenc.c" 3 4
((void *)0)
# 28861 "oggenc.c"
    ,
 
# 28862 "oggenc.c" 3 4
((void *)0)
# 28862 "oggenc.c"
    ,
 
# 28863 "oggenc.c" 3 4
((void *)0)
# 28863 "oggenc.c"
    ,
 
# 28864 "oggenc.c" 3 4
((void *)0)
# 28864 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__16u2__short[] = {
  8,11,12,12,14,15,16,16,16,16, 9, 7, 7, 8, 9,11,
 13,14,16,16,13, 7, 6, 6, 7, 9,12,13,15,16,15, 7,
  6, 5, 4, 6,10,11,14,16,12, 8, 7, 4, 2, 4, 7,10,
 14,16,11, 9, 7, 5, 3, 4, 6, 9,14,16,11,10, 9, 7,
  5, 5, 6, 9,16,16,10,10, 9, 8, 6, 6, 7,10,16,16,
 11,11,11,10,10,10,11,14,16,16,16,14,14,13,14,16,
 16,16,16,16,
};

static static_codebook _huff_book__16u2__short = {
 2, 100,
 _huff_lengthlist__16u2__short,
 0, 0, 0, 0, 0,
 
# 28882 "oggenc.c" 3 4
((void *)0)
# 28882 "oggenc.c"
    ,
 
# 28883 "oggenc.c" 3 4
((void *)0)
# 28883 "oggenc.c"
    ,
 
# 28884 "oggenc.c" 3 4
((void *)0)
# 28884 "oggenc.c"
    ,
 
# 28885 "oggenc.c" 3 4
((void *)0)
# 28885 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u2_p1_0[] = {
  1, 5, 5, 5, 7, 7, 5, 7, 7, 5, 7, 7, 7, 9, 9, 7,
  9, 9, 5, 7, 7, 7, 9, 9, 7, 9, 9, 5, 7, 7, 8, 9,
  9, 7, 9, 9, 7, 9, 9, 9,10,10, 9,10,10, 7, 9, 9,
  9,10,10, 9,10,11, 5, 7, 8, 8, 9, 9, 8, 9, 9, 7,
  9, 9, 9,10,10, 9, 9,10, 7, 9, 9, 9,10,10, 9,11,
 10,
};

static float _vq_quantthresh__16u2_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__16u2_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u2_p1_0 = {
 _vq_quantthresh__16u2_p1_0,
 _vq_quantmap__16u2_p1_0,
 3,
 3
};

static static_codebook _16u2_p1_0 = {
 4, 81,
 _vq_lengthlist__16u2_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__16u2_p1_0,
 
# 28924 "oggenc.c" 3 4
((void *)0)
# 28924 "oggenc.c"
    ,
 &_vq_auxt__16u2_p1_0,
 
# 28926 "oggenc.c" 3 4
((void *)0)
# 28926 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u2_p2_0[] = {
  3, 5, 5, 8, 8, 5, 7, 7, 9, 9, 5, 7, 7, 9, 9, 9,
 10, 9,11,11, 9, 9, 9,11,11, 5, 7, 7, 9, 9, 7, 8,
  8,10,10, 7, 8, 8,10,10,10,10,10,12,12, 9,10,10,
 11,12, 5, 7, 7, 9, 9, 7, 8, 8,10,10, 7, 8, 8,10,
 10, 9,10,10,12,11,10,10,10,12,12, 9,10,10,12,12,
 10,11,10,13,12, 9,10,10,12,12,12,12,12,14,14,11,
 12,12,13,14, 9,10,10,12,12, 9,10,10,12,12,10,10,
 10,12,12,11,12,12,14,13,12,13,12,14,14, 5, 7, 7,
  9, 9, 7, 8, 8,10,10, 7, 8, 8,10,10,10,11,10,12,
 12,10,10,11,12,12, 7, 8, 8,10,10, 8, 9, 9,11,11,
  8, 9, 9,11,11,11,11,11,12,13,10,11,11,12,13, 7,
  8, 8,10,10, 8, 9, 8,11,10, 8, 9, 9,11,11,10,11,
 10,13,12,10,11,11,13,13, 9,11,10,13,13,10,11,11,
 13,13,10,11,11,13,13,12,12,13,13,15,12,12,13,14,
 15, 9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,
 11,13,11,14,13,12,13,13,15,15, 5, 7, 7, 9, 9, 7,
  8, 8,10,10, 7, 8, 8,10,10,10,10,10,12,12,10,10,
 11,12,12, 7, 8, 8,10,10, 8, 9, 9,11,11, 8, 8, 9,
 10,11,10,11,11,13,13,10,10,11,12,13, 7, 8, 8,10,
 11, 8, 9, 9,11,11, 8, 9, 9,11,11,10,11,11,13,12,
 11,11,11,13,12, 9,10,10,12,12,10,11,11,13,13,10,
 10,11,12,13,12,13,13,15,14,11,11,13,12,14,10,10,
 11,13,13,10,11,11,13,13,10,11,11,13,13,12,13,13,
 14,14,12,13,12,14,13, 8,10, 9,12,12, 9,11,10,13,
 13, 9,10,10,12,13,12,13,13,14,14,12,12,13,14,14,
  9,11,10,13,13,10,11,11,13,13,10,11,11,13,13,12,
 13,13,15,15,13,13,13,14,15, 9,10,10,12,13,10,11,
 10,13,12,10,11,11,13,13,12,13,12,15,14,13,13,13,
 14,15,11,12,12,15,14,12,12,13,15,15,12,13,13,15,
 14,14,13,15,14,16,13,14,15,16,16,11,12,12,14,14,
 11,12,12,15,14,12,13,13,15,15,13,14,13,16,14,14,
 14,14,16,16, 8, 9, 9,12,12, 9,10,10,13,12, 9,10,
 10,13,13,12,12,12,14,14,12,12,13,15,15, 9,10,10,
 13,12,10,11,11,13,13,10,10,11,13,14,12,13,13,15,
 15,12,12,13,14,15, 9,10,10,13,13,10,11,11,13,13,
 10,11,11,13,13,12,13,13,14,14,13,14,13,15,14,11,
 12,12,14,14,12,13,13,15,14,11,12,12,14,15,14,14,
 14,16,15,13,12,14,14,16,11,12,13,14,15,12,13,13,
 14,16,12,13,12,15,14,13,15,14,16,16,14,15,13,16,
 13,
};

static float _vq_quantthresh__16u2_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u2_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u2_p2_0 = {
 _vq_quantthresh__16u2_p2_0,
 _vq_quantmap__16u2_p2_0,
 5,
 5
};

static static_codebook _16u2_p2_0 = {
 4, 625,
 _vq_lengthlist__16u2_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u2_p2_0,
 
# 29001 "oggenc.c" 3 4
((void *)0)
# 29001 "oggenc.c"
    ,
 &_vq_auxt__16u2_p2_0,
 
# 29003 "oggenc.c" 3 4
((void *)0)
# 29003 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__16u2_p3_0[] = {
  2, 4, 4, 6, 6, 7, 7, 9, 9, 4, 5, 5, 6, 6, 8, 7,
  9, 9, 4, 5, 5, 6, 6, 7, 8, 9, 9, 6, 6, 6, 7, 7,
  8, 8,10,10, 6, 6, 6, 7, 7, 8, 8, 9,10, 7, 8, 7,
  8, 8, 9, 9,10,10, 7, 8, 8, 8, 8, 9, 9,10,10, 9,
  9, 9,10, 9,10,10,11,11, 9, 9, 9,10,10,10,10,11,
 11,
};

static float _vq_quantthresh__16u2_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__16u2_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__16u2_p3_0 = {
 _vq_quantthresh__16u2_p3_0,
 _vq_quantmap__16u2_p3_0,
 9,
 9
};

static static_codebook _16u2_p3_0 = {
 2, 81,
 _vq_lengthlist__16u2_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__16u2_p3_0,
 
# 29049 "oggenc.c" 3 4
((void *)0)
# 29049 "oggenc.c"
    ,
 &_vq_auxt__16u2_p3_0,
 
# 29051 "oggenc.c" 3 4
((void *)0)
# 29051 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__16u2_p4_0[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10,11,11,11,
 11, 5, 5, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,11,
 12,11, 5, 5, 5, 7, 7, 8, 8, 9, 9, 9, 9,10,10,11,
 11,12,12, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9,10,
 10,11,11,12,12, 7, 8, 8, 8, 8, 9, 9, 9, 9,10,10,
 11,11,12,12,12,12, 7, 8, 8, 8, 8, 9, 9, 9, 9,10,
 10,11,11,11,12,12,12, 9, 9, 9, 9, 9, 9,10,10,10,
 10,10,11,11,12,12,13,13, 8, 9, 9, 9, 9,10, 9,10,
 10,10,10,11,11,12,12,13,13, 9, 9, 9, 9, 9,10,10,
 10,10,11,11,11,12,12,12,13,13, 9, 9, 9, 9, 9,10,
 10,10,10,11,11,12,11,12,12,13,13,10,10,10,10,10,
 11,11,11,11,11,12,12,12,12,13,13,14,10,10,10,10,
 10,11,11,11,11,12,11,12,12,13,12,13,13,11,11,11,
 11,11,12,12,12,12,12,12,13,13,13,13,14,14,11,11,
 11,11,11,12,12,12,12,12,12,13,12,13,13,14,14,11,
 12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,
 11,12,12,12,12,12,12,13,13,13,13,14,13,14,14,14,
 14,
};

static float _vq_quantthresh__16u2_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__16u2_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__16u2_p4_0 = {
 _vq_quantthresh__16u2_p4_0,
 _vq_quantmap__16u2_p4_0,
 17,
 17
};

static static_codebook _16u2_p4_0 = {
 2, 289,
 _vq_lengthlist__16u2_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__16u2_p4_0,
 
# 29120 "oggenc.c" 3 4
((void *)0)
# 29120 "oggenc.c"
    ,
 &_vq_auxt__16u2_p4_0,
 
# 29122 "oggenc.c" 3 4
((void *)0)
# 29122 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__16u2_p5_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 9, 8, 7,10, 9, 7,
 10, 9, 5, 8, 9, 7, 9,10, 7, 9,10, 4, 9, 9, 9,11,
 11, 8,11,11, 7,11,11,10,10,13,10,14,13, 7,11,11,
 10,13,11,10,13,14, 5, 9, 9, 8,11,11, 9,11,11, 7,
 11,11,10,14,13,10,12,14, 7,11,11,10,13,13,10,13,
 10,
};

static float _vq_quantthresh__16u2_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__16u2_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__16u2_p5_0 = {
 _vq_quantthresh__16u2_p5_0,
 _vq_quantmap__16u2_p5_0,
 3,
 3
};

static static_codebook _16u2_p5_0 = {
 4, 81,
 _vq_lengthlist__16u2_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__16u2_p5_0,
 
# 29161 "oggenc.c" 3 4
((void *)0)
# 29161 "oggenc.c"
    ,
 &_vq_auxt__16u2_p5_0,
 
# 29163 "oggenc.c" 3 4
((void *)0)
# 29163 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16u2_p5_1[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 5, 5, 5, 7, 7,
  7, 7, 8, 8, 8, 8, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8,
  8, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 6, 7, 7, 7,
  7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8,
  8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__16u2_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16u2_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16u2_p5_1 = {
 _vq_quantthresh__16u2_p5_1,
 _vq_quantmap__16u2_p5_1,
 11,
 11
};

static static_codebook _16u2_p5_1 = {
 2, 121,
 _vq_lengthlist__16u2_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16u2_p5_1,
 
# 29214 "oggenc.c" 3 4
((void *)0)
# 29214 "oggenc.c"
    ,
 &_vq_auxt__16u2_p5_1,
 
# 29216 "oggenc.c" 3 4
((void *)0)
# 29216 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16u2_p6_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9, 9,10,10, 4, 6, 6,
  8, 8, 9, 9, 9, 9,10,10,12,11, 4, 6, 6, 8, 8, 9,
  9, 9, 9,10,10,11,12, 7, 8, 8, 9, 9,10,10,10,10,
 12,12,13,12, 7, 8, 8, 9, 9,10,10,10,10,11,12,12,
 12, 8, 9, 9,10,10,11,11,11,11,12,12,13,13, 8, 9,
  9,10,10,11,11,11,11,12,13,13,13, 8, 9, 9,10,10,
 11,11,12,12,13,13,14,14, 8, 9, 9,10,10,11,11,12,
 12,13,13,14,14, 9,10,10,11,12,13,12,13,14,14,14,
 14,14, 9,10,10,11,12,12,13,13,13,14,14,14,14,10,
 11,11,12,12,13,13,14,14,15,15,15,15,10,11,11,12,
 12,13,13,14,14,14,14,15,15,
};

static float _vq_quantthresh__16u2_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__16u2_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16u2_p6_0 = {
 _vq_quantthresh__16u2_p6_0,
 _vq_quantmap__16u2_p6_0,
 13,
 13
};

static static_codebook _16u2_p6_0 = {
 2, 169,
 _vq_lengthlist__16u2_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__16u2_p6_0,
 
# 29272 "oggenc.c" 3 4
((void *)0)
# 29272 "oggenc.c"
    ,
 &_vq_auxt__16u2_p6_0,
 
# 29274 "oggenc.c" 3 4
((void *)0)
# 29274 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__16u2_p6_1[] = {
  2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 6, 6, 5, 5, 5, 6, 6,
};

static float _vq_quantthresh__16u2_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__16u2_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__16u2_p6_1 = {
 _vq_quantthresh__16u2_p6_1,
 _vq_quantmap__16u2_p6_1,
 5,
 5
};

static static_codebook _16u2_p6_1 = {
 2, 25,
 _vq_lengthlist__16u2_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__16u2_p6_1,
 
# 29311 "oggenc.c" 3 4
((void *)0)
# 29311 "oggenc.c"
    ,
 &_vq_auxt__16u2_p6_1,
 
# 29313 "oggenc.c" 3 4
((void *)0)
# 29313 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__16u2_p7_0[] = {
  1, 4, 4, 7, 7, 7, 7, 8, 8, 9, 9,10,10, 4, 6, 6,
  9, 9, 9, 9, 9, 9,10,10,11,11, 4, 6, 6, 8, 9, 9,
  9, 9, 9,10,11,12,11, 7, 8, 9,10,10,10,10,11,10,
 11,12,12,13, 7, 9, 9,10,10,10,10,10,10,11,12,13,
 13, 7, 9, 8,10,10,11,11,11,12,12,13,13,14, 7, 9,
  9,10,10,11,11,11,12,13,13,13,13, 8, 9, 9,10,11,
 11,12,12,12,13,13,13,13, 8, 9, 9,10,11,11,11,12,
 12,13,13,14,14, 9,10,10,12,11,12,13,13,13,14,13,
 13,13, 9,10,10,11,11,12,12,13,14,13,13,14,13,10,
 11,11,12,13,14,14,14,15,14,14,14,14,10,11,11,12,
 12,13,13,13,14,14,14,15,14,
};

static float _vq_quantthresh__16u2_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__16u2_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16u2_p7_0 = {
 _vq_quantthresh__16u2_p7_0,
 _vq_quantmap__16u2_p7_0,
 13,
 13
};

static static_codebook _16u2_p7_0 = {
 2, 169,
 _vq_lengthlist__16u2_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__16u2_p7_0,
 
# 29369 "oggenc.c" 3 4
((void *)0)
# 29369 "oggenc.c"
    ,
 &_vq_auxt__16u2_p7_0,
 
# 29371 "oggenc.c" 3 4
((void *)0)
# 29371 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__16u2_p7_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 5, 6, 6, 7, 7,
  7, 7, 7, 7, 8, 8, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8,
  8, 6, 6, 7, 7, 7, 8, 7, 8, 8, 8, 8, 6, 7, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8,
  8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__16u2_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__16u2_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__16u2_p7_1 = {
 _vq_quantthresh__16u2_p7_1,
 _vq_quantmap__16u2_p7_1,
 11,
 11
};

static static_codebook _16u2_p7_1 = {
 2, 121,
 _vq_lengthlist__16u2_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__16u2_p7_1,
 
# 29422 "oggenc.c" 3 4
((void *)0)
# 29422 "oggenc.c"
    ,
 &_vq_auxt__16u2_p7_1,
 
# 29424 "oggenc.c" 3 4
((void *)0)
# 29424 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__16u2_p8_0[] = {
  1, 5, 5, 7, 7, 8, 8, 7, 7, 8, 8,10, 9,11,11, 4,
  6, 6, 8, 8,10, 9, 9, 8, 9, 9,10,10,12,14, 4, 6,
  7, 8, 9, 9,10, 9, 8, 9, 9,10,12,12,11, 7, 8, 8,
 10,10,10,10, 9, 9,10,10,11,13,13,12, 7, 8, 8, 9,
 11,11,10, 9, 9,11,10,12,11,11,14, 8, 9, 9,11,10,
 11,11,10,10,11,11,13,12,14,12, 8, 9, 9,11,12,11,
 11,10,10,12,11,12,12,12,14, 7, 8, 8, 9, 9,10,10,
 10,11,12,11,13,13,14,12, 7, 8, 9, 9, 9,10,10,11,
 11,11,12,12,14,14,14, 8,10, 9,10,11,11,11,11,14,
 12,12,13,14,14,13, 9, 9, 9,10,11,11,11,12,12,12,
 14,12,14,13,14,10,10,10,12,11,12,11,14,13,14,13,
 14,14,13,14, 9,10,10,11,12,11,13,12,13,13,14,14,
 14,13,14,10,13,13,12,12,11,12,14,13,14,13,14,12,
 14,13,10,11,11,12,11,12,12,14,14,14,13,14,14,14,
 14,
};

static float _vq_quantthresh__16u2_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__16u2_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__16u2_p8_0 = {
 _vq_quantthresh__16u2_p8_0,
 _vq_quantmap__16u2_p8_0,
 15,
 15
};

static static_codebook _16u2_p8_0 = {
 2, 225,
 _vq_lengthlist__16u2_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__16u2_p8_0,
 
# 29486 "oggenc.c" 3 4
((void *)0)
# 29486 "oggenc.c"
    ,
 &_vq_auxt__16u2_p8_0,
 
# 29488 "oggenc.c" 3 4
((void *)0)
# 29488 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__16u2_p8_1[] = {
  2, 5, 5, 7, 7, 8, 8, 8, 8, 9, 9,10, 9,10, 9, 9,
  9,10,10,10,10, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9,
 10, 9,10,10,10,10,10,10,11,10, 5, 6, 6, 7, 7, 8,
  8, 8, 9, 9,10,10,10,10,10,10,10,10,10,10,10, 7,
  7, 7, 8, 8, 9, 8, 9, 9,10, 9,10,10,10,10,10,10,
 11,10,11,10, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 9,10,
 10,10,10,10,10,10,10,10,10, 8, 8, 8, 9, 9, 9, 9,
 10, 9,10,10,10,10,10,10,10,11,10,10,11,10, 8, 8,
  8, 8, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,11,
 11,10,10, 8, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,
 11,10,11,10,11,10,11,10, 8, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,10,10,10,10,11,11,10,10,10, 9,10, 9,
  9,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,
 11,11, 9, 9, 9,10, 9,10,10,10,10,10,10,11,10,11,
 10,11,11,11,11,10,10, 9,10, 9,10,10,10,10,11,10,
 10,10,10,10,11,10,11,10,11,10,10,11, 9,10,10,10,
 10,10,10,10,10,10,11,10,10,11,11,10,11,11,11,11,
 11, 9, 9,10,10,10,10,10,11,10,10,11,10,10,11,10,
 10,11,11,11,11,11, 9,10,10,10,10,10,10,10,11,10,
 11,10,11,10,11,11,11,11,11,10,11,10,10,10,10,10,
 10,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,
 10,10,10,10,10,11,10,10,10,11,10,11,11,11,11,10,
 12,11,11,11,10,10,10,10,10,10,11,10,10,10,11,11,
 12,11,11,11,11,11,11,11,11,11,10,10,10,11,10,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,
 10,10,11,10,11,10,10,11,11,11,11,11,11,11,11,11,
 11,11,11,10,10,10,10,10,10,10,11,11,10,11,11,10,
 11,11,10,11,11,11,10,11,11,
};

static float _vq_quantthresh__16u2_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__16u2_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__16u2_p8_1 = {
 _vq_quantthresh__16u2_p8_1,
 _vq_quantmap__16u2_p8_1,
 21,
 21
};

static static_codebook _16u2_p8_1 = {
 2, 441,
 _vq_lengthlist__16u2_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__16u2_p8_1,
 
# 29571 "oggenc.c" 3 4
((void *)0)
# 29571 "oggenc.c"
    ,
 &_vq_auxt__16u2_p8_1,
 
# 29573 "oggenc.c" 3 4
((void *)0)
# 29573 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p9_0[] = {
 5586,
 4655,
 6517,
 3724,
 7448,
 2793,
 8379,
 1862,
 9310,
 931,
 10241,
 0,
 11172,
 5521,
 5651,
};

static long _vq_lengthlist__16u2_p9_0[] = {
  1,10,10,10,10,10,10,10,10,10,10,10,10, 5, 4,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10, 4,10,10,10,10,10,10,10,10,10,10,10,10,
  6, 6, 5,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 5,
  5,
};

static float _vq_quantthresh__16u2_p9_0[] = {
 -5120.5, -4189.5, -3258.5, -2327.5, -1396.5, -498, -32.5, 32.5,
 498, 1396.5, 2327.5, 3258.5, 4189.5, 5120.5,
};

static long _vq_quantmap__16u2_p9_0[] = {
    11, 9, 7, 5, 3, 1, 13, 0,
    14, 2, 4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__16u2_p9_0 = {
 _vq_quantthresh__16u2_p9_0,
 _vq_quantmap__16u2_p9_0,
 15,
 15
};

static static_codebook _16u2_p9_0 = {
 2, 225,
 _vq_lengthlist__16u2_p9_0,
 1, -510275072, 1611661312, 14, 0,
 _vq_quantlist__16u2_p9_0,
 
# 29635 "oggenc.c" 3 4
((void *)0)
# 29635 "oggenc.c"
    ,
 &_vq_auxt__16u2_p9_0,
 
# 29637 "oggenc.c" 3 4
((void *)0)
# 29637 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p9_1[] = {
 392,
 343,
 441,
 294,
 490,
 245,
 539,
 196,
 588,
 147,
 637,
 98,
 686,
 49,
 735,
 0,
 784,
 388,
 396,
};

static long _vq_lengthlist__16u2_p9_1[] = {
  1,12,10,12,10,12,10,12,11,12,12,12,12,12,12,12,
 12, 5, 5, 9,10,12,11,11,12,12,12,12,12,12,12,12,
 12,12,12,12,10, 9, 9,11, 9,11,11,12,11,12,12,12,
 12,12,12,12,12,12,12, 8, 8,10,11, 9,12,11,12,12,
 12,12,12,12,12,12,12,12,12,12, 9, 8,10,11,12,11,
 12,11,12,12,12,12,12,12,12,12,12,12,12, 8, 9,11,
 11,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
  9,10,11,12,11,12,11,12,12,12,12,12,12,12,12,12,
 12,12,12, 9, 9,11,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11, 5, 8, 9, 9, 8,11, 9,11,11,11,11,11,11,
 11,11,11,11, 5, 5, 4, 8, 8, 8, 8,10, 9,10,10,11,
 11,11,11,11,11,11,11, 5, 4,
};

static float _vq_quantthresh__16u2_p9_1[] = {
 -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5, -26.5,
 -2, 2, 26.5, 73.5, 122.5, 171.5, 220.5, 269.5,
 318.5, 367.5,
};

static long _vq_quantmap__16u2_p9_1[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
    17, 0, 18, 2, 4, 6, 8, 10,
    12, 14, 16,
};

static encode_aux_threshmatch _vq_auxt__16u2_p9_1 = {
 _vq_quantthresh__16u2_p9_1,
 _vq_quantmap__16u2_p9_1,
 19,
 19
};

static static_codebook _16u2_p9_1 = {
 2, 361,
 _vq_lengthlist__16u2_p9_1,
 1, -518488064, 1611661312, 10, 0,
 _vq_quantlist__16u2_p9_1,
 
# 29713 "oggenc.c" 3 4
((void *)0)
# 29713 "oggenc.c"
    ,
 &_vq_auxt__16u2_p9_1,
 
# 29715 "oggenc.c" 3 4
((void *)0)
# 29715 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__16u2_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__16u2_p9_2[] = {
  1, 3, 3, 4, 7, 7, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8,
  7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 9, 9, 8, 9, 9,
  9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,12,12,10,
 11,
};

static float _vq_quantthresh__16u2_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__16u2_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__16u2_p9_2 = {
 _vq_quantthresh__16u2_p9_2,
 _vq_quantmap__16u2_p9_2,
 49,
 49
};

static static_codebook _16u2_p9_2 = {
 1, 49,
 _vq_lengthlist__16u2_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__16u2_p9_2,
 
# 29809 "oggenc.c" 3 4
((void *)0)
# 29809 "oggenc.c"
    ,
 &_vq_auxt__16u2_p9_2,
 
# 29811 "oggenc.c" 3 4
((void *)0)
# 29811 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u0__long[] = {
  3, 7,12,10,15,10, 9,18, 5, 2, 5, 6, 8, 7, 9,20,
 10, 4, 4, 6, 6, 8,11,20, 9, 5, 6, 5, 7, 6, 9,20,
 11, 7, 5, 7, 5, 7,10,20,10, 6, 7, 6, 6, 6, 8,17,
  9, 8,10, 7, 7, 5, 5,17,11,18,19,14,13, 9, 8,19,
};

static static_codebook _huff_book__44u0__long = {
 2, 64,
 _huff_lengthlist__44u0__long,
 0, 0, 0, 0, 0,
 
# 29826 "oggenc.c" 3 4
((void *)0)
# 29826 "oggenc.c"
    ,
 
# 29827 "oggenc.c" 3 4
((void *)0)
# 29827 "oggenc.c"
    ,
 
# 29828 "oggenc.c" 3 4
((void *)0)
# 29828 "oggenc.c"
    ,
 
# 29829 "oggenc.c" 3 4
((void *)0)
# 29829 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u0__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 8, 5, 8, 8, 8,11,11, 8,
 10,11, 5, 8, 8, 8,10,10, 8,11,11, 4, 8, 8, 8,11,
 11, 8,11,11, 8,11,11,11,13,14,11,13,14, 7,11,11,
 10,14,12,11,13,14, 4, 8, 8, 8,11,11, 8,11,11, 8,
 11,11,11,14,13,10,12,13, 8,11,12,11,14,14,11,14,
 13,
};

static float _vq_quantthresh__44u0__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u0__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u0__p1_0 = {
 _vq_quantthresh__44u0__p1_0,
 _vq_quantmap__44u0__p1_0,
 3,
 3
};

static static_codebook _44u0__p1_0 = {
 4, 81,
 _vq_lengthlist__44u0__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u0__p1_0,
 
# 29868 "oggenc.c" 3 4
((void *)0)
# 29868 "oggenc.c"
    ,
 &_vq_auxt__44u0__p1_0,
 
# 29870 "oggenc.c" 3 4
((void *)0)
# 29870 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u0__p2_0[] = {
  2, 4, 4, 5, 6, 6, 5, 6, 6, 5, 7, 6, 7, 8, 8, 6,
  7, 8, 5, 6, 7, 6, 8, 7, 7, 8, 8, 5, 7, 7, 7, 8,
  8, 7, 8, 8, 7, 8, 8, 8, 9,10, 8,10,10, 6, 8, 8,
  7,10, 8, 8,10,10, 5, 7, 7, 7, 8, 8, 7, 8, 8, 6,
  8, 8, 8,10,10, 7, 8,10, 6, 8, 8, 8,10,10, 8,10,
  9,
};

static float _vq_quantthresh__44u0__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u0__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u0__p2_0 = {
 _vq_quantthresh__44u0__p2_0,
 _vq_quantmap__44u0__p2_0,
 3,
 3
};

static static_codebook _44u0__p2_0 = {
 4, 81,
 _vq_lengthlist__44u0__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u0__p2_0,
 
# 29909 "oggenc.c" 3 4
((void *)0)
# 29909 "oggenc.c"
    ,
 &_vq_auxt__44u0__p2_0,
 
# 29911 "oggenc.c" 3 4
((void *)0)
# 29911 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u0__p3_0[] = {
  1, 5, 5, 8, 8, 5, 7, 7, 9, 9, 5, 7, 8, 9, 9, 8,
 10, 9,12,11, 8, 9,10,11,12, 6, 8, 8,10,10, 8,10,
 10,11,11, 8, 9,10,11,11,10,12,11,13,13,10,11,11,
 13,13, 6, 8, 8,10,10, 8,10, 9,11,11, 8,10,10,11,
 11,10,11,11,13,13,10,11,11,13,13, 9,11,11,15,14,
 10,12,11,15,14,10,12,11,15,14,12,14,13,16,15,12,
 13,13,17,15, 9,11,11,14,14,10,11,12,14,15,10,11,
 12,14,17,12,13,14,15,16,13,13,14,15,17, 5, 8, 8,
 11,11, 8,10,10,12,12, 8,10,10,12,12,11,12,12,15,
 14,11,12,12,14,15, 8,10,10,13,12,10,12,12,13,13,
 10,12,12,14,14,12,13,13,15,15,11,13,13,15,16, 7,
 10,10,12,12, 9,12,11,14,13,10,12,12,13,14,12,13,
 12,15,15,12,13,13,16,17,10,12,12,15,16,12,13,13,
 17,15,11,13,13,17,16,15,15,15,17,17,13,15,16,18,
 18, 9,12,12,15,17,11,13,12,16,16,11,13,13,16,18,
 14,15,14,16,16,13,15,15,17,18, 5, 8, 8,11,11, 8,
 10,10,12,12, 8,10,10,12,12,10,12,12,15,15,11,12,
 12,14,15, 7,10,10,12,12,10,12,12,14,14, 9,11,12,
 13,13,12,13,13,16,16,12,12,13,15,15, 8,10,10,12,
 13,10,12,12,13,14,10,12,12,13,13,12,13,13,16,16,
 12,13,13,15,15,10,12,12,15,16,11,13,13,17,16,11,
 12,13,17,16,13,15,15,18,19,14,14,14,17,16,10,12,
 12,15,15,11,13,13,15,16,11,13,13,15,17,13,15,15,
 18,20,14,15,15,17,17, 8,11,11,15,16,10,13,12,17,
 16,10,12,13,16,17,15,16,15,20,19,14,15,16,18,19,
  9,12,12,15,17,11,13,14,18,18,11,13,14,17,17,16,
 17,18,19,19,15,16,18,19,20, 9,12,12,16,16,11,14,
 12,17,17,11,13,13,16,19,15,16,15,20,19,15,15,15,
 19,17,12,14,14,18,19,14,15,15,19,18,13,15,15,18,
 17,17,18,19,20, 0,15,16,17,20, 0,12,15,14,17,18,
 13,16,14,20,20,13,16,15,19,18,16,20,17,20,19,16,
 17,16, 0,19, 8,11,11,15,15,10,12,12,17,17,10,12,
 13,16,16,13,14,15,17,17,15,16,17,19,19, 9,12,12,
 16,17,11,13,13,18,16,11,13,13,16,17,14,15,16,19,
 18,15,16,17,17,18, 9,12,12,17,16,11,14,13,16,16,
 12,14,13,17,18,14,16,15,18,19,17,17,17,19,18,12,
 14,14,19,17,13,15,15,17, 0,13,14,16, 0, 0,15,16,
 16,19, 0,16,16,19,19, 0,12,15,14,19,18,13,15,15,
 19, 0,14,16,15, 0,19,15,17,17, 0,19,17,18,17, 0,
 19,
};

static float _vq_quantthresh__44u0__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u0__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u0__p3_0 = {
 _vq_quantthresh__44u0__p3_0,
 _vq_quantmap__44u0__p3_0,
 5,
 5
};

static static_codebook _44u0__p3_0 = {
 4, 625,
 _vq_lengthlist__44u0__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u0__p3_0,
 
# 29986 "oggenc.c" 3 4
((void *)0)
# 29986 "oggenc.c"
    ,
 &_vq_auxt__44u0__p3_0,
 
# 29988 "oggenc.c" 3 4
((void *)0)
# 29988 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u0__p4_0[] = {
  4, 5, 5, 8, 8, 5, 7, 6, 9, 9, 5, 6, 7, 9, 9, 9,
  9, 9,11,11, 9, 9, 9,11,11, 5, 7, 7, 9, 9, 7, 8,
  8,10,10, 6, 7, 8, 9,10,10,10,10,11,12, 9,10,10,
 11,12, 5, 7, 7, 9, 9, 6, 8, 7,10,10, 7, 8, 8,10,
 10, 9,10,10,12,11,10,10,10,12,11, 9,10,10,12,12,
 10,11,10,13,13, 9,10,10,13,13,12,12,12,14,14,11,
 12,12,14,14, 9,10,10,12,12, 9,10,10,13,13,10,10,
 10,12,13,11,12,12,14,14,12,13,12,14,14, 5, 7, 7,
 10,10, 7, 8, 8,10,10, 7, 8, 8,10,10,10,10,10,13,
 12,10,10,10,12,12, 7, 8, 8,11,10, 8, 8, 9,10,11,
  8, 9, 9,11,11,10,10,11,12,13,10,11,11,13,14, 6,
  8, 8,10,10, 7, 9, 8,11,10, 8, 9, 9,11,11,10,11,
 10,13,11,10,11,11,13,13,10,11,10,13,13,10,10,11,
 13,14,10,11,11,14,13,12,11,13,12,14,12,13,13,15,
 15, 9,10,10,13,13,10,11,10,13,13,10,11,11,13,14,
 12,13,11,15,12,12,13,13,14,15, 5, 7, 7,10, 9, 7,
  8, 8,10,10, 7, 8, 8,10,10,10,10,10,12,12,10,10,
 10,12,13, 6, 8, 8,10,10, 8, 9, 9,11,11, 7, 8, 9,
 10,11,10,11,11,13,13,10,10,11,11,14, 7, 8, 8,10,
 10, 8, 9, 9,11,11, 8, 9, 8,11,10,10,11,11,13,13,
 10,11,10,13,11, 9,10,10,13,13,10,11,11,14,13,10,
 10,11,12,13,13,13,13,15,14,12,11,13,12,15, 9,10,
 11,13,13,10,11,11,13,14,10,11,10,13,13,12,13,13,
 15,15,12,13,11,15,12, 8,10,10,13,12,10,11,11,13,
 13, 9,10,11,13,13,13,13,13,15,15,12,13,13,15,15,
  9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,13,
 13,14,14,15,13,13,13,14,15, 9,10,10,13,13,10,11,
 10,14,13,10,11,11,13,14,13,14,13,15,14,12,13,13,
 14,15,11,13,13,15,14,11,11,13,14,15,12,14,13,15,
 15,13,12,15,12,16,14,14,15,17,16,11,12,12,14,15,
 11,13,11,15,14,12,13,13,15,15,14,14,12,17,13,14,
 15,15,18,16, 8,10,10,13,12, 9,10,10,13,13,10,10,
 11,13,13,12,13,13,14,14,12,13,13,15,15, 9,10,10,
 13,13,10,11,11,14,13,10,10,11,13,14,12,13,13,17,
 15,12,12,13,14,16, 9,10,10,13,13,10,11,11,13,13,
 10,11,10,14,13,13,13,13,14,15,13,14,13,15,15,11,
 13,12,14,14,12,13,13,16,14,11,12,13,15,15,14,15,
 16,17,18,14,12,15,14,16,11,12,13,14,15,12,13,13,
 15,16,11,13,11,15,14,14,16,14,16,17,14,15,12,16,
 12,
};

static float _vq_quantthresh__44u0__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u0__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u0__p4_0 = {
 _vq_quantthresh__44u0__p4_0,
 _vq_quantmap__44u0__p4_0,
 5,
 5
};

static static_codebook _44u0__p4_0 = {
 4, 625,
 _vq_lengthlist__44u0__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u0__p4_0,
 
# 30063 "oggenc.c" 3 4
((void *)0)
# 30063 "oggenc.c"
    ,
 &_vq_auxt__44u0__p4_0,
 
# 30065 "oggenc.c" 3 4
((void *)0)
# 30065 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u0__p5_0[] = {
  1, 4, 4, 7, 7, 8, 8, 9, 9, 4, 6, 5, 8, 8, 8, 8,
 10,10, 4, 5, 6, 8, 8, 8, 8,10,10, 7, 8, 8, 9, 9,
  9, 9,11,11, 7, 8, 8, 9, 9, 9, 9,11,11, 8, 8, 8,
 10, 9,10,11,12,12, 8, 8, 8, 9, 9,11,11,12,12, 9,
 10,10,11,11,12,12,13,13, 9,10,10,11,11,12,12,13,
 13,
};

static float _vq_quantthresh__44u0__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u0__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u0__p5_0 = {
 _vq_quantthresh__44u0__p5_0,
 _vq_quantmap__44u0__p5_0,
 9,
 9
};

static static_codebook _44u0__p5_0 = {
 2, 81,
 _vq_lengthlist__44u0__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u0__p5_0,
 
# 30111 "oggenc.c" 3 4
((void *)0)
# 30111 "oggenc.c"
    ,
 &_vq_auxt__44u0__p5_0,
 
# 30113 "oggenc.c" 3 4
((void *)0)
# 30113 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u0__p6_0[] = {
  1, 4, 4, 6, 6, 8, 8,10, 9,10,10,14,14, 4, 6, 5,
  8, 8, 9, 9,10,10,11,11,14,14, 4, 5, 6, 8, 8, 9,
  9,10,10,11,11,14,14, 7, 8, 8, 9, 9,10,10,11,11,
 12,12,15,15, 7, 8, 8, 9, 9,10,10,11,11,12,12,14,
 15, 9, 9, 9,10,10,11,11,12,11,12,12,15,16, 9, 9,
  9,10,10,11,11,11,11,12,12,15,15,10,10,10,11,11,
 12,11,12,12,13,13,16,16,10,10,10,11,11,12,12,12,
 12,13,13,16,17,11,11,12,12,12,13,13,14,13,14,14,
 18,17,11,11,11,12,12,12,12,13,14,14,14,18,18,14,
 14,14,15,15,15,16,16,16,17,17, 0,19,14,14,14,15,
 15,16,17,16,17,17,17,19, 0,
};

static float _vq_quantthresh__44u0__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u0__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u0__p6_0 = {
 _vq_quantthresh__44u0__p6_0,
 _vq_quantmap__44u0__p6_0,
 13,
 13
};

static static_codebook _44u0__p6_0 = {
 2, 169,
 _vq_lengthlist__44u0__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u0__p6_0,
 
# 30169 "oggenc.c" 3 4
((void *)0)
# 30169 "oggenc.c"
    ,
 &_vq_auxt__44u0__p6_0,
 
# 30171 "oggenc.c" 3 4
((void *)0)
# 30171 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u0__p6_1[] = {
  2, 4, 4, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 5, 6, 6, 6, 6,
};

static float _vq_quantthresh__44u0__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u0__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u0__p6_1 = {
 _vq_quantthresh__44u0__p6_1,
 _vq_quantmap__44u0__p6_1,
 5,
 5
};

static static_codebook _44u0__p6_1 = {
 2, 25,
 _vq_lengthlist__44u0__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u0__p6_1,
 
# 30208 "oggenc.c" 3 4
((void *)0)
# 30208 "oggenc.c"
    ,
 &_vq_auxt__44u0__p6_1,
 
# 30210 "oggenc.c" 3 4
((void *)0)
# 30210 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p7_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u0__p7_0[] = {
  1, 5, 5,11,11, 9,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11, 8,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11, 9,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11, 8,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44u0__p7_0[] = {
 -253.5, -84.5, 84.5, 253.5,
};

static long _vq_quantmap__44u0__p7_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u0__p7_0 = {
 _vq_quantthresh__44u0__p7_0,
 _vq_quantmap__44u0__p7_0,
 5,
 5
};

static static_codebook _44u0__p7_0 = {
 4, 625,
 _vq_lengthlist__44u0__p7_0,
 1, -518709248, 1626677248, 3, 0,
 _vq_quantlist__44u0__p7_0,
 
# 30285 "oggenc.c" 3 4
((void *)0)
# 30285 "oggenc.c"
    ,
 &_vq_auxt__44u0__p7_0,
 
# 30287 "oggenc.c" 3 4
((void *)0)
# 30287 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p7_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u0__p7_1[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 4, 7, 7,
  8, 8, 8, 8, 9, 9,11,10,12,11, 4, 6, 7, 8, 8, 7,
  8, 9, 9,10,11,12,11, 7, 8, 8, 9, 9,10,10,11,11,
 12,11,13,13, 7, 8, 8, 9,10,10,10,11,11,12,12,12,
 13, 7, 8, 8,10,10,12,12,13,12,16,13,13,14, 7, 8,
  8,10,11,12,12,13,12,13,13,14,14, 8, 9,10,12,12,
 14,13,16,15,16,16,16,15, 8,10,10,12,12,14,13,14,
 15,16,16,15,16,10,11,12,14,14,14,14,16,13,16,15,
 16,16,10,11,12,13,13,15,14,14,15,16,16,14,14,13,
 14,13,15,16,16,16,15,15,16,16,16,16,11,15,14,16,
 16,14,14,16,15,16,14,16,15,
};

static float _vq_quantthresh__44u0__p7_1[] = {
 -71.5, -58.5, -45.5, -32.5, -19.5, -6.5, 6.5, 19.5,
 32.5, 45.5, 58.5, 71.5,
};

static long _vq_quantmap__44u0__p7_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u0__p7_1 = {
 _vq_quantthresh__44u0__p7_1,
 _vq_quantmap__44u0__p7_1,
 13,
 13
};

static static_codebook _44u0__p7_1 = {
 2, 169,
 _vq_lengthlist__44u0__p7_1,
 1, -523010048, 1618608128, 4, 0,
 _vq_quantlist__44u0__p7_1,
 
# 30343 "oggenc.c" 3 4
((void *)0)
# 30343 "oggenc.c"
    ,
 &_vq_auxt__44u0__p7_1,
 
# 30345 "oggenc.c" 3 4
((void *)0)
# 30345 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u0__p7_2[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u0__p7_2[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 5, 5, 6,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 5, 5, 5, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 6, 7, 7, 7, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 6, 7, 7, 8, 7, 8, 8, 9, 9, 9, 9, 9,
  9, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 9, 9, 9, 9, 8, 9,
  9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44u0__p7_2[] = {
 -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5,
 2.5, 3.5, 4.5, 5.5,
};

static long _vq_quantmap__44u0__p7_2[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u0__p7_2 = {
 _vq_quantthresh__44u0__p7_2,
 _vq_quantmap__44u0__p7_2,
 13,
 13
};

static static_codebook _44u0__p7_2 = {
 2, 169,
 _vq_lengthlist__44u0__p7_2,
 1, -531103744, 1611661312, 4, 0,
 _vq_quantlist__44u0__p7_2,
 
# 30401 "oggenc.c" 3 4
((void *)0)
# 30401 "oggenc.c"
    ,
 &_vq_auxt__44u0__p7_2,
 
# 30403 "oggenc.c" 3 4
((void *)0)
# 30403 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u0__short[] = {
  6,10,11,12,13,12,12,12, 4, 6, 6, 9, 9,10,11,13,
  3, 4, 3, 7, 6, 8,10,15, 5, 7, 7, 9, 8, 9,11,16,
  6, 7, 5, 8, 5, 7,10,16, 7, 8, 7, 9, 6, 7,10,16,
 10, 6, 3, 5, 4, 5, 7,16,13, 8, 5, 7, 6, 7,10,15,
};

static static_codebook _huff_book__44u0__short = {
 2, 64,
 _huff_lengthlist__44u0__short,
 0, 0, 0, 0, 0,
 
# 30418 "oggenc.c" 3 4
((void *)0)
# 30418 "oggenc.c"
    ,
 
# 30419 "oggenc.c" 3 4
((void *)0)
# 30419 "oggenc.c"
    ,
 
# 30420 "oggenc.c" 3 4
((void *)0)
# 30420 "oggenc.c"
    ,
 
# 30421 "oggenc.c" 3 4
((void *)0)
# 30421 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u1__long[] = {
  4, 8,13,11,14,11,10,14, 6, 3, 5, 6, 8, 7, 9,14,
 12, 4, 3, 6, 5, 7,10,18,11, 6, 6, 6, 6, 6, 8,16,
 13, 7, 4, 6, 4, 6, 9,19,11, 6, 6, 5, 5, 5, 7,16,
 10, 8, 9, 7, 9, 6, 4,12,11,16,18,19,18,10, 7,11,
};

static static_codebook _huff_book__44u1__long = {
 2, 64,
 _huff_lengthlist__44u1__long,
 0, 0, 0, 0, 0,
 
# 30436 "oggenc.c" 3 4
((void *)0)
# 30436 "oggenc.c"
    ,
 
# 30437 "oggenc.c" 3 4
((void *)0)
# 30437 "oggenc.c"
    ,
 
# 30438 "oggenc.c" 3 4
((void *)0)
# 30438 "oggenc.c"
    ,
 
# 30439 "oggenc.c" 3 4
((void *)0)
# 30439 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u1__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 8, 5, 8, 8, 8,11,11, 8,
 10,11, 5, 8, 8, 8,11,10, 8,11,11, 4, 8, 8, 8,11,
 11, 8,11,11, 8,11,11,11,13,14,11,13,14, 8,11,11,
 10,14,11,11,13,14, 4, 8, 8, 8,11,11, 8,11,11, 7,
 11,11,11,14,13,10,12,13, 8,11,11,11,14,14,11,14,
 13,
};

static float _vq_quantthresh__44u1__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u1__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u1__p1_0 = {
 _vq_quantthresh__44u1__p1_0,
 _vq_quantmap__44u1__p1_0,
 3,
 3
};

static static_codebook _44u1__p1_0 = {
 4, 81,
 _vq_lengthlist__44u1__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u1__p1_0,
 
# 30478 "oggenc.c" 3 4
((void *)0)
# 30478 "oggenc.c"
    ,
 &_vq_auxt__44u1__p1_0,
 
# 30480 "oggenc.c" 3 4
((void *)0)
# 30480 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u1__p2_0[] = {
  2, 5, 5, 5, 6, 6, 5, 6, 6, 5, 6, 6, 7, 8, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 7, 8, 8, 5, 6, 6, 7, 8,
  8, 6, 8, 8, 7, 8, 8, 8, 9,10, 8, 9, 9, 6, 8, 8,
  7, 9, 8, 8, 9,10, 5, 6, 6, 6, 8, 8, 7, 8, 8, 6,
  8, 8, 8,10, 9, 7, 8, 9, 7, 8, 8, 8, 9, 9, 8,10,
  9,
};

static float _vq_quantthresh__44u1__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u1__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u1__p2_0 = {
 _vq_quantthresh__44u1__p2_0,
 _vq_quantmap__44u1__p2_0,
 3,
 3
};

static static_codebook _44u1__p2_0 = {
 4, 81,
 _vq_lengthlist__44u1__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u1__p2_0,
 
# 30519 "oggenc.c" 3 4
((void *)0)
# 30519 "oggenc.c"
    ,
 &_vq_auxt__44u1__p2_0,
 
# 30521 "oggenc.c" 3 4
((void *)0)
# 30521 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u1__p3_0[] = {
  2, 5, 4, 7, 7, 5, 7, 7, 9, 8, 5, 7, 7, 8, 9, 8,
  9, 9,11,11, 8, 9, 9,11,11, 5, 7, 7,10,10, 7, 9,
  9,11,10, 7, 9, 9,10,10, 9,11,10,13,12, 9,10,10,
 12,13, 5, 7, 7,10, 9, 7, 9, 9,11,10, 7, 9, 9,10,
 11, 9,10,10,12,12,10,10,11,12,13, 8,10,10,14,13,
  9,11,11,15,13, 9,11,11,15,13,12,14,12,16,14,12,
 13,12,15,14, 8,10,10,13,14, 9,11,11,13,14,10,11,
 11,13,15,12,12,13,14,15,12,13,14,14,16, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,12,10,11,11,14,
 14,10,11,11,14,14, 7, 9, 9,12,12, 9,11,11,13,12,
  9,11,11,13,13,12,12,12,14,14,11,12,13,15,15, 7,
  9, 9,12,11, 9,11,10,12,12, 9,11,11,12,13,11,12,
 11,14,14,11,12,12,15,16, 9,11,11,15,15,11,12,12,
 16,15,10,12,12,16,15,14,15,15,17,16,13,14,14,17,
 17, 9,11,11,14,15,10,12,11,15,15,10,12,12,15,17,
 13,14,13,16,15,13,14,15,17,17, 5, 7, 7,10,10, 7,
  9, 9,12,11, 7, 9, 9,11,12,10,11,11,14,14,10,11,
 11,13,14, 7, 9, 9,11,12, 9,11,11,13,13, 9,10,11,
 12,12,11,12,12,15,15,11,12,12,13,14, 7,10, 9,12,
 12, 9,11,11,13,13, 9,11,11,12,12,11,12,12,16,15,
 11,12,12,14,14, 9,11,11,15,14,10,12,12,16,15,10,
 11,12,15,15,13,14,14,17,18,13,13,14,15,16, 9,11,
 11,15,16,10,12,12,15,15,11,12,12,14,17,13,14,14,
 17,17,14,14,14,16,18, 7,10,10,14,15,10,12,12,16,
 15,10,11,12,16,16,14,16,15,18,17,13,15,14,17,19,
  9,11,12,16,15,11,13,13,17,16,10,13,13,16,16,15,
 16,16,17,19,13,15,15,17,17, 8,11,11,15,15,10,13,
 11,16,16,10,13,13,16,17,14,16,15,18,19,13,15,15,
 17,17,12,14,14,18,18,13,14,15,18,19,12,14,15,17,
 18,16,18,18,19, 0,14,15,16,18,18,11,14,13,17,18,
 12,16,14,19,19,12,15,14, 0,18,15,17,16,18,17,14,
 17,16,18,18, 7,10,10,15,14,10,12,11,16,16,10,11,
 12,16,16,13,15,14,19,18,14,15,16,18,18, 8,11,11,
 15,15,10,13,12,17,16,10,12,13,16,17,14,14,15,19,
 18,14,15,16,18, 0, 9,11,11,16,15,11,13,12,15,16,
 11,13,13,16,16,14,15,14, 0,17,15,16,16,19,18,11,
 14,14,18,17,12,14,15,17,17,12,13,15, 0,17,14,15,
 16,18,17,16,17,18,17,19,11,14,13,17,19,12,15,14,
 18,19,13,16,14, 0,19,14,17,15, 0,18,15,18,16, 0,
  0,
};

static float _vq_quantthresh__44u1__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u1__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u1__p3_0 = {
 _vq_quantthresh__44u1__p3_0,
 _vq_quantmap__44u1__p3_0,
 5,
 5
};

static static_codebook _44u1__p3_0 = {
 4, 625,
 _vq_lengthlist__44u1__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u1__p3_0,
 
# 30596 "oggenc.c" 3 4
((void *)0)
# 30596 "oggenc.c"
    ,
 &_vq_auxt__44u1__p3_0,
 
# 30598 "oggenc.c" 3 4
((void *)0)
# 30598 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u1__p4_0[] = {
  4, 5, 5, 8, 8, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 9,
  9, 9,11,11, 9, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 6, 7, 8, 9,10,10,10,10,11,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 6, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,12,11,10,10,10,12,11, 9,10,10,12,12,
 10,10,10,13,12, 9,10,10,12,12,12,12,12,14,14,11,
 12,12,13,14, 9,10,10,12,12, 9,10,10,13,12,10,10,
 10,12,13,12,12,12,14,13,12,12,12,14,14, 5, 7, 7,
  9, 9, 7, 8, 7,10,10, 7, 7, 8,10,10,10,10,10,12,
 12,10,10,10,12,12, 7, 8, 8,10,10, 8, 8, 9,10,11,
  8, 8, 8,11,11,10,10,11,11,13,10,11,11,12,13, 6,
  7, 7,10,10, 7, 8, 8,11,10, 8, 8, 9,11,11,10,11,
 10,13,11,10,11,11,13,12,10,11,10,13,12,10,10,11,
 13,13,10,11,11,13,13,12,11,13,12,14,12,13,13,15,
 15, 9,10,10,12,13,10,11,10,13,13,10,11,11,13,14,
 12,13,11,14,12,12,13,13,14,15, 5, 7, 7, 9,10, 7,
  8, 7,10,10, 7, 7, 8,10,10,10,10,10,12,12,10,10,
 10,12,12, 6, 7, 7,10,10, 8, 9, 8,11,11, 7, 8, 8,
 10,11,10,11,11,12,13,10,10,11,11,13, 7, 8, 8,10,
 10, 8, 8, 8,11,11, 8, 9, 8,11,10,10,11,10,13,12,
 10,11,10,13,12, 9,10,10,13,12,10,11,11,13,13, 9,
 10,10,12,13,13,13,13,15,14,12,11,13,12,15,10,10,
 11,12,13,10,11,11,13,13,10,11,10,13,13,12,13,13,
 15,15,12,13,11,14,12, 8,10, 9,12,12, 9,10,10,13,
 13, 9,10,10,13,13,13,13,13,14,15,12,12,12,14,14,
  9,10,10,13,12,10,11,11,13,13,10,11,11,13,12,13,
 13,14,14,16,12,13,13,15,14, 9,10,10,13,13,10,11,
 10,13,13,10,11,11,13,13,13,14,12,15,14,12,13,13,
 14,15,12,12,12,14,14,11,12,12,14,15,12,13,13,15,
 14,14,12,15,12,16,14,14,15,17,16,11,12,12,14,14,
 11,12,11,15,14,12,13,13,15,15,13,14,12,16,13,14,
 14,15,17,16, 8,10,10,12,12, 9,10,10,13,12,10,10,
 10,13,13,12,13,12,14,14,12,13,13,15,14, 9,10,10,
 13,13,10,11,11,13,13,10,10,11,12,13,13,13,13,15,
 15,12,12,13,14,15, 9,10,10,12,13,10,11,11,12,13,
 10,11,10,13,13,12,13,13,14,15,13,14,13,15,14,11,
 12,12,15,14,12,13,13,15,14,11,12,12,14,15,14,14,
 14,17,15,13,12,15,13,16,12,12,12,14,15,12,13,13,
 14,15,11,12,12,15,14,14,15,14,16,17,13,15,12,16,
 12,
};

static float _vq_quantthresh__44u1__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u1__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u1__p4_0 = {
 _vq_quantthresh__44u1__p4_0,
 _vq_quantmap__44u1__p4_0,
 5,
 5
};

static static_codebook _44u1__p4_0 = {
 4, 625,
 _vq_lengthlist__44u1__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u1__p4_0,
 
# 30673 "oggenc.c" 3 4
((void *)0)
# 30673 "oggenc.c"
    ,
 &_vq_auxt__44u1__p4_0,
 
# 30675 "oggenc.c" 3 4
((void *)0)
# 30675 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u1__p5_0[] = {
  1, 4, 4, 7, 7, 8, 8,10,10, 4, 6, 5, 8, 8, 8, 8,
 10,10, 4, 5, 6, 8, 8, 8, 8,10,10, 7, 8, 7, 9, 9,
  9, 9,11,11, 7, 8, 8, 9, 9, 9, 9,11,11, 8, 8, 8,
  9, 9,10,11,12,12, 8, 8, 9, 9, 9,10,10,12,12,10,
 10,10,11,11,12,12,13,13,10,10,10,11,11,12,12,13,
 13,
};

static float _vq_quantthresh__44u1__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u1__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u1__p5_0 = {
 _vq_quantthresh__44u1__p5_0,
 _vq_quantmap__44u1__p5_0,
 9,
 9
};

static static_codebook _44u1__p5_0 = {
 2, 81,
 _vq_lengthlist__44u1__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u1__p5_0,
 
# 30721 "oggenc.c" 3 4
((void *)0)
# 30721 "oggenc.c"
    ,
 &_vq_auxt__44u1__p5_0,
 
# 30723 "oggenc.c" 3 4
((void *)0)
# 30723 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u1__p6_0[] = {
  1, 4, 4, 7, 7, 9, 8,10, 9,11,10,14,13, 4, 5, 5,
  8, 8, 9, 9,11,11,11,11,14,14, 4, 5, 5, 8, 8, 9,
  9,10,11,11,11,14,14, 7, 8, 8, 9, 9,11,10,11,11,
 12,12,16,15, 7, 8, 8, 9, 9,10,11,11,11,12,12,15,
 15, 9,10,10,11,11,11,11,12,12,13,13,16,16, 9,10,
 10,11,11,11,11,12,12,12,13,16,15,10,11,11,11,11,
 12,12,13,13,13,13,16,17,10,11,11,11,11,12,12,12,
 12,13,14,16,16,11,12,12,12,12,13,13,14,14,14,15,
 18,17,11,12,12,12,12,13,13,13,14,14,15,18,18,15,
 14,15,15,15,16,16,17,17,18,17,20,20,14,15,15,15,
 15,16,17,17,16,18, 0,19, 0,
};

static float _vq_quantthresh__44u1__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u1__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u1__p6_0 = {
 _vq_quantthresh__44u1__p6_0,
 _vq_quantmap__44u1__p6_0,
 13,
 13
};

static static_codebook _44u1__p6_0 = {
 2, 169,
 _vq_lengthlist__44u1__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u1__p6_0,
 
# 30779 "oggenc.c" 3 4
((void *)0)
# 30779 "oggenc.c"
    ,
 &_vq_auxt__44u1__p6_0,
 
# 30781 "oggenc.c" 3 4
((void *)0)
# 30781 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u1__p6_1[] = {
  2, 4, 4, 5, 5, 4, 5, 5, 6, 5, 4, 5, 5, 5, 6, 5,
  6, 5, 6, 6, 5, 5, 6, 6, 6,
};

static float _vq_quantthresh__44u1__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u1__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u1__p6_1 = {
 _vq_quantthresh__44u1__p6_1,
 _vq_quantmap__44u1__p6_1,
 5,
 5
};

static static_codebook _44u1__p6_1 = {
 2, 25,
 _vq_lengthlist__44u1__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u1__p6_1,
 
# 30818 "oggenc.c" 3 4
((void *)0)
# 30818 "oggenc.c"
    ,
 &_vq_auxt__44u1__p6_1,
 
# 30820 "oggenc.c" 3 4
((void *)0)
# 30820 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p7_0[] = {
 3,
 2,
 4,
 1,
 5,
 0,
 6,
};

static long _vq_lengthlist__44u1__p7_0[] = {
  1, 3, 3, 9, 9, 9, 9, 5, 7, 7, 9, 9, 9, 9, 5, 6,
  6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8,
};

static float _vq_quantthresh__44u1__p7_0[] = {
 -422.5, -253.5, -84.5, 84.5, 253.5, 422.5,
};

static long _vq_quantmap__44u1__p7_0[] = {
     5, 3, 1, 0, 2, 4, 6,
};

static encode_aux_threshmatch _vq_auxt__44u1__p7_0 = {
 _vq_quantthresh__44u1__p7_0,
 _vq_quantmap__44u1__p7_0,
 7,
 7
};

static static_codebook _44u1__p7_0 = {
 2, 49,
 _vq_lengthlist__44u1__p7_0,
 1, -518017024, 1626677248, 3, 0,
 _vq_quantlist__44u1__p7_0,
 
# 30861 "oggenc.c" 3 4
((void *)0)
# 30861 "oggenc.c"
    ,
 &_vq_auxt__44u1__p7_0,
 
# 30863 "oggenc.c" 3 4
((void *)0)
# 30863 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p7_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u1__p7_1[] = {
  1, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9,11,10, 4, 7, 7,
  8, 8, 8, 8, 9, 9,11,10,12,11, 4, 6, 7, 8, 8, 8,
  8,10,10,10,11,12,11, 7, 8, 8, 9, 9,10,10,11,11,
 12,12,13,13, 7, 8, 8, 9, 9,10,10,11,11,12,12,13,
 13, 7, 8, 8,10,10,13,12,13,13,16,13,13,14, 7, 8,
  8,10,11,12,12,13,13,14,14,14,14, 8,10,10,13,12,
 13,13,16,14,15,15,16,15, 8,10,11,12,13,13,13,13,
 16,15,16,16,14,10,12,13,14,15,15,14,14,14,15,16,
 15,16,10,11,12,13,13,15,15,16,16,16,14,16,16,12,
 13,13,15,14,15,14,15,15,14,15,16,16,11,14,14,15,
 14,16,15,16,14,15,16,14,15,
};

static float _vq_quantthresh__44u1__p7_1[] = {
 -71.5, -58.5, -45.5, -32.5, -19.5, -6.5, 6.5, 19.5,
 32.5, 45.5, 58.5, 71.5,
};

static long _vq_quantmap__44u1__p7_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u1__p7_1 = {
 _vq_quantthresh__44u1__p7_1,
 _vq_quantmap__44u1__p7_1,
 13,
 13
};

static static_codebook _44u1__p7_1 = {
 2, 169,
 _vq_lengthlist__44u1__p7_1,
 1, -523010048, 1618608128, 4, 0,
 _vq_quantlist__44u1__p7_1,
 
# 30919 "oggenc.c" 3 4
((void *)0)
# 30919 "oggenc.c"
    ,
 &_vq_auxt__44u1__p7_1,
 
# 30921 "oggenc.c" 3 4
((void *)0)
# 30921 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u1__p7_2[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u1__p7_2[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 5, 6, 6,
  6, 7, 8, 7, 8, 8, 8, 9, 9, 9, 5, 6, 6, 7, 7, 8,
  8, 8, 8, 8, 8, 8, 9, 6, 7, 7, 7, 7, 8, 8, 8, 9,
  9, 9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9,
  9, 7, 8, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9, 7, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 9, 9, 9,
  8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 8, 9,
  9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44u1__p7_2[] = {
 -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5,
 2.5, 3.5, 4.5, 5.5,
};

static long _vq_quantmap__44u1__p7_2[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u1__p7_2 = {
 _vq_quantthresh__44u1__p7_2,
 _vq_quantmap__44u1__p7_2,
 13,
 13
};

static static_codebook _44u1__p7_2 = {
 2, 169,
 _vq_lengthlist__44u1__p7_2,
 1, -531103744, 1611661312, 4, 0,
 _vq_quantlist__44u1__p7_2,
 
# 30977 "oggenc.c" 3 4
((void *)0)
# 30977 "oggenc.c"
    ,
 &_vq_auxt__44u1__p7_2,
 
# 30979 "oggenc.c" 3 4
((void *)0)
# 30979 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u1__short[] = {
  7,12,12,14,16,13,12,15, 6, 9,10,13,11,11,12,12,
  4, 5, 5, 8, 5, 7, 9,12, 6, 7, 8,10, 8, 9,11,16,
  5, 5, 4, 7, 4, 5, 7,15, 6, 5, 5, 8, 5, 5, 6,15,
  8, 7, 4, 7, 3, 4, 5,16,15,11, 6, 8, 5, 6, 8,16,
};

static static_codebook _huff_book__44u1__short = {
 2, 64,
 _huff_lengthlist__44u1__short,
 0, 0, 0, 0, 0,
 
# 30994 "oggenc.c" 3 4
((void *)0)
# 30994 "oggenc.c"
    ,
 
# 30995 "oggenc.c" 3 4
((void *)0)
# 30995 "oggenc.c"
    ,
 
# 30996 "oggenc.c" 3 4
((void *)0)
# 30996 "oggenc.c"
    ,
 
# 30997 "oggenc.c" 3 4
((void *)0)
# 30997 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u2__long[] = {
  8,14,15,15,17,15,12,13,13, 3, 4, 7, 8, 7, 8,11,
 20, 4, 3, 6, 5, 7, 9,16,15, 6, 5, 6, 6, 6, 8,15,
 20, 7, 4, 6, 4, 5, 8,18,16, 7, 6, 6, 5, 5, 6,14,
 11, 7, 8, 7, 7, 5, 4,10,10,13,15,16,19,10, 6,10,
};

static static_codebook _huff_book__44u2__long = {
 2, 64,
 _huff_lengthlist__44u2__long,
 0, 0, 0, 0, 0,
 
# 31012 "oggenc.c" 3 4
((void *)0)
# 31012 "oggenc.c"
    ,
 
# 31013 "oggenc.c" 3 4
((void *)0)
# 31013 "oggenc.c"
    ,
 
# 31014 "oggenc.c" 3 4
((void *)0)
# 31014 "oggenc.c"
    ,
 
# 31015 "oggenc.c" 3 4
((void *)0)
# 31015 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u2__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 8, 5, 8, 8, 8,11,11, 8,
 10,11, 5, 8, 8, 8,11,10, 8,11,11, 4, 8, 8, 8,11,
 11, 8,11,11, 8,11,11,11,13,14,11,13,13, 8,11,11,
 10,13,12,11,13,14, 4, 8, 8, 8,11,11, 8,11,11, 7,
 11,11,11,14,13,10,12,13, 8,11,11,11,14,13,11,13,
 13,
};

static float _vq_quantthresh__44u2__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u2__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u2__p1_0 = {
 _vq_quantthresh__44u2__p1_0,
 _vq_quantmap__44u2__p1_0,
 3,
 3
};

static static_codebook _44u2__p1_0 = {
 4, 81,
 _vq_lengthlist__44u2__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u2__p1_0,
 
# 31054 "oggenc.c" 3 4
((void *)0)
# 31054 "oggenc.c"
    ,
 &_vq_auxt__44u2__p1_0,
 
# 31056 "oggenc.c" 3 4
((void *)0)
# 31056 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u2__p2_0[] = {
  3, 4, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 8, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 8, 5, 6, 6, 6, 8,
  7, 6, 7, 8, 6, 8, 8, 8, 9, 9, 8, 9, 9, 6, 8, 8,
  7, 9, 8, 8, 9, 9, 5, 6, 6, 6, 8, 8, 6, 7, 8, 6,
  8, 8, 8, 9, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 8, 9,
  9,
};

static float _vq_quantthresh__44u2__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u2__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u2__p2_0 = {
 _vq_quantthresh__44u2__p2_0,
 _vq_quantmap__44u2__p2_0,
 3,
 3
};

static static_codebook _44u2__p2_0 = {
 4, 81,
 _vq_lengthlist__44u2__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u2__p2_0,
 
# 31095 "oggenc.c" 3 4
((void *)0)
# 31095 "oggenc.c"
    ,
 &_vq_auxt__44u2__p2_0,
 
# 31097 "oggenc.c" 3 4
((void *)0)
# 31097 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u2__p3_0[] = {
  2, 4, 4, 8, 8, 5, 7, 7, 9, 9, 5, 7, 7, 9, 9, 8,
  9, 9,12,12, 8, 9,10,11,12, 5, 7, 7,10,10, 7, 9,
  9,11,10, 7, 8, 9,10,11,10,11,10,14,13, 9,10,10,
 12,13, 5, 7, 7,10,10, 7, 9, 8,11,10, 7, 9, 9,11,
 11, 9,10,10,13,12,10,10,11,13,13, 8,10,10,15,13,
 10,11,11,15,13, 9,11,11,14,13,13,14,13,17,15,12,
 13,13,15,15, 8,10,10,13,14, 9,11,11,13,14,10,11,
 12,13,16,12,13,13,15,15,13,13,14,15,17, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,12,10,11,11,14,
 14,10,11,12,14,14, 7, 9, 9,12,12, 9,11,11,13,12,
  9,11,11,13,13,12,13,12,14,14,11,12,12,15,14, 7,
  9, 9,12,11, 9,11,10,13,11, 9,11,11,12,13,11,12,
 11,14,13,11,12,12,15,15,10,12,12,16,15,11,13,13,
 16,16,10,12,12,16,16,14,14,14,17,16,13,14,14,17,
 18, 9,11,11,14,15,10,12,11,15,15,10,12,12,15,17,
 13,15,13,17,16,13,14,15,17,19, 5, 7, 7,10,10, 7,
  9, 9,12,11, 7, 9, 9,11,11,10,11,11,15,14,10,11,
 12,13,14, 7, 9, 9,12,12, 9,11,11,13,12, 8,10,11,
 12,12,11,12,12,15,15,11,11,12,14,14, 7, 9, 9,12,
 12, 9,11,11,13,13, 9,11,11,12,12,11,12,12,16,15,
 11,12,13,14,14, 9,11,11,16,15,10,12,12,16,15,10,
 11,12,14,14,13,14,15,18,17,13,13,14,16,16,10,12,
 12,15,15,10,13,12,15,17,11,13,12,15,16,13,15,14,
 17,18,14,15,14,15,17, 8,10,10,15,15,10,12,12,17,
 15,10,12,12,17,16,14,16,15,17,17,13,14,15,16,16,
  9,11,12,16,16,11,13,13,16,17,11,13,13,16,16,15,
 16,16, 0, 0,14,15,15,19,17, 9,11,11,17,16,10,13,
 11,16,16,11,12,12,16,17,15,16,15,19,19,14,16,15,
  0,18,12,14,15, 0, 0,14,15,16,18,18,13,14,15,17,
 17,16,18,18, 0, 0,15,16,16,19,18,11,14,13, 0,18,
 13,16,13,17,17,13,15,14, 0, 0,17,17,15,19,18,14,
 16,16,19, 0, 8,10,10,15,15,10,12,11,16,16,10,11,
 12,17,16,14,15,15,17,18,15,15,16, 0, 0, 9,11,11,
 15,15,11,13,12,16,18,10,12,13,17,17,13,15,15,17,
 19,15,15,16,19,18, 9,12,11, 0,16,11,13,12,16,16,
 11,13,13,16,17,14,16,15,19,19,15,15,16,18,18,12,
 14,14,17,18,13,14,15,18, 0,13,14,15,18,19,15,17,
 16, 0,19,16,15,18,17,19,12,14,14,19,19,13,15,15,
  0,18,13,17,15,18,18,15,16,17, 0,19,17,19,18,18,
  0,
};

static float _vq_quantthresh__44u2__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u2__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u2__p3_0 = {
 _vq_quantthresh__44u2__p3_0,
 _vq_quantmap__44u2__p3_0,
 5,
 5
};

static static_codebook _44u2__p3_0 = {
 4, 625,
 _vq_lengthlist__44u2__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u2__p3_0,
 
# 31172 "oggenc.c" 3 4
((void *)0)
# 31172 "oggenc.c"
    ,
 &_vq_auxt__44u2__p3_0,
 
# 31174 "oggenc.c" 3 4
((void *)0)
# 31174 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u2__p4_0[] = {
  4, 5, 5, 9, 9, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 9,
 10, 9,12,11, 9, 9,10,11,12, 6, 7, 7,10,10, 7, 8,
  7,10,10, 7, 7, 8,10,10,10,10,10,12,12, 9,10,10,
 11,12, 6, 7, 7,10,10, 7, 8, 7,10,10, 7, 7, 7,10,
 10, 9,10,10,12,11,10,10,10,12,12, 9,10,10,13,12,
 10,10,10,13,13,10,10,10,13,12,12,12,12,14,14,12,
 12,12,14,14, 9,10,10,12,13, 9,10,10,13,13,10,10,
 10,13,13,12,12,12,15,14,12,13,12,14,14, 5, 7, 7,
 10,10, 7, 8, 7,10,10, 7, 7, 8,10,10,10,10,10,12,
 12,10,10,10,12,12, 7, 8, 8,10,10, 8, 8, 8,10,11,
  8, 8, 8,11,10,10,10,11,11,13,10,10,11,12,13, 6,
  7, 7,10,10, 7, 8, 7,11,10, 8, 8, 8,10,11,10,11,
 10,13,11,10,10,10,13,12,10,11,10,13,13,10,10,10,
 12,13,10,11,11,13,13,12,11,13,11,14,12,13,13,14,
 14, 9,10,10,12,13,10,10,10,13,12,10,10,11,13,13,
 12,13,11,14,12,13,13,13,15,14, 5, 7, 7,10,10, 7,
  7, 7,10,10, 7, 7, 8,10,10,10,10,10,12,12,10,10,
 10,12,13, 6, 7, 7,10,10, 8, 8, 8,11,10, 7, 7, 8,
 10,11,10,10,10,12,12,10,10,11,11,13, 7, 8, 8,10,
 10, 7, 8, 8,10,11, 8, 8, 8,11,10,10,11,10,13,12,
 10,11,10,13,11, 9,10,10,13,13,10,11,11,13,13,10,
 10,10,12,13,13,13,13,14,14,12,11,13,12,14,10,10,
 11,13,13,10,11,11,13,13,10,10,10,13,12,12,13,13,
 14,14,12,13,11,15,12, 9,10,10,13,13,10,10,10,13,
 13,10,10,10,13,13,13,13,13,15,15,12,13,13,14,14,
  9,10,10,13,13,10,10,11,13,13,10,11,10,13,12,13,
 12,13,14,15,13,13,13,15,14, 9,10,10,13,13,10,10,
 10,13,12,10,10,11,12,13,13,13,12,15,14,13,13,13,
 14,14,12,13,12,15,14,12,11,12,14,14,12,13,12,15,
 14,14,12,15,12,16,14,14,15,16,16,12,12,12,14,15,
 11,12,11,15,14,12,13,13,14,15,14,14,12,16,13,14,
 14,15,16,16, 9,10,10,13,13,10,10,10,13,13,10,10,
 10,13,13,12,13,12,14,14,13,13,13,15,15, 9,10,10,
 13,13,10,11,10,13,12,10,10,10,12,13,13,13,13,14,
 14,12,12,13,14,15, 9,10,10,13,13,10,10,11,12,13,
 10,11,10,13,13,13,13,13,14,15,13,13,13,15,14,12,
 12,12,15,14,12,13,12,15,14,11,11,12,14,15,14,14,
 14,17,16,14,12,14,13,17,12,12,13,14,16,13,13,13,
 13,15,12,12,11,14,14,14,15,14,16,16,14,14,12,16,
 12,
};

static float _vq_quantthresh__44u2__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u2__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u2__p4_0 = {
 _vq_quantthresh__44u2__p4_0,
 _vq_quantmap__44u2__p4_0,
 5,
 5
};

static static_codebook _44u2__p4_0 = {
 4, 625,
 _vq_lengthlist__44u2__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u2__p4_0,
 
# 31249 "oggenc.c" 3 4
((void *)0)
# 31249 "oggenc.c"
    ,
 &_vq_auxt__44u2__p4_0,
 
# 31251 "oggenc.c" 3 4
((void *)0)
# 31251 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u2__p5_0[] = {
  2, 4, 4, 6, 6, 7, 7, 9, 9, 4, 5, 4, 7, 7, 8, 7,
  9, 9, 4, 4, 4, 7, 7, 7, 8, 9, 9, 6, 7, 7, 8, 8,
  8, 9,10,10, 6, 7, 7, 8, 8, 9, 8,10,10, 7, 8, 7,
  8, 9, 9,10,11,11, 7, 7, 8, 9, 9,10,10,11,11, 9,
  9, 9,10,10,11,11,12,12, 9, 9, 9,10,10,11,11,12,
 12,
};

static float _vq_quantthresh__44u2__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u2__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u2__p5_0 = {
 _vq_quantthresh__44u2__p5_0,
 _vq_quantmap__44u2__p5_0,
 9,
 9
};

static static_codebook _44u2__p5_0 = {
 2, 81,
 _vq_lengthlist__44u2__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u2__p5_0,
 
# 31297 "oggenc.c" 3 4
((void *)0)
# 31297 "oggenc.c"
    ,
 &_vq_auxt__44u2__p5_0,
 
# 31299 "oggenc.c" 3 4
((void *)0)
# 31299 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u2__p6_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9,10,11,11,14,14, 4, 6, 5,
  8, 8, 9, 9,11,11,11,11,14,14, 4, 5, 5, 8, 8, 9,
  9,10,11,11,12,14,14, 7, 8, 8, 9, 9,11,10,11,11,
 12,12,15,15, 7, 8, 8, 9, 9,11,11,11,11,12,12,15,
 14, 9,10,10,11,11,11,11,12,12,13,12,16,16, 9,10,
 10,11,11,11,11,12,12,13,13,15,16,10,11,11,11,11,
 12,12,13,13,13,13,17,16,10,11,11,12,12,12,12,12,
 13,14,14,16,16,11,12,12,12,12,13,13,14,14,14,14,
 17,17,11,12,12,12,12,13,13,14,14,15,14,18,17,15,
 14,15,15,15,16,16,17,18,19,17,19, 0,15,15,15,15,
 15,16,17,16,16,18,17, 0, 0,
};

static float _vq_quantthresh__44u2__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u2__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u2__p6_0 = {
 _vq_quantthresh__44u2__p6_0,
 _vq_quantmap__44u2__p6_0,
 13,
 13
};

static static_codebook _44u2__p6_0 = {
 2, 169,
 _vq_lengthlist__44u2__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u2__p6_0,
 
# 31355 "oggenc.c" 3 4
((void *)0)
# 31355 "oggenc.c"
    ,
 &_vq_auxt__44u2__p6_0,
 
# 31357 "oggenc.c" 3 4
((void *)0)
# 31357 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u2__p6_1[] = {
  2, 4, 4, 5, 5, 4, 5, 5, 6, 5, 4, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 5, 5, 6, 6, 6,
};

static float _vq_quantthresh__44u2__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u2__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u2__p6_1 = {
 _vq_quantthresh__44u2__p6_1,
 _vq_quantmap__44u2__p6_1,
 5,
 5
};

static static_codebook _44u2__p6_1 = {
 2, 25,
 _vq_lengthlist__44u2__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u2__p6_1,
 
# 31394 "oggenc.c" 3 4
((void *)0)
# 31394 "oggenc.c"
    ,
 &_vq_auxt__44u2__p6_1,
 
# 31396 "oggenc.c" 3 4
((void *)0)
# 31396 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p7_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u2__p7_0[] = {
  1, 3, 3,10,10,10,10,10,10, 4,10,10,10,10,10,10,
 10,10, 4,10,10,10,10,10,10,10,10,10,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44u2__p7_0[] = {
 -591.5, -422.5, -253.5, -84.5, 84.5, 253.5, 422.5, 591.5,
};

static long _vq_quantmap__44u2__p7_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u2__p7_0 = {
 _vq_quantthresh__44u2__p7_0,
 _vq_quantmap__44u2__p7_0,
 9,
 9
};

static static_codebook _44u2__p7_0 = {
 2, 81,
 _vq_lengthlist__44u2__p7_0,
 1, -516612096, 1626677248, 4, 0,
 _vq_quantlist__44u2__p7_0,
 
# 31442 "oggenc.c" 3 4
((void *)0)
# 31442 "oggenc.c"
    ,
 &_vq_auxt__44u2__p7_0,
 
# 31444 "oggenc.c" 3 4
((void *)0)
# 31444 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p7_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u2__p7_1[] = {
  1, 4, 4, 6, 6, 7, 7, 8, 7, 9, 9,10,10, 4, 7, 6,
  8, 8, 8, 8,10, 9,11,10,12,12, 4, 6, 7, 8, 8, 8,
  8,10,10,11,11,12,12, 7, 8, 8,10, 9,10,10,12,11,
 13,12,13,13, 7, 8, 8, 9, 9,10,10,11,11,13,13,14,
 15, 7, 8, 9,10,10,12,11,14,13,13,14,14,15, 7, 8,
  9,10,10,11,12,13,13,15,14,14,15, 8,10,10,12,11,
 13,13,15,15,15,17,15,15, 8,10,10,11,12,14,13,14,
 15,17,15,15,15,10,11,11,14,13,14,14,15,15,17,17,
 16,17,10,11,12,13,13,14,14,14,15,16,15,15,17,11,
 12,13,14,13,16,16,16,14,17,16,17,17,11,12,13,15,
 15,15,15,16,15,15,15,15,17,
};

static float _vq_quantthresh__44u2__p7_1[] = {
 -71.5, -58.5, -45.5, -32.5, -19.5, -6.5, 6.5, 19.5,
 32.5, 45.5, 58.5, 71.5,
};

static long _vq_quantmap__44u2__p7_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u2__p7_1 = {
 _vq_quantthresh__44u2__p7_1,
 _vq_quantmap__44u2__p7_1,
 13,
 13
};

static static_codebook _44u2__p7_1 = {
 2, 169,
 _vq_lengthlist__44u2__p7_1,
 1, -523010048, 1618608128, 4, 0,
 _vq_quantlist__44u2__p7_1,
 
# 31500 "oggenc.c" 3 4
((void *)0)
# 31500 "oggenc.c"
    ,
 &_vq_auxt__44u2__p7_1,
 
# 31502 "oggenc.c" 3 4
((void *)0)
# 31502 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u2__p7_2[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u2__p7_2[] = {
  2, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 5, 6, 6,
  7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 5, 6, 6, 7, 7, 8,
  7, 8, 8, 8, 8, 8, 8, 6, 7, 7, 7, 7, 8, 8, 8, 8,
  9, 9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 7, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44u2__p7_2[] = {
 -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5,
 2.5, 3.5, 4.5, 5.5,
};

static long _vq_quantmap__44u2__p7_2[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u2__p7_2 = {
 _vq_quantthresh__44u2__p7_2,
 _vq_quantmap__44u2__p7_2,
 13,
 13
};

static static_codebook _44u2__p7_2 = {
 2, 169,
 _vq_lengthlist__44u2__p7_2,
 1, -531103744, 1611661312, 4, 0,
 _vq_quantlist__44u2__p7_2,
 
# 31558 "oggenc.c" 3 4
((void *)0)
# 31558 "oggenc.c"
    ,
 &_vq_auxt__44u2__p7_2,
 
# 31560 "oggenc.c" 3 4
((void *)0)
# 31560 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u2__short[] = {
 16,15,15,16,14,16,16,16,16, 9, 8,11,10,10,10,15,
 16, 6, 3, 7, 5, 7, 9,16,16,11, 7,11, 9,10,12,16,
 16, 9, 4, 8, 3, 5, 8,16,16,11, 6, 9, 4, 4, 7,16,
 16,11, 5, 9, 3, 3, 5,12,16,15, 6,11, 5, 5, 6,14,
};

static static_codebook _huff_book__44u2__short = {
 2, 64,
 _huff_lengthlist__44u2__short,
 0, 0, 0, 0, 0,
 
# 31575 "oggenc.c" 3 4
((void *)0)
# 31575 "oggenc.c"
    ,
 
# 31576 "oggenc.c" 3 4
((void *)0)
# 31576 "oggenc.c"
    ,
 
# 31577 "oggenc.c" 3 4
((void *)0)
# 31577 "oggenc.c"
    ,
 
# 31578 "oggenc.c" 3 4
((void *)0)
# 31578 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u3__long[] = {
  7,11,14,13,14,12,12,12,12, 2, 5, 8, 9, 8, 9,11,
 17, 4, 3, 6, 5, 7, 9,15,14, 6, 6, 7, 7, 7, 8,14,
 17, 8, 5, 7, 4, 5, 7,15,13, 7, 6, 7, 5, 5, 6,14,
 10, 8, 8, 7, 7, 5, 4, 9,10,12,15,14,16,10, 6, 9,
};

static static_codebook _huff_book__44u3__long = {
 2, 64,
 _huff_lengthlist__44u3__long,
 0, 0, 0, 0, 0,
 
# 31593 "oggenc.c" 3 4
((void *)0)
# 31593 "oggenc.c"
    ,
 
# 31594 "oggenc.c" 3 4
((void *)0)
# 31594 "oggenc.c"
    ,
 
# 31595 "oggenc.c" 3 4
((void *)0)
# 31595 "oggenc.c"
    ,
 
# 31596 "oggenc.c" 3 4
((void *)0)
# 31596 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u3__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 8, 5, 8, 8, 8,11,11, 8,
 10,11, 5, 8, 8, 8,11,10, 8,11,11, 4, 8, 8, 8,11,
 11, 8,11,11, 8,11,11,11,13,14,11,13,14, 7,11,11,
 10,13,11,11,13,14, 4, 8, 8, 8,11,11, 8,11,11, 8,
 11,11,11,14,14,10,12,14, 8,11,11,11,14,13,11,14,
 13,
};

static float _vq_quantthresh__44u3__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u3__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u3__p1_0 = {
 _vq_quantthresh__44u3__p1_0,
 _vq_quantmap__44u3__p1_0,
 3,
 3
};

static static_codebook _44u3__p1_0 = {
 4, 81,
 _vq_lengthlist__44u3__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u3__p1_0,
 
# 31635 "oggenc.c" 3 4
((void *)0)
# 31635 "oggenc.c"
    ,
 &_vq_auxt__44u3__p1_0,
 
# 31637 "oggenc.c" 3 4
((void *)0)
# 31637 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u3__p2_0[] = {
  3, 4, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 8, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 8, 5, 6, 6, 6, 8,
  7, 6, 8, 8, 6, 8, 8, 8, 8, 9, 8, 9, 9, 6, 8, 7,
  7, 9, 8, 8, 9, 9, 5, 6, 6, 6, 8, 8, 6, 8, 8, 6,
  8, 8, 8, 9, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 8, 9,
  8,
};

static float _vq_quantthresh__44u3__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u3__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u3__p2_0 = {
 _vq_quantthresh__44u3__p2_0,
 _vq_quantmap__44u3__p2_0,
 3,
 3
};

static static_codebook _44u3__p2_0 = {
 4, 81,
 _vq_lengthlist__44u3__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u3__p2_0,
 
# 31676 "oggenc.c" 3 4
((void *)0)
# 31676 "oggenc.c"
    ,
 &_vq_auxt__44u3__p2_0,
 
# 31678 "oggenc.c" 3 4
((void *)0)
# 31678 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u3__p3_0[] = {
  2, 4, 4, 8, 8, 5, 7, 7, 9, 9, 5, 7, 7, 9, 9, 8,
 10, 9,12,12, 8, 9,10,12,12, 5, 7, 7,10,10, 7, 9,
  9,11,11, 7, 8, 9,10,11,10,11,10,14,13, 9,10,11,
 13,13, 5, 7, 7,10,10, 7, 9, 8,11,10, 7, 9, 9,11,
 11, 9,10,10,13,12,10,10,11,13,14, 8,10,10,14,13,
 10,11,11,15,13, 9,11,11,14,13,13,14,13,17,15,12,
 13,13,17,14, 8,10,10,14,14, 9,11,11,14,15,10,11,
 12,14,16,12,13,13,14,17,13,13,14,14,17, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,11,10,11,11,15,
 14,10,11,11,15,14, 7, 9, 9,12,12, 9,11,11,13,13,
  9,11,11,13,13,11,12,12,15,14,11,12,12,15,16, 7,
  9, 9,12,11, 8,11,10,13,12, 9,11,11,12,13,11,12,
 11,16,14,11,12,13,15,16,10,12,12,17,15,11,12,13,
 16,15,11,12,12,16,16,15,15,15,16,16,13,14,15, 0,
 17, 9,11,11,15,15,10,12,11,16,15,11,12,12,15,17,
 13,15,13,16,15,13,15,14, 0,18, 5, 7, 7,10,10, 7,
  9, 9,12,11, 7, 9, 9,11,11,10,11,11,14,14,10,11,
 11,14,15, 7, 9, 9,12,11, 9,11,11,13,12, 8,10,11,
 11,12,11,12,12,16,15,11,11,12,13,14, 7, 9, 9,12,
 12, 9,11,11,13,13, 9,11,11,13,13,11,12,12,16,15,
 12,12,12,15,15, 9,11,11,17,15,11,12,12,17,16,10,
 11,12,15,15,13,14,15,18,17,13,13,14,15,15, 9,12,
 12,15,14,11,13,12,16,16,11,12,12,15,15,13,15,14,
  0, 0,14,15,14,16,18, 8,10,10,15,15,10,12,12,16,
 14,10,11,11,16,16,15,16,16,18,16,13,15,14,17,18,
  9,11,11,16,15,11,12,13,17,17,11,13,13,16,15,15,
 16,16,18,18,14,16,15,18,17, 9,11,11,16,16,10,13,
 12,16,16,11,12,12,16,16,14,16,16,17, 0,14,15,15,
 18,16,12,14,14, 0, 0,14,15,16, 0, 0,14,15,15, 0,
  0,17,17,16, 0, 0,15,16,18,17, 0,11,14,14,18, 0,
 12,15,13, 0,18,13,15,14,18, 0,15,16,15, 0,18,15,
 18,17, 0,18, 8,10,10,15,15,10,12,11,15,15,10,11,
 12,15,15,13,14,15,17, 0,14,15,16,17, 0, 9,11,11,
 15,15,11,12,12,17,15,10,12,13,16,15,13,15,15,18,
 18,15,16,17,18,18, 9,12,11,16,16,11,13,13,16,16,
 11,13,13,18,15,14,15,15,18, 0,16,16,17, 0,17,12,
 13,13,18,18,13,14,14,17,18,13,14,15,18,17,17,18,
 18, 0,18,16,16,18,16, 0,12,15,13,18,18,13,14,15,
 18,18,13,16,14,17,18,15,17,16, 0,18,17, 0,17, 0,
  0,
};

static float _vq_quantthresh__44u3__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u3__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u3__p3_0 = {
 _vq_quantthresh__44u3__p3_0,
 _vq_quantmap__44u3__p3_0,
 5,
 5
};

static static_codebook _44u3__p3_0 = {
 4, 625,
 _vq_lengthlist__44u3__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u3__p3_0,
 
# 31753 "oggenc.c" 3 4
((void *)0)
# 31753 "oggenc.c"
    ,
 &_vq_auxt__44u3__p3_0,
 
# 31755 "oggenc.c" 3 4
((void *)0)
# 31755 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u3__p4_0[] = {
  4, 6, 6, 9, 9, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 9,
 10, 9,12,11, 9, 9,10,11,12, 6, 7, 7, 9, 9, 7, 7,
  7,10,10, 6, 7, 7, 9,10,10,10,10,12,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 7, 7, 7,10, 9, 7, 7, 7,10,
 10, 9,10, 9,12,11,10,10,10,12,12, 9,10,10,12,12,
 10,10,10,13,12, 9,10,10,12,12,12,12,12,14,14,12,
 12,12,13,14, 9,10,10,12,12, 9,10,10,12,12,10,10,
 10,12,13,11,12,12,14,13,12,12,12,14,14, 6, 7, 7,
 10, 9, 7, 8, 7,10,10, 7, 7, 7,10,10,10,10,10,12,
 12,10,10,10,12,12, 7, 8, 8,10,10, 8, 8, 8,10,10,
  7, 8, 8,10,10,10,10,11,11,13,10,10,11,12,13, 6,
  7, 7,10,10, 7, 8, 7,10,10, 8, 8, 8,10,10,10,11,
 10,13,11,10,10,10,12,12,10,10,10,13,12,10,10,10,
 12,13,10,10,10,13,12,12,11,13,12,14,12,12,13,14,
 14, 9,10,10,12,13, 9,10,10,12,12,10,10,11,12,13,
 12,12,11,14,12,12,12,13,14,14, 6, 7, 7, 9, 9, 7,
  7, 7,10,10, 7, 7, 8,10,10,10,10,10,12,12,10,10,
 10,12,12, 6, 7, 7,10,10, 8, 8, 8,10,10, 7, 7, 8,
 10,10,10,10,10,12,12,10,10,11,11,13, 7, 8, 8,10,
 10, 7, 8, 8,10,10, 8, 8, 8,10,10,10,10,10,12,12,
 10,11,10,13,11, 9,10,10,13,12,10,11,10,13,12, 9,
 10,10,12,13,12,13,12,14,14,12,11,12,12,14,10,10,
 10,12,13,10,10,11,12,13,10,10,10,12,12,12,13,12,
 14,14,12,12,11,14,12, 9,10, 9,12,12,10,10,10,13,
 13, 9,10,10,13,13,12,13,13,15,14,12,12,13,14,14,
  9,10,10,13,13,10,10,10,12,13,10,10,10,13,12,13,
 12,13,14,15,12,13,13,15,14, 9,10,10,13,12,10,10,
 10,13,12,10,10,10,12,13,12,13,12,14,14,13,12,12,
 14,14,12,12,12,15,14,12,11,12,14,14,12,13,12,14,
 14,14,12,14,12,16,14,14,14,16,16,11,12,12,14,14,
 11,12,11,15,13,12,12,12,14,15,13,14,12,16,13,14,
 14,15,16,16, 9,10,10,12,12, 9,10,10,13,12, 9,10,
 10,13,13,12,12,12,14,14,12,13,13,14,15, 9,10,10,
 13,12,10,11,10,13,12,10,10,10,12,13,12,13,12,14,
 14,12,12,13,14,15, 9,10,10,13,13,10,10,10,12,13,
 10,10,10,13,13,12,13,13,14,15,13,13,12,14,14,11,
 12,12,14,14,12,13,12,15,14,11,11,12,14,15,14,14,
 14,16,16,14,12,14,13,16,12,12,12,14,15,12,12,13,
 14,15,12,12,11,14,14,14,14,14,16,16,14,14,12,16,
 12,
};

static float _vq_quantthresh__44u3__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u3__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u3__p4_0 = {
 _vq_quantthresh__44u3__p4_0,
 _vq_quantmap__44u3__p4_0,
 5,
 5
};

static static_codebook _44u3__p4_0 = {
 4, 625,
 _vq_lengthlist__44u3__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u3__p4_0,
 
# 31830 "oggenc.c" 3 4
((void *)0)
# 31830 "oggenc.c"
    ,
 &_vq_auxt__44u3__p4_0,
 
# 31832 "oggenc.c" 3 4
((void *)0)
# 31832 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u3__p5_0[] = {
  2, 4, 4, 6, 6, 7, 7, 9, 9, 4, 5, 4, 7, 6, 8, 8,
  9, 9, 4, 4, 4, 6, 7, 8, 8, 9, 9, 6, 7, 6, 8, 8,
  9, 9,10,10, 6, 6, 7, 8, 8, 9, 9,10,10, 8, 8, 8,
  9, 9,10,10,11,11, 8, 8, 8, 9, 9,10,10,11,11, 9,
  9, 9,10,10,11,11,12,12, 9, 9,10,10,10,11,11,12,
 12,
};

static float _vq_quantthresh__44u3__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u3__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u3__p5_0 = {
 _vq_quantthresh__44u3__p5_0,
 _vq_quantmap__44u3__p5_0,
 9,
 9
};

static static_codebook _44u3__p5_0 = {
 2, 81,
 _vq_lengthlist__44u3__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u3__p5_0,
 
# 31878 "oggenc.c" 3 4
((void *)0)
# 31878 "oggenc.c"
    ,
 &_vq_auxt__44u3__p5_0,
 
# 31880 "oggenc.c" 3 4
((void *)0)
# 31880 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u3__p6_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9,10,10,11,13,14, 4, 6, 5,
  8, 8, 9, 9,10,10,11,11,14,14, 4, 5, 6, 8, 8, 9,
  9,10,10,11,11,14,14, 7, 8, 8, 9, 9,10,10,11,11,
 12,12,15,15, 7, 8, 8, 9, 9,10,10,11,11,12,12,14,
 15, 8, 9, 9,10,10,11,11,12,12,13,12,16,16, 8, 9,
  9,10,10,11,11,12,12,12,12,16,16,10,11,10,11,11,
 12,12,13,13,13,13,17,16,10,11,11,11,11,12,12,12,
 12,13,13,17,17,11,11,12,12,12,13,13,13,14,14,14,
 16,17,11,12,11,12,12,13,13,14,14,14,14,19,17,14,
 14,14,16,15,16,16,16,17,17,17,20,19,14,15,15,15,
 15,15,16,16,17,17,17,20,19,
};

static float _vq_quantthresh__44u3__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u3__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u3__p6_0 = {
 _vq_quantthresh__44u3__p6_0,
 _vq_quantmap__44u3__p6_0,
 13,
 13
};

static static_codebook _44u3__p6_0 = {
 2, 169,
 _vq_lengthlist__44u3__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u3__p6_0,
 
# 31936 "oggenc.c" 3 4
((void *)0)
# 31936 "oggenc.c"
    ,
 &_vq_auxt__44u3__p6_0,
 
# 31938 "oggenc.c" 3 4
((void *)0)
# 31938 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u3__p6_1[] = {
  2, 4, 4, 5, 5, 4, 5, 5, 6, 5, 4, 5, 5, 5, 6, 5,
  6, 5, 6, 6, 5, 5, 6, 6, 6,
};

static float _vq_quantthresh__44u3__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u3__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u3__p6_1 = {
 _vq_quantthresh__44u3__p6_1,
 _vq_quantmap__44u3__p6_1,
 5,
 5
};

static static_codebook _44u3__p6_1 = {
 2, 25,
 _vq_lengthlist__44u3__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u3__p6_1,
 
# 31975 "oggenc.c" 3 4
((void *)0)
# 31975 "oggenc.c"
    ,
 &_vq_auxt__44u3__p6_1,
 
# 31977 "oggenc.c" 3 4
((void *)0)
# 31977 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p7_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u3__p7_0[] = {
  1, 4, 4, 9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9,
  9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8,
};

static float _vq_quantthresh__44u3__p7_0[] = {
 -892.5, -637.5, -382.5, -127.5, 127.5, 382.5, 637.5, 892.5,
};

static long _vq_quantmap__44u3__p7_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u3__p7_0 = {
 _vq_quantthresh__44u3__p7_0,
 _vq_quantmap__44u3__p7_0,
 9,
 9
};

static static_codebook _44u3__p7_0 = {
 2, 81,
 _vq_lengthlist__44u3__p7_0,
 1, -515907584, 1627381760, 4, 0,
 _vq_quantlist__44u3__p7_0,
 
# 32023 "oggenc.c" 3 4
((void *)0)
# 32023 "oggenc.c"
    ,
 &_vq_auxt__44u3__p7_0,
 
# 32025 "oggenc.c" 3 4
((void *)0)
# 32025 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p7_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u3__p7_1[] = {
  1, 4, 4, 6, 5, 7, 7, 9, 8,10,10,11,11,12,13, 4,
  7, 6, 7, 7, 9, 9,10,10,11,11,14,13,14,13, 4, 6,
  7, 7, 8, 9, 9,10,10,12,12,13,13,13,13, 6, 8, 8,
 10, 9,11,11,12,12,13,13,14,14,15,14, 6, 8, 8, 9,
  9,11,11,12,12,14,14,14,15,15,15, 8, 9, 9,11,10,
 13,12,14,14,14,14,15,16,15,15, 8, 9, 9,11,11,12,
 12,14,14,15,14,15,15,14,17, 9,10,10,13,12,14,14,
 15,14,14,17,15,15,16,15, 9,11,11,12,13,14,14,15,
 15,15,16,15,17,16,17,11,12,12,14,14,15,14,16,16,
 16,15,15,17,16,16,11,12,13,14,15,15,15,15,15,16,
 16,17,17,16,17,12,13,13,15,14,15,15,15,15,16,16,
 16,17,17,17,13,12,14,14,15,15,15,15,16,17,17,15,
 17,17,17,12,14,14,16,15,17,16,17,16,17,16,17,17,
 17,17,14,13,14,15,16,17,17,17,15,17,17,17,16,17,
 16,
};

static float _vq_quantthresh__44u3__p7_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__44u3__p7_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u3__p7_1 = {
 _vq_quantthresh__44u3__p7_1,
 _vq_quantmap__44u3__p7_1,
 15,
 15
};

static static_codebook _44u3__p7_1 = {
 2, 225,
 _vq_lengthlist__44u3__p7_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__44u3__p7_1,
 
# 32087 "oggenc.c" 3 4
((void *)0)
# 32087 "oggenc.c"
    ,
 &_vq_auxt__44u3__p7_1,
 
# 32089 "oggenc.c" 3 4
((void *)0)
# 32089 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u3__p7_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u3__p7_2[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9,10, 9, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9,10,10,10, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9,10,10,10,10, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9,10,10,10,10,10,10, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9,10,10,10,10,10,10, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10, 9, 9, 9, 9, 9,
  9, 9,10, 9,10,10,10,10,10,10,10,10, 9, 9, 9, 9,
  9, 9, 9,10,10,10,10,10,10,10,10,10,10, 9, 9, 9,
  9, 9,10,10,10,10,10,10,10,10,10,10,10,10, 9, 9,
  9,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 9,
  9,10,10, 9,10, 9,10,10,10,10,10,10,10,10,10,10,
  9,10, 9,10, 9,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44u3__p7_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u3__p7_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u3__p7_2 = {
 _vq_quantthresh__44u3__p7_2,
 _vq_quantmap__44u3__p7_2,
 17,
 17
};

static static_codebook _44u3__p7_2 = {
 2, 289,
 _vq_lengthlist__44u3__p7_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u3__p7_2,
 
# 32158 "oggenc.c" 3 4
((void *)0)
# 32158 "oggenc.c"
    ,
 &_vq_auxt__44u3__p7_2,
 
# 32160 "oggenc.c" 3 4
((void *)0)
# 32160 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u3__short[] = {
 17,17,17,17,17,17,16,16,16,12,11,13,11,12,11,15,
 16, 9, 4, 8, 5, 7, 9,15,16,14, 9,12,10,10,12,16,
 16,11, 4, 9, 3, 4, 8,16,16,12, 6,10, 3, 4, 7,16,
 16,12, 6,11, 3, 3, 4,12,16,16, 7,13, 5, 5, 6,13,
};

static static_codebook _huff_book__44u3__short = {
 2, 64,
 _huff_lengthlist__44u3__short,
 0, 0, 0, 0, 0,
 
# 32175 "oggenc.c" 3 4
((void *)0)
# 32175 "oggenc.c"
    ,
 
# 32176 "oggenc.c" 3 4
((void *)0)
# 32176 "oggenc.c"
    ,
 
# 32177 "oggenc.c" 3 4
((void *)0)
# 32177 "oggenc.c"
    ,
 
# 32178 "oggenc.c" 3 4
((void *)0)
# 32178 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u4__long[] = {
  3, 7,11,11,12,11,11,12, 5, 3, 5, 7, 8, 8, 9,11,
  9, 4, 4, 6, 6, 7, 9,15,10, 6, 6, 7, 7, 7, 8,14,
 12, 7, 5, 6, 4, 5, 7,15,10, 7, 6, 7, 5, 5, 6,13,
  9, 8, 8, 7, 7, 5, 4, 8,10,12,14,13,14,10, 5, 7,
};

static static_codebook _huff_book__44u4__long = {
 2, 64,
 _huff_lengthlist__44u4__long,
 0, 0, 0, 0, 0,
 
# 32193 "oggenc.c" 3 4
((void *)0)
# 32193 "oggenc.c"
    ,
 
# 32194 "oggenc.c" 3 4
((void *)0)
# 32194 "oggenc.c"
    ,
 
# 32195 "oggenc.c" 3 4
((void *)0)
# 32195 "oggenc.c"
    ,
 
# 32196 "oggenc.c" 3 4
((void *)0)
# 32196 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u4__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 8, 5, 8, 8, 8,11,11, 8,
 10,11, 5, 8, 8, 8,11,10, 8,11,11, 4, 8, 8, 8,11,
 11, 8,11,11, 8,11,11,11,13,14,11,14,14, 7,11,10,
 10,14,12,11,14,14, 4, 8, 8, 8,11,11, 8,11,11, 8,
 11,11,11,14,14,10,12,14, 8,11,11,11,14,14,11,14,
 13,
};

static float _vq_quantthresh__44u4__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u4__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u4__p1_0 = {
 _vq_quantthresh__44u4__p1_0,
 _vq_quantmap__44u4__p1_0,
 3,
 3
};

static static_codebook _44u4__p1_0 = {
 4, 81,
 _vq_lengthlist__44u4__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u4__p1_0,
 
# 32235 "oggenc.c" 3 4
((void *)0)
# 32235 "oggenc.c"
    ,
 &_vq_auxt__44u4__p1_0,
 
# 32237 "oggenc.c" 3 4
((void *)0)
# 32237 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u4__p2_0[] = {
  2, 5, 5, 5, 6, 6, 5, 6, 6, 5, 6, 6, 7, 8, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 7, 8, 8, 5, 6, 6, 7, 8,
  8, 6, 8, 8, 7, 8, 8, 8, 9,10, 8,10,10, 6, 8, 8,
  7, 9, 8, 8, 9,10, 5, 6, 6, 6, 8, 8, 7, 8, 8, 6,
  8, 8, 8,10, 9, 8, 8, 9, 6, 8, 8, 8,10,10, 8,10,
  9,
};

static float _vq_quantthresh__44u4__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u4__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u4__p2_0 = {
 _vq_quantthresh__44u4__p2_0,
 _vq_quantmap__44u4__p2_0,
 3,
 3
};

static static_codebook _44u4__p2_0 = {
 4, 81,
 _vq_lengthlist__44u4__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u4__p2_0,
 
# 32276 "oggenc.c" 3 4
((void *)0)
# 32276 "oggenc.c"
    ,
 &_vq_auxt__44u4__p2_0,
 
# 32278 "oggenc.c" 3 4
((void *)0)
# 32278 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u4__p3_0[] = {
  2, 4, 4, 7, 7, 5, 7, 7, 9, 9, 5, 7, 7, 9, 9, 8,
 10, 9,12,12, 8, 9, 9,12,12, 5, 7, 7,10, 9, 7, 9,
  9,11,11, 7, 8, 9,10,11,10,11,11,13,13, 9,10,11,
 13,13, 5, 7, 7, 9,10, 7, 9, 9,11,11, 7, 9, 9,11,
 11, 9,11,10,13,12,10,11,11,13,13, 8,10,10,13,13,
 10,11,11,15,13, 9,11,11,14,13,13,15,13,16,15,12,
 13,13,15,15, 8,10,10,13,14, 9,11,11,14,14,10,11,
 12,14,16,12,13,13,14,16,13,14,14,15,17, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,11,10,11,11,15,
 14,10,11,11,14,14, 7, 9, 9,12,12, 9,11,11,13,13,
  9,11,11,13,13,11,12,13,15,15,11,13,13,16,15, 7,
  9, 9,11,11, 9,11,10,13,12, 9,11,12,13,13,11,13,
 12,16,14,11,13,13,15,16,10,12,12,18,15,11,12,13,
 16,15,11,13,13,17,16,15,15,15,17,17,14,15,16,18,
 19, 9,11,11,15,15,10,12,11,15,16,11,13,13,15,16,
 13,15,13,18,15,14,15,15,17,19, 5, 7, 7,10,10, 7,
  9, 9,12,11, 7, 9, 9,11,12,10,12,11,14,14,10,11,
 12,14,15, 7, 9, 9,11,11, 9,11,11,13,12, 9,10,11,
 12,13,11,13,13,16,17,11,11,13,14,15, 7, 9, 9,12,
 12, 9,11,11,13,13, 9,11,11,13,13,11,13,12,15,16,
 11,13,13,16,15, 9,11,11,16,15,11,13,12,16,15,10,
 12,12,16,15,14,15,16,19,17,13,14,15,15,16,10,11,
 12,15,15,11,13,13,16,16,11,13,12,16,17,14,15,15,
 18,17,14,16,14,16,19, 7,10,10,15,14,10,12,12,16,
 15,10,11,11,16,15,14,16,16,19,18,13,15,14,17,17,
  9,11,11,17,16,11,13,14,18,17,11,13,13,16,16,15,
 16,17,19, 0,14,15,18,16,19, 9,11,11,16,15,11,13,
 12,18,16,11,13,13,17,16,14,16,16,17,19,15,16,15,
 18, 0,12,14,15,18,19,13,15,16,19,17,14,16,15,18,
  0,17,16,19, 0,18,16,17,18, 0, 0,11,13,14,18,19,
 13,15,13,19,19,14,15,15,17,17,15,17,15,19,17,16,
 18,18,19, 0, 8,10,10,14,14,10,12,11,15,15,10,11,
 12,15,17,13,15,15,17,16,14,15,15,18, 0, 9,11,11,
 15,15,11,13,13,18,16,10,12,13,16,17,14,15,16,17,
 18,14,15,17,19,19, 9,12,12,15,16,11,13,13,16,17,
 11,14,13,19,16,14,16,15,18,19,15,16,18,19,18,12,
 14,14,19,18,13,15,17,18,17,13,14,15,18, 0,16, 0,
  0,18,18,16,15, 0,17,19,12,15,14,17, 0,13,15,16,
 19,18,13,16,15, 0,19,16,18,16,19,18,17,19,16, 0,
 19,
};

static float _vq_quantthresh__44u4__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u4__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u4__p3_0 = {
 _vq_quantthresh__44u4__p3_0,
 _vq_quantmap__44u4__p3_0,
 5,
 5
};

static static_codebook _44u4__p3_0 = {
 4, 625,
 _vq_lengthlist__44u4__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u4__p3_0,
 
# 32353 "oggenc.c" 3 4
((void *)0)
# 32353 "oggenc.c"
    ,
 &_vq_auxt__44u4__p3_0,
 
# 32355 "oggenc.c" 3 4
((void *)0)
# 32355 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u4__p4_0[] = {
  4, 5, 5, 8, 8, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 9,
  9, 9,11,11, 8, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 6, 7, 8, 9,10, 9,10,10,11,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 7, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,12,11, 9,10,10,12,11, 9, 9, 9,12,11,
  9,10,10,12,12, 9,10,10,12,12,11,12,12,13,14,11,
 11,12,13,14, 9, 9, 9,11,12, 9,10,10,12,12, 9,10,
 10,12,12,11,12,11,14,13,11,12,12,13,13, 5, 7, 7,
  9, 9, 7, 8, 8,10,10, 7, 7, 8,10,10, 9,10,10,12,
 12, 9,10,10,12,12, 7, 8, 8,10,10, 8, 8, 9,10,11,
  8, 9, 9,11,11,10,10,11,11,13,10,10,11,12,13, 6,
  7, 8,10,10, 7, 9, 8,11,10, 8, 8, 9,10,11,10,11,
 10,13,11,10,11,11,13,12, 9,10,10,12,12,10,10,11,
 12,13,10,11,11,13,13,12,11,13,12,15,12,13,13,14,
 14, 9,10,10,12,12, 9,11,10,13,12,10,11,11,13,13,
 11,13,11,14,12,12,13,13,14,15, 5, 7, 7, 9, 9, 7,
  8, 7,10,10, 7, 8, 8,10,10, 9,10,10,12,12, 9,10,
 10,12,12, 6, 8, 7,10,10, 8, 9, 8,11,10, 7, 8, 9,
 10,11,10,11,11,12,13,10,10,11,11,13, 7, 8, 8,10,
 10, 8, 9, 9,10,11, 8, 9, 8,11,10,10,11,11,13,12,
 10,11,10,13,11, 9,10,10,13,12,10,11,11,13,13, 9,
 10,10,12,13,12,13,13,15,14,11,11,13,12,14, 9,10,
 10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,
 14,14,12,13,11,15,12, 8, 9, 9,12,12, 9,10,10,13,
 12, 9,10,10,12,12,12,13,12,14,14,11,12,12,14,13,
  9,10,10,12,12,10,10,11,13,13,10,11,11,13,12,12,
 13,13,14,15,12,13,13,15,14, 9,10,10,12,12, 9,11,
 10,13,12,10,10,11,12,13,12,13,12,15,14,12,13,13,
 14,14,11,12,12,14,13,11,11,12,13,14,12,13,13,15,
 14,13,12,14,12,16,14,15,14,16,16,11,12,12,14,14,
 11,12,11,15,13,12,13,13,14,15,13,14,12,16,13,14,
 14,15,16,16, 8, 9, 9,12,12, 9,10,10,12,12, 9,10,
 10,12,13,11,12,12,14,13,12,12,13,14,14, 9,10,10,
 12,12,10,11,11,13,12,10,10,11,12,13,12,13,13,14,
 14,12,12,13,14,15, 9,10,10,12,13,10,11,11,12,13,
 10,11,10,13,13,12,13,13,14,15,12,13,13,15,14,11,
 12,12,14,14,12,13,13,15,14,11,11,12,14,15,14,14,
 14,17,16,13,12,14,13,16,11,12,12,13,15,12,13,13,
 14,15,11,12,11,14,14,14,15,14,15,17,13,14,12,16,
 12,
};

static float _vq_quantthresh__44u4__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u4__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u4__p4_0 = {
 _vq_quantthresh__44u4__p4_0,
 _vq_quantmap__44u4__p4_0,
 5,
 5
};

static static_codebook _44u4__p4_0 = {
 4, 625,
 _vq_lengthlist__44u4__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u4__p4_0,
 
# 32430 "oggenc.c" 3 4
((void *)0)
# 32430 "oggenc.c"
    ,
 &_vq_auxt__44u4__p4_0,
 
# 32432 "oggenc.c" 3 4
((void *)0)
# 32432 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u4__p5_0[] = {
  2, 4, 4, 6, 6, 7, 7, 9, 9, 4, 5, 4, 7, 6, 8, 7,
 10, 9, 4, 4, 5, 6, 7, 7, 8, 9, 9, 6, 7, 6, 8, 8,
  8, 8,10,10, 6, 6, 7, 8, 8, 8, 9,10,10, 7, 8, 7,
  9, 8,10,10,11,11, 7, 7, 8, 8, 9,10,10,11,11, 9,
 10, 9,10,10,11,11,12,12, 9, 9,10,10,10,11,11,12,
 12,
};

static float _vq_quantthresh__44u4__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u4__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u4__p5_0 = {
 _vq_quantthresh__44u4__p5_0,
 _vq_quantmap__44u4__p5_0,
 9,
 9
};

static static_codebook _44u4__p5_0 = {
 2, 81,
 _vq_lengthlist__44u4__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u4__p5_0,
 
# 32478 "oggenc.c" 3 4
((void *)0)
# 32478 "oggenc.c"
    ,
 &_vq_auxt__44u4__p5_0,
 
# 32480 "oggenc.c" 3 4
((void *)0)
# 32480 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u4__p6_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9,10,10,11,13,13, 4, 6, 5,
  8, 8, 9, 9,10,10,11,11,14,14, 4, 5, 6, 8, 8, 9,
  9,10,10,11,11,14,14, 7, 8, 8, 9, 9,10,10,11,11,
 12,12,15,15, 7, 8, 8, 9, 9,10,10,11,11,12,12,15,
 15, 8, 9, 9,10,10,11,11,12,12,13,13,16,16, 8, 9,
  9,10,10,11,11,12,12,13,13,16,16,10,10,10,11,11,
 12,12,13,13,14,13,16,16,10,10,11,11,12,12,12,13,
 13,13,14,16,17,11,12,11,12,12,13,13,13,14,14,14,
 17,16,11,11,12,12,12,13,13,14,14,15,14,17,17,14,
 14,14,15,15,16,16,17,17,17,19,19, 0,14,15,15,15,
 15,16,16,16,17,17,19,20,20,
};

static float _vq_quantthresh__44u4__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u4__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u4__p6_0 = {
 _vq_quantthresh__44u4__p6_0,
 _vq_quantmap__44u4__p6_0,
 13,
 13
};

static static_codebook _44u4__p6_0 = {
 2, 169,
 _vq_lengthlist__44u4__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u4__p6_0,
 
# 32536 "oggenc.c" 3 4
((void *)0)
# 32536 "oggenc.c"
    ,
 &_vq_auxt__44u4__p6_0,
 
# 32538 "oggenc.c" 3 4
((void *)0)
# 32538 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u4__p6_1[] = {
  2, 4, 4, 5, 5, 4, 5, 5, 6, 5, 4, 5, 5, 5, 6, 5,
  6, 5, 6, 6, 5, 5, 6, 6, 6,
};

static float _vq_quantthresh__44u4__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u4__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u4__p6_1 = {
 _vq_quantthresh__44u4__p6_1,
 _vq_quantmap__44u4__p6_1,
 5,
 5
};

static static_codebook _44u4__p6_1 = {
 2, 25,
 _vq_lengthlist__44u4__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u4__p6_1,
 
# 32575 "oggenc.c" 3 4
((void *)0)
# 32575 "oggenc.c"
    ,
 &_vq_auxt__44u4__p6_1,
 
# 32577 "oggenc.c" 3 4
((void *)0)
# 32577 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u4__p7_0[] = {
  1, 3, 3,11,11,11,11,11,11,11,11,11,11, 4,10, 9,
 11,11,11,11,11,11,11,11,11,11, 4,10,10,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44u4__p7_0[] = {
 -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5, 382.5,
 637.5, 892.5, 1147.5, 1402.5,
};

static long _vq_quantmap__44u4__p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u4__p7_0 = {
 _vq_quantthresh__44u4__p7_0,
 _vq_quantmap__44u4__p7_0,
 13,
 13
};

static static_codebook _44u4__p7_0 = {
 2, 169,
 _vq_lengthlist__44u4__p7_0,
 1, -514332672, 1627381760, 4, 0,
 _vq_quantlist__44u4__p7_0,
 
# 32633 "oggenc.c" 3 4
((void *)0)
# 32633 "oggenc.c"
    ,
 &_vq_auxt__44u4__p7_0,
 
# 32635 "oggenc.c" 3 4
((void *)0)
# 32635 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p7_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u4__p7_1[] = {
  1, 4, 4, 6, 6, 7, 7, 9, 8,10,10,11,11,12,12, 4,
  7, 6, 8, 7, 9, 9,10,10,11,10,12,11,12,12, 4, 6,
  6, 7, 8, 9, 9,10,10,11,11,12,12,13,13, 6, 8, 8,
 10, 9,11,10,11,11,12,12,14,13,13,13, 6, 8, 8, 9,
  9,11,11,12,12,12,12,13,14,13,14, 8, 9, 9,11,10,
 12,12,13,12,13,14,14,14,14,14, 8, 9, 9,10,11,12,
 11,12,13,13,14,14,13,14,14, 9,10,10,12,12,14,13,
 14,14,15,15,16,15,15,15, 9,10,10,11,12,13,13,13,
 14,15,15,18,16,17,15,10,12,12,13,13,15,14,15,14,
 16,16,16,15,16,15,10,11,11,13,13,14,14,17,16,15,
 16,18,16,15,16,11,12,13,14,13,15,14,15,16,17,15,
 16,16,15,16,11,12,13,14,15,14,16,15,15,16,15,15,
 17,17,17,12,13,13,14,14,14,15,16,14,15,15,16,16,
 16,16,12,13,13,13,14,15,15,15,14,16,16,16,16,16,
 17,
};

static float _vq_quantthresh__44u4__p7_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__44u4__p7_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u4__p7_1 = {
 _vq_quantthresh__44u4__p7_1,
 _vq_quantmap__44u4__p7_1,
 15,
 15
};

static static_codebook _44u4__p7_1 = {
 2, 225,
 _vq_lengthlist__44u4__p7_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__44u4__p7_1,
 
# 32697 "oggenc.c" 3 4
((void *)0)
# 32697 "oggenc.c"
    ,
 &_vq_auxt__44u4__p7_1,
 
# 32699 "oggenc.c" 3 4
((void *)0)
# 32699 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u4__p7_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u4__p7_2[] = {
  3, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 5, 6, 6, 7, 7, 8, 7, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9,10,10, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9,10,10, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9,10,10,10,10,10,10, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9,10,10,10,10,10,10, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10,10,10,10, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10, 9, 9, 9, 9, 9,
  9, 9,10, 9, 9,10,10,10,10,10,10,10, 9, 9, 9, 9,
  9, 9,10, 9,10,10,10,10,10,10,10,10,10, 9, 9, 9,
  9, 9,10,10,10,10,10,10,10,10,10,10,10,10, 9, 9,
  9, 9, 9,10, 9,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  9, 9, 9,10, 9,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__44u4__p7_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u4__p7_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u4__p7_2 = {
 _vq_quantthresh__44u4__p7_2,
 _vq_quantmap__44u4__p7_2,
 17,
 17
};

static static_codebook _44u4__p7_2 = {
 2, 289,
 _vq_lengthlist__44u4__p7_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u4__p7_2,
 
# 32768 "oggenc.c" 3 4
((void *)0)
# 32768 "oggenc.c"
    ,
 &_vq_auxt__44u4__p7_2,
 
# 32770 "oggenc.c" 3 4
((void *)0)
# 32770 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u4__short[] = {
  3, 9,14,12,17,13,13,13, 4, 7, 8, 9,12,10,11,12,
  6, 5, 4, 7, 6, 7, 9,14, 8, 8, 7, 9, 8, 9,10,13,
  9, 8, 5, 7, 3, 5, 8,15, 9, 9, 6, 8, 4, 5, 7,16,
 11,10, 6, 9, 4, 3, 6,15,17,16, 8,11, 5, 5, 7,16,
};

static static_codebook _huff_book__44u4__short = {
 2, 64,
 _huff_lengthlist__44u4__short,
 0, 0, 0, 0, 0,
 
# 32785 "oggenc.c" 3 4
((void *)0)
# 32785 "oggenc.c"
    ,
 
# 32786 "oggenc.c" 3 4
((void *)0)
# 32786 "oggenc.c"
    ,
 
# 32787 "oggenc.c" 3 4
((void *)0)
# 32787 "oggenc.c"
    ,
 
# 32788 "oggenc.c" 3 4
((void *)0)
# 32788 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u5__long[] = {
  3, 8,13,12,14,13,16,11,12,13, 5, 4, 5, 6, 8, 9,
 10, 9,12,12,10, 5, 4, 6, 6, 8, 9,10,14,16,10, 6,
  6, 6, 6, 7, 9, 8,12,13,13, 7, 5, 6, 4, 6, 6, 7,
 11,16,10, 7, 7, 7, 6, 6, 7, 7,11,14,14, 9, 8, 8,
  5, 6, 6, 7,11,16, 9, 8, 8, 8, 6, 6, 6, 4, 7,12,
 11,10,12,11,10, 9,10, 5, 6,10,10,13,15,15,15,15,
 14, 8, 7, 9,
};

static static_codebook _huff_book__44u5__long = {
 2, 100,
 _huff_lengthlist__44u5__long,
 0, 0, 0, 0, 0,
 
# 32806 "oggenc.c" 3 4
((void *)0)
# 32806 "oggenc.c"
    ,
 
# 32807 "oggenc.c" 3 4
((void *)0)
# 32807 "oggenc.c"
    ,
 
# 32808 "oggenc.c" 3 4
((void *)0)
# 32808 "oggenc.c"
    ,
 
# 32809 "oggenc.c" 3 4
((void *)0)
# 32809 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u5__p1_0[] = {
  1, 4, 4, 5, 8, 7, 5, 7, 7, 5, 8, 8, 8,10,10, 7,
  9,10, 5, 8, 8, 7,10, 9, 8,10,10, 4, 8, 8, 8,11,
 10, 8,10,10, 8,11,11,10,12,13,10,13,13, 7,10,10,
  9,13,11,10,13,13, 5, 8, 8, 8,10,10, 8,10,10, 7,
 10,10,10,13,13,10,11,13, 8,10,11,10,13,13,10,13,
 12,
};

static float _vq_quantthresh__44u5__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u5__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u5__p1_0 = {
 _vq_quantthresh__44u5__p1_0,
 _vq_quantmap__44u5__p1_0,
 3,
 3
};

static static_codebook _44u5__p1_0 = {
 4, 81,
 _vq_lengthlist__44u5__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u5__p1_0,
 
# 32848 "oggenc.c" 3 4
((void *)0)
# 32848 "oggenc.c"
    ,
 &_vq_auxt__44u5__p1_0,
 
# 32850 "oggenc.c" 3 4
((void *)0)
# 32850 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u5__p2_0[] = {
  3, 4, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 8, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 8, 5, 6, 6, 6, 8,
  7, 6, 8, 8, 6, 8, 8, 8, 9, 9, 8, 9, 9, 6, 7, 8,
  7, 9, 8, 8, 9, 9, 5, 6, 6, 6, 8, 7, 6, 8, 8, 6,
  8, 8, 8, 9, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 8, 9,
  9,
};

static float _vq_quantthresh__44u5__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u5__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u5__p2_0 = {
 _vq_quantthresh__44u5__p2_0,
 _vq_quantmap__44u5__p2_0,
 3,
 3
};

static static_codebook _44u5__p2_0 = {
 4, 81,
 _vq_lengthlist__44u5__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u5__p2_0,
 
# 32889 "oggenc.c" 3 4
((void *)0)
# 32889 "oggenc.c"
    ,
 &_vq_auxt__44u5__p2_0,
 
# 32891 "oggenc.c" 3 4
((void *)0)
# 32891 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u5__p3_0[] = {
  2, 4, 5, 8, 8, 5, 7, 6, 9, 9, 5, 6, 7, 9, 9, 8,
 10, 9,12,12, 8, 9,10,12,13, 5, 7, 7,10, 9, 7, 9,
  9,11,11, 7, 8, 9,10,11,10,11,11,13,14, 9,10,11,
 13,13, 5, 7, 7, 9, 9, 7, 9, 8,11,10, 7, 9, 9,11,
 11, 9,11,10,14,13,10,11,11,13,14, 8,10,10,13,13,
 10,11,11,15,14, 9,11,11,14,14,13,15,14,18,16,12,
 13,14,16,16, 8,10,10,13,13, 9,11,11,14,14,10,11,
 12,14,15,12,13,13,16,16,13,14,14,15,17, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,11,10,11,11,15,
 14,10,11,11,14,14, 7, 9, 9,12,11, 9,11,11,13,13,
  9,11,11,13,13,12,12,13,15,15,11,12,13,16,15, 6,
  9, 9,11,11, 8,11,10,13,12, 9,10,11,12,14,11,13,
 11,16,14,11,13,13,15,16,10,11,11,15,15,11,12,13,
 16,15,11,13,13,16,16,14,15,15,17,18,14,15,16,17,
 18, 9,11,11,14,15,10,12,11,15,15,11,12,13,15,16,
 13,15,13,17,15,14,15,16,18,19, 5, 7, 7,10,10, 7,
  9, 9,11,11, 7, 9, 9,11,11,10,11,11,15,14,10,11,
 11,14,15, 6, 9, 9,11,11, 9,11,10,13,13, 8,10,11,
 12,13,11,13,13,15,15,11,11,13,13,15, 7, 9, 9,11,
 12, 9,11,11,13,13, 9,11,11,13,13,11,13,12,17,16,
 11,13,12,16,15, 9,11,11,15,14,11,13,13,16,16,10,
 11,12,15,15,14,15,15,17,17,13,13,15,15,17,10,11,
 12,15,15,11,13,13,16,19,11,13,12,17,17,14,16,15,
 19,17,14,15,15,18,18, 8,10,10,14,14,10,12,11,16,
 15, 9,11,11,15,16,14,16,15,17,17,13,14,14,18,17,
  9,11,11,16,15,11,13,13,16,18,11,13,13,17,16,15,
 16,17,18, 0,15,15,16, 0,18, 9,11,11,16,15,10,13,
 12,17,15,11,13,13,16,17,14,18,15,19,18,15,16,16,
 19,18,13,15,15,19,17,13,15,15,18,18,14,15,15,19,
  0,17,18, 0,19,19,16,17,17, 0,18,12,14,13,18,17,
 13,15,13,19,18,14,15,15,19,19,16,17,15, 0,17,16,
 19,17,19,18, 8,10,10,14,14,10,11,11,15,15,10,11,
 11,16,16,13,15,15,17,16,14,15,15,18,19, 9,11,11,
 16,15,11,13,13,19,16,10,12,13,15,17,15,15,15,19,
 19,15,16,16,17, 0, 9,11,11,16,16,11,13,13,16,17,
 11,13,13,18,18,14,16,15,18,18,15,17,16,19, 0,12,
 14,14,17,18,13,16,16,18,18,13,14,15,17, 0,16,17,
 17, 0, 0,16,15, 0,19,17,12,15,14,17,18,14,15,16,
  0,18,14,16,16,18, 0,16,17,17, 0, 0,17,19,17,19,
  0,
};

static float _vq_quantthresh__44u5__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u5__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u5__p3_0 = {
 _vq_quantthresh__44u5__p3_0,
 _vq_quantmap__44u5__p3_0,
 5,
 5
};

static static_codebook _44u5__p3_0 = {
 4, 625,
 _vq_lengthlist__44u5__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u5__p3_0,
 
# 32966 "oggenc.c" 3 4
((void *)0)
# 32966 "oggenc.c"
    ,
 &_vq_auxt__44u5__p3_0,
 
# 32968 "oggenc.c" 3 4
((void *)0)
# 32968 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u5__p4_0[] = {
  4, 6, 6, 8, 8, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 8,
  9, 9,11,11, 8, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 6, 7, 8, 9,10, 9,10,10,11,11, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 6, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,12,11, 9,10,10,12,11, 8, 9, 9,12,11,
  9,10,10,12,12, 9,10,10,12,12,11,12,12,13,13,11,
 11,12,12,13, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,11,13,13,11,12,12,14,13, 6, 7, 7,
  9, 9, 7, 8, 7,10,10, 7, 7, 8, 9,10, 9,10,10,12,
 11, 9,10,10,11,11, 7, 8, 8,10,10, 8, 8, 9,10,11,
  8, 8, 8,11,10,10,10,11,11,12,10,10,11,12,12, 6,
  7, 7,10,10, 7, 8, 8,11,10, 8, 8, 9,10,11,10,11,
 10,13,11,10,10,11,12,12, 9,10,10,12,12,10,10,10,
 12,13,10,11,11,13,13,12,11,12,11,14,12,12,13,13,
 14, 9,10,10,12,12, 9,10,10,12,12,10,10,11,12,13,
 11,12,11,14,12,12,12,12,14,14, 6, 7, 7, 9, 9, 7,
  8, 7,10,10, 7, 7, 8,10,10, 9,10,10,11,11, 9,10,
 10,12,12, 6, 7, 7,10,10, 8, 9, 8,11,10, 7, 8, 8,
 10,11,10,10,11,12,12,10,10,11,11,13, 7, 8, 8,10,
 10, 8, 8, 8,10,11, 8, 9, 8,11,10,10,11,10,12,12,
 10,11,10,12,11, 9,10,10,12,12,10,11,11,13,12, 9,
 10,10,12,12,12,12,12,14,14,11,11,12,12,14, 9,10,
 10,12,12,10,11,11,12,12,10,10,10,12,12,12,13,12,
 14,14,11,12,11,14,11, 8, 9, 9,11,11, 9,10,10,12,
 12, 9,10,10,12,12,11,12,12,14,14,11,12,12,13,13,
  9,10,10,12,12,10,10,11,12,13,10,11,10,13,12,12,
 12,13,14,14,12,12,12,14,13, 9,10,10,12,12, 9,10,
 10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,13,
 13,14,11,12,11,14,13,11,11,12,13,14,12,13,12,14,
 14,13,12,14,11,16,13,14,14,16,15,11,11,11,13,13,
 11,12,11,14,13,12,12,13,14,15,12,14,12,16,12,14,
 14,14,16,16, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,12,13,13,12,12,12,14,14, 9,10,10,
 12,12,10,11,10,13,12, 9,10,10,12,13,12,12,12,14,
 13,12,12,13,13,15, 9,10,10,12,12,10,10,11,12,13,
 10,11,10,13,12,12,13,12,14,14,12,13,12,14,13,11,
 11,11,13,13,12,13,12,14,14,11,11,12,13,14,13,14,
 14,16,15,13,12,14,12,15,11,12,12,13,14,12,12,13,
 14,14,11,12,11,14,13,13,14,14,15,16,13,14,11,16,
 11,
};

static float _vq_quantthresh__44u5__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u5__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u5__p4_0 = {
 _vq_quantthresh__44u5__p4_0,
 _vq_quantmap__44u5__p4_0,
 5,
 5
};

static static_codebook _44u5__p4_0 = {
 4, 625,
 _vq_lengthlist__44u5__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u5__p4_0,
 
# 33043 "oggenc.c" 3 4
((void *)0)
# 33043 "oggenc.c"
    ,
 &_vq_auxt__44u5__p4_0,
 
# 33045 "oggenc.c" 3 4
((void *)0)
# 33045 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u5__p5_0[] = {
  2, 4, 3, 6, 6, 8, 7,10,10, 3, 5, 5, 8, 7, 8, 8,
 11,11, 3, 5, 5, 7, 8, 8, 8,10,11, 6, 8, 7, 9, 9,
 10, 9,12,11, 7, 7, 8, 9, 9, 9,10,11,12, 8, 8, 8,
 10, 9,11,11,13,12, 8, 8, 8, 9,10,11,12,12,13,10,
 11,10,12,11,13,12,14,14,10,10,11,11,12,12,13,14,
 14,
};

static float _vq_quantthresh__44u5__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u5__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u5__p5_0 = {
 _vq_quantthresh__44u5__p5_0,
 _vq_quantmap__44u5__p5_0,
 9,
 9
};

static static_codebook _44u5__p5_0 = {
 2, 81,
 _vq_lengthlist__44u5__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u5__p5_0,
 
# 33091 "oggenc.c" 3 4
((void *)0)
# 33091 "oggenc.c"
    ,
 &_vq_auxt__44u5__p5_0,
 
# 33093 "oggenc.c" 3 4
((void *)0)
# 33093 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p6_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u5__p6_0[] = {
  3, 4, 4, 5, 6, 7, 7, 9, 9, 4, 5, 4, 6, 6, 7, 7,
  9, 9, 4, 4, 4, 6, 6, 7, 7, 9, 9, 6, 6, 6, 7, 7,
  8, 8,10,10, 6, 6, 6, 7, 7, 8, 8,10,10, 7, 7, 7,
  8, 8, 9, 9,10,10, 7, 7, 7, 8, 8, 9, 9,10,11, 9,
  9, 9,10,10,11,10,11,11, 9, 9, 9,10,10,11,11,11,
 11,
};

static float _vq_quantthresh__44u5__p6_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u5__p6_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u5__p6_0 = {
 _vq_quantthresh__44u5__p6_0,
 _vq_quantmap__44u5__p6_0,
 9,
 9
};

static static_codebook _44u5__p6_0 = {
 2, 81,
 _vq_lengthlist__44u5__p6_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u5__p6_0,
 
# 33139 "oggenc.c" 3 4
((void *)0)
# 33139 "oggenc.c"
    ,
 &_vq_auxt__44u5__p6_0,
 
# 33141 "oggenc.c" 3 4
((void *)0)
# 33141 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u5__p7_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 9, 8, 8,11,10, 7,
 10,10, 5, 9, 9, 8,10,10, 8,10,11, 4, 9, 9, 9,11,
 11, 9,12,11, 8,11,11,11,12,12,10,12,12, 7,11,11,
 10,12,12,10,12,12, 4, 9, 9, 9,11,11, 9,11,11, 7,
 11,11,10,12,12,10,11,12, 8,11,11,10,12,12,11,12,
 12,
};

static float _vq_quantthresh__44u5__p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44u5__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u5__p7_0 = {
 _vq_quantthresh__44u5__p7_0,
 _vq_quantmap__44u5__p7_0,
 3,
 3
};

static static_codebook _44u5__p7_0 = {
 4, 81,
 _vq_lengthlist__44u5__p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44u5__p7_0,
 
# 33180 "oggenc.c" 3 4
((void *)0)
# 33180 "oggenc.c"
    ,
 &_vq_auxt__44u5__p7_0,
 
# 33182 "oggenc.c" 3 4
((void *)0)
# 33182 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u5__p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 4, 5, 5, 7, 7,
  8, 8, 9, 8, 9, 8, 4, 5, 5, 7, 7, 8, 8, 8, 9, 9,
  9, 6, 7, 7, 8, 8, 9, 8, 9, 9, 9, 9, 6, 7, 7, 8,
  8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 9, 8, 9, 9, 9, 9,
  9, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8,
  9, 9, 9, 9,10,10,10,10, 8, 9, 9, 9, 9, 9, 9,10,
 10,10,10, 8, 9, 9, 9, 9, 9, 9,10,10,10,10, 8, 9,
  9, 9, 9, 9, 9,10,10,10,10,
};

static float _vq_quantthresh__44u5__p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u5__p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u5__p7_1 = {
 _vq_quantthresh__44u5__p7_1,
 _vq_quantmap__44u5__p7_1,
 11,
 11
};

static static_codebook _44u5__p7_1 = {
 2, 121,
 _vq_lengthlist__44u5__p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u5__p7_1,
 
# 33233 "oggenc.c" 3 4
((void *)0)
# 33233 "oggenc.c"
    ,
 &_vq_auxt__44u5__p7_1,
 
# 33235 "oggenc.c" 3 4
((void *)0)
# 33235 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p8_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u5__p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9, 9,10,10, 4, 6, 6, 7, 7,
  9, 9,10,10,11,11, 4, 6, 6, 7, 7, 9, 9,10,10,11,
 11, 6, 8, 8, 9, 9,10,10,12,11,13,12, 6, 7, 8, 9,
  9,10,10,11,11,12,12, 8, 9, 9,10,10,11,12,12,12,
 14,13, 8, 9, 9,10,10,11,11,12,13,14,13,10,11,10,
 12,12,13,13,14,13,15,14,10,11,11,12,12,12,13,13,
 13,15,15,11,12,12,13,12,13,14,14,14,15,14,11,11,
 12,13,13,13,14,14,14,15,15,
};

static float _vq_quantthresh__44u5__p8_0[] = {
 -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5, 27.5,
 38.5, 49.5,
};

static long _vq_quantmap__44u5__p8_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u5__p8_0 = {
 _vq_quantthresh__44u5__p8_0,
 _vq_quantmap__44u5__p8_0,
 11,
 11
};

static static_codebook _44u5__p8_0 = {
 2, 121,
 _vq_lengthlist__44u5__p8_0,
 1, -524582912, 1618345984, 4, 0,
 _vq_quantlist__44u5__p8_0,
 
# 33286 "oggenc.c" 3 4
((void *)0)
# 33286 "oggenc.c"
    ,
 &_vq_auxt__44u5__p8_0,
 
# 33288 "oggenc.c" 3 4
((void *)0)
# 33288 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p8_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u5__p8_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 5, 6, 5, 6, 6,
  7, 7, 8, 8, 8, 8, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8,
  8, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 6, 6, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u5__p8_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u5__p8_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u5__p8_1 = {
 _vq_quantthresh__44u5__p8_1,
 _vq_quantmap__44u5__p8_1,
 11,
 11
};

static static_codebook _44u5__p8_1 = {
 2, 121,
 _vq_lengthlist__44u5__p8_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u5__p8_1,
 
# 33339 "oggenc.c" 3 4
((void *)0)
# 33339 "oggenc.c"
    ,
 &_vq_auxt__44u5__p8_1,
 
# 33341 "oggenc.c" 3 4
((void *)0)
# 33341 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p9_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u5__p9_0[] = {
  1, 3, 3,12,10,12,12,12,12,12,12,12,12, 3, 8, 9,
 12,12,12,12,12,12,12,12,12,12, 4, 9, 9,12,12,12,
 12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,
 12,12,12,12, 9,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,
};

static float _vq_quantthresh__44u5__p9_0[] = {
 -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5, 382.5,
 637.5, 892.5, 1147.5, 1402.5,
};

static long _vq_quantmap__44u5__p9_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u5__p9_0 = {
 _vq_quantthresh__44u5__p9_0,
 _vq_quantmap__44u5__p9_0,
 13,
 13
};

static static_codebook _44u5__p9_0 = {
 2, 169,
 _vq_lengthlist__44u5__p9_0,
 1, -514332672, 1627381760, 4, 0,
 _vq_quantlist__44u5__p9_0,
 
# 33397 "oggenc.c" 3 4
((void *)0)
# 33397 "oggenc.c"
    ,
 &_vq_auxt__44u5__p9_0,
 
# 33399 "oggenc.c" 3 4
((void *)0)
# 33399 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u5__p9_1[] = {
  1, 4, 4, 7, 7, 8, 9, 7, 7, 8, 8, 9, 9,10,10, 5,
  6, 6, 9, 8,10,10, 9, 8, 9, 9,10, 9,11,10, 4, 6,
  6, 8, 9, 9,10, 8, 9, 9,10,10,10,11,10, 7, 8, 8,
 10,10,11,11,10,10,11,11,11,11,11,11, 7, 8, 8,10,
 10,11,11,10,10,11,11,11,11,11,12, 8, 9,10,11,10,
 12,12,11,11,11,11,12,12,12,13, 8, 9, 9,11,11,11,
 12,11,11,11,11,12,12,12,12, 8, 9, 9,10,10,11,11,
 12,11,12,12,12,13,13,13, 8, 9, 9,10,10,11,11,12,
 11,12,12,13,13,12,13, 9,10,10,11,11,12,11,12,13,
 14,14,15,15,15,14, 9,10,10,11,11,12,12,12,12,13,
 13,14,14,14,14, 9,10,11,12,11,12,13,14,13,14,13,
 14,14,14,14, 9,11,11,11,11,12,13,13,13,14,13,15,
 15,14,14,10,11,11,12,12,13,13,13,13,14,14,14,15,
 15,15,10,11,11,12,12,12,13,13,13,15,14,15,14,14,
 14,
};

static float _vq_quantthresh__44u5__p9_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__44u5__p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u5__p9_1 = {
 _vq_quantthresh__44u5__p9_1,
 _vq_quantmap__44u5__p9_1,
 15,
 15
};

static static_codebook _44u5__p9_1 = {
 2, 225,
 _vq_lengthlist__44u5__p9_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__44u5__p9_1,
 
# 33461 "oggenc.c" 3 4
((void *)0)
# 33461 "oggenc.c"
    ,
 &_vq_auxt__44u5__p9_1,
 
# 33463 "oggenc.c" 3 4
((void *)0)
# 33463 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u5__p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u5__p9_2[] = {
  3, 5, 5, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10, 9, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9, 9,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10,10,10, 9,10,10,10,10, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10,10,10, 9, 9, 9, 9,10,
  9, 9, 9, 9, 9, 9, 9,10, 9,10, 9, 9, 9,10,10, 9,
  9,
};

static float _vq_quantthresh__44u5__p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u5__p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u5__p9_2 = {
 _vq_quantthresh__44u5__p9_2,
 _vq_quantmap__44u5__p9_2,
 17,
 17
};

static static_codebook _44u5__p9_2 = {
 2, 289,
 _vq_lengthlist__44u5__p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u5__p9_2,
 
# 33532 "oggenc.c" 3 4
((void *)0)
# 33532 "oggenc.c"
    ,
 &_vq_auxt__44u5__p9_2,
 
# 33534 "oggenc.c" 3 4
((void *)0)
# 33534 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u5__short[] = {
  4,11,16,14,18,15,18,15,17,17, 4, 6, 9, 9,12, 9,
 14,10,14,17, 6, 6, 5, 7, 6, 8,10,10,16,17, 7, 8,
  7, 9, 9,10,12,12,14,17, 8, 6, 5, 7, 4, 7, 5, 7,
 14,17, 9, 9, 8, 9, 7,10, 8,10,14,17,11, 9, 7, 9,
  4, 7, 3, 6,15,17,11,10,10,10, 6, 9, 5, 6,14,17,
 17,17,10,15, 4, 8, 3, 5,12,17,17,17,12,16, 7,11,
  6, 8,16,17,
};

static static_codebook _huff_book__44u5__short = {
 2, 100,
 _huff_lengthlist__44u5__short,
 0, 0, 0, 0, 0,
 
# 33552 "oggenc.c" 3 4
((void *)0)
# 33552 "oggenc.c"
    ,
 
# 33553 "oggenc.c" 3 4
((void *)0)
# 33553 "oggenc.c"
    ,
 
# 33554 "oggenc.c" 3 4
((void *)0)
# 33554 "oggenc.c"
    ,
 
# 33555 "oggenc.c" 3 4
((void *)0)
# 33555 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u6__long[] = {
  3, 9,14,13,15,13,16,12,12,12, 5, 4, 6, 7, 8, 9,
 10,10,13,12,10, 5, 5, 6, 6, 9, 9,10,14,14,10, 6,
  6, 7, 6, 8, 9, 9,13,12,13, 7, 5, 6, 4, 6, 6, 7,
 11,15,10, 8, 7, 7, 6, 7, 7, 7,11,13,16,10, 8, 8,
  5, 6, 4, 6,10,14, 9, 9, 9, 8, 6, 6, 5, 4, 7,11,
 11,11,12,11,10, 9, 9, 5, 5, 9,10,13,14,14,14,14,
 15, 8, 7, 8,
};

static static_codebook _huff_book__44u6__long = {
 2, 100,
 _huff_lengthlist__44u6__long,
 0, 0, 0, 0, 0,
 
# 33573 "oggenc.c" 3 4
((void *)0)
# 33573 "oggenc.c"
    ,
 
# 33574 "oggenc.c" 3 4
((void *)0)
# 33574 "oggenc.c"
    ,
 
# 33575 "oggenc.c" 3 4
((void *)0)
# 33575 "oggenc.c"
    ,
 
# 33576 "oggenc.c" 3 4
((void *)0)
# 33576 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u6__p1_0[] = {
  1, 4, 4, 4, 8, 7, 5, 7, 7, 5, 8, 8, 8,10,10, 7,
  9,10, 5, 8, 8, 7,10, 9, 8,10,10, 5, 8, 8, 8,11,
 10, 8,10,10, 8,11,10,10,12,13,10,13,13, 7,10,10,
 10,13,11,10,13,13, 5, 8, 8, 8,11,10, 8,10,10, 7,
 10,10,10,13,13, 9,11,13, 8,10,11,10,13,13,10,13,
 12,
};

static float _vq_quantthresh__44u6__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u6__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u6__p1_0 = {
 _vq_quantthresh__44u6__p1_0,
 _vq_quantmap__44u6__p1_0,
 3,
 3
};

static static_codebook _44u6__p1_0 = {
 4, 81,
 _vq_lengthlist__44u6__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u6__p1_0,
 
# 33615 "oggenc.c" 3 4
((void *)0)
# 33615 "oggenc.c"
    ,
 &_vq_auxt__44u6__p1_0,
 
# 33617 "oggenc.c" 3 4
((void *)0)
# 33617 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u6__p2_0[] = {
  3, 5, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 7, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 7, 5, 6, 6, 6, 8,
  7, 6, 7, 8, 6, 8, 8, 8, 8, 9, 8, 9, 9, 6, 7, 7,
  7, 9, 8, 8, 9, 9, 5, 6, 6, 6, 8, 7, 6, 7, 8, 6,
  7, 7, 8, 9, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 8, 9,
  8,
};

static float _vq_quantthresh__44u6__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u6__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u6__p2_0 = {
 _vq_quantthresh__44u6__p2_0,
 _vq_quantmap__44u6__p2_0,
 3,
 3
};

static static_codebook _44u6__p2_0 = {
 4, 81,
 _vq_lengthlist__44u6__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u6__p2_0,
 
# 33656 "oggenc.c" 3 4
((void *)0)
# 33656 "oggenc.c"
    ,
 &_vq_auxt__44u6__p2_0,
 
# 33658 "oggenc.c" 3 4
((void *)0)
# 33658 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u6__p3_0[] = {
  2, 4, 5, 8, 8, 5, 7, 6, 9, 9, 5, 6, 7, 9, 9, 8,
 10, 9,13,12, 8, 9,10,12,13, 5, 7, 7,10, 9, 7, 9,
  9,11,11, 7, 8, 9,10,11,10,11,11,13,14, 9,10,11,
 13,13, 5, 7, 7, 9, 9, 7, 9, 8,11,10, 7, 9, 9,11,
 11, 9,11,10,14,13,10,11,11,14,13, 8,10,10,14,13,
 10,12,11,15,14, 9,11,11,15,14,13,15,14,20,16,13,
 13,14,16,16, 8,10,10,13,14, 9,11,11,14,15,10,11,
 12,14,15,13,13,14,16,16,13,14,14,16,17, 5, 7, 7,
 10,10, 7, 9, 9,11,11, 7, 9, 9,11,11,10,11,11,15,
 14,10,11,11,14,14, 7, 9, 9,12,11, 9,11,11,12,13,
  9,11,11,13,13,11,12,13,14,16,11,12,13,16,16, 6,
  9, 8,11,11, 8,11,10,13,12, 9,10,11,12,13,11,13,
 11,15,14,11,13,13,15,15,10,12,11,15,14,11,12,13,
 17,16,11,13,13,16,17,14,15,16,17,17,14,15,16,20,
  0, 9,11,11,14,15,10,13,12,16,16,11,13,13,17,17,
 13,15,14,17,15,15,16,16, 0, 0, 5, 7, 7,10,10, 7,
  9, 9,11,11, 7, 8, 9,11,11,10,11,11,14,14,10,11,
 11,14,14, 6, 9, 9,11,11, 9,11,11,14,12, 8,10,11,
 12,13,11,13,13,16,16,11,11,13,14,16, 7, 9, 9,11,
 12, 9,11,11,13,13, 9,11,11,13,12,11,13,12,16,16,
 12,13,12,16,14, 9,11,11,16,15,11,13,13,17,15,10,
 12,12,15,16,14,16,16, 0,17,13,14,15,15,17,10,11,
 12,15,15,11,13,13,17,17,11,13,13,15,16,14,15,15,
 19,18,14,15,15,19,16, 8,10,10,14,14,10,12,11,15,
 16,10,11,11,15,17,13,16,15,19,19,13,15,14,17,17,
  9,11,12,15,16,11,13,13,18,19,11,13,13,16,17,16,
 16,17, 0, 0,15,15,16, 0,19, 9,11,11,15,16,10,13,
 12,17,15,11,13,13,16,17,14,17,15,18,17,15,16,15,
 18, 0,13,14,15, 0,19,14,16,16, 0,17,15,16,16, 0,
 17,16,17, 0, 0, 0,16,17,19, 0, 0,12,14,14,17,17,
 13,15,13, 0,19,14,16,16,18,19,16,18,15,19,18,17,
 18,17,19, 0, 8,10,10,14,13,10,11,11,16,15,10,11,
 11,15,15,13,15,15,19,18,14,15,16, 0,18, 9,11,11,
 15,14,11,13,13, 0,16,10,12,13,15,17,14,16,16, 0,
 18,15,16,17,17, 0, 9,11,11,16,15,11,13,13,16,16,
 11,14,13,18,18,15,17,15,18,17,15,16,18, 0, 0,12,
 14,14,18,19,14,15,16, 0,18,13,14,15,18, 0,17,17,
 17, 0, 0,16,15,18,17, 0,12,14,15,17,19,14,16,16,
 19, 0,14,17,16, 0,18,17,19,17, 0, 0,16,18,17, 0,
 17,
};

static float _vq_quantthresh__44u6__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u6__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u6__p3_0 = {
 _vq_quantthresh__44u6__p3_0,
 _vq_quantmap__44u6__p3_0,
 5,
 5
};

static static_codebook _44u6__p3_0 = {
 4, 625,
 _vq_lengthlist__44u6__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u6__p3_0,
 
# 33733 "oggenc.c" 3 4
((void *)0)
# 33733 "oggenc.c"
    ,
 &_vq_auxt__44u6__p3_0,
 
# 33735 "oggenc.c" 3 4
((void *)0)
# 33735 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u6__p4_0[] = {
  4, 6, 6, 8, 8, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 8,
  9, 9,11,11, 8, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 6, 7, 8, 9,10, 9,10,10,11,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 7, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,12,11, 9,10,10,12,11, 8, 9, 9,11,11,
  9,10,10,12,12, 9, 9,10,12,12,11,12,12,13,13,11,
 11,12,12,13, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,11,13,13,11,12,12,13,13, 6, 7, 7,
  9, 9, 7, 8, 7,10, 9, 7, 7, 8, 9,10, 9,10,10,12,
 11, 9,10,10,11,12, 7, 8, 8,10,10, 8, 8, 9,10,10,
  8, 8, 8,10,10,10,10,11,12,12,10,10,11,12,12, 6,
  7, 7,10,10, 7, 8, 8,11,10, 8, 8, 9,10,11,10,11,
 10,12,11,10,10,11,12,12, 9,10,10,12,12,10,10,11,
 12,12,10,11,10,13,12,12,12,12,12,14,12,12,12,13,
 14, 9,10,10,12,12, 9,10,10,12,12,10,10,11,12,13,
 11,12,11,14,12,12,12,13,14,14, 6, 7, 7, 9, 9, 7,
  8, 7,10, 9, 7, 7, 8,10,10, 9,10,10,12,11, 9,10,
 10,11,12, 6, 7, 7,10,10, 8, 9, 8,11,10, 7, 8, 8,
 10,10,10,10,11,12,12,10,10,10,11,12, 7, 8, 8,10,
 10, 8, 8, 8,10,10, 8, 8, 8,10,10,10,11,10,12,12,
 10,11,10,12,11, 9,10,10,12,12,10,11,10,13,12, 9,
 10,10,12,12,12,12,12,14,14,11,11,12,12,13, 9,10,
 10,12,12,10,11,11,12,12,10,11,10,12,12,12,12,12,
 14,14,12,12,12,14,12, 8, 9, 9,11,11, 9,10,10,12,
 12, 9,10,10,12,12,11,12,12,13,13,11,12,12,13,13,
  9,10,10,12,12,10,10,11,12,13,10,11,10,12,12,12,
 12,13,13,14,12,12,12,14,14, 9,10,10,12,12, 9,10,
 10,12,12,10,10,10,12,12,12,12,12,14,13,12,12,12,
 14,14,11,12,12,13,13,11,12,12,14,14,12,12,12,14,
 14,13,12,14,12,15,13,14,14,15,15,11,11,11,13,13,
 11,12,11,14,13,12,12,12,14,14,12,14,12,15,12,13,
 14,14,15,16, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,12,13,13,11,12,12,13,14, 9,10,10,
 12,12,10,11,10,13,12, 9,10,10,12,13,12,12,12,15,
 14,12,12,13,13,14, 9,10,10,12,12,10,10,11,12,12,
 10,11,10,12,12,12,13,12,14,14,12,13,12,14,13,11,
 11,11,13,13,12,12,12,14,13,11,11,12,13,14,13,14,
 14,15,15,12,12,14,12,15,11,12,12,13,14,12,12,12,
 14,14,11,12,12,14,14,13,14,14,15,15,13,14,12,16,
 12,
};

static float _vq_quantthresh__44u6__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u6__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u6__p4_0 = {
 _vq_quantthresh__44u6__p4_0,
 _vq_quantmap__44u6__p4_0,
 5,
 5
};

static static_codebook _44u6__p4_0 = {
 4, 625,
 _vq_lengthlist__44u6__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u6__p4_0,
 
# 33810 "oggenc.c" 3 4
((void *)0)
# 33810 "oggenc.c"
    ,
 &_vq_auxt__44u6__p4_0,
 
# 33812 "oggenc.c" 3 4
((void *)0)
# 33812 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u6__p5_0[] = {
  2, 3, 3, 6, 6, 8, 8,10,10, 4, 5, 5, 8, 7, 8, 8,
 11,11, 3, 5, 5, 7, 8, 8, 8,11,11, 6, 8, 7,10, 9,
 10, 9,12,12, 6, 7, 8, 9,10, 9,10,12,12, 8, 8, 8,
 10, 9,12,11,13,13, 8, 8, 8, 9,10,11,12,12,13,10,
 11,11,12,11,13,12,14,14,10,10,11,11,12,13,13,14,
 14,
};

static float _vq_quantthresh__44u6__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u6__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u6__p5_0 = {
 _vq_quantthresh__44u6__p5_0,
 _vq_quantmap__44u6__p5_0,
 9,
 9
};

static static_codebook _44u6__p5_0 = {
 2, 81,
 _vq_lengthlist__44u6__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u6__p5_0,
 
# 33858 "oggenc.c" 3 4
((void *)0)
# 33858 "oggenc.c"
    ,
 &_vq_auxt__44u6__p5_0,
 
# 33860 "oggenc.c" 3 4
((void *)0)
# 33860 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p6_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u6__p6_0[] = {
  3, 4, 4, 5, 5, 7, 7, 9, 9, 4, 5, 4, 6, 6, 7, 7,
  9, 9, 4, 4, 5, 6, 6, 7, 7, 9, 9, 5, 6, 6, 7, 7,
  8, 8,10,10, 6, 6, 6, 7, 7, 8, 8,10,10, 7, 7, 7,
  8, 8, 9, 9,10,10, 7, 7, 7, 8, 8, 9, 9,10,11, 9,
  9, 9,10,10,11,11,11,11, 9, 9, 9,10,10,10,11,11,
 11,
};

static float _vq_quantthresh__44u6__p6_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u6__p6_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u6__p6_0 = {
 _vq_quantthresh__44u6__p6_0,
 _vq_quantmap__44u6__p6_0,
 9,
 9
};

static static_codebook _44u6__p6_0 = {
 2, 81,
 _vq_lengthlist__44u6__p6_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u6__p6_0,
 
# 33906 "oggenc.c" 3 4
((void *)0)
# 33906 "oggenc.c"
    ,
 &_vq_auxt__44u6__p6_0,
 
# 33908 "oggenc.c" 3 4
((void *)0)
# 33908 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u6__p7_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 9, 8, 8,11,10, 8,
 11,10, 5, 8, 9, 7,10,10, 8,10,11, 4, 9, 9, 9,12,
 11, 9,11,12, 8,11,12,11,12,13,10,13,12, 7,12,11,
 10,12,12,10,13,13, 4, 9, 9, 8,11,11, 9,11,12, 7,
 12,12,10,13,13,10,12,13, 8,12,12,10,13,13,11,13,
 12,
};

static float _vq_quantthresh__44u6__p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44u6__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u6__p7_0 = {
 _vq_quantthresh__44u6__p7_0,
 _vq_quantmap__44u6__p7_0,
 3,
 3
};

static static_codebook _44u6__p7_0 = {
 4, 81,
 _vq_lengthlist__44u6__p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44u6__p7_0,
 
# 33947 "oggenc.c" 3 4
((void *)0)
# 33947 "oggenc.c"
    ,
 &_vq_auxt__44u6__p7_0,
 
# 33949 "oggenc.c" 3 4
((void *)0)
# 33949 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u6__p7_1[] = {
  3, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 4, 5, 5, 6, 6,
  8, 7, 8, 8, 8, 8, 4, 5, 5, 6, 6, 7, 8, 8, 8, 8,
  8, 6, 7, 6, 7, 7, 8, 8, 9, 9, 9, 9, 6, 6, 7, 7,
  7, 8, 8, 9, 9, 9, 9, 7, 8, 7, 8, 8, 9, 9, 9, 9,
  9, 9, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9, 9,10,10, 8, 8,
  8, 9, 9, 9, 9, 9, 9,10,10,
};

static float _vq_quantthresh__44u6__p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u6__p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u6__p7_1 = {
 _vq_quantthresh__44u6__p7_1,
 _vq_quantmap__44u6__p7_1,
 11,
 11
};

static static_codebook _44u6__p7_1 = {
 2, 121,
 _vq_lengthlist__44u6__p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u6__p7_1,
 
# 34000 "oggenc.c" 3 4
((void *)0)
# 34000 "oggenc.c"
    ,
 &_vq_auxt__44u6__p7_1,
 
# 34002 "oggenc.c" 3 4
((void *)0)
# 34002 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p8_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u6__p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9, 9,10,10, 4, 6, 6, 7, 7,
  9, 9,10,10,11,11, 4, 6, 6, 7, 7, 9, 9,10,10,11,
 11, 6, 8, 8, 9, 9,10,10,11,11,12,12, 6, 8, 8, 9,
  9,10,10,11,11,12,12, 8, 9, 9,10,10,11,11,12,12,
 13,13, 8, 9, 9,10,10,11,11,12,12,13,13,10,10,10,
 11,11,12,12,13,13,14,14,10,10,10,11,11,12,13,13,
 13,14,14,11,12,12,13,13,13,13,14,14,15,14,11,11,
 11,13,13,14,13,14,14,15,14,
};

static float _vq_quantthresh__44u6__p8_0[] = {
 -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5, 27.5,
 38.5, 49.5,
};

static long _vq_quantmap__44u6__p8_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u6__p8_0 = {
 _vq_quantthresh__44u6__p8_0,
 _vq_quantmap__44u6__p8_0,
 11,
 11
};

static static_codebook _44u6__p8_0 = {
 2, 121,
 _vq_lengthlist__44u6__p8_0,
 1, -524582912, 1618345984, 4, 0,
 _vq_quantlist__44u6__p8_0,
 
# 34053 "oggenc.c" 3 4
((void *)0)
# 34053 "oggenc.c"
    ,
 &_vq_auxt__44u6__p8_0,
 
# 34055 "oggenc.c" 3 4
((void *)0)
# 34055 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p8_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u6__p8_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 5, 6, 6, 7, 6,
  7, 7, 7, 7, 8, 8, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8,
  8, 6, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 6, 6, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u6__p8_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u6__p8_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u6__p8_1 = {
 _vq_quantthresh__44u6__p8_1,
 _vq_quantmap__44u6__p8_1,
 11,
 11
};

static static_codebook _44u6__p8_1 = {
 2, 121,
 _vq_lengthlist__44u6__p8_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u6__p8_1,
 
# 34106 "oggenc.c" 3 4
((void *)0)
# 34106 "oggenc.c"
    ,
 &_vq_auxt__44u6__p8_1,
 
# 34108 "oggenc.c" 3 4
((void *)0)
# 34108 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p9_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u6__p9_0[] = {
  1, 3, 3,10,12,13,13,13,13,13,13,13,13,13,13, 3,
  9, 9,13,13,13,13,13,13,13,13,13,13,12,12, 4, 9,
  9,12,12,12,12,12,12,12,12,12,12,12,12, 9,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12, 9,11,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
 12,
};

static float _vq_quantthresh__44u6__p9_0[] = {
 -1657.5, -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5,
 382.5, 637.5, 892.5, 1147.5, 1402.5, 1657.5,
};

static long _vq_quantmap__44u6__p9_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u6__p9_0 = {
 _vq_quantthresh__44u6__p9_0,
 _vq_quantmap__44u6__p9_0,
 15,
 15
};

static static_codebook _44u6__p9_0 = {
 2, 225,
 _vq_lengthlist__44u6__p9_0,
 1, -514071552, 1627381760, 4, 0,
 _vq_quantlist__44u6__p9_0,
 
# 34170 "oggenc.c" 3 4
((void *)0)
# 34170 "oggenc.c"
    ,
 &_vq_auxt__44u6__p9_0,
 
# 34172 "oggenc.c" 3 4
((void *)0)
# 34172 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u6__p9_1[] = {
  1, 4, 4, 7, 7, 8, 8, 7, 7, 8, 8, 9, 9, 9, 9, 5,
  6, 6, 8, 8,10,10, 9, 9,10, 9,10, 9,10,10, 4, 6,
  6, 8, 9,10,10, 8, 9, 9,10,10,10,10,10, 7, 9, 8,
 10,10,11,11,10,10,11,11,11,11,12,12, 7, 8, 8,10,
 10,11,11,10,10,10,11,11,11,11,12, 8,10,10,11,11,
 12,12,11,11,11,11,12,12,12,13, 8, 9, 9,11,11,12,
 12,11,11,12,12,12,12,12,12, 8, 9, 9,10,10,11,11,
 13,12,13,12,13,13,13,13, 8, 9, 9,10,10,11,11,12,
 12,12,12,13,12,13,12, 9,10,10,11,11,12,12,13,13,
 14,12,13,13,14,13, 9,10,10,11,11,12,12,12,12,13,
 13,13,13,14,14, 9,11,10,11,11,12,13,13,12,13,13,
 15,13,14,14, 9,10,10,11,12,12,13,13,13,13,13,14,
 14,14,14,10,11,11,12,12,13,12,13,13,14,14,14,14,
 14,15,10,11,11,11,12,13,13,13,13,14,14,14,14,14,
 14,
};

static float _vq_quantthresh__44u6__p9_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__44u6__p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u6__p9_1 = {
 _vq_quantthresh__44u6__p9_1,
 _vq_quantmap__44u6__p9_1,
 15,
 15
};

static static_codebook _44u6__p9_1 = {
 2, 225,
 _vq_lengthlist__44u6__p9_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__44u6__p9_1,
 
# 34234 "oggenc.c" 3 4
((void *)0)
# 34234 "oggenc.c"
    ,
 &_vq_auxt__44u6__p9_1,
 
# 34236 "oggenc.c" 3 4
((void *)0)
# 34236 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u6__p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u6__p9_2[] = {
  3, 5, 5, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9,10,10, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9,10,10, 9,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9, 9, 9,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10, 9, 9, 9,10,
  9,
};

static float _vq_quantthresh__44u6__p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u6__p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u6__p9_2 = {
 _vq_quantthresh__44u6__p9_2,
 _vq_quantmap__44u6__p9_2,
 17,
 17
};

static static_codebook _44u6__p9_2 = {
 2, 289,
 _vq_lengthlist__44u6__p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u6__p9_2,
 
# 34305 "oggenc.c" 3 4
((void *)0)
# 34305 "oggenc.c"
    ,
 &_vq_auxt__44u6__p9_2,
 
# 34307 "oggenc.c" 3 4
((void *)0)
# 34307 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u6__short[] = {
  5,11,15,14,17,14,17,15,17,17, 4, 6, 9, 9,14, 9,
 17,10,15,17, 6, 6, 5, 7, 7, 9,11,10,15,17, 6, 8,
  8,10, 9,11,14,13,16,17, 7, 6, 5, 7, 5, 7, 5, 8,
 15,17, 9, 8, 8, 9, 8,10,10,11,14,17,10, 8, 7, 9,
  4, 7, 3, 5,11,17,10,10,10,10, 6, 9, 4, 5,11,17,
 16,16,13,15, 5,10, 4, 3, 9,16,17,17,14,17, 7,11,
  6, 6,11,17,
};

static static_codebook _huff_book__44u6__short = {
 2, 100,
 _huff_lengthlist__44u6__short,
 0, 0, 0, 0, 0,
 
# 34325 "oggenc.c" 3 4
((void *)0)
# 34325 "oggenc.c"
    ,
 
# 34326 "oggenc.c" 3 4
((void *)0)
# 34326 "oggenc.c"
    ,
 
# 34327 "oggenc.c" 3 4
((void *)0)
# 34327 "oggenc.c"
    ,
 
# 34328 "oggenc.c" 3 4
((void *)0)
# 34328 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u7__long[] = {
  3, 9,15,13,16,13,16,12,12,12, 5, 5, 7, 8, 8,10,
 11,10,13,13,10, 5, 5, 6, 6, 9, 9,10,14,14, 9, 6,
  6, 7, 6, 8, 9,10,13,12,13, 7, 5, 6, 4, 6, 6, 8,
 12,13,11, 8, 7, 8, 6, 7, 7, 7,11,13,15,10, 8, 8,
  5, 6, 4, 5, 9,13, 9, 9, 8, 9, 7, 7, 4, 4, 6,11,
 11,11,12,12,10,10, 8, 5, 5, 9,10,12,13,15,13,13,
 12, 7, 6, 8,
};

static static_codebook _huff_book__44u7__long = {
 2, 100,
 _huff_lengthlist__44u7__long,
 0, 0, 0, 0, 0,
 
# 34346 "oggenc.c" 3 4
((void *)0)
# 34346 "oggenc.c"
    ,
 
# 34347 "oggenc.c" 3 4
((void *)0)
# 34347 "oggenc.c"
    ,
 
# 34348 "oggenc.c" 3 4
((void *)0)
# 34348 "oggenc.c"
    ,
 
# 34349 "oggenc.c" 3 4
((void *)0)
# 34349 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u7__p1_0[] = {
  1, 4, 4, 5, 7, 7, 4, 7, 7, 5, 8, 8, 8,10,10, 7,
 10,10, 5, 8, 8, 7,10, 9, 8,10,10, 5, 8, 8, 8,11,
 10, 8,10,10, 8,11,10,10,12,13,11,13,13, 7,10,10,
 10,13,11,11,13,13, 5, 8, 8, 8,11,10, 8,10,10, 7,
 10,10,11,13,13,10,11,13, 8,11,11,10,13,13,10,13,
 12,
};

static float _vq_quantthresh__44u7__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u7__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u7__p1_0 = {
 _vq_quantthresh__44u7__p1_0,
 _vq_quantmap__44u7__p1_0,
 3,
 3
};

static static_codebook _44u7__p1_0 = {
 4, 81,
 _vq_lengthlist__44u7__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u7__p1_0,
 
# 34388 "oggenc.c" 3 4
((void *)0)
# 34388 "oggenc.c"
    ,
 &_vq_auxt__44u7__p1_0,
 
# 34390 "oggenc.c" 3 4
((void *)0)
# 34390 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u7__p2_0[] = {
  3, 5, 4, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 7, 8, 6,
  7, 7, 5, 6, 6, 6, 7, 7, 6, 8, 8, 5, 6, 6, 6, 8,
  7, 6, 7, 8, 6, 8, 8, 8, 9, 9, 8, 9, 9, 6, 7, 7,
  7, 9, 8, 8, 9, 9, 5, 6, 6, 6, 8, 7, 6, 7, 8, 6,
  7, 7, 8, 9, 9, 7, 8, 9, 6, 8, 8, 8, 9, 9, 8, 9,
  9,
};

static float _vq_quantthresh__44u7__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u7__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u7__p2_0 = {
 _vq_quantthresh__44u7__p2_0,
 _vq_quantmap__44u7__p2_0,
 3,
 3
};

static static_codebook _44u7__p2_0 = {
 4, 81,
 _vq_lengthlist__44u7__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u7__p2_0,
 
# 34429 "oggenc.c" 3 4
((void *)0)
# 34429 "oggenc.c"
    ,
 &_vq_auxt__44u7__p2_0,
 
# 34431 "oggenc.c" 3 4
((void *)0)
# 34431 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u7__p3_0[] = {
  2, 5, 5, 8, 8, 5, 7, 6, 9, 9, 5, 6, 7, 9, 9, 8,
  9, 9,12,12, 8, 9, 9,12,12, 5, 7, 7,10, 9, 7, 9,
  9,11,11, 6, 8, 9,10,11,10,11,11,13,14, 9,10,11,
 13,13, 5, 7, 7, 9, 9, 6, 9, 8,11,10, 7, 9, 9,11,
 11, 9,11,10,13,13,10,11,11,14,13, 8,10,10,14,13,
 10,11,11,16,14, 9,11,11,14,14,13,15,14,17,16,12,
 13,14,16,15, 8, 9,10,13,14, 9,11,11,14,14,10,11,
 11,14,15,13,13,14,17,17,13,14,15,16,17, 5, 7, 7,
 10,10, 7, 9, 8,11,11, 7, 8, 9,11,11,10,11,11,14,
 14,10,11,11,14,14, 7, 9, 9,11,11, 9,11,11,13,13,
  9,11,11,13,13,11,12,13,15,17,11,12,13,16,18, 6,
  8, 8,11,11, 8,10,10,13,12, 9,11,11,12,13,11,13,
 11,16,14,11,13,12,16,16,10,11,11,15,15,11,13,13,
 16,16,11,13,13,18,16,14,14,15,17,16,14,15,17,19,
  0, 9,11,11,14,15,10,12,12,15,17,11,13,13,15,17,
 14,15,13, 0,15,15,17,16,18, 0, 5, 7, 7, 9,10, 7,
  9, 9,11,11, 7, 8, 9,11,11,10,11,11,14,14,10,11,
 11,14,14, 6, 8, 9,11,11, 9,11,11,14,13, 8,10,10,
 11,14,11,13,13,17,15,11,12,13,14,16, 7, 9, 9,11,
 11, 9,11,11,13,12, 9,11,11,12,13,11,13,12,15,15,
 11,13,12,16,15, 9,11,11,15,15,11,12,13,16,15,10,
 11,12,16,15,15,16,16, 0, 0,14,13,15,16,19, 9,11,
 12,15,15,11,13,13,17,16,11,13,12,15,17,14,16,16,
 18, 0,15,15,16,18,17, 8,10,10,13,14,10,11,11,15,
 16,10,11,11,15,16,14,15,15,17,19,14,14,15,19,19,
  9,11,11,16,15,11,13,13,17,17,11,13,13,17,17,15,
 17,16, 0, 0,15,17,17, 0,17, 9,11,11,15,15,11,13,
 12,16,16,11,13,13,18,17,15,16,15,19,19,14,16,18,
 17,19,13,15,15, 0,18,14,16,17,17,18,14,16,16,19,
 19,18,19,19, 0, 0,16,17,18,19, 0,12,14,14,16,18,
 13,16,14, 0,19,14,16,17,19, 0,16,19,16,19,17,17,
 18,18, 0, 0, 8,10,10,14,13, 9,11,11,15,14,10,11,
 12,14,16,13,15,14,19,19,14,16,16,18,17, 9,11,11,
 16,15,11,13,13, 0,17,10,12,13,15,16,15,18,16,19,
 19,14,15,16,18,18, 9,11,12,15,15,11,13,13,17,19,
 11,13,13,17,17,15,17,16,19,19,15,17,16, 0, 0,12,
 14,14, 0,19,14,16,15, 0,19,13,14,16,19, 0,16,18,
 18, 0, 0,16,16,17,17, 0,13,14,14,17, 0,14,17,16,
  0,19,14,16,16,19,18,17,19,17, 0, 0,18,18,17, 0,
  0,
};

static float _vq_quantthresh__44u7__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u7__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u7__p3_0 = {
 _vq_quantthresh__44u7__p3_0,
 _vq_quantmap__44u7__p3_0,
 5,
 5
};

static static_codebook _44u7__p3_0 = {
 4, 625,
 _vq_lengthlist__44u7__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u7__p3_0,
 
# 34506 "oggenc.c" 3 4
((void *)0)
# 34506 "oggenc.c"
    ,
 &_vq_auxt__44u7__p3_0,
 
# 34508 "oggenc.c" 3 4
((void *)0)
# 34508 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u7__p4_0[] = {
  5, 6, 6, 8, 8, 6, 7, 6, 9, 9, 6, 6, 7, 9, 9, 8,
  9, 9,11,11, 8, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  7,10,10, 6, 7, 8, 9,10, 9,10,10,11,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 6, 7, 7,10, 9, 7, 7, 8,10,
 10, 9,10, 9,12,11, 9,10,10,12,11, 8, 9, 9,11,11,
  9,10,10,12,12, 9,10,10,11,12,11,12,12,13,13,11,
 11,12,12,13, 8, 9, 9,11,11, 9,10,10,12,11, 9,10,
 10,12,12,11,12,11,13,12,11,12,12,13,14, 6, 7, 7,
  9, 9, 7, 8, 7,10, 9, 7, 7, 8, 9,10, 9,10,10,12,
 11, 9,10,10,11,12, 7, 8, 8,10,10, 8, 8, 8,10,10,
  8, 8, 8,10,10,10,10,11,12,12,10,10,11,12,12, 6,
  7, 7,10,10, 7, 8, 8,10,10, 8, 8, 8,10,11, 9,10,
 10,12,11,10,10,11,12,12, 9,10,10,12,12,10,10,10,
 12,12,10,11,10,12,12,12,12,12,13,14,12,12,12,13,
 14, 9,10,10,11,12, 9,10,10,12,12,10,10,11,12,12,
 11,12,11,14,12,12,12,12,14,14, 6, 7, 7, 9, 9, 7,
  8, 7,10, 9, 7, 7, 8, 9,10, 9,10,10,12,11, 9,10,
 10,11,12, 6, 7, 7,10,10, 8, 8, 8,11,10, 7, 8, 8,
 10,10,10,10,10,12,12,10,10,10,11,12, 7, 8, 8,10,
 10, 8, 8, 8,10,10, 8, 8, 8,10,10,10,11,10,12,12,
 10,11,10,12,12, 9,10,10,12,12,10,11,10,13,12, 9,
 10,10,12,12,12,12,12,14,14,11,11,12,12,14, 9,10,
 10,12,12,10,10,10,12,12,10,11,10,12,12,12,12,12,
 14,14,12,12,12,14,13, 8, 9, 9,11,11, 9,10,10,12,
 12, 9,10,10,12,12,11,12,12,14,13,11,12,12,13,13,
  9,10,10,12,12,10,10,10,12,12,10,11,11,12,12,12,
 12,13,14,14,12,12,12,14,14, 9,10, 9,12,12, 9,10,
 10,12,12,10,10,11,12,12,12,12,11,14,13,12,12,12,
 13,14,11,12,12,13,13,12,12,12,14,14,12,13,12,14,
 14,13,13,14,13,15,14,14,14,15,15,11,11,11,13,13,
 11,12,11,14,13,12,12,12,14,14,12,13,12,15,12,13,
 14,14,15,15, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,12,13,13,11,12,12,13,14, 9,10,10,
 12,11,10,10,10,12,12, 9,10,10,12,12,12,13,12,14,
 13,11,12,12,13,14, 9,10,10,12,12,10,10,10,12,12,
 10,11,11,12,12,12,12,12,14,14,12,13,12,14,13,11,
 11,11,13,13,12,12,12,14,13,11,11,12,13,14,13,14,
 14,15,15,13,12,13,12,15,11,12,12,13,14,12,12,12,
 14,14,11,12,12,14,14,13,14,14,15,15,13,14,13,15,
 13,
};

static float _vq_quantthresh__44u7__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u7__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u7__p4_0 = {
 _vq_quantthresh__44u7__p4_0,
 _vq_quantmap__44u7__p4_0,
 5,
 5
};

static static_codebook _44u7__p4_0 = {
 4, 625,
 _vq_lengthlist__44u7__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u7__p4_0,
 
# 34583 "oggenc.c" 3 4
((void *)0)
# 34583 "oggenc.c"
    ,
 &_vq_auxt__44u7__p4_0,
 
# 34585 "oggenc.c" 3 4
((void *)0)
# 34585 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u7__p5_0[] = {
  2, 3, 3, 6, 6, 8, 8,10,10, 3, 5, 5, 8, 7, 8, 8,
 11,11, 4, 5, 5, 7, 8, 8, 8,11,11, 6, 8, 7, 9, 9,
 10, 9,12,12, 6, 7, 8, 9,10, 9,10,12,12, 8, 8, 8,
 10, 9,12,11,13,13, 8, 8, 8, 9,10,11,12,13,13,10,
 11,11,12,11,13,13,14,14,10,11,11,12,12,13,13,14,
 14,
};

static float _vq_quantthresh__44u7__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u7__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u7__p5_0 = {
 _vq_quantthresh__44u7__p5_0,
 _vq_quantmap__44u7__p5_0,
 9,
 9
};

static static_codebook _44u7__p5_0 = {
 2, 81,
 _vq_lengthlist__44u7__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u7__p5_0,
 
# 34631 "oggenc.c" 3 4
((void *)0)
# 34631 "oggenc.c"
    ,
 &_vq_auxt__44u7__p5_0,
 
# 34633 "oggenc.c" 3 4
((void *)0)
# 34633 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p6_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u7__p6_0[] = {
  4, 4, 4, 5, 5, 7, 7, 9, 9, 4, 4, 4, 6, 6, 7, 7,
  9, 9, 4, 4, 5, 6, 6, 7, 7, 9, 9, 5, 6, 6, 7, 7,
  8, 8, 9, 9, 5, 6, 6, 6, 7, 8, 8, 9, 9, 7, 7, 7,
  8, 8, 9, 9,10,10, 7, 7, 7, 8, 8, 9, 9,10,10, 9,
  9, 9,10, 9,10,10,11,11, 9, 9, 9, 9,10,10,10,11,
 11,
};

static float _vq_quantthresh__44u7__p6_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u7__p6_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u7__p6_0 = {
 _vq_quantthresh__44u7__p6_0,
 _vq_quantmap__44u7__p6_0,
 9,
 9
};

static static_codebook _44u7__p6_0 = {
 2, 81,
 _vq_lengthlist__44u7__p6_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u7__p6_0,
 
# 34679 "oggenc.c" 3 4
((void *)0)
# 34679 "oggenc.c"
    ,
 &_vq_auxt__44u7__p6_0,
 
# 34681 "oggenc.c" 3 4
((void *)0)
# 34681 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u7__p7_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 9, 8, 8,10,10, 8,
 10,10, 5, 8, 9, 8,10,10, 8,10,10, 4, 9, 9, 9,11,
 12, 8,12,11, 8,12,11,11,12,13,10,13,13, 7,12,11,
 10,13,12,10,13,13, 4, 9, 9, 8,11,12, 9,11,12, 7,
 11,12,10,13,13,10,12,13, 8,11,12,10,13,13,10,13,
 12,
};

static float _vq_quantthresh__44u7__p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44u7__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u7__p7_0 = {
 _vq_quantthresh__44u7__p7_0,
 _vq_quantmap__44u7__p7_0,
 3,
 3
};

static static_codebook _44u7__p7_0 = {
 4, 81,
 _vq_lengthlist__44u7__p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44u7__p7_0,
 
# 34720 "oggenc.c" 3 4
((void *)0)
# 34720 "oggenc.c"
    ,
 &_vq_auxt__44u7__p7_0,
 
# 34722 "oggenc.c" 3 4
((void *)0)
# 34722 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u7__p7_1[] = {
  3, 5, 4, 6, 6, 7, 7, 8, 8, 8, 8, 5, 5, 5, 6, 6,
  7, 7, 8, 8, 8, 8, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8,
  8, 6, 6, 6, 7, 7, 8, 7, 8, 8, 8, 8, 6, 6, 6, 7,
  7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 8, 7, 8, 8, 9, 9,
  9, 9, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8,
  8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9,
  9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9,
};

static float _vq_quantthresh__44u7__p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u7__p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u7__p7_1 = {
 _vq_quantthresh__44u7__p7_1,
 _vq_quantmap__44u7__p7_1,
 11,
 11
};

static static_codebook _44u7__p7_1 = {
 2, 121,
 _vq_lengthlist__44u7__p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u7__p7_1,
 
# 34773 "oggenc.c" 3 4
((void *)0)
# 34773 "oggenc.c"
    ,
 &_vq_auxt__44u7__p7_1,
 
# 34775 "oggenc.c" 3 4
((void *)0)
# 34775 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p8_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u7__p8_0[] = {
  1, 4, 4, 6, 6, 8, 8, 9, 9,10,10, 4, 6, 6, 7, 7,
  9, 9,10,10,11,11, 4, 6, 6, 7, 7, 9, 9,10,10,11,
 11, 6, 8, 8, 9, 9,10,10,11,11,12,12, 6, 8, 8, 9,
  9,10,10,11,11,12,12, 8, 9, 9,10,10,11,11,12,12,
 14,13, 8, 9, 9,10,10,11,11,12,12,13,13,10,10,10,
 11,11,12,12,13,13,14,14,10,10,10,11,11,12,13,13,
 13,14,14,11,12,11,13,12,13,14,14,14,15,15,11,11,
 12,13,13,13,13,14,14,15,15,
};

static float _vq_quantthresh__44u7__p8_0[] = {
 -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5, 27.5,
 38.5, 49.5,
};

static long _vq_quantmap__44u7__p8_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u7__p8_0 = {
 _vq_quantthresh__44u7__p8_0,
 _vq_quantmap__44u7__p8_0,
 11,
 11
};

static static_codebook _44u7__p8_0 = {
 2, 121,
 _vq_lengthlist__44u7__p8_0,
 1, -524582912, 1618345984, 4, 0,
 _vq_quantlist__44u7__p8_0,
 
# 34826 "oggenc.c" 3 4
((void *)0)
# 34826 "oggenc.c"
    ,
 &_vq_auxt__44u7__p8_0,
 
# 34828 "oggenc.c" 3 4
((void *)0)
# 34828 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p8_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u7__p8_1[] = {
  3, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 5, 6, 6, 7, 6,
  7, 7, 7, 7, 8, 8, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8,
  8, 6, 7, 6, 7, 7, 7, 7, 8, 8, 8, 8, 6, 6, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u7__p8_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u7__p8_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u7__p8_1 = {
 _vq_quantthresh__44u7__p8_1,
 _vq_quantmap__44u7__p8_1,
 11,
 11
};

static static_codebook _44u7__p8_1 = {
 2, 121,
 _vq_lengthlist__44u7__p8_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u7__p8_1,
 
# 34879 "oggenc.c" 3 4
((void *)0)
# 34879 "oggenc.c"
    ,
 &_vq_auxt__44u7__p8_1,
 
# 34881 "oggenc.c" 3 4
((void *)0)
# 34881 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p9_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u7__p9_0[] = {
  1, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u7__p9_0[] = {
 -2866.5, -2229.5, -1592.5, -955.5, -318.5, 318.5, 955.5, 1592.5,
 2229.5, 2866.5,
};

static long _vq_quantmap__44u7__p9_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u7__p9_0 = {
 _vq_quantthresh__44u7__p9_0,
 _vq_quantmap__44u7__p9_0,
 11,
 11
};

static static_codebook _44u7__p9_0 = {
 2, 121,
 _vq_lengthlist__44u7__p9_0,
 1, -512171520, 1630791680, 4, 0,
 _vq_quantlist__44u7__p9_0,
 
# 34932 "oggenc.c" 3 4
((void *)0)
# 34932 "oggenc.c"
    ,
 &_vq_auxt__44u7__p9_0,
 
# 34934 "oggenc.c" 3 4
((void *)0)
# 34934 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p9_1[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u7__p9_1[] = {
  1, 4, 4, 5, 5, 7, 7,10, 9,11,11,12,12, 4, 7, 6,
  8, 8, 9, 9,11,10,13,12,13,13, 4, 6, 7, 8, 8, 9,
  9,10,11,13,13,12,13, 5, 8, 8,10, 9,12,11,12,12,
 13,13,15,14, 6, 8, 8,10,10,11,11,13,12,13,14,14,
 15, 8,10,10,12,11,13,13,14,15,15,16,15,16, 8, 9,
 10,12,12,13,13,16,15,15,15,15,15,10,11,11,14,13,
 14,14,16,16,15,16,16,16,10,12,12,12,14,14,14,15,
 16,15,16,15,16,11,12,12,14,14,16,16,15,16,16,16,
 16,16,12,12,13,13,15,15,14,15,16,16,16,16,16,12,
 14,14,15,14,16,16,16,16,16,16,16,16,13,14,13,14,
 15,16,15,16,16,16,16,16,16,
};

static float _vq_quantthresh__44u7__p9_1[] = {
 -269.5, -220.5, -171.5, -122.5, -73.5, -24.5, 24.5, 73.5,
 122.5, 171.5, 220.5, 269.5,
};

static long _vq_quantmap__44u7__p9_1[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u7__p9_1 = {
 _vq_quantthresh__44u7__p9_1,
 _vq_quantmap__44u7__p9_1,
 13,
 13
};

static static_codebook _44u7__p9_1 = {
 2, 169,
 _vq_lengthlist__44u7__p9_1,
 1, -518889472, 1622704128, 4, 0,
 _vq_quantlist__44u7__p9_1,
 
# 34990 "oggenc.c" 3 4
((void *)0)
# 34990 "oggenc.c"
    ,
 &_vq_auxt__44u7__p9_1,
 
# 34992 "oggenc.c" 3 4
((void *)0)
# 34992 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u7__p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44u7__p9_2[] = {
  2, 4, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
  6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8,
};

static float _vq_quantthresh__44u7__p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44u7__p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44u7__p9_2 = {
 _vq_quantthresh__44u7__p9_2,
 _vq_quantmap__44u7__p9_2,
 49,
 49
};

static static_codebook _44u7__p9_2 = {
 1, 49,
 _vq_lengthlist__44u7__p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44u7__p9_2,
 
# 35086 "oggenc.c" 3 4
((void *)0)
# 35086 "oggenc.c"
    ,
 &_vq_auxt__44u7__p9_2,
 
# 35088 "oggenc.c" 3 4
((void *)0)
# 35088 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u7__short[] = {
  6,14,18,18,18,18,17,17,17,17, 4, 8,11,12,13,11,
 13,11,16,17, 6, 7, 8, 9, 8, 9,12, 9,14,17, 6, 9,
 11,12,12,12,15,12,17,17, 6, 6, 6, 8, 5, 7, 7, 8,
 14,17, 7, 9, 9,11, 8,10,10,11,14,16, 8, 7, 7, 8,
  5, 7, 4, 5,11,17, 9, 8,10, 9, 7, 9, 4, 2, 9,16,
 15,14,16,14, 8,14, 4, 3, 7,16,17,17,16,17, 9,15,
  6, 5,10,17,
};

static static_codebook _huff_book__44u7__short = {
 2, 100,
 _huff_lengthlist__44u7__short,
 0, 0, 0, 0, 0,
 
# 35106 "oggenc.c" 3 4
((void *)0)
# 35106 "oggenc.c"
    ,
 
# 35107 "oggenc.c" 3 4
((void *)0)
# 35107 "oggenc.c"
    ,
 
# 35108 "oggenc.c" 3 4
((void *)0)
# 35108 "oggenc.c"
    ,
 
# 35109 "oggenc.c" 3 4
((void *)0)
# 35109 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u8__long[] = {
  3, 9,13,13,14,13,13,13,13,14, 5, 4, 6, 8,10,12,
 13,15,13,14, 9, 5, 3, 5, 8,10,12,14,13,13,11, 7,
  4, 3, 5, 7,10,11,12,14,11, 9, 7, 4, 4, 6, 8,10,
 13,14,10,11, 9, 7, 6, 6, 7, 9,12,15,12,11,11, 8,
  7, 6, 6, 7,11,14,12,12,12,10, 8, 7, 6, 7, 9,13,
 11,12,13,12,11, 8, 8, 7, 9,12,11,14,16,16,15,11,
 10, 9, 9,11,
};

static static_codebook _huff_book__44u8__long = {
 2, 100,
 _huff_lengthlist__44u8__long,
 0, 0, 0, 0, 0,
 
# 35127 "oggenc.c" 3 4
((void *)0)
# 35127 "oggenc.c"
    ,
 
# 35128 "oggenc.c" 3 4
((void *)0)
# 35128 "oggenc.c"
    ,
 
# 35129 "oggenc.c" 3 4
((void *)0)
# 35129 "oggenc.c"
    ,
 
# 35130 "oggenc.c" 3 4
((void *)0)
# 35130 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u8__short[] = {
  7,15,18,18,18,18,18,18,18,18, 4, 6, 9,10,10,11,
 16,15,18,18, 5, 6, 6, 6, 8,10,15,15,18,18, 5, 6,
  5, 4, 6, 9,12,15,17,18, 7, 6, 6, 5, 6, 5, 8,11,
 15,18,10, 9, 9, 7, 4, 3, 6,10,16,17,13,12,12, 6,
  6, 4, 5, 9,14,16,16,17,13, 5, 5, 4, 5, 8,13,16,
 17,17,14, 7, 7, 6, 7,10,15,17,17,17,17,11,12,12,
 12,14,17,17,
};

static static_codebook _huff_book__44u8__short = {
 2, 100,
 _huff_lengthlist__44u8__short,
 0, 0, 0, 0, 0,
 
# 35148 "oggenc.c" 3 4
((void *)0)
# 35148 "oggenc.c"
    ,
 
# 35149 "oggenc.c" 3 4
((void *)0)
# 35149 "oggenc.c"
    ,
 
# 35150 "oggenc.c" 3 4
((void *)0)
# 35150 "oggenc.c"
    ,
 
# 35151 "oggenc.c" 3 4
((void *)0)
# 35151 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u8_p1_0[] = {
  1, 5, 5, 5, 7, 7, 5, 7, 7, 5, 7, 7, 8, 9, 9, 7,
  8, 9, 5, 7, 7, 7, 9, 8, 8, 9, 9, 5, 7, 7, 7, 9,
  9, 7, 9, 9, 8, 9, 9, 9,10,11, 9,10,10, 7, 9, 9,
  9,10, 9, 9,10,11, 5, 7, 7, 7, 9, 9, 8, 9, 9, 7,
  9, 9, 9,11,10, 9, 9,10, 8, 9, 9, 9,10,10, 9,11,
 10,
};

static float _vq_quantthresh__44u8_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u8_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u8_p1_0 = {
 _vq_quantthresh__44u8_p1_0,
 _vq_quantmap__44u8_p1_0,
 3,
 3
};

static static_codebook _44u8_p1_0 = {
 4, 81,
 _vq_lengthlist__44u8_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u8_p1_0,
 
# 35190 "oggenc.c" 3 4
((void *)0)
# 35190 "oggenc.c"
    ,
 &_vq_auxt__44u8_p1_0,
 
# 35192 "oggenc.c" 3 4
((void *)0)
# 35192 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u8_p2_0[] = {
  4, 5, 5, 8, 8, 6, 7, 6, 9, 9, 5, 6, 7, 9, 9, 8,
  9, 9,11,11, 8, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 7, 7, 8, 9,10, 9,10,10,12,12, 9, 9,10,
 11,12, 6, 7, 7, 9, 9, 7, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,12,11, 9,10,10,12,12, 8, 9, 9,11,11,
  9,10,10,12,12, 9,10,10,12,12,11,12,12,13,13,11,
 11,12,13,13, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,11,13,13,11,12,12,14,13, 5, 7, 7,
  9, 9, 7, 8, 8,10,10, 7, 8, 8,10,10, 9,10,10,12,
 12, 9,10,10,11,12, 7, 8, 8,10,10, 8, 9, 9,11,11,
  8, 9, 9,10,11,10,11,11,12,12,10,10,11,12,13, 6,
  8, 8,10,10, 7, 8, 8,11,10, 8, 8, 9,10,11,10,11,
 10,12,11,10,11,11,12,12, 9,10,10,12,12,10,11,11,
 13,13,10,11,11,13,13,12,12,13,13,14,12,12,13,14,
 14, 9,10,10,12,12, 9,10,10,12,12,10,11,11,12,13,
 11,12,11,14,12,12,12,12,14,14, 5, 7, 7, 9, 9, 7,
  8, 8,10,10, 7, 8, 8,10,10, 9,10,10,12,11, 9,10,
 10,12,12, 6, 8, 8,10,10, 8, 9, 8,11,10, 7, 8, 8,
 10,11,10,11,11,13,12,10,10,11,11,13, 7, 8, 8,10,
 10, 8, 9, 9,11,10, 8, 9, 9,11,11,10,11,10,13,12,
 10,11,11,12,12, 9,10,10,12,12,10,11,11,13,12, 9,
 10,10,12,12,12,13,13,14,14,11,11,12,12,14, 9,10,
 10,12,12,10,11,11,13,13,10,11,11,13,12,12,13,12,
 14,14,12,13,12,14,13, 8, 9, 9,11,11, 9,10,10,12,
 12, 9,10,10,12,12,11,12,12,14,13,11,12,12,13,14,
  9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,
 13,13,14,15,12,12,13,14,14, 9,10,10,12,12, 9,11,
 10,13,12,10,11,11,12,13,12,13,12,14,13,12,12,13,
 14,14,11,12,12,14,14,12,12,12,14,14,12,13,13,14,
 14,13,13,14,14,16,14,14,14,15,15,11,12,12,14,14,
 11,12,11,14,13,12,12,13,14,14,13,14,12,15,13,14,
 14,14,15,16, 8, 9, 9,11,11, 9,10,10,12,12, 9,10,
 10,12,12,11,12,12,14,13,11,12,12,13,14, 9,10,10,
 12,12,10,11,10,13,12, 9,10,11,12,13,12,13,12,14,
 14,12,12,13,13,14, 9,10,10,12,12,10,11,11,13,13,
 10,11,11,13,13,12,12,12,14,14,12,13,12,15,14,11,
 12,11,14,13,12,13,12,14,14,11,11,12,13,14,13,14,
 14,16,15,13,12,14,13,15,11,12,12,13,14,12,13,13,
 14,14,12,13,12,14,14,14,14,14,15,16,13,14,13,15,
 14,
};

static float _vq_quantthresh__44u8_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u8_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u8_p2_0 = {
 _vq_quantthresh__44u8_p2_0,
 _vq_quantmap__44u8_p2_0,
 5,
 5
};

static static_codebook _44u8_p2_0 = {
 4, 625,
 _vq_lengthlist__44u8_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u8_p2_0,
 
# 35267 "oggenc.c" 3 4
((void *)0)
# 35267 "oggenc.c"
    ,
 &_vq_auxt__44u8_p2_0,
 
# 35269 "oggenc.c" 3 4
((void *)0)
# 35269 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u8_p3_0[] = {
  3, 4, 4, 5, 5, 7, 7, 9, 9, 4, 5, 4, 6, 6, 7, 7,
  9, 9, 4, 4, 5, 6, 6, 7, 7, 9, 9, 5, 6, 6, 7, 7,
  8, 8,10,10, 6, 6, 6, 7, 7, 8, 8, 9,10, 7, 7, 7,
  8, 8, 9, 9,11,10, 7, 7, 7, 8, 8, 9, 9,10,11, 9,
  9, 9,10,10,11,10,12,12, 9, 9, 9,10,10,10,11,12,
 12,
};

static float _vq_quantthresh__44u8_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u8_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u8_p3_0 = {
 _vq_quantthresh__44u8_p3_0,
 _vq_quantmap__44u8_p3_0,
 9,
 9
};

static static_codebook _44u8_p3_0 = {
 2, 81,
 _vq_lengthlist__44u8_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u8_p3_0,
 
# 35315 "oggenc.c" 3 4
((void *)0)
# 35315 "oggenc.c"
    ,
 &_vq_auxt__44u8_p3_0,
 
# 35317 "oggenc.c" 3 4
((void *)0)
# 35317 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u8_p4_0[] = {
  4, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8,10,10,11,11,11,
 11, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,10,10,11,11,
 12,12, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,10,10,11,
 11,11,12, 6, 6, 6, 7, 7, 8, 7, 9, 9, 9, 9,10,10,
 11,11,12,12, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9,10,
 10,11,11,12,12, 7, 7, 7, 8, 7, 9, 8, 9, 9,10, 9,
 11,10,11,11,12,12, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9,
 10,10,10,11,11,12,12, 8, 8, 8, 9, 9, 9, 9,10,10,
 10,10,11,11,11,11,12,12, 8, 8, 8, 8, 9, 9, 9,10,
 10,10,10,11,11,11,12,12,12, 9, 9, 9, 9, 9,10, 9,
 10,10,11,10,11,11,12,12,12,12, 9, 9, 9, 9, 9, 9,
 10,10,10,11,11,11,11,12,12,12,13,10,10,10,10,10,
 11,10,11,11,11,11,12,12,12,12,12,13,10,10,10,10,
 10,10,11,11,11,11,11,12,12,12,12,13,12,11,11,11,
 11,11,11,11,12,12,12,12,12,12,12,13,13,13,11,11,
 11,11,11,11,11,12,12,12,12,12,12,13,12,13,13,11,
 12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,
 12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,
 13,
};

static float _vq_quantthresh__44u8_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u8_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u8_p4_0 = {
 _vq_quantthresh__44u8_p4_0,
 _vq_quantmap__44u8_p4_0,
 17,
 17
};

static static_codebook _44u8_p4_0 = {
 2, 289,
 _vq_lengthlist__44u8_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u8_p4_0,
 
# 35386 "oggenc.c" 3 4
((void *)0)
# 35386 "oggenc.c"
    ,
 &_vq_auxt__44u8_p4_0,
 
# 35388 "oggenc.c" 3 4
((void *)0)
# 35388 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u8_p5_0[] = {
  1, 5, 5, 5, 7, 7, 5, 7, 7, 5, 8, 7, 7, 8, 9, 7,
  9, 9, 5, 7, 8, 7, 9, 9, 7, 9, 8, 5, 7, 7, 8, 9,
  9, 7, 9, 9, 7, 9, 9, 8, 9,11, 9,11,11, 7, 9, 9,
  9,11,10, 9,11,11, 5, 7, 8, 7, 9, 9, 8, 9, 9, 7,
  9, 9, 9,11,11, 9,10,11, 7, 9, 9, 9,11,11, 8,11,
  9,
};

static float _vq_quantthresh__44u8_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44u8_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u8_p5_0 = {
 _vq_quantthresh__44u8_p5_0,
 _vq_quantmap__44u8_p5_0,
 3,
 3
};

static static_codebook _44u8_p5_0 = {
 4, 81,
 _vq_lengthlist__44u8_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44u8_p5_0,
 
# 35427 "oggenc.c" 3 4
((void *)0)
# 35427 "oggenc.c"
    ,
 &_vq_auxt__44u8_p5_0,
 
# 35429 "oggenc.c" 3 4
((void *)0)
# 35429 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u8_p5_1[] = {
  4, 5, 5, 6, 6, 7, 7, 7, 7, 7, 8, 5, 6, 6, 6, 6,
  7, 7, 7, 7, 8, 8, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8,
  8, 6, 6, 6, 7, 7, 7, 7, 8, 7, 8, 8, 6, 6, 6, 7,
  7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7,
  7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u8_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u8_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u8_p5_1 = {
 _vq_quantthresh__44u8_p5_1,
 _vq_quantmap__44u8_p5_1,
 11,
 11
};

static static_codebook _44u8_p5_1 = {
 2, 121,
 _vq_lengthlist__44u8_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u8_p5_1,
 
# 35480 "oggenc.c" 3 4
((void *)0)
# 35480 "oggenc.c"
    ,
 &_vq_auxt__44u8_p5_1,
 
# 35482 "oggenc.c" 3 4
((void *)0)
# 35482 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u8_p6_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9,10,10,10, 5, 6, 6,
  7, 7, 8, 8, 9, 9,10,10,11,11, 5, 6, 6, 7, 7, 8,
  9, 9, 9,10,10,11,11, 7, 7, 7, 8, 8, 9, 9,10,10,
 11,11,11,11, 7, 7, 7, 8, 8, 9, 9,10,10,10,11,11,
 11, 8, 9, 9, 9, 9,10,10,10,10,11,11,12,12, 8, 9,
  9, 9, 9,10,10,10,11,11,11,12,12, 8, 9, 9,10,10,
 11,10,11,11,12,12,12,12, 9, 9, 9,10,10,11,11,11,
 11,12,12,12,12,10,10,10,11,11,11,11,12,12,12,12,
 13,13,10,10,10,11,11,11,11,12,12,12,12,13,13,11,
 11,11,12,12,12,12,12,12,13,13,13,13,11,11,11,12,
 12,12,12,12,12,13,13,13,13,
};

static float _vq_quantthresh__44u8_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u8_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u8_p6_0 = {
 _vq_quantthresh__44u8_p6_0,
 _vq_quantmap__44u8_p6_0,
 13,
 13
};

static static_codebook _44u8_p6_0 = {
 2, 169,
 _vq_lengthlist__44u8_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u8_p6_0,
 
# 35538 "oggenc.c" 3 4
((void *)0)
# 35538 "oggenc.c"
    ,
 &_vq_auxt__44u8_p6_0,
 
# 35540 "oggenc.c" 3 4
((void *)0)
# 35540 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u8_p6_1[] = {
  3, 4, 4, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5,
};

static float _vq_quantthresh__44u8_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u8_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u8_p6_1 = {
 _vq_quantthresh__44u8_p6_1,
 _vq_quantmap__44u8_p6_1,
 5,
 5
};

static static_codebook _44u8_p6_1 = {
 2, 25,
 _vq_lengthlist__44u8_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u8_p6_1,
 
# 35577 "oggenc.c" 3 4
((void *)0)
# 35577 "oggenc.c"
    ,
 &_vq_auxt__44u8_p6_1,
 
# 35579 "oggenc.c" 3 4
((void *)0)
# 35579 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u8_p7_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 8, 9, 9,10,10, 4, 6, 6,
  8, 8, 9, 8, 9, 9,10,10,11,11, 4, 6, 6, 8, 8, 8,
  9, 9, 9,10,10,11,11, 7, 8, 8, 9, 9,10,10,10,10,
 11,11,12,12, 7, 8, 8, 9, 9,10,10,10,10,11,11,12,
 12, 8, 9, 9,10,10,10,10,11,11,12,12,13,13, 8, 9,
  9,10,10,10,11,11,11,12,13,13,13, 9, 9, 9,10,10,
 11,11,12,12,13,13,14,14, 9, 9, 9,10,10,11,11,12,
 12,13,13,14,14,10,10,10,11,11,12,12,13,13,14,14,
 14,14,10,10,11,11,12,12,12,13,13,13,14,14,15,11,
 11,11,12,12,13,13,14,14,14,14,16,15,11,11,11,12,
 12,13,13,14,14,14,14,16,15,
};

static float _vq_quantthresh__44u8_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44u8_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u8_p7_0 = {
 _vq_quantthresh__44u8_p7_0,
 _vq_quantmap__44u8_p7_0,
 13,
 13
};

static static_codebook _44u8_p7_0 = {
 2, 169,
 _vq_lengthlist__44u8_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44u8_p7_0,
 
# 35635 "oggenc.c" 3 4
((void *)0)
# 35635 "oggenc.c"
    ,
 &_vq_auxt__44u8_p7_0,
 
# 35637 "oggenc.c" 3 4
((void *)0)
# 35637 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u8_p7_1[] = {
  4, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 5, 6, 6, 7, 7,
  7, 7, 7, 7, 7, 7, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7,
  7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 6, 7, 7, 7,
  7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8,
  8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7,
  7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8,
  8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7,
  7, 8, 8, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u8_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u8_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u8_p7_1 = {
 _vq_quantthresh__44u8_p7_1,
 _vq_quantmap__44u8_p7_1,
 11,
 11
};

static static_codebook _44u8_p7_1 = {
 2, 121,
 _vq_lengthlist__44u8_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u8_p7_1,
 
# 35688 "oggenc.c" 3 4
((void *)0)
# 35688 "oggenc.c"
    ,
 &_vq_auxt__44u8_p7_1,
 
# 35690 "oggenc.c" 3 4
((void *)0)
# 35690 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u8_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 7, 9, 8,10,10,11,11, 4,
  6, 6, 8, 8,10,10, 9, 9,10,10,11,10,12,12, 4, 6,
  6, 8, 8, 9,10, 9, 9,10,10,11,11,11,12, 7, 8, 8,
 10,10,11,11,11,10,11,11,13,12,13,12, 7, 8, 8,10,
 10,11,11,10,11,11,11,12,12,13,13, 8,10, 9,11,11,
 12,12,11,11,12,12,13,13,14,14, 8, 9, 9,11,11,12,
 12,11,11,12,12,14,13,13,13, 8, 9, 9,11,10,12,11,
 12,12,13,13,14,13,14,13, 8, 9, 9,11,11,11,12,12,
 12,13,13,13,14,14,14, 9,10,10,12,11,12,12,13,13,
 14,14,15,13,14,14, 9,10,10,11,12,12,12,13,13,14,
 14,15,14,14,14,10,11,11,12,12,13,13,14,13,14,14,
 15,14,15,15,10,11,11,12,12,13,13,13,14,14,14,14,
 15,16,15,11,12,12,13,12,14,14,14,13,15,14,16,15,
 16,15,11,12,12,13,13,13,14,14,15,15,15,15,16,15,
 15,
};

static float _vq_quantthresh__44u8_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44u8_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u8_p8_0 = {
 _vq_quantthresh__44u8_p8_0,
 _vq_quantmap__44u8_p8_0,
 15,
 15
};

static static_codebook _44u8_p8_0 = {
 2, 225,
 _vq_lengthlist__44u8_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44u8_p8_0,
 
# 35752 "oggenc.c" 3 4
((void *)0)
# 35752 "oggenc.c"
    ,
 &_vq_auxt__44u8_p8_0,
 
# 35754 "oggenc.c" 3 4
((void *)0)
# 35754 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44u8_p8_1[] = {
  4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 7, 6, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 8, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9,10, 9,10, 8, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9,10, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
 10, 9,10,10, 9,10, 9,10, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9,10,10, 9,10,10, 9,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,
 10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9,10, 9,10,10,10,10,10,10,10,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9,10, 9, 9,10,10,10,10,10,10,10,10,
 10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,
 10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,10,10,
 10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,
 10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,
 10,10, 9,10,10,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44u8_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44u8_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44u8_p8_1 = {
 _vq_quantthresh__44u8_p8_1,
 _vq_quantmap__44u8_p8_1,
 21,
 21
};

static static_codebook _44u8_p8_1 = {
 2, 441,
 _vq_lengthlist__44u8_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44u8_p8_1,
 
# 35837 "oggenc.c" 3 4
((void *)0)
# 35837 "oggenc.c"
    ,
 &_vq_auxt__44u8_p8_1,
 
# 35839 "oggenc.c" 3 4
((void *)0)
# 35839 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p9_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u8_p9_0[] = {
  1, 4, 4, 9, 9, 9, 9, 9, 9, 5, 9, 9, 8, 8, 8, 8,
  8, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8,
};

static float _vq_quantthresh__44u8_p9_0[] = {
 -3258.5, -2327.5, -1396.5, -465.5, 465.5, 1396.5, 2327.5, 3258.5,
};

static long _vq_quantmap__44u8_p9_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u8_p9_0 = {
 _vq_quantthresh__44u8_p9_0,
 _vq_quantmap__44u8_p9_0,
 9,
 9
};

static static_codebook _44u8_p9_0 = {
 2, 81,
 _vq_lengthlist__44u8_p9_0,
 1, -511895552, 1631393792, 4, 0,
 _vq_quantlist__44u8_p9_0,
 
# 35885 "oggenc.c" 3 4
((void *)0)
# 35885 "oggenc.c"
    ,
 &_vq_auxt__44u8_p9_0,
 
# 35887 "oggenc.c" 3 4
((void *)0)
# 35887 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p9_1[] = {
 9,
 8,
 10,
 7,
 11,
 6,
 12,
 5,
 13,
 4,
 14,
 3,
 15,
 2,
 16,
 1,
 17,
 0,
 18,
};

static long _vq_lengthlist__44u8_p9_1[] = {
  1, 4, 4, 7, 7, 8, 8, 7, 8, 9, 9,10,10,11,11,12,
 12,12,12, 4, 7, 6, 9, 9, 9, 9, 9, 8, 9, 9,11,10,
 12,11,13,12,13,14, 4, 6, 6, 9, 9, 9, 9, 8, 9, 9,
 10,10,11,12,12,12,12,13,12, 7, 9, 8,11,10,10,10,
 10,10,11,11,12,11,14,12,13,14,14,13, 7, 8, 9,10,
 10,10,10,10,10,11,11,12,13,13,13,14,15,15,13, 8,
  9, 9,11,11,11,11,11,12,13,12,14,14,14,14,14,14,
 15,13, 8, 9, 9,10,11,11,11,12,12,13,12,13,14,13,
 15,14,15,15,15, 8, 9, 9,10,10,12,11,13,12,13,13,
 14,14,13,15,14,15,14,14, 8, 9, 9,10,11,12,12,13,
 13,14,14,14,14,15,15,15,12,14,14, 9,11,10,11,11,
 14,12,13,14,15,14,14,14,14,15,15,15,15,15, 9,10,
 11,11,12,12,13,13,14,14,14,14,15,15,14,15,15,15,
 15,10,11,11,12,12,14,14,13,14,14,15,15,15,15,15,
 15,15,15,15,10,11,11,12,13,13,13,14,14,15,15,14,
 14,15,15,15,15,14,15,11,12,13,15,13,14,15,15,15,
 15,14,15,15,15,15,15,15,15,15,11,12,12,14,14,14,
 13,14,15,15,14,15,15,15,15,15,15,15,15,13,13,14,
 13,13,14,14,15,14,15,15,15,15,15,15,15,15,15,15,
 11,14,13,14,14,15,14,14,15,15,15,15,15,15,15,15,
 15,15,15,12,12,13,14,13,13,14,15,14,15,15,15,15,
 15,15,15,15,15,15,13,13,14,14,13,15,14,14,15,15,
 14,15,15,15,15,15,15,15,15,
};

static float _vq_quantthresh__44u8_p9_1[] = {
 -416.5, -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5,
 -24.5, 24.5, 73.5, 122.5, 171.5, 220.5, 269.5, 318.5,
 367.5, 416.5,
};

static long _vq_quantmap__44u8_p9_1[] = {
    17, 15, 13, 11, 9, 7, 5, 3,
     1, 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18,
};

static encode_aux_threshmatch _vq_auxt__44u8_p9_1 = {
 _vq_quantthresh__44u8_p9_1,
 _vq_quantmap__44u8_p9_1,
 19,
 19
};

static static_codebook _44u8_p9_1 = {
 2, 361,
 _vq_lengthlist__44u8_p9_1,
 1, -518287360, 1622704128, 5, 0,
 _vq_quantlist__44u8_p9_1,
 
# 35963 "oggenc.c" 3 4
((void *)0)
# 35963 "oggenc.c"
    ,
 &_vq_auxt__44u8_p9_1,
 
# 35965 "oggenc.c" 3 4
((void *)0)
# 35965 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u8_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44u8_p9_2[] = {
  2, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44u8_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44u8_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44u8_p9_2 = {
 _vq_quantthresh__44u8_p9_2,
 _vq_quantmap__44u8_p9_2,
 49,
 49
};

static static_codebook _44u8_p9_2 = {
 1, 49,
 _vq_lengthlist__44u8_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44u8_p9_2,
 
# 36059 "oggenc.c" 3 4
((void *)0)
# 36059 "oggenc.c"
    ,
 &_vq_auxt__44u8_p9_2,
 
# 36061 "oggenc.c" 3 4
((void *)0)
# 36061 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u9__long[] = {
  3, 9,13,13,14,14,13,14,14,13, 5, 5, 9,10,12,13,
 13,14,14,14, 9, 5, 6, 6, 8,11,12,14,14,14,11, 7,
  5, 3, 5, 8,10,12,13,12,12,10, 7, 4, 3, 5, 8,10,
 12,13,10,12, 9, 7, 4, 4, 6, 8,11,13,12,12,11, 9,
  7, 5, 6, 7, 9,13,12,12,12,11, 8, 7, 6, 6, 8,12,
 12,12,13,12,10, 9, 7, 7, 8,11,11,13,15,15,14,12,
 10, 9, 9,10,
};

static static_codebook _huff_book__44u9__long = {
 2, 100,
 _huff_lengthlist__44u9__long,
 0, 0, 0, 0, 0,
 
# 36079 "oggenc.c" 3 4
((void *)0)
# 36079 "oggenc.c"
    ,
 
# 36080 "oggenc.c" 3 4
((void *)0)
# 36080 "oggenc.c"
    ,
 
# 36081 "oggenc.c" 3 4
((void *)0)
# 36081 "oggenc.c"
    ,
 
# 36082 "oggenc.c" 3 4
((void *)0)
# 36082 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__44u9__short[] = {
 10,17,18,18,18,18,18,18,18,18, 5, 8,12,13,14,13,
 16,17,16,17, 5, 6, 8, 8,10, 9,12,16,16,17, 5, 6,
  7, 5, 6, 9,12,15,16,16, 7, 6, 6, 4, 5, 7, 9,14,
 15,17,10, 8, 8, 6, 6, 3, 5, 9,13,18,14,11,11,10,
  6, 3, 4, 7,13,17,15,16,16,10, 5, 6, 4, 4, 9,13,
 18,18,18,11, 6, 8, 5, 6,10,15,18,18,18,14,10,11,
  9,10,16,18,
};

static static_codebook _huff_book__44u9__short = {
 2, 100,
 _huff_lengthlist__44u9__short,
 0, 0, 0, 0, 0,
 
# 36100 "oggenc.c" 3 4
((void *)0)
# 36100 "oggenc.c"
    ,
 
# 36101 "oggenc.c" 3 4
((void *)0)
# 36101 "oggenc.c"
    ,
 
# 36102 "oggenc.c" 3 4
((void *)0)
# 36102 "oggenc.c"
    ,
 
# 36103 "oggenc.c" 3 4
((void *)0)
# 36103 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u9_p1_0[] = {
  1, 5, 5, 5, 7, 7, 5, 7, 7, 5, 7, 7, 8, 9, 9, 7,
  9, 9, 5, 7, 7, 7, 9, 9, 7, 9, 9, 5, 7, 7, 7, 9,
  9, 7, 9, 9, 8, 9, 9, 9,10,11, 9,11,10, 7, 9, 9,
  9,11,10, 9,10,11, 5, 7, 7, 7, 9, 9, 7, 9, 9, 7,
  9, 9, 9,11,11, 9,10,11, 8, 9, 9, 9,10,10, 9,11,
 10,
};

static float _vq_quantthresh__44u9_p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__44u9_p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u9_p1_0 = {
 _vq_quantthresh__44u9_p1_0,
 _vq_quantmap__44u9_p1_0,
 3,
 3
};

static static_codebook _44u9_p1_0 = {
 4, 81,
 _vq_lengthlist__44u9_p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__44u9_p1_0,
 
# 36142 "oggenc.c" 3 4
((void *)0)
# 36142 "oggenc.c"
    ,
 &_vq_auxt__44u9_p1_0,
 
# 36144 "oggenc.c" 3 4
((void *)0)
# 36144 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p2_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u9_p2_0[] = {
  3, 6, 5, 8, 8, 6, 7, 7, 9, 9, 6, 7, 7, 9, 9, 8,
  9, 9,11,10, 8, 9, 9,10,11, 6, 7, 7, 9, 9, 7, 8,
  8,10,10, 7, 8, 8, 9,10, 9,10,10,11,11, 9, 9,10,
 11,11, 6, 7, 7, 9, 9, 7, 8, 7,10, 9, 7, 8, 8,10,
 10, 9,10, 9,11,11, 9,10,10,11,11, 8, 9, 9,11,11,
  9,10,10,12,11, 9,10,10,11,11,11,12,12,13,13,11,
 11,11,12,13, 8, 9, 9,11,11, 9,10,10,11,11, 9,10,
 10,12,12,11,11,11,13,12,11,11,11,13,13, 6, 7, 7,
  9, 9, 7, 8, 8,10, 9, 7, 8, 8, 9,10, 9,10,10,11,
 11, 9,10,10,11,11, 7, 8, 8,10,10, 8, 9, 9,10,10,
  8, 9, 9,10,10,10,10,10,12,12,10,10,10,11,12, 7,
  8, 8,10,10, 8, 9, 8,10,10, 8, 9, 9,10,10, 9,10,
 10,12,11,10,10,10,12,12, 9,10,10,12,11,10,10,10,
 12,12,10,10,10,12,12,12,12,12,12,13,11,12,12,13,
 13, 9,10,10,11,11, 9,10,10,12,11,10,10,10,12,12,
 11,12,11,13,12,12,12,12,13,13, 6, 7, 7, 9, 9, 7,
  8, 8,10, 9, 7, 8, 8, 9,10, 9,10,10,12,11, 9,10,
 10,11,11, 7, 8, 8,10, 9, 8, 9, 9,11,10, 8, 8, 9,
 10,10,10,10,10,12,12,10,10,10,11,12, 7, 8, 8,10,
 10, 8, 9, 9,10,10, 8, 9, 9,10,10,10,10,10,12,12,
 10,10,10,12,12, 9,10,10,11,11,10,11,10,12,12, 9,
 10,10,11,12,11,12,12,13,13,11,11,12,11,13, 9,10,
 10,11,12,10,10,10,12,12,10,10,10,12,12,11,12,12,
 13,13,12,12,12,13,13, 8, 9, 9,11,11, 9,10,10,12,
 11, 9,10,10,11,12,11,12,12,13,13,11,11,12,13,13,
  9,10,10,12,12,10,10,10,12,12,10,11,10,12,12,12,
 12,12,13,13,12,12,12,13,13, 9,10,10,12,11,10,10,
 10,12,11,10,10,10,12,12,11,12,12,13,13,12,12,12,
 13,14,11,12,12,13,13,11,12,12,13,13,11,12,12,13,
 13,13,13,14,13,15,13,13,13,14,14,11,11,11,13,13,
 11,12,11,13,13,11,12,12,13,13,12,13,12,14,12,13,
 13,13,15,14, 8, 9, 9,11,11, 9,10,10,11,11, 9,10,
 10,11,12,11,12,11,13,13,11,12,12,13,13, 9,10,10,
 11,11,10,11,10,12,12, 9,10,10,12,12,12,12,12,13,
 13,11,11,12,12,13, 9,10,10,12,12,10,10,11,12,12,
 10,11,10,12,12,11,12,12,13,13,12,12,12,13,13,11,
 11,11,13,13,11,12,12,13,13,11,11,12,13,13,13,13,
 13,14,14,12,12,13,12,14,11,11,12,13,13,12,12,12,
 14,13,11,12,12,13,13,13,13,13,14,14,13,13,13,14,
 13,
};

static float _vq_quantthresh__44u9_p2_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u9_p2_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u9_p2_0 = {
 _vq_quantthresh__44u9_p2_0,
 _vq_quantmap__44u9_p2_0,
 5,
 5
};

static static_codebook _44u9_p2_0 = {
 4, 625,
 _vq_lengthlist__44u9_p2_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u9_p2_0,
 
# 36219 "oggenc.c" 3 4
((void *)0)
# 36219 "oggenc.c"
    ,
 &_vq_auxt__44u9_p2_0,
 
# 36221 "oggenc.c" 3 4
((void *)0)
# 36221 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p3_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__44u9_p3_0[] = {
  3, 4, 4, 5, 5, 7, 7, 9, 8, 4, 5, 5, 6, 6, 7, 7,
  9, 9, 4, 5, 5, 6, 6, 7, 7, 9, 9, 5, 6, 6, 7, 6,
  8, 7, 9, 9, 5, 6, 6, 6, 7, 7, 8, 9, 9, 7, 7, 7,
  8, 7, 9, 8,10,10, 7, 7, 7, 7, 8, 8, 9,10,10, 9,
  9, 9, 9, 9,10,10,11,11, 9, 9, 9, 9, 9,10,10,11,
 11,
};

static float _vq_quantthresh__44u9_p3_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__44u9_p3_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__44u9_p3_0 = {
 _vq_quantthresh__44u9_p3_0,
 _vq_quantmap__44u9_p3_0,
 9,
 9
};

static static_codebook _44u9_p3_0 = {
 2, 81,
 _vq_lengthlist__44u9_p3_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__44u9_p3_0,
 
# 36267 "oggenc.c" 3 4
((void *)0)
# 36267 "oggenc.c"
    ,
 &_vq_auxt__44u9_p3_0,
 
# 36269 "oggenc.c" 3 4
((void *)0)
# 36269 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p4_0[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__44u9_p4_0[] = {
  4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9,10,10,11,
 11, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8,10, 9,11,10,
 12,11, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9,10,10,
 11,11,11, 6, 6, 6, 7, 6, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,12, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9,10,
 10,11,11,12,12, 7, 7, 7, 7, 7, 8, 8, 9, 8, 9, 9,
 10,10,11,11,12,12, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9,
  9,10,10,11,11,12,12, 8, 8, 8, 8, 8, 9, 8, 9, 9,
 10,10,11,10,12,11,12,12, 8, 8, 8, 8, 8, 8, 9, 9,
  9,10,10,10,11,11,12,12,13, 8, 8, 8, 9, 9, 9, 9,
 10,10,11,10,11,11,12,12,13,12, 8, 8, 9, 9, 9, 9,
  9,10,10,10,11,11,11,12,12,12,13, 9,10, 9,10,10,
 10,10,11,10,11,11,12,11,13,12,13,13, 9, 9,10,10,
 10,10,10,10,11,11,11,11,12,12,13,13,13,10,11,10,
 11,11,11,11,12,11,12,12,13,12,13,13,14,13,10,10,
 11,11,11,11,11,11,12,12,12,12,13,13,13,13,14,11,
 12,11,12,12,12,12,12,12,13,13,13,13,14,13,14,14,
 11,11,12,12,12,12,12,12,12,12,13,13,13,13,14,14,
 14,
};

static float _vq_quantthresh__44u9_p4_0[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__44u9_p4_0[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__44u9_p4_0 = {
 _vq_quantthresh__44u9_p4_0,
 _vq_quantmap__44u9_p4_0,
 17,
 17
};

static static_codebook _44u9_p4_0 = {
 2, 289,
 _vq_lengthlist__44u9_p4_0,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__44u9_p4_0,
 
# 36338 "oggenc.c" 3 4
((void *)0)
# 36338 "oggenc.c"
    ,
 &_vq_auxt__44u9_p4_0,
 
# 36340 "oggenc.c" 3 4
((void *)0)
# 36340 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p5_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__44u9_p5_0[] = {
  1, 5, 5, 5, 7, 7, 5, 7, 7, 5, 8, 7, 7, 8, 9, 7,
  8, 9, 5, 7, 8, 7, 9, 8, 7, 9, 8, 5, 8, 8, 8, 9,
  9, 7, 9, 9, 7, 9, 9, 8, 9,11, 9,11,10, 7, 9, 9,
  9,11, 9, 9,10,11, 5, 7, 8, 7, 9, 9, 8, 9, 9, 7,
  9, 9, 9,11,10, 9, 9,11, 7, 9, 9, 9,10,11, 8,11,
  9,
};

static float _vq_quantthresh__44u9_p5_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__44u9_p5_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__44u9_p5_0 = {
 _vq_quantthresh__44u9_p5_0,
 _vq_quantmap__44u9_p5_0,
 3,
 3
};

static static_codebook _44u9_p5_0 = {
 4, 81,
 _vq_lengthlist__44u9_p5_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__44u9_p5_0,
 
# 36379 "oggenc.c" 3 4
((void *)0)
# 36379 "oggenc.c"
    ,
 &_vq_auxt__44u9_p5_0,
 
# 36381 "oggenc.c" 3 4
((void *)0)
# 36381 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p5_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u9_p5_1[] = {
  5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,
  7, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8,
  8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7,
  7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8,
  8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7,
  7, 7, 7, 8, 8, 8, 8, 8, 8,
};

static float _vq_quantthresh__44u9_p5_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u9_p5_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u9_p5_1 = {
 _vq_quantthresh__44u9_p5_1,
 _vq_quantmap__44u9_p5_1,
 11,
 11
};

static static_codebook _44u9_p5_1 = {
 2, 121,
 _vq_lengthlist__44u9_p5_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u9_p5_1,
 
# 36432 "oggenc.c" 3 4
((void *)0)
# 36432 "oggenc.c"
    ,
 &_vq_auxt__44u9_p5_1,
 
# 36434 "oggenc.c" 3 4
((void *)0)
# 36434 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u9_p6_0[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 4, 5, 5,
  7, 7, 8, 8, 8, 8,10,10,11,11, 4, 5, 5, 7, 7, 8,
  8, 8, 8,10,10,11,11, 6, 7, 7, 8, 7, 8, 8, 9, 9,
 10,10,11,11, 6, 7, 7, 8, 7, 8, 8, 9, 9,10,10,11,
 11, 7, 8, 8, 8, 8, 9, 9, 9,10,11,11,12,12, 7, 8,
  8, 8, 8, 9, 9,10, 9,11,11,12,12, 8, 9, 8, 9, 9,
 10,10,10,10,11,11,12,12, 8, 8, 8, 9, 9,10, 9,10,
 10,11,11,12,12, 9,10,10,10,10,11,11,11,11,12,12,
 13,13, 9,10,10,10,10,11,11,11,11,12,12,13,12,10,
 11,11,11,11,12,12,12,12,12,12,13,13,10,11,11,11,
 11,12,12,12,12,13,12,13,13,
};

static float _vq_quantthresh__44u9_p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__44u9_p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u9_p6_0 = {
 _vq_quantthresh__44u9_p6_0,
 _vq_quantmap__44u9_p6_0,
 13,
 13
};

static static_codebook _44u9_p6_0 = {
 2, 169,
 _vq_lengthlist__44u9_p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__44u9_p6_0,
 
# 36490 "oggenc.c" 3 4
((void *)0)
# 36490 "oggenc.c"
    ,
 &_vq_auxt__44u9_p6_0,
 
# 36492 "oggenc.c" 3 4
((void *)0)
# 36492 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__44u9_p6_1[] = {
  4, 4, 4, 5, 5, 4, 5, 4, 5, 5, 4, 4, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5,
};

static float _vq_quantthresh__44u9_p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__44u9_p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__44u9_p6_1 = {
 _vq_quantthresh__44u9_p6_1,
 _vq_quantmap__44u9_p6_1,
 5,
 5
};

static static_codebook _44u9_p6_1 = {
 2, 25,
 _vq_lengthlist__44u9_p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__44u9_p6_1,
 
# 36529 "oggenc.c" 3 4
((void *)0)
# 36529 "oggenc.c"
    ,
 &_vq_auxt__44u9_p6_1,
 
# 36531 "oggenc.c" 3 4
((void *)0)
# 36531 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p7_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__44u9_p7_0[] = {
  1, 5, 4, 6, 6, 7, 7, 8, 8, 9, 9,10,10, 5, 6, 6,
  7, 7, 8, 8, 9, 9,10,10,11,11, 5, 6, 6, 7, 7, 8,
  8, 9, 9,10,10,11,11, 6, 7, 7, 8, 8, 9, 9,10,10,
 11,11,12,12, 7, 7, 7, 8, 8, 9, 9,10,10,11,11,12,
 12, 8, 8, 8, 9, 9,10,10,11,10,12,12,13,12, 8, 8,
  8, 9, 9,10,10,11,11,12,12,12,13, 9, 9, 9,10,10,
 11,11,12,11,13,13,13,14, 9, 9, 9,10,10,11,11,11,
 12,13,12,13,13,10,10,10,11,11,12,12,13,12,13,13,
 14,14,10,10,10,11,11,11,12,12,12,13,13,14,14,11,
 11,11,12,12,13,13,13,13,14,14,15,14,11,11,11,12,
 12,13,13,13,14,14,15,15,15,
};

static float _vq_quantthresh__44u9_p7_0[] = {
 -60.5, -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5,
 27.5, 38.5, 49.5, 60.5,
};

static long _vq_quantmap__44u9_p7_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__44u9_p7_0 = {
 _vq_quantthresh__44u9_p7_0,
 _vq_quantmap__44u9_p7_0,
 13,
 13
};

static static_codebook _44u9_p7_0 = {
 2, 169,
 _vq_lengthlist__44u9_p7_0,
 1, -523206656, 1618345984, 4, 0,
 _vq_quantlist__44u9_p7_0,
 
# 36587 "oggenc.c" 3 4
((void *)0)
# 36587 "oggenc.c"
    ,
 &_vq_auxt__44u9_p7_0,
 
# 36589 "oggenc.c" 3 4
((void *)0)
# 36589 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__44u9_p7_1[] = {
  5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7,
  7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7,
  7, 7, 7, 7, 7, 7, 8, 8, 8,
};

static float _vq_quantthresh__44u9_p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__44u9_p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__44u9_p7_1 = {
 _vq_quantthresh__44u9_p7_1,
 _vq_quantmap__44u9_p7_1,
 11,
 11
};

static static_codebook _44u9_p7_1 = {
 2, 121,
 _vq_lengthlist__44u9_p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__44u9_p7_1,
 
# 36640 "oggenc.c" 3 4
((void *)0)
# 36640 "oggenc.c"
    ,
 &_vq_auxt__44u9_p7_1,
 
# 36642 "oggenc.c" 3 4
((void *)0)
# 36642 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p8_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u9_p8_0[] = {
  1, 4, 4, 7, 7, 8, 8, 8, 7, 9, 9,10,10,11,11, 4,
  6, 6, 8, 8, 9, 9, 9, 9,10,10,11,10,12,11, 4, 6,
  6, 8, 8, 9,10, 9, 9,10,10,11,11,12,12, 7, 8, 8,
 10,10,11,11,11,10,11,11,12,12,13,12, 7, 8, 8,10,
 10,11,11,10,10,11,12,12,12,13,13, 8,10, 9,11,11,
 12,12,11,12,12,12,13,13,14,14, 8, 9, 9,11,11,12,
 12,11,12,12,13,13,13,14,14, 8, 9, 9,10,10,11,11,
 13,12,13,13,14,14,15,14, 8, 9, 9,10,10,11,12,12,
 13,13,13,14,14,14,15, 9,10,10,11,11,13,12,13,13,
 14,14,15,15,15,15, 9,10,10,11,12,12,12,13,13,14,
 15,14,15,15,15,10,11,11,12,12,13,13,14,14,15,15,
 15,16,16,15,10,11,11,12,12,13,14,14,14,15,14,15,
 16,16,17,11,12,12,13,13,14,14,15,14,16,15,15,16,
 16,16,11,12,12,13,13,14,14,14,15,15,15,16,16,17,
 16,
};

static float _vq_quantthresh__44u9_p8_0[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__44u9_p8_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u9_p8_0 = {
 _vq_quantthresh__44u9_p8_0,
 _vq_quantmap__44u9_p8_0,
 15,
 15
};

static static_codebook _44u9_p8_0 = {
 2, 225,
 _vq_lengthlist__44u9_p8_0,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__44u9_p8_0,
 
# 36704 "oggenc.c" 3 4
((void *)0)
# 36704 "oggenc.c"
    ,
 &_vq_auxt__44u9_p8_0,
 
# 36706 "oggenc.c" 3 4
((void *)0)
# 36706 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p8_1[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__44u9_p8_1[] = {
  4, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 7, 7, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7,
  7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9, 8, 8,
  8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,
  9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9,10,10,10,10, 8, 8, 8, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10, 9, 9,10,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9, 9,10,
 10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10,10,10, 9,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,10, 9,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,
 10, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 9,10,10,10,10,
 10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9,
  9,10, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,
  9, 9, 9, 9, 9, 9, 9, 9,10,10, 9,10,10,10,10,10,
 10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,
  9,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 9,
  9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10, 9, 9, 9, 9, 9, 9,10,10, 9,10,10,10,
 10,10,10,10,10,10,10,10,10,
};

static float _vq_quantthresh__44u9_p8_1[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__44u9_p8_1[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__44u9_p8_1 = {
 _vq_quantthresh__44u9_p8_1,
 _vq_quantmap__44u9_p8_1,
 21,
 21
};

static static_codebook _44u9_p8_1 = {
 2, 441,
 _vq_lengthlist__44u9_p8_1,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__44u9_p8_1,
 
# 36789 "oggenc.c" 3 4
((void *)0)
# 36789 "oggenc.c"
    ,
 &_vq_auxt__44u9_p8_1,
 
# 36791 "oggenc.c" 3 4
((void *)0)
# 36791 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p9_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__44u9_p9_0[] = {
  1, 5, 5,10,10,10,10,10,10,10,10,10,10,10,10, 5,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10, 5,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9,
};

static float _vq_quantthresh__44u9_p9_0[] = {
 -6051.5, -5120.5, -4189.5, -3258.5, -2327.5, -1396.5, -465.5, 465.5,
 1396.5, 2327.5, 3258.5, 4189.5, 5120.5, 6051.5,
};

static long _vq_quantmap__44u9_p9_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__44u9_p9_0 = {
 _vq_quantthresh__44u9_p9_0,
 _vq_quantmap__44u9_p9_0,
 15,
 15
};

static static_codebook _44u9_p9_0 = {
 2, 225,
 _vq_lengthlist__44u9_p9_0,
 1, -510036736, 1631393792, 4, 0,
 _vq_quantlist__44u9_p9_0,
 
# 36853 "oggenc.c" 3 4
((void *)0)
# 36853 "oggenc.c"
    ,
 &_vq_auxt__44u9_p9_0,
 
# 36855 "oggenc.c" 3 4
((void *)0)
# 36855 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p9_1[] = {
 9,
 8,
 10,
 7,
 11,
 6,
 12,
 5,
 13,
 4,
 14,
 3,
 15,
 2,
 16,
 1,
 17,
 0,
 18,
};

static long _vq_lengthlist__44u9_p9_1[] = {
  1, 4, 4, 7, 7, 8, 8, 7, 7, 9, 9,10,10,12,11,12,
 11,12,12, 4, 7, 6, 9, 9, 9, 9, 9, 9,10, 9,11, 9,
 11,11,13,12,14,12, 4, 6, 6, 9, 9, 9, 9, 8, 9,10,
 10,11,11,12,12,12,13,13,13, 7, 9, 8,11,11,11,11,
 10,10,11,11,12,12,14,13,14,14,15,13, 7, 9, 9,10,
 10,10,10,10,10,11,11,12,13,13,13,14,14,15,13, 8,
  9, 9,12,10,11,11,12,11,12,12,13,13,14,14,15,16,
 15,14, 8, 9, 9,10,11,12,11,11,12,13,12,14,14,13,
 15,16,15,14,16, 7, 9, 9,10,10,12,11,12,13,16,13,
 14,16,14,15,15,15,15,15, 7, 9, 9,10,11,11,12,12,
 13,14,16,14,14,16,16,14,14,14,15, 9,10,11,12,12,
 12,13,13,13,16,15,16,15,14,15,15,15,16,16, 9,10,
 11,12,13,13,14,13,14,15,14,14,16,16,16,16,16,16,
 16,10,11,11,13,13,15,13,15,13,14,16,16,16,16,16,
 16,15,14,16,11,11,12,12,13,13,15,13,15,14,15,16,
 16,16,16,16,16,16,16,12,13,13,13,13,15,14,15,16,
 16,16,16,14,16,16,16,16,16,16,13,12,12,14,14,13,
 15,14,16,15,16,16,16,16,16,16,16,16,15,12,12,13,
 13,14,16,15,16,15,16,16,16,16,16,16,16,16,16,16,
 12,13,13,14,15,14,14,16,16,15,16,16,16,16,16,16,
 15,16,16,13,14,14,13,14,14,15,16,15,16,16,16,16,
 16,16,16,16,15,16,12,13,13,14,14,14,14,16,16,16,
 16,16,16,15,16,16,16,16,16,
};

static float _vq_quantthresh__44u9_p9_1[] = {
 -416.5, -367.5, -318.5, -269.5, -220.5, -171.5, -122.5, -73.5,
 -24.5, 24.5, 73.5, 122.5, 171.5, 220.5, 269.5, 318.5,
 367.5, 416.5,
};

static long _vq_quantmap__44u9_p9_1[] = {
    17, 15, 13, 11, 9, 7, 5, 3,
     1, 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18,
};

static encode_aux_threshmatch _vq_auxt__44u9_p9_1 = {
 _vq_quantthresh__44u9_p9_1,
 _vq_quantmap__44u9_p9_1,
 19,
 19
};

static static_codebook _44u9_p9_1 = {
 2, 361,
 _vq_lengthlist__44u9_p9_1,
 1, -518287360, 1622704128, 5, 0,
 _vq_quantlist__44u9_p9_1,
 
# 36931 "oggenc.c" 3 4
((void *)0)
# 36931 "oggenc.c"
    ,
 &_vq_auxt__44u9_p9_1,
 
# 36933 "oggenc.c" 3 4
((void *)0)
# 36933 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__44u9_p9_2[] = {
 24,
 23,
 25,
 22,
 26,
 21,
 27,
 20,
 28,
 19,
 29,
 18,
 30,
 17,
 31,
 16,
 32,
 15,
 33,
 14,
 34,
 13,
 35,
 12,
 36,
 11,
 37,
 10,
 38,
 9,
 39,
 8,
 40,
 7,
 41,
 6,
 42,
 5,
 43,
 4,
 44,
 3,
 45,
 2,
 46,
 1,
 47,
 0,
 48,
};

static long _vq_lengthlist__44u9_p9_2[] = {
  2, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__44u9_p9_2[] = {
 -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5,
 -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5,
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5,
 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5,
};

static long _vq_quantmap__44u9_p9_2[] = {
    47, 45, 43, 41, 39, 37, 35, 33,
    31, 29, 27, 25, 23, 21, 19, 17,
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46,
    48,
};

static encode_aux_threshmatch _vq_auxt__44u9_p9_2 = {
 _vq_quantthresh__44u9_p9_2,
 _vq_quantmap__44u9_p9_2,
 49,
 49
};

static static_codebook _44u9_p9_2 = {
 1, 49,
 _vq_lengthlist__44u9_p9_2,
 1, -526909440, 1611661312, 6, 0,
 _vq_quantlist__44u9_p9_2,
 
# 37027 "oggenc.c" 3 4
((void *)0)
# 37027 "oggenc.c"
    ,
 &_vq_auxt__44u9_p9_2,
 
# 37029 "oggenc.c" 3 4
((void *)0)
# 37029 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u0__p1_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 8, 8, 8,10,10, 7,
 10,10, 5, 8, 8, 7,10,10, 8,10,10, 4, 9, 8, 8,11,
 11, 8,11,11, 7,11,11,10,11,13,10,13,13, 7,11,11,
 10,13,12,10,13,13, 5, 9, 8, 8,11,11, 8,11,11, 7,
 11,11, 9,13,13,10,12,13, 7,11,11,10,13,13,10,13,
 11,
};

static float _vq_quantthresh__8u0__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8u0__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u0__p1_0 = {
 _vq_quantthresh__8u0__p1_0,
 _vq_quantmap__8u0__p1_0,
 3,
 3
};

static static_codebook _8u0__p1_0 = {
 4, 81,
 _vq_lengthlist__8u0__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8u0__p1_0,
 
# 37068 "oggenc.c" 3 4
((void *)0)
# 37068 "oggenc.c"
    ,
 &_vq_auxt__8u0__p1_0,
 
# 37070 "oggenc.c" 3 4
((void *)0)
# 37070 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u0__p2_0[] = {
  2, 4, 4, 5, 6, 6, 5, 6, 6, 5, 7, 7, 6, 7, 8, 6,
  7, 8, 5, 7, 7, 6, 8, 8, 7, 9, 7, 5, 7, 7, 7, 9,
  9, 7, 8, 8, 6, 9, 8, 7, 7,10, 8,10,10, 6, 8, 8,
  8,10, 8, 8,10,10, 5, 7, 7, 7, 8, 8, 7, 8, 9, 6,
  8, 8, 8,10,10, 8, 8,10, 6, 8, 9, 8,10,10, 7,10,
  8,
};

static float _vq_quantthresh__8u0__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8u0__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u0__p2_0 = {
 _vq_quantthresh__8u0__p2_0,
 _vq_quantmap__8u0__p2_0,
 3,
 3
};

static static_codebook _8u0__p2_0 = {
 4, 81,
 _vq_lengthlist__8u0__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8u0__p2_0,
 
# 37109 "oggenc.c" 3 4
((void *)0)
# 37109 "oggenc.c"
    ,
 &_vq_auxt__8u0__p2_0,
 
# 37111 "oggenc.c" 3 4
((void *)0)
# 37111 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8u0__p3_0[] = {
  1, 5, 5, 7, 7, 6, 7, 7, 9, 9, 6, 7, 7, 9, 9, 8,
 10, 9,11,11, 8, 9, 9,11,11, 6, 8, 8,10,10, 8,10,
 10,11,11, 8,10,10,11,11,10,11,11,12,12,10,11,11,
 12,13, 6, 8, 8,10,10, 8,10,10,11,11, 8,10,10,11,
 11, 9,10,11,12,12,10,11,11,12,12, 8,11,11,14,13,
 10,12,11,15,13,10,12,11,14,14,12,13,12,16,14,12,
 14,12,16,15, 8,11,11,13,14,10,11,12,13,15,10,11,
 12,13,15,11,12,13,14,15,12,12,14,14,16, 5, 8, 8,
 11,11, 9,11,11,12,12, 8,10,11,12,12,11,12,12,15,
 14,11,12,12,14,14, 7,11,10,13,12,10,11,12,13,14,
 10,12,12,14,13,12,13,13,14,15,12,13,13,15,15, 7,
 10,11,12,13,10,12,11,14,13,10,12,13,13,15,12,13,
 12,14,14,11,13,13,15,16, 9,12,12,15,14,11,13,13,
 15,16,11,13,13,16,16,13,14,15,15,15,12,14,15,17,
 16, 9,12,12,14,15,11,13,13,15,16,11,13,13,16,18,
 13,14,14,17,16,13,15,15,17,18, 5, 8, 9,11,11, 8,
 11,11,12,12, 8,10,11,12,12,11,12,12,14,14,11,12,
 12,14,15, 7,11,10,12,13,10,12,12,14,13,10,11,12,
 13,14,11,13,13,15,14,12,13,13,14,15, 7,10,11,13,
 13,10,12,12,13,14,10,12,12,13,13,11,13,13,16,16,
 12,13,13,15,14, 9,12,12,16,15,10,13,13,15,15,11,
 13,13,17,15,12,15,15,18,17,13,14,14,15,16, 9,12,
 12,15,15,11,13,13,15,16,11,13,13,15,15,12,15,15,
 16,16,13,15,14,17,15, 7,11,11,15,15,10,13,13,16,
 15,10,13,13,15,16,14,15,15,17,19,13,15,14,15,18,
  9,12,12,16,16,11,13,14,17,16,11,13,13,17,16,15,
 15,16,17,19,13,15,16, 0,18, 9,12,12,16,15,11,14,
 13,17,17,11,13,14,16,16,15,16,16,19,18,13,15,15,
 17,19,11,14,14,19,16,12,14,15, 0,18,12,16,15,18,
 17,15,15,18,16,19,14,15,17,19,19,11,14,14,18,19,
 13,15,14,19,19,12,16,15,18,17,15,17,15, 0,16,14,
 17,16,19, 0, 7,11,11,14,14,10,12,12,15,15,10,13,
 13,16,15,13,15,15,17, 0,14,15,15,16,19, 9,12,12,
 16,16,11,14,14,16,16,11,13,13,16,16,14,17,16,19,
  0,14,18,17,17,19, 9,12,12,15,16,11,13,13,15,17,
 12,14,13,19,16,13,15,15,17,19,15,17,16,17,19,11,
 14,14,19,16,12,15,15,19,17,13,14,15,17,19,14,16,
 17,19,19,16,15,16,17,19,11,15,14,16,16,12,15,15,
 19, 0,12,14,15,19,19,14,16,16, 0,18,15,19,14,18,
 16,
};

static float _vq_quantthresh__8u0__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8u0__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8u0__p3_0 = {
 _vq_quantthresh__8u0__p3_0,
 _vq_quantmap__8u0__p3_0,
 5,
 5
};

static static_codebook _8u0__p3_0 = {
 4, 625,
 _vq_lengthlist__8u0__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8u0__p3_0,
 
# 37186 "oggenc.c" 3 4
((void *)0)
# 37186 "oggenc.c"
    ,
 &_vq_auxt__8u0__p3_0,
 
# 37188 "oggenc.c" 3 4
((void *)0)
# 37188 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8u0__p4_0[] = {
  3, 5, 5, 8, 8, 5, 6, 7, 9, 9, 6, 7, 6, 9, 9, 9,
  9, 9,10,11, 9, 9, 9,11,10, 6, 7, 7,10,10, 7, 7,
  8,10,10, 7, 8, 8,10,10,10,10,10,10,11, 9,10,10,
 11,12, 6, 7, 7,10,10, 7, 8, 8,10,10, 7, 8, 7,10,
 10, 9,10,10,12,11,10,10,10,11,10, 9,10,10,12,11,
 10,10,10,13,11, 9,10,10,12,12,11,11,12,12,13,11,
 11,11,12,13, 9,10,10,12,12,10,10,11,12,12,10,10,
 11,12,12,11,11,11,13,13,11,12,12,13,13, 5, 7, 7,
 10,10, 7, 8, 8,10,10, 7, 8, 8,10,10,10,11,11,12,
 12,10,11,10,12,12, 7, 8, 8,11,11, 7, 8, 9,10,11,
  8, 9, 9,11,11,11,10,11,10,12,10,11,11,12,13, 7,
  8, 8,10,11, 8, 9, 8,12,10, 8, 9, 9,11,12,10,11,
 10,13,11,10,11,11,13,12, 9,11,10,13,12,10,10,11,
 12,12,10,11,11,13,13,12,10,13,11,14,11,12,12,15,
 13, 9,11,11,13,13,10,11,11,13,12,10,11,11,12,14,
 12,13,11,14,12,12,12,12,14,14, 5, 7, 7,10,10, 7,
  8, 8,10,10, 7, 8, 8,11,10,10,11,11,12,12,10,11,
 10,12,12, 7, 8, 8,10,11, 8, 9, 9,12,11, 8, 8, 9,
 10,11,10,11,11,12,13,11,10,11,11,13, 6, 8, 8,10,
 11, 8, 9, 9,11,11, 7, 9, 7,11,10,10,11,11,12,12,
 10,11,10,13,10, 9,11,10,13,12,10,12,11,13,13,10,
 10,11,12,13,11,12,13,15,14,11,11,13,12,13, 9,10,
 11,12,13,10,11,11,12,13,10,11,10,13,12,12,13,13,
 13,14,12,12,11,14,11, 8,10,10,12,13,10,11,11,13,
 13,10,11,10,13,13,12,13,14,15,14,12,12,12,14,13,
  9,10,10,13,12,10,10,12,13,13,10,11,11,15,12,12,
 12,13,15,14,12,13,13,15,13, 9,10,11,12,13,10,12,
 10,13,12,10,11,11,12,13,12,14,12,15,13,12,12,12,
 15,14,11,12,11,14,13,11,11,12,14,14,12,13,13,14,
 13,13,11,15,11,15,14,14,14,16,15,11,12,12,13,14,
 11,13,11,14,14,12,12,13,14,15,12,14,12,15,12,13,
 15,14,16,15, 8,10,10,12,12,10,10,10,12,13,10,11,
 11,13,13,12,12,12,13,14,13,13,13,15,15, 9,10,10,
 12,12,10,11,11,13,12,10,10,11,13,13,12,12,12,14,
 14,12,12,13,15,14, 9,10,10,13,12,10,10,12,12,13,
 10,11,10,13,13,12,13,13,14,14,12,13,12,14,13,11,
 12,12,14,13,12,13,12,14,14,10,12,12,14,14,14,14,
 14,16,14,13,12,14,12,15,10,12,12,14,15,12,13,13,
 14,16,11,12,11,15,14,13,14,14,14,15,13,14,11,14,
 12,
};

static float _vq_quantthresh__8u0__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8u0__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8u0__p4_0 = {
 _vq_quantthresh__8u0__p4_0,
 _vq_quantmap__8u0__p4_0,
 5,
 5
};

static static_codebook _8u0__p4_0 = {
 4, 625,
 _vq_lengthlist__8u0__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8u0__p4_0,
 
# 37263 "oggenc.c" 3 4
((void *)0)
# 37263 "oggenc.c"
    ,
 &_vq_auxt__8u0__p4_0,
 
# 37265 "oggenc.c" 3 4
((void *)0)
# 37265 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8u0__p5_0[] = {
  1, 4, 4, 7, 7, 7, 7, 9, 9, 4, 6, 6, 8, 7, 8, 8,
 10,10, 4, 6, 6, 8, 8, 8, 8,10,10, 6, 8, 8, 9, 9,
  9, 9,11,11, 7, 8, 8, 9, 9, 9, 9,11,11, 7, 8, 8,
  9, 9,10,10,12,11, 7, 8, 8, 9, 9,10,10,11,11, 9,
 10,10,11,11,11,12,12,12, 9,10,10,11,11,12,12,12,
 12,
};

static float _vq_quantthresh__8u0__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8u0__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8u0__p5_0 = {
 _vq_quantthresh__8u0__p5_0,
 _vq_quantmap__8u0__p5_0,
 9,
 9
};

static static_codebook _8u0__p5_0 = {
 2, 81,
 _vq_lengthlist__8u0__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8u0__p5_0,
 
# 37311 "oggenc.c" 3 4
((void *)0)
# 37311 "oggenc.c"
    ,
 &_vq_auxt__8u0__p5_0,
 
# 37313 "oggenc.c" 3 4
((void *)0)
# 37313 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p6_0[] = {
 6,
 5,
 7,
 4,
 8,
 3,
 9,
 2,
 10,
 1,
 11,
 0,
 12,
};

static long _vq_lengthlist__8u0__p6_0[] = {
  1, 4, 4, 7, 7, 9, 9,11,11,12,12,16,16, 3, 6, 6,
  9, 9,11,11,12,12,13,14,18,16, 3, 6, 7, 9, 9,11,
 11,13,12,14,14,17,16, 7, 9, 9,11,11,12,12,14,14,
 14,14,17,16, 7, 9, 9,11,11,13,12,13,13,14,14,17,
  0, 9,11,11,12,13,14,14,14,13,15,14,17,17, 9,11,
 11,12,12,14,14,13,14,14,15, 0, 0,11,12,12,15,14,
 15,14,15,14,15,16,17, 0,11,12,13,13,13,14,14,15,
 14,15,15, 0, 0,12,14,14,15,15,14,16,15,15,17,16,
  0,18,13,14,14,15,14,15,14,15,16,17,16, 0, 0,17,
 17,18, 0,16,18,16, 0, 0, 0,17, 0, 0,16, 0, 0,16,
 16, 0,15, 0,17, 0, 0, 0, 0,
};

static float _vq_quantthresh__8u0__p6_0[] = {
 -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5,
 12.5, 17.5, 22.5, 27.5,
};

static long _vq_quantmap__8u0__p6_0[] = {
    11, 9, 7, 5, 3, 1, 0, 2,
     4, 6, 8, 10, 12,
};

static encode_aux_threshmatch _vq_auxt__8u0__p6_0 = {
 _vq_quantthresh__8u0__p6_0,
 _vq_quantmap__8u0__p6_0,
 13,
 13
};

static static_codebook _8u0__p6_0 = {
 2, 169,
 _vq_lengthlist__8u0__p6_0,
 1, -526516224, 1616117760, 4, 0,
 _vq_quantlist__8u0__p6_0,
 
# 37369 "oggenc.c" 3 4
((void *)0)
# 37369 "oggenc.c"
    ,
 &_vq_auxt__8u0__p6_0,
 
# 37371 "oggenc.c" 3 4
((void *)0)
# 37371 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p6_1[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8u0__p6_1[] = {
  1, 4, 4, 6, 6, 4, 6, 5, 7, 7, 4, 5, 6, 7, 7, 6,
  7, 7, 7, 7, 6, 7, 7, 7, 7,
};

static float _vq_quantthresh__8u0__p6_1[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8u0__p6_1[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8u0__p6_1 = {
 _vq_quantthresh__8u0__p6_1,
 _vq_quantmap__8u0__p6_1,
 5,
 5
};

static static_codebook _8u0__p6_1 = {
 2, 25,
 _vq_lengthlist__8u0__p6_1,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8u0__p6_1,
 
# 37408 "oggenc.c" 3 4
((void *)0)
# 37408 "oggenc.c"
    ,
 &_vq_auxt__8u0__p6_1,
 
# 37410 "oggenc.c" 3 4
((void *)0)
# 37410 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u0__p7_0[] = {
  1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7,
};

static float _vq_quantthresh__8u0__p7_0[] = {
 -157.5, 157.5,
};

static long _vq_quantmap__8u0__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u0__p7_0 = {
 _vq_quantthresh__8u0__p7_0,
 _vq_quantmap__8u0__p7_0,
 3,
 3
};

static static_codebook _8u0__p7_0 = {
 4, 81,
 _vq_lengthlist__8u0__p7_0,
 1, -518803456, 1628680192, 2, 0,
 _vq_quantlist__8u0__p7_0,
 
# 37449 "oggenc.c" 3 4
((void *)0)
# 37449 "oggenc.c"
    ,
 &_vq_auxt__8u0__p7_0,
 
# 37451 "oggenc.c" 3 4
((void *)0)
# 37451 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p7_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__8u0__p7_1[] = {
  1, 5, 5, 5, 5,10,10,11,11,11,11,11,11,11,11, 5,
  7, 6, 8, 8, 9,10,11,11,11,11,11,11,11,11, 6, 6,
  7, 9, 7,11,10,11,11,11,11,11,11,11,11, 5, 6, 6,
 11, 8,11,11,11,11,11,11,11,11,11,11, 5, 6, 6, 9,
 10,11,10,11,11,11,11,11,11,11,11, 7,10,10,11,11,
 11,11,11,11,11,11,11,11,11,11, 7,11, 8,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__8u0__p7_1[] = {
 -136.5, -115.5, -94.5, -73.5, -52.5, -31.5, -10.5, 10.5,
 31.5, 52.5, 73.5, 94.5, 115.5, 136.5,
};

static long _vq_quantmap__8u0__p7_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__8u0__p7_1 = {
 _vq_quantthresh__8u0__p7_1,
 _vq_quantmap__8u0__p7_1,
 15,
 15
};

static static_codebook _8u0__p7_1 = {
 2, 225,
 _vq_lengthlist__8u0__p7_1,
 1, -520986624, 1620377600, 4, 0,
 _vq_quantlist__8u0__p7_1,
 
# 37513 "oggenc.c" 3 4
((void *)0)
# 37513 "oggenc.c"
    ,
 &_vq_auxt__8u0__p7_1,
 
# 37515 "oggenc.c" 3 4
((void *)0)
# 37515 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u0__p7_2[] = {
 10,
 9,
 11,
 8,
 12,
 7,
 13,
 6,
 14,
 5,
 15,
 4,
 16,
 3,
 17,
 2,
 18,
 1,
 19,
 0,
 20,
};

static long _vq_lengthlist__8u0__p7_2[] = {
  1, 6, 5, 7, 7, 9, 9, 9, 9,10,12,12,10,11,11,10,
 11,11,11,10,11, 6, 8, 8, 9, 9,10,10, 9,10,11,11,
 10,11,11,11,11,10,11,11,11,11, 6, 7, 8, 9, 9, 9,
 10,11,10,11,12,11,10,11,11,11,11,11,11,12,10, 8,
  9, 9,10, 9,10,10, 9,10,10,10,10,10, 9,10,10,10,
 10, 9,10,10, 9, 9, 9, 9,10,10, 9, 9,10,10,11,10,
  9,12,10,11,10, 9,10,10,10, 8, 9, 9,10, 9,10, 9,
  9,10,10, 9,10, 9,11,10,10,10,10,10, 9,10, 8, 8,
  9, 9,10, 9,11, 9, 8, 9, 9,10,11,10,10,10,11,12,
  9, 9,11, 8, 9, 8,11,10,11,10,10, 9,11,10,10,10,
 10,10,10,10,11,11,11,11, 8, 9, 9, 9,10,10,10,11,
 11,12,11,12,11,10,10,10,12,11,11,11,10, 8,10, 9,
 11,10,10,11,12,10,11,12,11,11,12,11,12,12,10,11,
 11,10, 9, 9,10,11,12,10,10,10,11,10,11,11,10,12,
 12,10,11,10,11,12,10, 9,10,10,11,10,11,11,11,11,
 11,12,11,11,11, 9,11,10,11,10,11,10, 9, 9,10,11,
 11,11,10,10,11,12,12,11,12,11,11,11,12,12,12,12,
 11, 9,11,11,12,10,11,11,11,11,11,11,12,11,11,12,
 11,11,11,10,11,11, 9,11,10,11,11,11,10,10,10,11,
 11,11,12,10,11,10,11,11,11,11,12, 9,11,10,11,11,
 10,10,11,11, 9,11,11,12,10,10,10,10,10,11,11,10,
  9,10,11,11,12,11,10,10,12,11,11,12,11,12,11,11,
 10,10,11,11,10,12,11,10,11,10,11,10,10,10,11,11,
 10,10,11,11,11,11,10,10,10,12,11,11,11,11,10, 9,
 10,11,11,11,12,11,11,11,12,10,11,11,11, 9,10,11,
 11,11,11,11,11,10,10,11,11,12,11,10,11,12,11,10,
 10,11, 9,10,11,11,11,11,11,10,11,11,10,12,11,11,
 11,12,11,11,11,10,10,11,11,
};

static float _vq_quantthresh__8u0__p7_2[] = {
 -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5,
 -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5,
 6.5, 7.5, 8.5, 9.5,
};

static long _vq_quantmap__8u0__p7_2[] = {
    19, 17, 15, 13, 11, 9, 7, 5,
     3, 1, 0, 2, 4, 6, 8, 10,
    12, 14, 16, 18, 20,
};

static encode_aux_threshmatch _vq_auxt__8u0__p7_2 = {
 _vq_quantthresh__8u0__p7_2,
 _vq_quantmap__8u0__p7_2,
 21,
 21
};

static static_codebook _8u0__p7_2 = {
 2, 441,
 _vq_lengthlist__8u0__p7_2,
 1, -529268736, 1611661312, 5, 0,
 _vq_quantlist__8u0__p7_2,
 
# 37598 "oggenc.c" 3 4
((void *)0)
# 37598 "oggenc.c"
    ,
 &_vq_auxt__8u0__p7_2,
 
# 37600 "oggenc.c" 3 4
((void *)0)
# 37600 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__8u0__single[] = {
  4, 7,11, 9,12, 8, 7,10, 6, 4, 5, 5, 7, 5, 6,16,
  9, 5, 5, 6, 7, 7, 9,16, 7, 4, 6, 5, 7, 5, 7,17,
 10, 7, 7, 8, 7, 7, 8,18, 7, 5, 6, 4, 5, 4, 5,15,
  7, 6, 7, 5, 6, 4, 5,15,12,13,18,12,17,11, 9,17,
};

static static_codebook _huff_book__8u0__single = {
 2, 64,
 _huff_lengthlist__8u0__single,
 0, 0, 0, 0, 0,
 
# 37615 "oggenc.c" 3 4
((void *)0)
# 37615 "oggenc.c"
    ,
 
# 37616 "oggenc.c" 3 4
((void *)0)
# 37616 "oggenc.c"
    ,
 
# 37617 "oggenc.c" 3 4
((void *)0)
# 37617 "oggenc.c"
    ,
 
# 37618 "oggenc.c" 3 4
((void *)0)
# 37618 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p1_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u1__p1_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 8, 8, 7, 9,10, 7,
  9, 9, 5, 8, 8, 7,10, 9, 7, 9, 9, 5, 8, 8, 8,10,
 10, 8,10,10, 7,10,10, 9,10,12,10,12,12, 7,10,10,
  9,12,11,10,12,12, 5, 8, 8, 8,10,10, 8,10,10, 7,
 10,10,10,12,12, 9,11,12, 7,10,10,10,12,12, 9,12,
 10,
};

static float _vq_quantthresh__8u1__p1_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8u1__p1_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u1__p1_0 = {
 _vq_quantthresh__8u1__p1_0,
 _vq_quantmap__8u1__p1_0,
 3,
 3
};

static static_codebook _8u1__p1_0 = {
 4, 81,
 _vq_lengthlist__8u1__p1_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8u1__p1_0,
 
# 37657 "oggenc.c" 3 4
((void *)0)
# 37657 "oggenc.c"
    ,
 &_vq_auxt__8u1__p1_0,
 
# 37659 "oggenc.c" 3 4
((void *)0)
# 37659 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p2_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u1__p2_0[] = {
  3, 4, 5, 5, 6, 6, 5, 6, 6, 5, 7, 6, 6, 7, 8, 6,
  7, 8, 5, 6, 6, 6, 8, 7, 6, 8, 7, 5, 6, 6, 7, 8,
  8, 6, 7, 7, 6, 8, 7, 7, 7, 9, 8, 9, 9, 6, 7, 8,
  7, 9, 7, 8, 9, 9, 5, 6, 6, 6, 7, 7, 7, 8, 8, 6,
  8, 7, 8, 9, 9, 7, 7, 9, 6, 7, 8, 8, 9, 9, 7, 9,
  7,
};

static float _vq_quantthresh__8u1__p2_0[] = {
 -0.5, 0.5,
};

static long _vq_quantmap__8u1__p2_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u1__p2_0 = {
 _vq_quantthresh__8u1__p2_0,
 _vq_quantmap__8u1__p2_0,
 3,
 3
};

static static_codebook _8u1__p2_0 = {
 4, 81,
 _vq_lengthlist__8u1__p2_0,
 1, -535822336, 1611661312, 2, 0,
 _vq_quantlist__8u1__p2_0,
 
# 37698 "oggenc.c" 3 4
((void *)0)
# 37698 "oggenc.c"
    ,
 &_vq_auxt__8u1__p2_0,
 
# 37700 "oggenc.c" 3 4
((void *)0)
# 37700 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p3_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8u1__p3_0[] = {
  1, 5, 5, 7, 7, 6, 7, 7, 9, 9, 6, 7, 7, 9, 9, 8,
 10, 9,11,11, 9, 9, 9,11,11, 6, 8, 8,10,10, 8,10,
 10,11,11, 8, 9,10,11,11,10,11,11,12,12,10,11,11,
 12,13, 6, 8, 8,10,10, 8,10, 9,11,11, 8,10, 9,11,
 11,10,11,11,12,12,10,11,11,12,12, 9,11,11,14,13,
 10,12,11,14,14,10,12,11,14,13,12,13,13,15,14,12,
 13,13,15,14, 8,11,11,13,14,10,11,12,13,15,10,11,
 12,14,14,12,13,13,14,15,12,13,13,14,15, 5, 8, 8,
 11,11, 8,10,10,12,12, 8,10,10,12,12,11,12,12,14,
 13,11,12,12,13,14, 8,10,10,12,12, 9,11,12,13,14,
 10,12,12,13,13,12,12,13,14,14,11,13,13,15,15, 7,
 10,10,12,12, 9,12,11,14,12,10,11,12,13,14,12,13,
 12,14,14,12,13,13,15,16,10,12,12,15,14,11,12,13,
 15,15,11,13,13,15,16,14,14,15,15,16,13,14,15,17,
 15, 9,12,12,14,15,11,13,12,15,15,11,13,13,15,15,
 13,14,13,15,14,13,14,14,17, 0, 5, 8, 8,11,11, 8,
 10,10,12,12, 8,10,10,12,12,11,12,12,14,14,11,12,
 12,14,14, 7,10,10,12,12,10,12,12,13,13, 9,11,12,
 12,13,11,12,13,15,15,11,12,13,14,15, 8,10,10,12,
 12,10,12,11,13,13,10,12,11,13,13,11,13,13,15,14,
 12,13,12,15,13, 9,12,12,14,14,11,13,13,16,15,11,
 12,13,16,15,13,14,15,16,16,13,13,15,15,16,10,12,
 12,15,14,11,13,13,14,16,11,13,13,15,16,13,15,15,
 16,17,13,15,14,16,15, 8,11,11,14,15,10,12,12,15,
 15,10,12,12,15,16,14,15,15,16,17,13,14,14,16,16,
  9,12,12,15,15,11,13,14,15,17,11,13,13,15,16,14,
 15,16,19,17,13,15,15, 0,17, 9,12,12,15,15,11,14,
 13,16,15,11,13,13,15,16,15,15,15,18,17,13,15,15,
 17,17,11,15,14,18,16,12,14,15,17,17,12,15,15,18,
 18,15,15,16,15,19,14,16,16, 0, 0,11,14,14,16,17,
 12,15,14,18,17,12,15,15,18,18,15,17,15,18,16,14,
 16,16,18,18, 7,11,11,14,14,10,12,12,15,15,10,12,
 13,15,15,13,14,15,16,16,14,15,15,18,18, 9,12,12,
 15,15,11,13,13,16,15,11,12,13,16,16,14,15,15,17,
 16,15,16,16,17,17, 9,12,12,15,15,11,13,13,15,17,
 11,14,13,16,15,13,15,15,17,17,15,15,15,18,17,11,
 14,14,17,15,12,14,15,17,18,13,13,15,17,17,14,16,
 16,19,18,16,15,17,17, 0,11,14,14,17,17,12,15,15,
 18, 0,12,15,14,18,16,14,17,17,19, 0,16,18,15, 0,
 16,
};

static float _vq_quantthresh__8u1__p3_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8u1__p3_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8u1__p3_0 = {
 _vq_quantthresh__8u1__p3_0,
 _vq_quantmap__8u1__p3_0,
 5,
 5
};

static static_codebook _8u1__p3_0 = {
 4, 625,
 _vq_lengthlist__8u1__p3_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8u1__p3_0,
 
# 37775 "oggenc.c" 3 4
((void *)0)
# 37775 "oggenc.c"
    ,
 &_vq_auxt__8u1__p3_0,
 
# 37777 "oggenc.c" 3 4
((void *)0)
# 37777 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p4_0[] = {
 2,
 1,
 3,
 0,
 4,
};

static long _vq_lengthlist__8u1__p4_0[] = {
  4, 5, 5, 9, 9, 6, 7, 7, 9, 9, 6, 7, 7, 9, 9, 9,
  9, 9,11,11, 9, 9, 9,11,11, 6, 7, 7, 9, 9, 7, 7,
  8, 9,10, 7, 7, 8, 9,10, 9, 9,10,10,11, 9, 9,10,
 10,12, 6, 7, 7, 9, 9, 7, 8, 7,10, 9, 7, 8, 7,10,
  9, 9,10, 9,12,11,10,10, 9,12,10, 9,10,10,12,11,
  9,10,10,12,11, 9,10,10,12,12,11,11,12,12,13,11,
 11,12,12,13, 9, 9,10,12,11, 9,10,10,12,12,10,10,
 10,12,12,11,12,11,13,12,11,12,11,13,12, 6, 7, 7,
  9, 9, 7, 8, 8,10,10, 7, 8, 7,10, 9,10,10,10,12,
 12,10,10,10,12,11, 7, 8, 7,10,10, 7, 7, 9,10,11,
  8, 9, 9,11,10,10,10,11,10,12,10,10,11,12,12, 7,
  8, 8,10,10, 7, 9, 8,11,10, 8, 8, 9,11,11,10,11,
 10,12,11,10,11,11,12,12, 9,10,10,12,12, 9,10,10,
 12,12,10,11,11,13,12,11,10,12,10,14,12,12,12,13,
 14, 9,10,10,12,12, 9,11,10,12,12,10,11,11,12,12,
 11,12,11,14,12,12,12,12,14,14, 5, 7, 7, 9, 9, 7,
  7, 7, 9,10, 7, 8, 8,10,10,10,10,10,11,11,10,10,
 10,12,12, 7, 8, 8,10,10, 8, 9, 8,11,10, 7, 8, 9,
 10,11,10,10,10,11,12,10,10,11,11,13, 6, 7, 8,10,
 10, 8, 9, 9,10,10, 7, 9, 7,11,10,10,11,10,12,12,
 10,11,10,12,10, 9,10,10,12,12,10,11,11,13,12, 9,
 10,10,12,12,12,12,12,14,13,11,11,12,11,14, 9,10,
 10,11,12,10,11,11,12,13, 9,10,10,12,12,12,12,12,
 14,13,11,12,10,14,11, 9, 9,10,11,12, 9,10,10,12,
 12, 9,10,10,12,12,12,12,12,14,14,11,12,12,13,12,
  9,10, 9,12,12, 9,10,11,12,13,10,11,10,13,11,12,
 12,13,13,14,12,12,12,13,13, 9,10,10,12,12,10,11,
 10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,12,
 13,14,11,12,11,14,13,10,10,11,13,13,12,12,12,14,
 13,12,10,14,10,15,13,14,14,14,14,11,11,12,13,14,
 10,12,11,13,13,12,12,12,13,15,12,13,11,15,12,13,
 13,14,14,14, 9,10, 9,12,12, 9,10,10,12,12,10,10,
 10,12,12,11,11,12,12,13,12,12,12,14,14, 9,10,10,
 12,12,10,11,10,13,12,10,10,11,12,13,12,12,12,14,
 13,12,12,13,13,14, 9,10,10,12,13,10,10,11,11,12,
  9,11,10,13,12,12,12,12,13,14,12,13,12,14,13,11,
 12,11,13,13,12,13,12,14,13,10,11,12,13,13,13,13,
 13,14,15,12,11,14,12,14,11,11,12,12,13,12,12,12,
 13,14,10,12,10,14,13,13,13,13,14,15,12,14,11,15,
 10,
};

static float _vq_quantthresh__8u1__p4_0[] = {
 -1.5, -0.5, 0.5, 1.5,
};

static long _vq_quantmap__8u1__p4_0[] = {
     3, 1, 0, 2, 4,
};

static encode_aux_threshmatch _vq_auxt__8u1__p4_0 = {
 _vq_quantthresh__8u1__p4_0,
 _vq_quantmap__8u1__p4_0,
 5,
 5
};

static static_codebook _8u1__p4_0 = {
 4, 625,
 _vq_lengthlist__8u1__p4_0,
 1, -533725184, 1611661312, 3, 0,
 _vq_quantlist__8u1__p4_0,
 
# 37852 "oggenc.c" 3 4
((void *)0)
# 37852 "oggenc.c"
    ,
 &_vq_auxt__8u1__p4_0,
 
# 37854 "oggenc.c" 3 4
((void *)0)
# 37854 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p5_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8u1__p5_0[] = {
  1, 4, 4, 7, 7, 7, 7, 9, 9, 4, 6, 5, 8, 7, 8, 8,
 10,10, 4, 6, 6, 8, 8, 8, 8,10,10, 7, 8, 8, 9, 9,
  9, 9,11,11, 7, 8, 8, 9, 9, 9, 9,11,11, 8, 8, 8,
  9, 9,10,10,12,11, 8, 8, 8, 9, 9,10,10,11,11, 9,
 10,10,11,11,11,11,13,12, 9,10,10,11,11,12,12,12,
 13,
};

static float _vq_quantthresh__8u1__p5_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8u1__p5_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8u1__p5_0 = {
 _vq_quantthresh__8u1__p5_0,
 _vq_quantmap__8u1__p5_0,
 9,
 9
};

static static_codebook _8u1__p5_0 = {
 2, 81,
 _vq_lengthlist__8u1__p5_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8u1__p5_0,
 
# 37900 "oggenc.c" 3 4
((void *)0)
# 37900 "oggenc.c"
    ,
 &_vq_auxt__8u1__p5_0,
 
# 37902 "oggenc.c" 3 4
((void *)0)
# 37902 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p6_0[] = {
 4,
 3,
 5,
 2,
 6,
 1,
 7,
 0,
 8,
};

static long _vq_lengthlist__8u1__p6_0[] = {
  3, 4, 4, 6, 6, 7, 7, 9, 9, 4, 4, 5, 6, 6, 7, 7,
  9, 9, 4, 4, 4, 6, 6, 7, 7, 9, 9, 6, 6, 6, 7, 7,
  8, 8, 9, 9, 6, 6, 6, 7, 7, 8, 8, 9, 9, 7, 7, 7,
  8, 8, 8, 9,10,10, 7, 7, 7, 8, 8, 9, 8,10,10, 9,
  9, 9, 9, 9,10,10,10,10, 9, 9, 9, 9, 9,10,10,10,
 10,
};

static float _vq_quantthresh__8u1__p6_0[] = {
 -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5,
};

static long _vq_quantmap__8u1__p6_0[] = {
     7, 5, 3, 1, 0, 2, 4, 6,
     8,
};

static encode_aux_threshmatch _vq_auxt__8u1__p6_0 = {
 _vq_quantthresh__8u1__p6_0,
 _vq_quantmap__8u1__p6_0,
 9,
 9
};

static static_codebook _8u1__p6_0 = {
 2, 81,
 _vq_lengthlist__8u1__p6_0,
 1, -531628032, 1611661312, 4, 0,
 _vq_quantlist__8u1__p6_0,
 
# 37948 "oggenc.c" 3 4
((void *)0)
# 37948 "oggenc.c"
    ,
 &_vq_auxt__8u1__p6_0,
 
# 37950 "oggenc.c" 3 4
((void *)0)
# 37950 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p7_0[] = {
 1,
 0,
 2,
};

static long _vq_lengthlist__8u1__p7_0[] = {
  1, 4, 4, 5, 7, 7, 5, 7, 7, 5, 9, 9, 8,10,10, 8,
 10,10, 5, 9, 9, 7,10,10, 8,10,10, 4,10,10, 9,12,
 12, 9,11,11, 7,12,11,10,11,13,10,13,13, 7,12,12,
 10,13,12,10,13,13, 4,10,10, 9,12,12, 9,12,12, 7,
 12,12,10,13,13,10,12,13, 7,11,12,10,13,13,10,13,
 11,
};

static float _vq_quantthresh__8u1__p7_0[] = {
 -5.5, 5.5,
};

static long _vq_quantmap__8u1__p7_0[] = {
     1, 0, 2,
};

static encode_aux_threshmatch _vq_auxt__8u1__p7_0 = {
 _vq_quantthresh__8u1__p7_0,
 _vq_quantmap__8u1__p7_0,
 3,
 3
};

static static_codebook _8u1__p7_0 = {
 4, 81,
 _vq_lengthlist__8u1__p7_0,
 1, -529137664, 1618345984, 2, 0,
 _vq_quantlist__8u1__p7_0,
 
# 37989 "oggenc.c" 3 4
((void *)0)
# 37989 "oggenc.c"
    ,
 &_vq_auxt__8u1__p7_0,
 
# 37991 "oggenc.c" 3 4
((void *)0)
# 37991 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p7_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__8u1__p7_1[] = {
  2, 4, 4, 6, 6, 7, 7, 8, 8, 8, 8, 4, 5, 5, 7, 7,
  8, 8, 9, 9, 9, 9, 4, 5, 5, 7, 7, 8, 8, 9, 9, 9,
  9, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 6, 7, 7, 8,
  8, 8, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9,
  9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9,
  9, 9, 9, 9,10,10,10,10, 8, 9, 9, 9, 9, 9, 9,10,
 10,10,10, 8, 9, 9, 9, 9, 9, 9,10,10,10,10, 8, 9,
  9, 9, 9, 9, 9,10,10,10,10,
};

static float _vq_quantthresh__8u1__p7_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__8u1__p7_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__8u1__p7_1 = {
 _vq_quantthresh__8u1__p7_1,
 _vq_quantmap__8u1__p7_1,
 11,
 11
};

static static_codebook _8u1__p7_1 = {
 2, 121,
 _vq_lengthlist__8u1__p7_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__8u1__p7_1,
 
# 38042 "oggenc.c" 3 4
((void *)0)
# 38042 "oggenc.c"
    ,
 &_vq_auxt__8u1__p7_1,
 
# 38044 "oggenc.c" 3 4
((void *)0)
# 38044 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p8_0[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__8u1__p8_0[] = {
  1, 4, 4, 6, 6, 8, 8,10,10,11,11, 4, 6, 6, 7, 7,
  9, 9,11,11,13,12, 4, 6, 6, 7, 7, 9, 9,11,11,12,
 12, 6, 7, 7, 9, 9,11,11,12,12,13,13, 6, 7, 7, 9,
  9,11,11,12,12,13,13, 8, 9, 9,11,11,12,12,13,13,
 14,14, 8, 9, 9,11,11,12,12,13,13,14,14, 9,11,11,
 12,12,13,13,14,14,15,15, 9,11,11,12,12,13,13,14,
 14,15,14,11,12,12,13,13,14,14,15,15,16,16,11,12,
 12,13,13,14,14,15,15,15,15,
};

static float _vq_quantthresh__8u1__p8_0[] = {
 -49.5, -38.5, -27.5, -16.5, -5.5, 5.5, 16.5, 27.5,
 38.5, 49.5,
};

static long _vq_quantmap__8u1__p8_0[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__8u1__p8_0 = {
 _vq_quantthresh__8u1__p8_0,
 _vq_quantmap__8u1__p8_0,
 11,
 11
};

static static_codebook _8u1__p8_0 = {
 2, 121,
 _vq_lengthlist__8u1__p8_0,
 1, -524582912, 1618345984, 4, 0,
 _vq_quantlist__8u1__p8_0,
 
# 38095 "oggenc.c" 3 4
((void *)0)
# 38095 "oggenc.c"
    ,
 &_vq_auxt__8u1__p8_0,
 
# 38097 "oggenc.c" 3 4
((void *)0)
# 38097 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p8_1[] = {
 5,
 4,
 6,
 3,
 7,
 2,
 8,
 1,
 9,
 0,
 10,
};

static long _vq_lengthlist__8u1__p8_1[] = {
  2, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 5, 6, 6, 7, 7,
  7, 7, 8, 8, 8, 8, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8,
  8, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 6, 7, 7, 7,
  7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8,
  8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 9, 8, 9, 9, 7, 8, 8, 8, 8, 8, 8, 9,
  8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 8, 8,
  8, 8, 8, 8, 8, 9, 9, 9, 9,
};

static float _vq_quantthresh__8u1__p8_1[] = {
 -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5,
 3.5, 4.5,
};

static long _vq_quantmap__8u1__p8_1[] = {
     9, 7, 5, 3, 1, 0, 2, 4,
     6, 8, 10,
};

static encode_aux_threshmatch _vq_auxt__8u1__p8_1 = {
 _vq_quantthresh__8u1__p8_1,
 _vq_quantmap__8u1__p8_1,
 11,
 11
};

static static_codebook _8u1__p8_1 = {
 2, 121,
 _vq_lengthlist__8u1__p8_1,
 1, -531365888, 1611661312, 4, 0,
 _vq_quantlist__8u1__p8_1,
 
# 38148 "oggenc.c" 3 4
((void *)0)
# 38148 "oggenc.c"
    ,
 &_vq_auxt__8u1__p8_1,
 
# 38150 "oggenc.c" 3 4
((void *)0)
# 38150 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p9_0[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__8u1__p9_0[] = {
  1, 4, 4,11,11,11,11,11,11,11,11,11,11,11,11, 3,
 11, 8,11,11,11,11,11,11,11,11,11,11,11,11, 3, 9,
  9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
 11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__8u1__p9_0[] = {
 -1657.5, -1402.5, -1147.5, -892.5, -637.5, -382.5, -127.5, 127.5,
 382.5, 637.5, 892.5, 1147.5, 1402.5, 1657.5,
};

static long _vq_quantmap__8u1__p9_0[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__8u1__p9_0 = {
 _vq_quantthresh__8u1__p9_0,
 _vq_quantmap__8u1__p9_0,
 15,
 15
};

static static_codebook _8u1__p9_0 = {
 2, 225,
 _vq_lengthlist__8u1__p9_0,
 1, -514071552, 1627381760, 4, 0,
 _vq_quantlist__8u1__p9_0,
 
# 38212 "oggenc.c" 3 4
((void *)0)
# 38212 "oggenc.c"
    ,
 &_vq_auxt__8u1__p9_0,
 
# 38214 "oggenc.c" 3 4
((void *)0)
# 38214 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p9_1[] = {
 7,
 6,
 8,
 5,
 9,
 4,
 10,
 3,
 11,
 2,
 12,
 1,
 13,
 0,
 14,
};

static long _vq_lengthlist__8u1__p9_1[] = {
  1, 4, 4, 7, 7, 9, 9, 7, 7, 8, 8,10,10,11,11, 4,
  7, 7, 9, 9,10,10, 8, 8,10,10,10,11,10,11, 4, 7,
  7, 9, 9,10,10, 8, 8,10, 9,11,11,11,11, 7, 9, 9,
 12,12,11,12,10,10,11,10,12,11,11,11, 7, 9, 9,11,
 11,13,12, 9, 9,11,10,11,11,12,11, 9,10,10,12,12,
 14,14,10,10,11,12,12,11,11,11, 9,10,11,11,13,14,
 13,10,11,11,11,12,11,12,12, 7, 8, 8,10, 9,11,10,
 11,12,12,11,12,14,12,13, 7, 8, 8, 9,10,10,11,12,
 12,12,11,12,12,12,13, 9, 9, 9,11,11,13,12,12,12,
 12,11,12,12,13,12, 8,10,10,11,10,11,12,12,12,12,
 12,12,14,12,12, 9,11,11,11,12,12,12,12,13,13,12,
 12,13,13,12,10,11,11,12,11,12,12,12,11,12,13,12,
 12,12,13,11,11,12,12,12,13,12,12,11,12,13,13,12,
 12,13,12,11,12,12,13,13,12,13,12,13,13,13,13,14,
 13,
};

static float _vq_quantthresh__8u1__p9_1[] = {
 -110.5, -93.5, -76.5, -59.5, -42.5, -25.5, -8.5, 8.5,
 25.5, 42.5, 59.5, 76.5, 93.5, 110.5,
};

static long _vq_quantmap__8u1__p9_1[] = {
    13, 11, 9, 7, 5, 3, 1, 0,
     2, 4, 6, 8, 10, 12, 14,
};

static encode_aux_threshmatch _vq_auxt__8u1__p9_1 = {
 _vq_quantthresh__8u1__p9_1,
 _vq_quantmap__8u1__p9_1,
 15,
 15
};

static static_codebook _8u1__p9_1 = {
 2, 225,
 _vq_lengthlist__8u1__p9_1,
 1, -522338304, 1620115456, 4, 0,
 _vq_quantlist__8u1__p9_1,
 
# 38276 "oggenc.c" 3 4
((void *)0)
# 38276 "oggenc.c"
    ,
 &_vq_auxt__8u1__p9_1,
 
# 38278 "oggenc.c" 3 4
((void *)0)
# 38278 "oggenc.c"
    ,
 0
};

static long _vq_quantlist__8u1__p9_2[] = {
 8,
 7,
 9,
 6,
 10,
 5,
 11,
 4,
 12,
 3,
 13,
 2,
 14,
 1,
 15,
 0,
 16,
};

static long _vq_lengthlist__8u1__p9_2[] = {
  2, 5, 4, 6, 6, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 5, 6, 6, 7, 7, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
  9,10,10, 9, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9,10,10, 8, 8, 8, 9, 9, 9, 9,10,10,10, 9,
 10,10,10,10,10,10, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
 10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9,10,10,10,
 10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9,10,
 10,10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9, 9,
  9,10,10,10,10,10,10,10,10,10,10,10,10, 9, 9, 9,
 10,10,10,10,10,10,10,10,10,10,10,10,10,10, 9,10,
  9, 9, 9,10,10,10,10,10,10,10,10,10,10,10,10, 9,
 10, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  9, 9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
 10,
};

static float _vq_quantthresh__8u1__p9_2[] = {
 -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5,
 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
};

static long _vq_quantmap__8u1__p9_2[] = {
    15, 13, 11, 9, 7, 5, 3, 1,
     0, 2, 4, 6, 8, 10, 12, 14,
    16,
};

static encode_aux_threshmatch _vq_auxt__8u1__p9_2 = {
 _vq_quantthresh__8u1__p9_2,
 _vq_quantmap__8u1__p9_2,
 17,
 17
};

static static_codebook _8u1__p9_2 = {
 2, 289,
 _vq_lengthlist__8u1__p9_2,
 1, -529530880, 1611661312, 5, 0,
 _vq_quantlist__8u1__p9_2,
 
# 38347 "oggenc.c" 3 4
((void *)0)
# 38347 "oggenc.c"
    ,
 &_vq_auxt__8u1__p9_2,
 
# 38349 "oggenc.c" 3 4
((void *)0)
# 38349 "oggenc.c"
    ,
 0
};

static long _huff_lengthlist__8u1__single[] = {
  4, 7,13, 9,15, 9,16, 8,10,13, 7, 5, 8, 6, 9, 7,
 10, 7,10,11,11, 6, 7, 8, 8, 9, 9, 9,12,16, 8, 5,
  8, 6, 8, 6, 9, 7,10,12,11, 7, 7, 7, 6, 7, 7, 7,
 11,15, 7, 5, 8, 6, 7, 5, 7, 6, 9,13,13, 9, 9, 8,
  6, 6, 5, 5, 9,14, 8, 6, 8, 6, 6, 4, 5, 3, 5,13,
  9, 9,11, 8,10, 7, 8, 4, 5,12,11,16,17,15,17,12,
 13, 8, 8,15,
};

static static_codebook _huff_book__8u1__single = {
 2, 100,
 _huff_lengthlist__8u1__single,
 0, 0, 0, 0, 0,
 
# 38367 "oggenc.c" 3 4
((void *)0)
# 38367 "oggenc.c"
    ,
 
# 38368 "oggenc.c" 3 4
((void *)0)
# 38368 "oggenc.c"
    ,
 
# 38369 "oggenc.c" 3 4
((void *)0)
# 38369 "oggenc.c"
    ,
 
# 38370 "oggenc.c" 3 4
((void *)0)
# 38370 "oggenc.c"
    ,
 0
};





static vorbis_info_residue0 _residue_44_low_un={
  0,-1, -1, 8,-1,
  {0},
  {-1},
  { .5, 1.5, 1.5, 2.5, 2.5, 4.5, 28.5},
  { -1, 25, -1, 45, -1, -1, -1}
};

static vorbis_info_residue0 _residue_44_mid_un={
  0,-1, -1, 10,-1,

  {0},
  {-1},
  { .5, 1.5, 1.5, 2.5, 2.5, 4.5, 4.5, 16.5, 60.5},
  { -1, 30, -1, 50, -1, 80, -1, -1, -1}
};

static vorbis_info_residue0 _residue_44_hi_un={
  0,-1, -1, 10,-1,

  {0},
  {-1},
  { .5, 1.5, 2.5, 4.5, 8.5, 16.5, 32.5, 71.5,157.5},
  { -1, -1, -1, -1, -1, -1, -1, -1, -1}
};




static vorbis_info_mapping0 _map_nominal_u[2]={
  {1, {0,0}, {0}, {0}, 0,{0},{0}},
  {1, {0,0}, {1}, {1}, 0,{0},{0}}
};

static static_bookblock _resbook_44u_0={
  {
    {0},
    {0,0,&_44u0__p1_0},
    {0,0,&_44u0__p2_0},
    {0,0,&_44u0__p3_0},
    {0,0,&_44u0__p4_0},
    {0,0,&_44u0__p5_0},
    {&_44u0__p6_0,&_44u0__p6_1},
    {&_44u0__p7_0,&_44u0__p7_1,&_44u0__p7_2}
   }
};
static static_bookblock _resbook_44u_1={
  {
    {0},
    {0,0,&_44u1__p1_0},
    {0,0,&_44u1__p2_0},
    {0,0,&_44u1__p3_0},
    {0,0,&_44u1__p4_0},
    {0,0,&_44u1__p5_0},
    {&_44u1__p6_0,&_44u1__p6_1},
    {&_44u1__p7_0,&_44u1__p7_1,&_44u1__p7_2}
   }
};
static static_bookblock _resbook_44u_2={
  {
    {0},
    {0,0,&_44u2__p1_0},
    {0,0,&_44u2__p2_0},
    {0,0,&_44u2__p3_0},
    {0,0,&_44u2__p4_0},
    {0,0,&_44u2__p5_0},
    {&_44u2__p6_0,&_44u2__p6_1},
    {&_44u2__p7_0,&_44u2__p7_1,&_44u2__p7_2}
   }
};
static static_bookblock _resbook_44u_3={
  {
    {0},
    {0,0,&_44u3__p1_0},
    {0,0,&_44u3__p2_0},
    {0,0,&_44u3__p3_0},
    {0,0,&_44u3__p4_0},
    {0,0,&_44u3__p5_0},
    {&_44u3__p6_0,&_44u3__p6_1},
    {&_44u3__p7_0,&_44u3__p7_1,&_44u3__p7_2}
   }
};
static static_bookblock _resbook_44u_4={
  {
    {0},
    {0,0,&_44u4__p1_0},
    {0,0,&_44u4__p2_0},
    {0,0,&_44u4__p3_0},
    {0,0,&_44u4__p4_0},
    {0,0,&_44u4__p5_0},
    {&_44u4__p6_0,&_44u4__p6_1},
    {&_44u4__p7_0,&_44u4__p7_1,&_44u4__p7_2}
   }
};
static static_bookblock _resbook_44u_5={
  {
    {0},
    {0,0,&_44u5__p1_0},
    {0,0,&_44u5__p2_0},
    {0,0,&_44u5__p3_0},
    {0,0,&_44u5__p4_0},
    {0,0,&_44u5__p5_0},
    {0,0,&_44u5__p6_0},
    {&_44u5__p7_0,&_44u5__p7_1},
    {&_44u5__p8_0,&_44u5__p8_1},
    {&_44u5__p9_0,&_44u5__p9_1,&_44u5__p9_2}
   }
};
static static_bookblock _resbook_44u_6={
  {
    {0},
    {0,0,&_44u6__p1_0},
    {0,0,&_44u6__p2_0},
    {0,0,&_44u6__p3_0},
    {0,0,&_44u6__p4_0},
    {0,0,&_44u6__p5_0},
    {0,0,&_44u6__p6_0},
    {&_44u6__p7_0,&_44u6__p7_1},
    {&_44u6__p8_0,&_44u6__p8_1},
    {&_44u6__p9_0,&_44u6__p9_1,&_44u6__p9_2}
   }
};
static static_bookblock _resbook_44u_7={
  {
    {0},
    {0,0,&_44u7__p1_0},
    {0,0,&_44u7__p2_0},
    {0,0,&_44u7__p3_0},
    {0,0,&_44u7__p4_0},
    {0,0,&_44u7__p5_0},
    {0,0,&_44u7__p6_0},
    {&_44u7__p7_0,&_44u7__p7_1},
    {&_44u7__p8_0,&_44u7__p8_1},
    {&_44u7__p9_0,&_44u7__p9_1,&_44u7__p9_2}
   }
};
static static_bookblock _resbook_44u_8={
  {
    {0},
    {0,0,&_44u8_p1_0},
    {0,0,&_44u8_p2_0},
    {0,0,&_44u8_p3_0},
    {0,0,&_44u8_p4_0},
    {&_44u8_p5_0,&_44u8_p5_1},
    {&_44u8_p6_0,&_44u8_p6_1},
    {&_44u8_p7_0,&_44u8_p7_1},
    {&_44u8_p8_0,&_44u8_p8_1},
    {&_44u8_p9_0,&_44u8_p9_1,&_44u8_p9_2}
   }
};
static static_bookblock _resbook_44u_9={
  {
    {0},
    {0,0,&_44u9_p1_0},
    {0,0,&_44u9_p2_0},
    {0,0,&_44u9_p3_0},
    {0,0,&_44u9_p4_0},
    {&_44u9_p5_0,&_44u9_p5_1},
    {&_44u9_p6_0,&_44u9_p6_1},
    {&_44u9_p7_0,&_44u9_p7_1},
    {&_44u9_p8_0,&_44u9_p8_1},
    {&_44u9_p9_0,&_44u9_p9_1,&_44u9_p9_2}
   }
};

static vorbis_residue_template _res_44u_0[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__44u0__short,&_huff_book__44u0__short,
   &_resbook_44u_0,&_resbook_44u_0},

  {1,0, &_residue_44_low_un,
   &_huff_book__44u0__long,&_huff_book__44u0__long,
   &_resbook_44u_0,&_resbook_44u_0}
};
static vorbis_residue_template _res_44u_1[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__44u1__short,&_huff_book__44u1__short,
   &_resbook_44u_1,&_resbook_44u_1},

  {1,0, &_residue_44_low_un,
   &_huff_book__44u1__long,&_huff_book__44u1__long,
   &_resbook_44u_1,&_resbook_44u_1}
};
static vorbis_residue_template _res_44u_2[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__44u2__short,&_huff_book__44u2__short,
   &_resbook_44u_2,&_resbook_44u_2},

  {1,0, &_residue_44_low_un,
   &_huff_book__44u2__long,&_huff_book__44u2__long,
   &_resbook_44u_2,&_resbook_44u_2}
};
static vorbis_residue_template _res_44u_3[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__44u3__short,&_huff_book__44u3__short,
   &_resbook_44u_3,&_resbook_44u_3},

  {1,0, &_residue_44_low_un,
   &_huff_book__44u3__long,&_huff_book__44u3__long,
   &_resbook_44u_3,&_resbook_44u_3}
};
static vorbis_residue_template _res_44u_4[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__44u4__short,&_huff_book__44u4__short,
   &_resbook_44u_4,&_resbook_44u_4},

  {1,0, &_residue_44_low_un,
   &_huff_book__44u4__long,&_huff_book__44u4__long,
   &_resbook_44u_4,&_resbook_44u_4}
};

static vorbis_residue_template _res_44u_5[]={
  {1,0, &_residue_44_mid_un,
   &_huff_book__44u5__short,&_huff_book__44u5__short,
   &_resbook_44u_5,&_resbook_44u_5},

  {1,0, &_residue_44_mid_un,
   &_huff_book__44u5__long,&_huff_book__44u5__long,
   &_resbook_44u_5,&_resbook_44u_5}
};

static vorbis_residue_template _res_44u_6[]={
  {1,0, &_residue_44_mid_un,
   &_huff_book__44u6__short,&_huff_book__44u6__short,
   &_resbook_44u_6,&_resbook_44u_6},

  {1,0, &_residue_44_mid_un,
   &_huff_book__44u6__long,&_huff_book__44u6__long,
   &_resbook_44u_6,&_resbook_44u_6}
};

static vorbis_residue_template _res_44u_7[]={
  {1,0, &_residue_44_mid_un,
   &_huff_book__44u7__short,&_huff_book__44u7__short,
   &_resbook_44u_7,&_resbook_44u_7},

  {1,0, &_residue_44_mid_un,
   &_huff_book__44u7__long,&_huff_book__44u7__long,
   &_resbook_44u_7,&_resbook_44u_7}
};

static vorbis_residue_template _res_44u_8[]={
  {1,0, &_residue_44_hi_un,
   &_huff_book__44u8__short,&_huff_book__44u8__short,
   &_resbook_44u_8,&_resbook_44u_8},

  {1,0, &_residue_44_hi_un,
   &_huff_book__44u8__long,&_huff_book__44u8__long,
   &_resbook_44u_8,&_resbook_44u_8}
};
static vorbis_residue_template _res_44u_9[]={
  {1,0, &_residue_44_hi_un,
   &_huff_book__44u9__short,&_huff_book__44u9__short,
   &_resbook_44u_9,&_resbook_44u_9},

  {1,0, &_residue_44_hi_un,
   &_huff_book__44u9__long,&_huff_book__44u9__long,
   &_resbook_44u_9,&_resbook_44u_9}
};

static vorbis_mapping_template _mapres_template_44_uncoupled[]={
  { _map_nominal_u, _res_44u_0 },
  { _map_nominal_u, _res_44u_1 },
  { _map_nominal_u, _res_44u_2 },
  { _map_nominal_u, _res_44u_3 },
  { _map_nominal_u, _res_44u_4 },
  { _map_nominal_u, _res_44u_5 },
  { _map_nominal_u, _res_44u_6 },
  { _map_nominal_u, _res_44u_7 },
  { _map_nominal_u, _res_44u_8 },
  { _map_nominal_u, _res_44u_9 },
};

static double rate_mapping_44_un[11]={
  48000.,60000.,70000.,80000.,86000.,
  96000.,110000.,120000.,140000.,160000.,240001.
};

static double rate_mapping_44_un_low[2]={
  32000.,48000.
};

ve_setup_data_template ve_setup_44_uncoupled={
  10,
  rate_mapping_44_un,
  quality_mapping_44,
  -1,
  40000,
  50000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44,

  _psy_global_44,
  _global_mapping_44,
  
# 38701 "oggenc.c" 3 4
 ((void *)0)
# 38701 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_uncoupled
};

ve_setup_data_template ve_setup_44_uncoupled_low={
  1,
  rate_mapping_44_un_low,
  quality_mapping_44_stereo_low,
  -1,
  40000,
  50000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44_low,

  _psy_global_44,
  _global_mapping_44_low,
  
# 38752 "oggenc.c" 3 4
 ((void *)0)
# 38752 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_uncoupled
};
# 38779 "oggenc.c"
static double rate_mapping_32[11]={
  28000.,35000.,45000.,56000.,60000.,
  75000.,90000.,100000.,115000.,150000.,190000.,
};

static double rate_mapping_32_un[11]={
  42000.,52000.,64000.,72000.,78000.,
  86000.,92000.,110000.,120000.,140000.,190000.,
};

static double rate_mapping_32_low[2]={
  20000.,28000.
};

static double rate_mapping_32_un_low[2]={
  24000.,42000.,
};

static double _psy_lowpass_32_low[2]={
  13.,13.,
};
static double _psy_lowpass_32[11]={
  13.,13.,14.,15.,99.,99.,99.,99.,99.,99.,99.
};

ve_setup_data_template ve_setup_32_stereo={
  10,
  rate_mapping_32,
  quality_mapping_44,
  2,
  26000,
  40000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_32,

  _psy_global_44,
  _global_mapping_44,
  _psy_stereo_modes_44,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_stereo
};

ve_setup_data_template ve_setup_32_uncoupled={
  10,
  rate_mapping_32_un,
  quality_mapping_44,
  -1,
  26000,
  40000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_32,

  _psy_global_44,
  _global_mapping_44,
  
# 38896 "oggenc.c" 3 4
 ((void *)0)
# 38896 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_uncoupled
};

ve_setup_data_template ve_setup_32_stereo_low={
  1,
  rate_mapping_32_low,
  quality_mapping_44_stereo_low,
  2,
  26000,
  40000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_32_low,

  _psy_global_44,
  _global_mapping_44,
  _psy_stereo_modes_44_low,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_stereo
};


ve_setup_data_template ve_setup_32_uncoupled_low={
  1,
  rate_mapping_32_un_low,
  quality_mapping_44_stereo_low,
  -1,
  26000,
  40000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_32_low,

  _psy_global_44,
  _global_mapping_44,
  
# 38999 "oggenc.c" 3 4
 ((void *)0)
# 38999 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_uncoupled
};
# 39043 "oggenc.c"
static att3 _psy_tone_masteratt_8[3]={
  {{ 32, 25, 12}, 0, 0},
  {{ 30, 25, 12}, 0, 0},
  {{ 20, 0, -14}, 0, 0},
};

static vp_adjblock _vp_tonemask_adj_8[3]={


  {{-15,-15,-15,-15,-10,-10, -6, 0, 0, 0, 0,10, 0, 0,99,99,99}},
  {{-15,-15,-15,-15,-10,-10, -6, 0, 0, 0, 0,10, 0, 0,99,99,99}},
  {{-15,-15,-15,-15,-10,-10, -6, 0, 0, 0, 0, 0, 0, 0,99,99,99}},
};


static noise3 _psy_noisebias_8[3]={

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 8, 8, 8, 10, 10, 99, 99, 99},
    {-10,-10,-10,-10, -5, -5, -5, 0, 0, 4, 4, 4, 4, 4, 99, 99, 99},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, 99, 99, 99}}},

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 8, 8, 8, 10, 10, 99, 99, 99},
    {-10,-10,-10,-10,-10,-10, -5, -5, -5, 0, 0, 0, 0, 0, 99, 99, 99},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, 99, 99, 99}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 99, 99, 99},
    {-30,-30,-30,-30,-26,-22,-20,-14,-12,-12,-10,-10,-10,-10, 99, 99, 99},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24, 99, 99, 99}}},
};


static adj_stereo _psy_stereo_modes_8[3]={

  {{ 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
  {{ 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
  {{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
};

static noiseguard _psy_noiseguards_8[2]={
  {10,10,-1},
  {10,10,-1},
};

static compandblock _psy_compand_8[2]={
  {{
     0, 1, 2, 3, 4, 5, 6, 7,
     8, 8, 9, 9,10,10,11, 11,
    12,12,13,13,14,14,15, 15,
    16,16,17,17,17,18,18, 19,
    19,19,20,21,22,23,24, 25,
  }},
  {{
     0, 1, 2, 3, 4, 5, 6, 6,
     7, 7, 6, 6, 5, 5, 4, 4,
     3, 3, 3, 4, 5, 6, 7, 8,
     9,10,11,12,13,14,15, 16,
    17,18,19,20,21,22,23, 24,
  }},
};

static double _psy_lowpass_8[3]={3.,4.,4.};
static int _noise_start_8[2]={
  64,64,
};
static int _noise_part_8[2]={
  8,8,
};

static int _psy_ath_floater_8[3]={
  -100,-100,-105,
};

static int _psy_ath_abs_8[3]={
  -130,-130,-140,
};
# 39148 "oggenc.c"
static static_bookblock _resbook_8s_0={
  {
    {0},{0,0,&_8c0_s_p1_0},{0,0,&_8c0_s_p2_0},{0,0,&_8c0_s_p3_0},
    {0,0,&_8c0_s_p4_0},{0,0,&_8c0_s_p5_0},{0,0,&_8c0_s_p6_0},
    {&_8c0_s_p7_0,&_8c0_s_p7_1},{&_8c0_s_p8_0,&_8c0_s_p8_1},
    {&_8c0_s_p9_0,&_8c0_s_p9_1,&_8c0_s_p9_2}
   }
};
static static_bookblock _resbook_8s_1={
  {
    {0},{0,0,&_8c1_s_p1_0},{0,0,&_8c1_s_p2_0},{0,0,&_8c1_s_p3_0},
    {0,0,&_8c1_s_p4_0},{0,0,&_8c1_s_p5_0},{0,0,&_8c1_s_p6_0},
    {&_8c1_s_p7_0,&_8c1_s_p7_1},{&_8c1_s_p8_0,&_8c1_s_p8_1},
    {&_8c1_s_p9_0,&_8c1_s_p9_1,&_8c1_s_p9_2}
   }
};

static vorbis_residue_template _res_8s_0[]={
  {2,0, &_residue_44_mid,
   &_huff_book__8c0_s_single,&_huff_book__8c0_s_single,
   &_resbook_8s_0,&_resbook_8s_0},
};
static vorbis_residue_template _res_8s_1[]={
  {2,0, &_residue_44_mid,
   &_huff_book__8c1_s_single,&_huff_book__8c1_s_single,
   &_resbook_8s_1,&_resbook_8s_1},
};

static vorbis_mapping_template _mapres_template_8_stereo[2]={
  { _map_nominal, _res_8s_0 },
  { _map_nominal, _res_8s_1 },
};

static static_bookblock _resbook_8u_0={
  {
    {0},
    {0,0,&_8u0__p1_0},
    {0,0,&_8u0__p2_0},
    {0,0,&_8u0__p3_0},
    {0,0,&_8u0__p4_0},
    {0,0,&_8u0__p5_0},
    {&_8u0__p6_0,&_8u0__p6_1},
    {&_8u0__p7_0,&_8u0__p7_1,&_8u0__p7_2}
   }
};
static static_bookblock _resbook_8u_1={
  {
    {0},
    {0,0,&_8u1__p1_0},
    {0,0,&_8u1__p2_0},
    {0,0,&_8u1__p3_0},
    {0,0,&_8u1__p4_0},
    {0,0,&_8u1__p5_0},
    {0,0,&_8u1__p6_0},
    {&_8u1__p7_0,&_8u1__p7_1},
    {&_8u1__p8_0,&_8u1__p8_1},
    {&_8u1__p9_0,&_8u1__p9_1,&_8u1__p9_2}
   }
};

static vorbis_residue_template _res_8u_0[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__8u0__single,&_huff_book__8u0__single,
   &_resbook_8u_0,&_resbook_8u_0},
};
static vorbis_residue_template _res_8u_1[]={
  {1,0, &_residue_44_mid_un,
   &_huff_book__8u1__single,&_huff_book__8u1__single,
   &_resbook_8u_1,&_resbook_8u_1},
};

static vorbis_mapping_template _mapres_template_8_uncoupled[2]={
  { _map_nominal_u, _res_8u_0 },
  { _map_nominal_u, _res_8u_1 },
};

static int blocksize_8[2]={
  512,512
};

static int _floor_mapping_8[2]={
  1,1,
};

static double rate_mapping_8[3]={
  6000.,9000.,32000.,
};

static double rate_mapping_8_uncoupled[3]={
  8000.,14000.,42000.,
};

static double quality_mapping_8[3]={
  -.1,.0,1.
};

static double _psy_compand_8_mapping[3]={ 0., 1., 1.};

static double _global_mapping_8[3]={ 1., 2., 3. };

ve_setup_data_template ve_setup_8_stereo={
  2,
  rate_mapping_8,
  quality_mapping_8,
  2,
  8000,
  9000,

  blocksize_8,
  blocksize_8,

  _psy_tone_masteratt_8,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_8,
  
# 39264 "oggenc.c" 3 4
 ((void *)0)
# 39264 "oggenc.c"
     ,
  _vp_tonemask_adj_8,

  _psy_noiseguards_8,
  _psy_noisebias_8,
  _psy_noisebias_8,
  
# 39270 "oggenc.c" 3 4
 ((void *)0)
# 39270 "oggenc.c"
     ,
  
# 39271 "oggenc.c" 3 4
 ((void *)0)
# 39271 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 39276 "oggenc.c" 3 4
 ((void *)0)
# 39276 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_44_2,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_8,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_8,
  
# 39294 "oggenc.c" 3 4
 ((void *)0)
# 39294 "oggenc.c"
     ,

  _mapres_template_8_stereo
};

ve_setup_data_template ve_setup_8_uncoupled={
  2,
  rate_mapping_8_uncoupled,
  quality_mapping_8,
  -1,
  8000,
  9000,

  blocksize_8,
  blocksize_8,

  _psy_tone_masteratt_8,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_8,
  
# 39315 "oggenc.c" 3 4
 ((void *)0)
# 39315 "oggenc.c"
     ,
  _vp_tonemask_adj_8,

  _psy_noiseguards_8,
  _psy_noisebias_8,
  _psy_noisebias_8,
  
# 39321 "oggenc.c" 3 4
 ((void *)0)
# 39321 "oggenc.c"
     ,
  
# 39322 "oggenc.c" 3 4
 ((void *)0)
# 39322 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 39327 "oggenc.c" 3 4
 ((void *)0)
# 39327 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_44_2,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_8,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_8,
  
# 39345 "oggenc.c" 3 4
 ((void *)0)
# 39345 "oggenc.c"
     ,

  _mapres_template_8_uncoupled
};
# 39384 "oggenc.c"
static double _psy_lowpass_11[3]={4.5,5.5,30.,};

static att3 _psy_tone_masteratt_11[3]={
  {{ 30, 25, 12}, 0, 0},
  {{ 30, 25, 12}, 0, 0},
  {{ 20, 0, -14}, 0, 1.},
};

static vp_adjblock _vp_tonemask_adj_11[3]={


  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0,10, 2, 0,99,99,99}},
  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0, 5, 0, 0,99,99,99}},
  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0, 0, 0, 0,99,99,99}},
};


static noise3 _psy_noisebias_11[3]={

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 10, 10, 12, 12, 12, 99, 99, 99},
    {-15,-15,-15,-15,-10,-10, -5, 0, 0, 4, 4, 5, 5, 10, 99, 99, 99},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, 99, 99, 99}}},

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 10, 10, 12, 12, 12, 99, 99, 99},
    {-15,-15,-15,-15,-10,-10, -5, -5, -5, 0, 0, 0, 0, 0, 99, 99, 99},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, 99, 99, 99}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 99, 99, 99},
    {-30,-30,-30,-30,-26,-22,-20,-14,-12,-12,-10,-10,-10,-10, 99, 99, 99},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24, 99, 99, 99}}},
};

static double _noise_thresh_11[3]={ .3,.5,.5 };

static int blocksize_11[2]={
  512,512
};

static int _floor_mapping_11[2]={
  1,1,
};

static double rate_mapping_11[3]={
  8000.,13000.,44000.,
};

static double rate_mapping_11_uncoupled[3]={
  12000.,20000.,50000.,
};

static double quality_mapping_11[3]={
  -.1,.0,1.
};

ve_setup_data_template ve_setup_11_stereo={
  2,
  rate_mapping_11,
  quality_mapping_11,
  2,
  9000,
  15000,

  blocksize_11,
  blocksize_11,

  _psy_tone_masteratt_11,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_11,
  
# 39454 "oggenc.c" 3 4
 ((void *)0)
# 39454 "oggenc.c"
     ,
  _vp_tonemask_adj_11,

  _psy_noiseguards_8,
  _psy_noisebias_11,
  _psy_noisebias_11,
  
# 39460 "oggenc.c" 3 4
 ((void *)0)
# 39460 "oggenc.c"
     ,
  
# 39461 "oggenc.c" 3 4
 ((void *)0)
# 39461 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 39466 "oggenc.c" 3 4
 ((void *)0)
# 39466 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_11,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_11,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_11,
  
# 39484 "oggenc.c" 3 4
 ((void *)0)
# 39484 "oggenc.c"
     ,

  _mapres_template_8_stereo
};

ve_setup_data_template ve_setup_11_uncoupled={
  2,
  rate_mapping_11_uncoupled,
  quality_mapping_11,
  -1,
  9000,
  15000,

  blocksize_11,
  blocksize_11,

  _psy_tone_masteratt_11,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_11,
  
# 39505 "oggenc.c" 3 4
 ((void *)0)
# 39505 "oggenc.c"
     ,
  _vp_tonemask_adj_11,

  _psy_noiseguards_8,
  _psy_noisebias_11,
  _psy_noisebias_11,
  
# 39511 "oggenc.c" 3 4
 ((void *)0)
# 39511 "oggenc.c"
     ,
  
# 39512 "oggenc.c" 3 4
 ((void *)0)
# 39512 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 39517 "oggenc.c" 3 4
 ((void *)0)
# 39517 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_11,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_11,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_11,
  
# 39535 "oggenc.c" 3 4
 ((void *)0)
# 39535 "oggenc.c"
     ,

  _mapres_template_8_uncoupled
};
# 39575 "oggenc.c"
static adj_stereo _psy_stereo_modes_16[4]={

  {{ 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
  {{ 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
  {{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
   { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
   { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}},
};

static double _psy_lowpass_16[4]={6.5,8,30.,99.};

static att3 _psy_tone_masteratt_16[4]={
  {{ 30, 25, 12}, 0, 0},
  {{ 25, 22, 12}, 0, 0},
  {{ 20, 12, 0}, 0, 0},
  {{ 15, 0, -14}, 0, 0},
};

static vp_adjblock _vp_tonemask_adj_16[4]={


  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0,10, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0,10, 0, 0, 0, 0, 0}},
  {{-20,-20,-20,-20,-20,-16,-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
  {{-30,-30,-30,-30,-30,-26,-20,-10, -5, 0, 0, 0, 0, 0, 0, 0, 0}},
};


static noise3 _psy_noisebias_16_short[4]={

  {{{-15,-15,-15,-15,-15,-10,-10,-5, 4, 10, 10, 10, 10, 12, 12, 14, 20},
    {-15,-15,-15,-15,-15,-10,-10, -5, 0, 0, 4, 5, 5, 6, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -6, -6}}},

  {{{-15,-15,-15,-15,-15,-10,-10,-5, 4, 6, 6, 6, 6, 8, 10, 12, 20},
    {-15,-15,-15,-15,-15,-15,-15,-10, -5, -5, -5, 4, 5, 6, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10,-10,-10,-10,-10,-10,-10,-10,-10}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 5, 8, 12},
    {-20,-20,-20,-20,-16,-12,-20,-14,-10,-10, -8, 0, 0, 0, 0, 2, 5},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, -5, -5, -5, -5, -5, 0, 0, 0, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-12,-12,-10,-10,-10,-10,-10,-10, -6},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},
};

static noise3 _psy_noisebias_16_impulse[4]={

  {{{-15,-15,-15,-15,-15,-10,-10,-5, 4, 10, 10, 10, 10, 12, 12, 14, 20},
    {-15,-15,-15,-15,-15,-10,-10, -5, 0, 0, 4, 5, 5, 6, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -6, -6}}},

  {{{-15,-15,-15,-15,-15,-10,-10,-5, 4, 4, 4, 4, 5, 5, 6, 8, 15},
    {-15,-15,-15,-15,-15,-15,-15,-10, -5, -5, -5, 0, 0, 0, 0, 4, 10},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10,-10,-10,-10,-10,-10,-10,-10,-10}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 0, 0, 0, 0, 0, 0, 4, 10},
    {-20,-20,-20,-20,-16,-12,-20,-14,-10,-10,-10,-10,-10,-10,-10, -7, -5},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, -5, -5, -5, -5, -5, 0, 0, 0, 6},
    {-30,-30,-30,-30,-26,-22,-20,-18,-18,-18,-20,-20,-20,-20,-20,-20,-16},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},
};

static noise3 _psy_noisebias_16[4]={

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 6, 8, 8, 10, 10, 10, 14, 20},
    {-10,-10,-10,-10,-10, -5, -2, -2, 0, 0, 0, 4, 5, 6, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -6, -6}}},

  {{{-10,-10,-10,-10, -5, -5, -5, 0, 4, 6, 6, 6, 6, 8, 10, 12, 20},
    {-15,-15,-15,-15,-15,-10, -5, -5, 0, 0, 0, 4, 5, 6, 8, 8, 15},
    {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -6, -6}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, 0, 2, 4, 4, 5, 5, 5, 8, 12},
    {-20,-20,-20,-20,-16,-12,-20,-10, -5, -5, 0, 0, 0, 0, 0, 2, 5},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},

  {{{-15,-15,-15,-15,-15,-12,-10, -8, -5, -5, -5, -5, -5, 0, 0, 0, 6},
    {-30,-30,-30,-30,-26,-22,-20,-14,-12,-12,-10,-10,-10,-10,-10,-10, -6},
    {-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-20,-20,-20}}},
};

static double _noise_thresh_16[4]={ .3,.5,.5,.5 };

static int _noise_start_16[3]={ 256,256,9999 };
static int _noise_part_16[4]={ 8,8,8,8 };

static int _psy_ath_floater_16[4]={
  -100,-100,-100,-105,
};

static int _psy_ath_abs_16[4]={
  -130,-130,-130,-140,
};
# 39703 "oggenc.c"
static static_bookblock _resbook_16s_0={
  {
    {0},
    {0,0,&_16c0_s_p1_0},
    {0,0,&_16c0_s_p2_0},
    {0,0,&_16c0_s_p3_0},
    {0,0,&_16c0_s_p4_0},
    {0,0,&_16c0_s_p5_0},
    {0,0,&_16c0_s_p6_0},
    {&_16c0_s_p7_0,&_16c0_s_p7_1},
    {&_16c0_s_p8_0,&_16c0_s_p8_1},
    {&_16c0_s_p9_0,&_16c0_s_p9_1,&_16c0_s_p9_2}
   }
};
static static_bookblock _resbook_16s_1={
  {
    {0},
    {0,0,&_16c1_s_p1_0},
    {0,0,&_16c1_s_p2_0},
    {0,0,&_16c1_s_p3_0},
    {0,0,&_16c1_s_p4_0},
    {0,0,&_16c1_s_p5_0},
    {0,0,&_16c1_s_p6_0},
    {&_16c1_s_p7_0,&_16c1_s_p7_1},
    {&_16c1_s_p8_0,&_16c1_s_p8_1},
    {&_16c1_s_p9_0,&_16c1_s_p9_1,&_16c1_s_p9_2}
   }
};
static static_bookblock _resbook_16s_2={
  {
    {0},
    {0,0,&_16c2_s_p1_0},
    {0,0,&_16c2_s_p2_0},
    {0,0,&_16c2_s_p3_0},
    {0,0,&_16c2_s_p4_0},
    {&_16c2_s_p5_0,&_16c2_s_p5_1},
    {&_16c2_s_p6_0,&_16c2_s_p6_1},
    {&_16c2_s_p7_0,&_16c2_s_p7_1},
    {&_16c2_s_p8_0,&_16c2_s_p8_1},
    {&_16c2_s_p9_0,&_16c2_s_p9_1,&_16c2_s_p9_2}
   }
};

static vorbis_residue_template _res_16s_0[]={
  {2,0, &_residue_44_mid,
   &_huff_book__16c0_s_single,&_huff_book__16c0_s_single,
   &_resbook_16s_0,&_resbook_16s_0},
};
static vorbis_residue_template _res_16s_1[]={
  {2,0, &_residue_44_mid,
   &_huff_book__16c1_s_short,&_huff_book__16c1_s_short,
   &_resbook_16s_1,&_resbook_16s_1},

  {2,0, &_residue_44_mid,
   &_huff_book__16c1_s_long,&_huff_book__16c1_s_long,
   &_resbook_16s_1,&_resbook_16s_1}
};
static vorbis_residue_template _res_16s_2[]={
  {2,0, &_residue_44_high,
   &_huff_book__16c2_s_short,&_huff_book__16c2_s_short,
   &_resbook_16s_2,&_resbook_16s_2},

  {2,0, &_residue_44_high,
   &_huff_book__16c2_s_long,&_huff_book__16c2_s_long,
   &_resbook_16s_2,&_resbook_16s_2}
};

static vorbis_mapping_template _mapres_template_16_stereo[3]={
  { _map_nominal, _res_16s_0 },
  { _map_nominal, _res_16s_1 },
  { _map_nominal, _res_16s_2 },
};

static static_bookblock _resbook_16u_0={
  {
    {0},
    {0,0,&_16u0__p1_0},
    {0,0,&_16u0__p2_0},
    {0,0,&_16u0__p3_0},
    {0,0,&_16u0__p4_0},
    {0,0,&_16u0__p5_0},
    {&_16u0__p6_0,&_16u0__p6_1},
    {&_16u0__p7_0,&_16u0__p7_1,&_16u0__p7_2}
   }
};
static static_bookblock _resbook_16u_1={
  {
    {0},
    {0,0,&_16u1__p1_0},
    {0,0,&_16u1__p2_0},
    {0,0,&_16u1__p3_0},
    {0,0,&_16u1__p4_0},
    {0,0,&_16u1__p5_0},
    {0,0,&_16u1__p6_0},
    {&_16u1__p7_0,&_16u1__p7_1},
    {&_16u1__p8_0,&_16u1__p8_1},
    {&_16u1__p9_0,&_16u1__p9_1,&_16u1__p9_2}
   }
};
static static_bookblock _resbook_16u_2={
  {
    {0},
    {0,0,&_16u2_p1_0},
    {0,0,&_16u2_p2_0},
    {0,0,&_16u2_p3_0},
    {0,0,&_16u2_p4_0},
    {&_16u2_p5_0,&_16u2_p5_1},
    {&_16u2_p6_0,&_16u2_p6_1},
    {&_16u2_p7_0,&_16u2_p7_1},
    {&_16u2_p8_0,&_16u2_p8_1},
    {&_16u2_p9_0,&_16u2_p9_1,&_16u2_p9_2}
   }
};

static vorbis_residue_template _res_16u_0[]={
  {1,0, &_residue_44_low_un,
   &_huff_book__16u0__single,&_huff_book__16u0__single,
   &_resbook_16u_0,&_resbook_16u_0},
};
static vorbis_residue_template _res_16u_1[]={
  {1,0, &_residue_44_mid_un,
   &_huff_book__16u1__short,&_huff_book__16u1__short,
   &_resbook_16u_1,&_resbook_16u_1},

  {1,0, &_residue_44_mid_un,
   &_huff_book__16u1__long,&_huff_book__16u1__long,
   &_resbook_16u_1,&_resbook_16u_1}
};
static vorbis_residue_template _res_16u_2[]={
  {1,0, &_residue_44_hi_un,
   &_huff_book__16u2__short,&_huff_book__16u2__short,
   &_resbook_16u_2,&_resbook_16u_2},

  {1,0, &_residue_44_hi_un,
   &_huff_book__16u2__long,&_huff_book__16u2__long,
   &_resbook_16u_2,&_resbook_16u_2}
};


static vorbis_mapping_template _mapres_template_16_uncoupled[3]={
  { _map_nominal_u, _res_16u_0 },
  { _map_nominal_u, _res_16u_1 },
  { _map_nominal_u, _res_16u_2 },
};

static int blocksize_16_short[3]={
  1024,512,512
};
static int blocksize_16_long[3]={
  1024,1024,1024
};

static int _floor_mapping_16_short[3]={
  9,3,3
};
static int _floor_mapping_16[3]={
  9,9,9
};

static double rate_mapping_16[4]={
  12000.,20000.,44000.,86000.
};

static double rate_mapping_16_uncoupled[4]={
  16000.,28000.,64000.,100000.
};

static double _global_mapping_16[4]={ 1., 2., 3., 4. };

static double quality_mapping_16[4]={ -.1,.05,.5,1. };

static double _psy_compand_16_mapping[4]={ 0., .8, 1., 1.};

ve_setup_data_template ve_setup_16_stereo={
  3,
  rate_mapping_16,
  quality_mapping_16,
  2,
  15000,
  19000,

  blocksize_16_short,
  blocksize_16_long,

  _psy_tone_masteratt_16,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,

  _psy_noiseguards_8,
  _psy_noisebias_16_impulse,
  _psy_noisebias_16_short,
  _psy_noisebias_16_short,
  _psy_noisebias_16,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_16_mapping,
  _psy_compand_16_mapping,

  {_noise_start_16,_noise_start_16},
  { _noise_part_16, _noise_part_16},
  _noise_thresh_16,

  _psy_ath_floater_16,
  _psy_ath_abs_16,

  _psy_lowpass_16,

  _psy_global_44,
  _global_mapping_16,
  _psy_stereo_modes_16,

  _floor_books,
  _floor,
  _floor_mapping_16_short,
  _floor_mapping_16,

  _mapres_template_16_stereo
};

ve_setup_data_template ve_setup_16_uncoupled={
  3,
  rate_mapping_16_uncoupled,
  quality_mapping_16,
  -1,
  15000,
  19000,

  blocksize_16_short,
  blocksize_16_long,

  _psy_tone_masteratt_16,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,

  _psy_noiseguards_8,
  _psy_noisebias_16_impulse,
  _psy_noisebias_16_short,
  _psy_noisebias_16_short,
  _psy_noisebias_16,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_16_mapping,
  _psy_compand_16_mapping,

  {_noise_start_16,_noise_start_16},
  { _noise_part_16, _noise_part_16},
  _noise_thresh_16,

  _psy_ath_floater_16,
  _psy_ath_abs_16,

  _psy_lowpass_16,

  _psy_global_44,
  _global_mapping_16,
  _psy_stereo_modes_16,

  _floor_books,
  _floor,
  _floor_mapping_16_short,
  _floor_mapping_16,

  _mapres_template_16_uncoupled
};
# 39995 "oggenc.c"
static double rate_mapping_22[4]={
  15000.,20000.,44000.,86000.
};

static double rate_mapping_22_uncoupled[4]={
  16000.,28000.,50000.,90000.
};

static double _psy_lowpass_22[4]={9.5,11.,30.,99.};

ve_setup_data_template ve_setup_22_stereo={
  3,
  rate_mapping_22,
  quality_mapping_16,
  2,
  19000,
  26000,

  blocksize_16_short,
  blocksize_16_long,

  _psy_tone_masteratt_16,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,

  _psy_noiseguards_8,
  _psy_noisebias_16_impulse,
  _psy_noisebias_16_short,
  _psy_noisebias_16_short,
  _psy_noisebias_16,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  _psy_compand_8_mapping,

  {_noise_start_16,_noise_start_16},
  { _noise_part_16, _noise_part_16},
  _noise_thresh_16,

  _psy_ath_floater_16,
  _psy_ath_abs_16,

  _psy_lowpass_22,

  _psy_global_44,
  _global_mapping_16,
  _psy_stereo_modes_16,

  _floor_books,
  _floor,
  _floor_mapping_16_short,
  _floor_mapping_16,

  _mapres_template_16_stereo
};

ve_setup_data_template ve_setup_22_uncoupled={
  3,
  rate_mapping_22_uncoupled,
  quality_mapping_16,
  -1,
  19000,
  26000,

  blocksize_16_short,
  blocksize_16_long,

  _psy_tone_masteratt_16,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,
  _vp_tonemask_adj_16,

  _psy_noiseguards_8,
  _psy_noisebias_16_impulse,
  _psy_noisebias_16_short,
  _psy_noisebias_16_short,
  _psy_noisebias_16,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  _psy_compand_8_mapping,

  {_noise_start_16,_noise_start_16},
  { _noise_part_16, _noise_part_16},
  _noise_thresh_16,

  _psy_ath_floater_16,
  _psy_ath_abs_16,

  _psy_lowpass_22,

  _psy_global_44,
  _global_mapping_16,
  _psy_stereo_modes_16,

  _floor_books,
  _floor,
  _floor_mapping_16_short,
  _floor_mapping_16,

  _mapres_template_16_uncoupled
};
# 40124 "oggenc.c"
static double rate_mapping_X[11]={
  -1.,-1.,-1.,-1.,-1.,
  -1.,-1.,-1.,-1.,-1.,-1.
};

ve_setup_data_template ve_setup_X_stereo={
  10,
  rate_mapping_X,
  quality_mapping_44,
  2,
  50000,
  200000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44,

  _psy_global_44,
  _global_mapping_44,
  _psy_stereo_modes_44,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_stereo
};

ve_setup_data_template ve_setup_X_uncoupled={
  10,
  rate_mapping_X,
  quality_mapping_44,
  -1,
  50000,
  200000,

  blocksize_short_44,
  blocksize_long_44,

  _psy_tone_masteratt_44,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_impulse,
  _psy_noisebias_padding,
  _psy_noisebias_trans,
  _psy_noisebias_long,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44,_noise_start_long_44},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44,

  _psy_global_44,
  _global_mapping_44,
  
# 40221 "oggenc.c" 3 4
 ((void *)0)
# 40221 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44,
  _floor_long_mapping_44,

  _mapres_template_44_uncoupled
};

ve_setup_data_template ve_setup_X_stereo_low={
  1,
  rate_mapping_X,
  quality_mapping_44_stereo_low,
  2,
  50000,
  200000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44_low,

  _psy_global_44,
  _global_mapping_44,
  _psy_stereo_modes_44_low,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_stereo
};


ve_setup_data_template ve_setup_X_uncoupled_low={
  1,
  rate_mapping_X,
  quality_mapping_44_stereo_low,
  -1,
  50000,
  200000,

  blocksize_short_44_low,
  blocksize_long_44_low,

  _psy_tone_masteratt_44_low,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_otherblock,
  _vp_tonemask_adj_longblock,
  _vp_tonemask_adj_otherblock,

  _psy_noiseguards_44,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_trans_low,
  _psy_noisebias_long_low,
  _psy_noise_suppress,

  _psy_compand_44,
  _psy_compand_short_mapping,
  _psy_compand_long_mapping,

  {_noise_start_short_44_low,_noise_start_long_44_low},
  {_noise_part_short_44,_noise_part_long_44},
  _noise_thresh_44_2,

  _psy_ath_floater,
  _psy_ath_abs,

  _psy_lowpass_44_low,

  _psy_global_44,
  _global_mapping_44,
  
# 40324 "oggenc.c" 3 4
 ((void *)0)
# 40324 "oggenc.c"
     ,

  _floor_books,
  _floor,
  _floor_short_mapping_44_low,
  _floor_long_mapping_44_low,

  _mapres_template_44_uncoupled
};

ve_setup_data_template ve_setup_XX_stereo={
  2,
  rate_mapping_X,
  quality_mapping_8,
  2,
  0,
  8000,

  blocksize_8,
  blocksize_8,

  _psy_tone_masteratt_8,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_8,
  
# 40350 "oggenc.c" 3 4
 ((void *)0)
# 40350 "oggenc.c"
     ,
  _vp_tonemask_adj_8,

  _psy_noiseguards_8,
  _psy_noisebias_8,
  _psy_noisebias_8,
  
# 40356 "oggenc.c" 3 4
 ((void *)0)
# 40356 "oggenc.c"
     ,
  
# 40357 "oggenc.c" 3 4
 ((void *)0)
# 40357 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 40362 "oggenc.c" 3 4
 ((void *)0)
# 40362 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_44_2,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_8,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_8,
  
# 40380 "oggenc.c" 3 4
 ((void *)0)
# 40380 "oggenc.c"
     ,

  _mapres_template_8_stereo
};

ve_setup_data_template ve_setup_XX_uncoupled={
  2,
  rate_mapping_X,
  quality_mapping_8,
  -1,
  0,
  8000,

  blocksize_8,
  blocksize_8,

  _psy_tone_masteratt_8,
  _psy_tone_0dB,
  _psy_tone_suppress,

  _vp_tonemask_adj_8,
  
# 40401 "oggenc.c" 3 4
 ((void *)0)
# 40401 "oggenc.c"
     ,
  _vp_tonemask_adj_8,

  _psy_noiseguards_8,
  _psy_noisebias_8,
  _psy_noisebias_8,
  
# 40407 "oggenc.c" 3 4
 ((void *)0)
# 40407 "oggenc.c"
     ,
  
# 40408 "oggenc.c" 3 4
 ((void *)0)
# 40408 "oggenc.c"
     ,
  _psy_noise_suppress,

  _psy_compand_8,
  _psy_compand_8_mapping,
  
# 40413 "oggenc.c" 3 4
 ((void *)0)
# 40413 "oggenc.c"
     ,

  {_noise_start_8,_noise_start_8},
  {_noise_part_8,_noise_part_8},
  _noise_thresh_44_2,

  _psy_ath_floater_8,
  _psy_ath_abs_8,

  _psy_lowpass_8,

  _psy_global_44,
  _global_mapping_8,
  _psy_stereo_modes_8,

  _floor_books,
  _floor,
  _floor_mapping_8,
  
# 40431 "oggenc.c" 3 4
 ((void *)0)
# 40431 "oggenc.c"
     ,

  _mapres_template_8_uncoupled
};


static ve_setup_data_template *setup_list[]={
  &ve_setup_44_stereo,
  &ve_setup_44_stereo_low,
  &ve_setup_44_uncoupled,
  &ve_setup_44_uncoupled_low,

  &ve_setup_32_stereo,
  &ve_setup_32_stereo_low,
  &ve_setup_32_uncoupled,
  &ve_setup_32_uncoupled_low,

  &ve_setup_22_stereo,
  &ve_setup_22_uncoupled,
  &ve_setup_16_stereo,
  &ve_setup_16_uncoupled,

  &ve_setup_11_stereo,
  &ve_setup_11_uncoupled,
  &ve_setup_8_stereo,
  &ve_setup_8_uncoupled,

  &ve_setup_X_stereo,
  &ve_setup_X_uncoupled,
  &ve_setup_X_stereo_low,
  &ve_setup_X_uncoupled_low,
  &ve_setup_XX_stereo,
  &ve_setup_XX_uncoupled,
  0
};

static int vorbis_encode_toplevel_setup(vorbis_info *vi,int ch,long rate){
  if(vi && vi->codec_setup){

    vi->version=0;
    vi->channels=ch;
    vi->rate=rate;

    return(0);
  }
  return(-131);
}

static void vorbis_encode_floor_setup(vorbis_info *vi,double s,int block,
         static_codebook ***books,
         vorbis_info_floor1 *in,
         int *x){
  int i,k,is=s;
  vorbis_info_floor1 *f=calloc(1,sizeof(*f));
  codec_setup_info *ci=vi->codec_setup;

  memcpy(f,in+x[is],sizeof(*f));

  f->n=ci->blocksizes[block]>>1;


  {
    int partitions=f->partitions;
    int maxclass=-1;
    int maxbook=-1;
    for(i=0;i<partitions;i++)
      if(f->partitionclass[i]>maxclass)maxclass=f->partitionclass[i];
    for(i=0;i<=maxclass;i++){
      if(f->class_book[i]>maxbook)maxbook=f->class_book[i];
      f->class_book[i]+=ci->books;
      for(k=0;k<(1<<f->class_subs[i]);k++){
 if(f->class_subbook[i][k]>maxbook)maxbook=f->class_subbook[i][k];
 if(f->class_subbook[i][k]>=0)f->class_subbook[i][k]+=ci->books;
      }
    }

    for(i=0;i<=maxbook;i++)
      ci->book_param[ci->books++]=books[x[is]][i];
  }


  ci->floor_type[ci->floors]=1;
  ci->floor_param[ci->floors]=f;
  ci->floors++;

  return;
}

static void vorbis_encode_global_psych_setup(vorbis_info *vi,double s,
         vorbis_info_psy_global *in,
         double *x){
  int i,is=s;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *g=&ci->psy_g_param;

  memcpy(g,in+(int)x[is],sizeof(*g));

  ds=x[is]*(1.-ds)+x[is+1]*ds;
  is=(int)ds;
  ds-=is;
  if(ds==0 && is>0){
    is--;
    ds=1.;
  }


  for(i=0;i<4;i++){
    g->preecho_thresh[i]=in[is].preecho_thresh[i]*(1.-ds)+in[is+1].preecho_thresh[i]*ds;
    g->postecho_thresh[i]=in[is].postecho_thresh[i]*(1.-ds)+in[is+1].postecho_thresh[i]*ds;
  }
  g->ampmax_att_per_sec=ci->hi.amplitude_track_dBpersec;
  return;
}

static void vorbis_encode_global_stereo(vorbis_info *vi,
           highlevel_encode_setup *hi,
           adj_stereo *p){
  float s=hi->stereo_point_setting;
  int i,is=s;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *g=&ci->psy_g_param;

  if(p){
    memcpy(g->coupling_prepointamp,p[is].pre,sizeof(*p[is].pre)*15);
    memcpy(g->coupling_postpointamp,p[is].post,sizeof(*p[is].post)*15);

    if(hi->managed){

      for(i=0;i<15;i++){
 float kHz=p[is].kHz[i]*(1.-ds)+p[is+1].kHz[i]*ds;
 g->coupling_pointlimit[0][i]=kHz*1000./vi->rate*ci->blocksizes[0];
 g->coupling_pointlimit[1][i]=kHz*1000./vi->rate*ci->blocksizes[1];
 g->coupling_pkHz[i]=kHz;

 kHz=p[is].lowpasskHz[i]*(1.-ds)+p[is+1].lowpasskHz[i]*ds;
 g->sliding_lowpass[0][i]=kHz*1000./vi->rate*ci->blocksizes[0];
 g->sliding_lowpass[1][i]=kHz*1000./vi->rate*ci->blocksizes[1];

      }
    }else{
      float kHz=p[is].kHz[15/2]*(1.-ds)+p[is+1].kHz[15/2]*ds;
      for(i=0;i<15;i++){
 g->coupling_pointlimit[0][i]=kHz*1000./vi->rate*ci->blocksizes[0];
 g->coupling_pointlimit[1][i]=kHz*1000./vi->rate*ci->blocksizes[1];
 g->coupling_pkHz[i]=kHz;
      }

      kHz=p[is].lowpasskHz[15/2]*(1.-ds)+p[is+1].lowpasskHz[15/2]*ds;
      for(i=0;i<15;i++){
 g->sliding_lowpass[0][i]=kHz*1000./vi->rate*ci->blocksizes[0];
 g->sliding_lowpass[1][i]=kHz*1000./vi->rate*ci->blocksizes[1];
      }
    }
  }else{
    for(i=0;i<15;i++){
      g->sliding_lowpass[0][i]=ci->blocksizes[0];
      g->sliding_lowpass[1][i]=ci->blocksizes[1];
    }
  }
  return;
}

static void vorbis_encode_psyset_setup(vorbis_info *vi,double s,
          int *nn_start,
          int *nn_partition,
          double *nn_thresh,
          int block){
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];
  highlevel_encode_setup *hi=&ci->hi;
  int is=s;

  if(block>=ci->psys)
    ci->psys=block+1;
  if(!p){
    p=calloc(1,sizeof(*p));
    ci->psy_param[block]=p;
  }

  memcpy(p,&_psy_info_template,sizeof(*p));
  p->blockflag=block>>1;

  if(hi->noise_normalize_p){
    p->normal_channel_p=1;
    p->normal_point_p=1;
    p->normal_start=nn_start[is];
    p->normal_partition=nn_partition[is];
    p->normal_thresh=nn_thresh[is];
  }

  return;
}

static void vorbis_encode_tonemask_setup(vorbis_info *vi,double s,int block,
      att3 *att,
      int *max,
      vp_adjblock *in){
  int i,is=s;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];



  p->tone_masteratt[0]=att[is].att[0]*(1.-ds)+att[is+1].att[0]*ds;
  p->tone_masteratt[1]=att[is].att[1]*(1.-ds)+att[is+1].att[1]*ds;
  p->tone_masteratt[2]=att[is].att[2]*(1.-ds)+att[is+1].att[2]*ds;
  p->tone_centerboost=att[is].boost*(1.-ds)+att[is+1].boost*ds;
  p->tone_decay=att[is].decay*(1.-ds)+att[is+1].decay*ds;

  p->max_curve_dB=max[is]*(1.-ds)+max[is+1]*ds;

  for(i=0;i<17;i++)
    p->toneatt[i]=in[is].block[i]*(1.-ds)+in[is+1].block[i]*ds;
  return;
}


static void vorbis_encode_compand_setup(vorbis_info *vi,double s,int block,
           compandblock *in, double *x){
  int i,is=s;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];

  ds=x[is]*(1.-ds)+x[is+1]*ds;
  is=(int)ds;
  ds-=is;
  if(ds==0 && is>0){
    is--;
    ds=1.;
  }


  for(i=0;i<40;i++)
    p->noisecompand[i]=in[is].data[i]*(1.-ds)+in[is+1].data[i]*ds;
  return;
}

static void vorbis_encode_peak_setup(vorbis_info *vi,double s,int block,
        int *suppress){
  int is=s;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];

  p->tone_abs_limit=suppress[is]*(1.-ds)+suppress[is+1]*ds;

  return;
}

static void vorbis_encode_noisebias_setup(vorbis_info *vi,double s,int block,
      int *suppress,
      noise3 *in,
      noiseguard *guard,
      double userbias){
  int i,is=s,j;
  double ds=s-is;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];

  p->noisemaxsupp=suppress[is]*(1.-ds)+suppress[is+1]*ds;
  p->noisewindowlomin=guard[block].lo;
  p->noisewindowhimin=guard[block].hi;
  p->noisewindowfixed=guard[block].fixed;

  for(j=0;j<3;j++)
    for(i=0;i<17;i++)
      p->noiseoff[j][i]=in[is].data[j][i]*(1.-ds)+in[is+1].data[j][i]*ds;



  for(j=0;j<3;j++){
    float min=p->noiseoff[j][0]+6;
    for(i=0;i<17;i++){
      p->noiseoff[j][i]+=userbias;
      if(p->noiseoff[j][i]<min)p->noiseoff[j][i]=min;
    }
  }

  return;
}

static void vorbis_encode_ath_setup(vorbis_info *vi,int block){
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy *p=ci->psy_param[block];

  p->ath_adjatt=ci->hi.ath_floating_dB;
  p->ath_maxatt=ci->hi.ath_absolute_dB;
  return;
}


static int book_dup_or_new(codec_setup_info *ci,static_codebook *book){
  int i;
  for(i=0;i<ci->books;i++)
    if(ci->book_param[i]==book)return(i);

  return(ci->books++);
}

static void vorbis_encode_blocksize_setup(vorbis_info *vi,double s,
      int *shortb,int *longb){

  codec_setup_info *ci=vi->codec_setup;
  int is=s;

  int blockshort=shortb[is];
  int blocklong=longb[is];
  ci->blocksizes[0]=blockshort;
  ci->blocksizes[1]=blocklong;

}

static void vorbis_encode_residue_setup(vorbis_info *vi,
           int number, int block,
           vorbis_residue_template *res){

  codec_setup_info *ci=vi->codec_setup;
  int i,n;

  vorbis_info_residue0 *r=ci->residue_param[number]=
    malloc(sizeof(*r));

  memcpy(r,res->res,sizeof(*r));
  if(ci->residues<=number)ci->residues=number+1;

  switch(ci->blocksizes[block]){
  case 64:case 128:case 256:
    r->grouping=16;
    break;
  default:
    r->grouping=32;
    break;
  }
  ci->residue_type[number]=res->res_type;


  n=r->end=ci->blocksizes[block]>>1;
  if(res->res_type==2)
    n=r->end*=vi->channels;


  {
    int booklist=0,k;

    if(ci->hi.managed){
      for(i=0;i<r->partitions;i++)
 for(k=0;k<3;k++)
   if(res->books_base_managed->books[i][k])
     r->secondstages[i]|=(1<<k);

      r->groupbook=book_dup_or_new(ci,res->book_aux_managed);
      ci->book_param[r->groupbook]=res->book_aux_managed;

      for(i=0;i<r->partitions;i++){
 for(k=0;k<3;k++){
   if(res->books_base_managed->books[i][k]){
     int bookid=book_dup_or_new(ci,res->books_base_managed->books[i][k]);
     r->booklist[booklist++]=bookid;
     ci->book_param[bookid]=res->books_base_managed->books[i][k];
   }
 }
      }

    }else{

      for(i=0;i<r->partitions;i++)
 for(k=0;k<3;k++)
   if(res->books_base->books[i][k])
     r->secondstages[i]|=(1<<k);

      r->groupbook=book_dup_or_new(ci,res->book_aux);
      ci->book_param[r->groupbook]=res->book_aux;

      for(i=0;i<r->partitions;i++){
 for(k=0;k<3;k++){
   if(res->books_base->books[i][k]){
     int bookid=book_dup_or_new(ci,res->books_base->books[i][k]);
     r->booklist[booklist++]=bookid;
     ci->book_param[bookid]=res->books_base->books[i][k];
   }
 }
      }
    }
  }


  {
    double freq=ci->hi.lowpass_kHz*1000.;
    vorbis_info_floor1 *f=ci->floor_param[block];
    double nyq=vi->rate/2.;
    long blocksize=ci->blocksizes[block]>>1;


    if(freq>nyq)freq=nyq;



    f->n=freq/nyq*blocksize;



    if(res->limit_type){
      if(ci->hi.managed)
 freq=ci->psy_g_param.coupling_pkHz[15 -1]*1000.;
      else
 freq=ci->psy_g_param.coupling_pkHz[15/2]*1000.;
      if(freq>nyq)freq=nyq;
    }





    if(ci->residue_type[block]==2)
      r->end=(int)((freq/nyq*blocksize*2)/r->grouping+.9)*
 r->grouping;
    else
      r->end=(int)((freq/nyq*blocksize)/r->grouping+.9)*
 r->grouping;
  }
}


static void vorbis_encode_map_n_res_setup(vorbis_info *vi,double s,
       vorbis_mapping_template *maps){

  codec_setup_info *ci=vi->codec_setup;
  int i,j,is=s,modes=2;
  vorbis_info_mapping0 *map=maps[is].map;
  vorbis_info_mode *mode=_mode_template;
  vorbis_residue_template *res=maps[is].res;

  if(ci->blocksizes[0]==ci->blocksizes[1])modes=1;

  for(i=0;i<modes;i++){

    ci->map_param[i]=calloc(1,sizeof(*map));
    ci->mode_param[i]=calloc(1,sizeof(*mode));

    memcpy(ci->mode_param[i],mode+i,sizeof(*_mode_template));
    if(i>=ci->modes)ci->modes=i+1;

    ci->map_type[i]=0;
    memcpy(ci->map_param[i],map+i,sizeof(*map));
    if(i>=ci->maps)ci->maps=i+1;

    for(j=0;j<map[i].submaps;j++)
      vorbis_encode_residue_setup(vi,map[i].residuesubmap[j],i
      ,res+map[i].residuesubmap[j]);
  }
}

static double setting_to_approx_bitrate(vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  highlevel_encode_setup *hi=&ci->hi;
  ve_setup_data_template *setup=(ve_setup_data_template *)hi->setup;
  int is=hi->base_setting;
  double ds=hi->base_setting-is;
  int ch=vi->channels;
  double *r=setup->rate_mapping;

  if(r==
# 40896 "oggenc.c" 3 4
       ((void *)0)
# 40896 "oggenc.c"
           )
    return(-1);

  return((r[is]*(1.-ds)+r[is+1]*ds)*ch);
}

static void get_setup_template(vorbis_info *vi,
          long ch,long srate,
          double req,int q_or_bitrate){
  int i=0,j;
  codec_setup_info *ci=vi->codec_setup;
  highlevel_encode_setup *hi=&ci->hi;
  if(q_or_bitrate)req/=ch;

  while(setup_list[i]){
    if(setup_list[i]->coupling_restriction==-1 ||
       setup_list[i]->coupling_restriction==ch){
      if(srate>=setup_list[i]->samplerate_min_restriction &&
  srate<=setup_list[i]->samplerate_max_restriction){
 int mappings=setup_list[i]->mappings;
 double *map=(q_or_bitrate?
       setup_list[i]->rate_mapping:
       setup_list[i]->quality_mapping);



 if(req<map[0]){++i;continue;}
 if(req>map[setup_list[i]->mappings]){++i;continue;}
 for(j=0;j<mappings;j++)
   if(req>=map[j] && req<map[j+1])break;

 hi->setup=setup_list[i];
 if(j==mappings)
   hi->base_setting=j-.001;
 else{
   float low=map[j];
   float high=map[j+1];
   float del=(req-low)/(high-low);
   hi->base_setting=j+del;
 }
 return;
      }
    }
    i++;
  }

  hi->setup=
# 40942 "oggenc.c" 3 4
           ((void *)0)
# 40942 "oggenc.c"
               ;
}
# 40952 "oggenc.c"
int vorbis_encode_setup_init(vorbis_info *vi){
  int i0=0,singleblock=0;
  codec_setup_info *ci=vi->codec_setup;
  ve_setup_data_template *setup=
# 40955 "oggenc.c" 3 4
                               ((void *)0)
# 40955 "oggenc.c"
                                   ;
  highlevel_encode_setup *hi=&ci->hi;

  if(ci==
# 40958 "oggenc.c" 3 4
        ((void *)0)
# 40958 "oggenc.c"
            )return(-131);
  if(!hi->impulse_block_p)i0=1;


  if(hi->ath_floating_dB>-80)hi->ath_floating_dB=-80;
  if(hi->ath_floating_dB<-200)hi->ath_floating_dB=-200;



  if(hi->amplitude_track_dBpersec>0.)hi->amplitude_track_dBpersec=0.;
  if(hi->amplitude_track_dBpersec<-99999.)hi->amplitude_track_dBpersec=-99999.;



  setup=(ve_setup_data_template *)hi->setup;
  if(setup==
# 40973 "oggenc.c" 3 4
           ((void *)0)
# 40973 "oggenc.c"
               )return(-131);

  hi->set_in_stone=1;




  vorbis_encode_blocksize_setup(vi,hi->base_setting,
    setup->blocksize_short,
    setup->blocksize_long);
  if(ci->blocksizes[0]==ci->blocksizes[1])singleblock=1;



  vorbis_encode_floor_setup(vi,hi->short_setting,0,
       setup->floor_books,
       setup->floor_params,
       setup->floor_short_mapping);
  if(!singleblock)
    vorbis_encode_floor_setup(vi,hi->long_setting,1,
         setup->floor_books,
         setup->floor_params,
         setup->floor_long_mapping);


  vorbis_encode_global_psych_setup(vi,hi->trigger_setting,
       setup->global_params,
       setup->global_mapping);
  vorbis_encode_global_stereo(vi,hi,setup->stereo_modes);


  vorbis_encode_psyset_setup(vi,hi->short_setting,
        setup->psy_noise_normal_start[0],
        setup->psy_noise_normal_partition[0],
        setup->psy_noise_normal_thresh,
        0);
  vorbis_encode_psyset_setup(vi,hi->short_setting,
        setup->psy_noise_normal_start[0],
        setup->psy_noise_normal_partition[0],
        setup->psy_noise_normal_thresh,
        1);
  if(!singleblock){
    vorbis_encode_psyset_setup(vi,hi->long_setting,
          setup->psy_noise_normal_start[1],
          setup->psy_noise_normal_partition[1],
        setup->psy_noise_normal_thresh,
          2);
    vorbis_encode_psyset_setup(vi,hi->long_setting,
          setup->psy_noise_normal_start[1],
          setup->psy_noise_normal_partition[1],
          setup->psy_noise_normal_thresh,
          3);
  }


  vorbis_encode_tonemask_setup(vi,hi->block[i0].tone_mask_setting,0,
          setup->psy_tone_masteratt,
          setup->psy_tone_0dB,
          setup->psy_tone_adj_impulse);
  vorbis_encode_tonemask_setup(vi,hi->block[1].tone_mask_setting,1,
          setup->psy_tone_masteratt,
          setup->psy_tone_0dB,
          setup->psy_tone_adj_other);
  if(!singleblock){
    vorbis_encode_tonemask_setup(vi,hi->block[2].tone_mask_setting,2,
     setup->psy_tone_masteratt,
     setup->psy_tone_0dB,
     setup->psy_tone_adj_other);
    vorbis_encode_tonemask_setup(vi,hi->block[3].tone_mask_setting,3,
     setup->psy_tone_masteratt,
     setup->psy_tone_0dB,
     setup->psy_tone_adj_long);
  }


  vorbis_encode_compand_setup(vi,hi->block[i0].noise_compand_setting,0,
         setup->psy_noise_compand,
         setup->psy_noise_compand_short_mapping);
  vorbis_encode_compand_setup(vi,hi->block[1].noise_compand_setting,1,
         setup->psy_noise_compand,
         setup->psy_noise_compand_short_mapping);
  if(!singleblock){
    vorbis_encode_compand_setup(vi,hi->block[2].noise_compand_setting,2,
    setup->psy_noise_compand,
    setup->psy_noise_compand_long_mapping);
    vorbis_encode_compand_setup(vi,hi->block[3].noise_compand_setting,3,
    setup->psy_noise_compand,
    setup->psy_noise_compand_long_mapping);
  }


  vorbis_encode_peak_setup(vi,hi->block[i0].tone_peaklimit_setting,0,
      setup->psy_tone_dBsuppress);
  vorbis_encode_peak_setup(vi,hi->block[1].tone_peaklimit_setting,1,
      setup->psy_tone_dBsuppress);
  if(!singleblock){
    vorbis_encode_peak_setup(vi,hi->block[2].tone_peaklimit_setting,2,
        setup->psy_tone_dBsuppress);
    vorbis_encode_peak_setup(vi,hi->block[3].tone_peaklimit_setting,3,
        setup->psy_tone_dBsuppress);
  }


  vorbis_encode_noisebias_setup(vi,hi->block[i0].noise_bias_setting,0,
    setup->psy_noise_dBsuppress,
    setup->psy_noise_bias_impulse,
    setup->psy_noiseguards,
    (i0==0?hi->impulse_noisetune:0.));
  vorbis_encode_noisebias_setup(vi,hi->block[1].noise_bias_setting,1,
    setup->psy_noise_dBsuppress,
    setup->psy_noise_bias_padding,
    setup->psy_noiseguards,0.);
  if(!singleblock){
    vorbis_encode_noisebias_setup(vi,hi->block[2].noise_bias_setting,2,
      setup->psy_noise_dBsuppress,
      setup->psy_noise_bias_trans,
      setup->psy_noiseguards,0.);
    vorbis_encode_noisebias_setup(vi,hi->block[3].noise_bias_setting,3,
      setup->psy_noise_dBsuppress,
      setup->psy_noise_bias_long,
      setup->psy_noiseguards,0.);
  }

  vorbis_encode_ath_setup(vi,0);
  vorbis_encode_ath_setup(vi,1);
  if(!singleblock){
    vorbis_encode_ath_setup(vi,2);
    vorbis_encode_ath_setup(vi,3);
  }

  vorbis_encode_map_n_res_setup(vi,hi->base_setting,setup->maps);


  vi->bitrate_nominal=setting_to_approx_bitrate(vi);
  vi->bitrate_lower=hi->bitrate_min;
  vi->bitrate_upper=hi->bitrate_max;
  vi->bitrate_window=hi->bitrate_limit_window;

  if(hi->managed){
    ci->bi.queue_avg_time=hi->bitrate_av_window;
    ci->bi.queue_avg_center=hi->bitrate_av_window_center;
    ci->bi.queue_minmax_time=hi->bitrate_limit_window;
    ci->bi.queue_hardmin=hi->bitrate_min;
    ci->bi.queue_hardmax=hi->bitrate_max;
    ci->bi.queue_avgmin=hi->bitrate_av_lo;
    ci->bi.queue_avgmax=hi->bitrate_av_hi;
    ci->bi.avgfloat_downslew_max=-999999.f;
    ci->bi.avgfloat_upslew_max=999999.f;
  }

  return(0);

}

static int vorbis_encode_setup_setting(vorbis_info *vi,
           long channels,
           long rate){
  int ret=0,i,is;
  codec_setup_info *ci=vi->codec_setup;
  highlevel_encode_setup *hi=&ci->hi;
  ve_setup_data_template *setup=hi->setup;
  double ds;

  ret=vorbis_encode_toplevel_setup(vi,channels,rate);
  if(ret)return(ret);

  is=hi->base_setting;
  ds=hi->base_setting-is;

  hi->short_setting=hi->base_setting;
  hi->long_setting=hi->base_setting;

  hi->managed=0;

  hi->impulse_block_p=1;
  hi->noise_normalize_p=1;

  hi->stereo_point_setting=hi->base_setting;
  hi->lowpass_kHz=
    setup->psy_lowpass[is]*(1.-ds)+setup->psy_lowpass[is+1]*ds;

  hi->ath_floating_dB=setup->psy_ath_float[is]*(1.-ds)+
    setup->psy_ath_float[is+1]*ds;
  hi->ath_absolute_dB=setup->psy_ath_abs[is]*(1.-ds)+
    setup->psy_ath_abs[is+1]*ds;

  hi->amplitude_track_dBpersec=-6.;
  hi->trigger_setting=hi->base_setting;

  for(i=0;i<4;i++){
    hi->block[i].tone_mask_setting=hi->base_setting;
    hi->block[i].tone_peaklimit_setting=hi->base_setting;
    hi->block[i].noise_bias_setting=hi->base_setting;
    hi->block[i].noise_compand_setting=hi->base_setting;
  }

  return(ret);
}

int vorbis_encode_setup_vbr(vorbis_info *vi,
       long channels,
       long rate,
       float quality){
  codec_setup_info *ci=vi->codec_setup;
  highlevel_encode_setup *hi=&ci->hi;

  quality+=.00001;
  if(quality>=1.)quality=.9999;

  get_setup_template(vi,channels,rate,quality,0);
  if(!hi->setup)return -130;

  return vorbis_encode_setup_setting(vi,channels,rate);
}

int vorbis_encode_init_vbr(vorbis_info *vi,
      long channels,
      long rate,

      float base_quality
      ){
  int ret=0;

  ret=vorbis_encode_setup_vbr(vi,channels,rate,base_quality);

  if(ret){
    vorbis_info_clear(vi);
    return ret;
  }
  ret=vorbis_encode_setup_init(vi);
  if(ret)
    vorbis_info_clear(vi);
  return(ret);
}

int vorbis_encode_setup_managed(vorbis_info *vi,
    long channels,
    long rate,

    long max_bitrate,
    long nominal_bitrate,
    long min_bitrate){

  codec_setup_info *ci=vi->codec_setup;
  highlevel_encode_setup *hi=&ci->hi;
  double tnominal=nominal_bitrate;
  int ret=0;

  if(nominal_bitrate<=0.){
    if(max_bitrate>0.){
      nominal_bitrate=max_bitrate*.875;
    }else{
      if(min_bitrate>0.){
 nominal_bitrate=min_bitrate;
      }else{
 return(-131);
      }
    }
  }

  get_setup_template(vi,channels,rate,nominal_bitrate,1);
  if(!hi->setup)return -130;

  ret=vorbis_encode_setup_setting(vi,channels,rate);
  if(ret){
    vorbis_info_clear(vi);
    return ret;
  }



  hi->managed=1;
  hi->bitrate_av_window=4.;
  hi->bitrate_av_window_center=.5;
  hi->bitrate_limit_window=2.;
  hi->bitrate_min=min_bitrate;
  hi->bitrate_max=max_bitrate;
  hi->bitrate_av_lo=tnominal;
  hi->bitrate_av_hi=tnominal;

  return(ret);

}

int vorbis_encode_init(vorbis_info *vi,
         long channels,
         long rate,

         long max_bitrate,
         long nominal_bitrate,
         long min_bitrate){

  int ret=vorbis_encode_setup_managed(vi,channels,rate,
          max_bitrate,
          nominal_bitrate,
          min_bitrate);
  if(ret){
    vorbis_info_clear(vi);
    return(ret);
  }

  ret=vorbis_encode_setup_init(vi);
  if(ret)
    vorbis_info_clear(vi);
  return(ret);
}

int vorbis_encode_ctl(vorbis_info *vi,int number,void *arg){
  if(vi){
    codec_setup_info *ci=vi->codec_setup;
    highlevel_encode_setup *hi=&ci->hi;
    int setp=(number&0xf);

    if(setp && hi->set_in_stone)return(-131);

    switch(number){
    case 0x10:
      {

 struct ovectl_ratemanage_arg *ai=
   (struct ovectl_ratemanage_arg *)arg;

 ai->management_active=hi->managed;
 ai->bitrate_av_window=hi->bitrate_av_window;
 ai->bitrate_av_window_center=hi->bitrate_av_window_center;
 ai->bitrate_hard_window=hi->bitrate_limit_window;
 ai->bitrate_hard_min=hi->bitrate_min;
 ai->bitrate_hard_max=hi->bitrate_max;
 ai->bitrate_av_lo=hi->bitrate_av_lo;
 ai->bitrate_av_hi=hi->bitrate_av_hi;

      }
      return(0);

    case 0x11:
      {
 struct ovectl_ratemanage_arg *ai=
   (struct ovectl_ratemanage_arg *)arg;
 if(ai==
# 41311 "oggenc.c" 3 4
       ((void *)0)
# 41311 "oggenc.c"
           ){
   hi->managed=0;
 }else{
   hi->managed=ai->management_active;
   vorbis_encode_ctl(vi,0x12,arg);
   vorbis_encode_ctl(vi,0x13,arg);
 }
      }
      return 0;

    case 0x12:
      {
 struct ovectl_ratemanage_arg *ai=
   (struct ovectl_ratemanage_arg *)arg;
 if(ai==
# 41325 "oggenc.c" 3 4
       ((void *)0)
# 41325 "oggenc.c"
           ){
   hi->bitrate_av_lo=0;
   hi->bitrate_av_hi=0;
   hi->bitrate_av_window=0;
 }else{
   hi->bitrate_av_window=ai->bitrate_av_window;
   hi->bitrate_av_window_center=ai->bitrate_av_window_center;
   hi->bitrate_av_lo=ai->bitrate_av_lo;
   hi->bitrate_av_hi=ai->bitrate_av_hi;
 }

 if(hi->bitrate_av_window<.25)hi->bitrate_av_window=.25;
 if(hi->bitrate_av_window>10.)hi->bitrate_av_window=10.;
 if(hi->bitrate_av_window_center<0.)hi->bitrate_av_window=0.;
 if(hi->bitrate_av_window_center>1.)hi->bitrate_av_window=1.;

 if( ( (hi->bitrate_av_lo<=0 && hi->bitrate_av_hi<=0)||
       (hi->bitrate_av_window<=0) ) &&
     ( (hi->bitrate_min<=0 && hi->bitrate_max<=0)||
       (hi->bitrate_limit_window<=0) ))
   hi->managed=0;
      }
      return(0);
    case 0x13:
      {
 struct ovectl_ratemanage_arg *ai=
   (struct ovectl_ratemanage_arg *)arg;
 if(ai==
# 41352 "oggenc.c" 3 4
       ((void *)0)
# 41352 "oggenc.c"
           ){
   hi->bitrate_min=0;
   hi->bitrate_max=0;
   hi->bitrate_limit_window=0;
 }else{
   hi->bitrate_limit_window=ai->bitrate_hard_window;
   hi->bitrate_min=ai->bitrate_hard_min;
   hi->bitrate_max=ai->bitrate_hard_max;
 }
 if(hi->bitrate_limit_window<0.)hi->bitrate_limit_window=0.;
 if(hi->bitrate_limit_window>10.)hi->bitrate_limit_window=10.;

 if( ( (hi->bitrate_av_lo<=0 && hi->bitrate_av_hi<=0)||
       (hi->bitrate_av_window<=0) ) &&
     ( (hi->bitrate_min<=0 && hi->bitrate_max<=0)||
       (hi->bitrate_limit_window<=0) ))
   hi->managed=0;
      }
      return(0);

    case 0x20:
      {
 double *farg=(double *)arg;
 *farg=hi->lowpass_kHz;
      }
      return(0);
    case 0x21:
      {
 double *farg=(double *)arg;
 hi->lowpass_kHz=*farg;

 if(hi->lowpass_kHz<2.)hi->lowpass_kHz=2.;
 if(hi->lowpass_kHz>99.)hi->lowpass_kHz=99.;
      }
      return(0);
    case 0x30:
      {
 double *farg=(double *)arg;
 *farg=hi->impulse_noisetune;
      }
      return(0);
    case 0x31:
      {
 double *farg=(double *)arg;
 hi->impulse_noisetune=*farg;

 if(hi->impulse_noisetune>0.)hi->impulse_noisetune=0.;
 if(hi->impulse_noisetune<-15.)hi->impulse_noisetune=-15.;
      }
      return(0);
    }


    return(-130);
  }
  return(-131);
}
# 41456 "oggenc.c"
typedef struct {
  size_t (*read_func) (void *ptr, size_t size, size_t nmemb, void *datasource);
  int (*seek_func) (void *datasource, ogg_int64_t offset, int whence);
  int (*close_func) (void *datasource);
  long (*tell_func) (void *datasource);
} ov_callbacks;







typedef struct OggVorbis_File {
  void *datasource;
  int seekable;
  ogg_int64_t offset;
  ogg_int64_t end;
  ogg_sync_state oy;



  int links;
  ogg_int64_t *offsets;
  ogg_int64_t *dataoffsets;
  long *serialnos;
  ogg_int64_t *pcmlengths;


  vorbis_info *vi;
  vorbis_comment *vc;


  ogg_int64_t pcm_offset;
  int ready_state;
  long current_serialno;
  int current_link;

  double bittrack;
  double samptrack;

  ogg_stream_state os;

  vorbis_dsp_state vd;
  vorbis_block vb;

  ov_callbacks callbacks;

} OggVorbis_File;

extern int ov_clear(OggVorbis_File *vf);
extern int ov_open(FILE *f,OggVorbis_File *vf,char *initial,long ibytes);
extern int ov_open_callbacks(void *datasource, OggVorbis_File *vf,
  char *initial, long ibytes, ov_callbacks callbacks);

extern int ov_test(FILE *f,OggVorbis_File *vf,char *initial,long ibytes);
extern int ov_test_callbacks(void *datasource, OggVorbis_File *vf,
  char *initial, long ibytes, ov_callbacks callbacks);
extern int ov_test_open(OggVorbis_File *vf);

extern long ov_bitrate(OggVorbis_File *vf,int i);
extern long ov_bitrate_instant(OggVorbis_File *vf);
extern long ov_streams(OggVorbis_File *vf);
extern long ov_seekable(OggVorbis_File *vf);
extern long ov_serialnumber(OggVorbis_File *vf,int i);

extern ogg_int64_t ov_raw_total(OggVorbis_File *vf,int i);
extern ogg_int64_t ov_pcm_total(OggVorbis_File *vf,int i);
extern double ov_time_total(OggVorbis_File *vf,int i);

extern int ov_raw_seek(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_pcm_seek(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_pcm_seek_page(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_time_seek(OggVorbis_File *vf,double pos);
extern int ov_time_seek_page(OggVorbis_File *vf,double pos);

extern int ov_raw_seek_lap(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_pcm_seek_lap(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_pcm_seek_page_lap(OggVorbis_File *vf,ogg_int64_t pos);
extern int ov_time_seek_lap(OggVorbis_File *vf,double pos);
extern int ov_time_seek_page_lap(OggVorbis_File *vf,double pos);

extern ogg_int64_t ov_raw_tell(OggVorbis_File *vf);
extern ogg_int64_t ov_pcm_tell(OggVorbis_File *vf);
extern double ov_time_tell(OggVorbis_File *vf);

extern vorbis_info *ov_info(OggVorbis_File *vf,int link);
extern vorbis_comment *ov_comment(OggVorbis_File *vf,int link);

extern long ov_read_float(OggVorbis_File *vf,float ***pcm_channels,int samples,
     int *bitstream);
extern long ov_read(OggVorbis_File *vf,char *buffer,int length,
      int bigendianp,int word,int sgned,int *bitstream);
extern int ov_crosslap(OggVorbis_File *vf1,OggVorbis_File *vf2);

extern int ov_halfrate(OggVorbis_File *vf,int flag);
extern int ov_halfrate_p(OggVorbis_File *vf);
# 41587 "oggenc.c"
static long _get_data(OggVorbis_File *vf){
  
# 41588 "oggenc.c" 3 4
 (*__errno_location ())
# 41588 "oggenc.c"
      =0;
  if(vf->datasource){
    char *buffer=ogg_sync_buffer(&vf->oy,8500);
    long bytes=(vf->callbacks.read_func)(buffer,1,8500,vf->datasource);
    if(bytes>0)ogg_sync_wrote(&vf->oy,bytes);
    if(bytes==0 && 
# 41593 "oggenc.c" 3 4
                  (*__errno_location ())
# 41593 "oggenc.c"
                       )return(-1);
    return(bytes);
  }else
    return(0);
}


static void _seek_helper(OggVorbis_File *vf,ogg_int64_t offset){
  if(vf->datasource){
    (vf->callbacks.seek_func)(vf->datasource, offset, 
# 41602 "oggenc.c" 3 4
                                                     0
# 41602 "oggenc.c"
                                                             );
    vf->offset=offset;
    ogg_sync_reset(&vf->oy);
  }else{

    return;
  }
}
# 41624 "oggenc.c"
static ogg_int64_t _get_next_page(OggVorbis_File *vf,ogg_page *og,
      ogg_int64_t boundary){
  if(boundary>0)boundary+=vf->offset;
  while(1){
    long more;

    if(boundary>0 && vf->offset>=boundary)return(-1);
    more=ogg_sync_pageseek(&vf->oy,og);

    if(more<0){

      vf->offset-=more;
    }else{
      if(more==0){

 if(!boundary)return(-1);
 {
   long ret=_get_data(vf);
   if(ret==0)return(-2);
   if(ret<0)return(-128);
 }
      }else{


 ogg_int64_t ret=vf->offset;
 vf->offset+=more;
 return(ret);

      }
    }
  }
}






static ogg_int64_t _get_prev_page(OggVorbis_File *vf,ogg_page *og){
  ogg_int64_t begin=vf->offset;
  ogg_int64_t end=begin;
  ogg_int64_t ret;
  ogg_int64_t offset=-1;

  while(offset==-1){
    begin-=8500;
    if(begin<0)
      begin=0;
    _seek_helper(vf,begin);
    while(vf->offset<end){
      ret=_get_next_page(vf,og,end-vf->offset);
      if(ret==-128)return(-128);
      if(ret<0){
 break;
      }else{
 offset=ret;
      }
    }
  }


  _seek_helper(vf,offset);
  ret=_get_next_page(vf,og,8500);
  if(ret<0)

    return(-129);

  return(offset);
}





static int _bisect_forward_serialno(OggVorbis_File *vf,
        ogg_int64_t begin,
        ogg_int64_t searched,
        ogg_int64_t end,
        long currentno,
        long m){
  ogg_int64_t endsearched=end;
  ogg_int64_t next=end;
  ogg_page og;
  ogg_int64_t ret;



  while(searched<endsearched){
    ogg_int64_t bisect;

    if(endsearched-searched<8500){
      bisect=searched;
    }else{
      bisect=(searched+endsearched)/2;
    }

    _seek_helper(vf,bisect);
    ret=_get_next_page(vf,&og,-1);
    if(ret==-128)return(-128);
    if(ret<0 || ogg_page_serialno(&og)!=currentno){
      endsearched=bisect;
      if(ret>=0)next=ret;
    }else{
      searched=ret+og.header_len+og.body_len;
    }
  }

  _seek_helper(vf,next);
  ret=_get_next_page(vf,&og,-1);
  if(ret==-128)return(-128);

  if(searched>=end || ret<0){
    vf->links=m+1;
    vf->offsets=malloc((vf->links+1)*sizeof(*vf->offsets));
    vf->serialnos=malloc(vf->links*sizeof(*vf->serialnos));
    vf->offsets[m+1]=searched;
  }else{
    ret=_bisect_forward_serialno(vf,next,vf->offset,
     end,ogg_page_serialno(&og),m+1);
    if(ret==-128)return(-128);
  }

  vf->offsets[m]=begin;
  vf->serialnos[m]=currentno;
  return(0);
}



static int _fetch_headers(OggVorbis_File *vf,vorbis_info *vi,vorbis_comment *vc,
     long *serialno,ogg_page *og_ptr){
  ogg_page og;
  ogg_packet op;
  int i,ret;

  if(!og_ptr){
    ogg_int64_t llret=_get_next_page(vf,&og,8500);
    if(llret==-128)return(-128);
    if(llret<0)return -132;
    og_ptr=&og;
  }

  ogg_stream_reset_serialno(&vf->os,ogg_page_serialno(og_ptr));
  if(serialno)*serialno=vf->os.serialno;
  vf->ready_state=3;




  vorbis_info_init(vi);
  vorbis_comment_init(vc);

  i=0;
  while(i<3){
    ogg_stream_pagein(&vf->os,og_ptr);
    while(i<3){
      int result=ogg_stream_packetout(&vf->os,&op);
      if(result==0)break;
      if(result==-1){
 ret=-133;
 goto bail_header;
      }
      if((ret=vorbis_synthesis_headerin(vi,vc,&op))){
 goto bail_header;
      }
      i++;
    }
    if(i<3)
      if(_get_next_page(vf,og_ptr,8500)<0){
 ret=-133;
 goto bail_header;
      }
  }
  return 0;

 bail_header:
  vorbis_info_clear(vi);
  vorbis_comment_clear(vc);
  vf->ready_state=2;

  return ret;
}
# 41816 "oggenc.c"
static void _prefetch_all_headers(OggVorbis_File *vf, ogg_int64_t dataoffset){
  ogg_page og;
  int i;
  ogg_int64_t ret;

  vf->vi=realloc(vf->vi,vf->links*sizeof(*vf->vi));
  vf->vc=realloc(vf->vc,vf->links*sizeof(*vf->vc));
  vf->dataoffsets=malloc(vf->links*sizeof(*vf->dataoffsets));
  vf->pcmlengths=malloc(vf->links*2*sizeof(*vf->pcmlengths));

  for(i=0;i<vf->links;i++){
    if(i==0){

      vf->dataoffsets[i]=dataoffset;
      _seek_helper(vf,dataoffset);

    }else{



      _seek_helper(vf,vf->offsets[i]);
      if(_fetch_headers(vf,vf->vi+i,vf->vc+i,
# 41837 "oggenc.c" 3 4
                                            ((void *)0)
# 41837 "oggenc.c"
                                                ,
# 41837 "oggenc.c" 3 4
                                                 ((void *)0)
# 41837 "oggenc.c"
                                                     )<0){
     vf->dataoffsets[i]=-1;
      }else{
 vf->dataoffsets[i]=vf->offset;
      }
    }



    if(vf->dataoffsets[i]!=-1){
      ogg_int64_t accumulated=0;
      long lastblock=-1;
      int result;

      ogg_stream_reset_serialno(&vf->os,vf->serialnos[i]);

      while(1){
 ogg_packet op;

 ret=_get_next_page(vf,&og,-1);
 if(ret<0)


   break;

 if(ogg_page_serialno(&og)!=vf->serialnos[i])
   break;


 ogg_stream_pagein(&vf->os,&og);
 while((result=ogg_stream_packetout(&vf->os,&op))){
   if(result>0){
     long thisblock=vorbis_packet_blocksize(vf->vi+i,&op);
     if(lastblock!=-1)
       accumulated+=(lastblock+thisblock)>>2;
     lastblock=thisblock;
   }
 }

 if(ogg_page_granulepos(&og)!=-1){

   accumulated= ogg_page_granulepos(&og)-accumulated;
   break;
 }
      }



      if(accumulated<0)accumulated=0;

      vf->pcmlengths[i*2]=accumulated;
    }



    {
      ogg_int64_t end=vf->offsets[i+1];
      _seek_helper(vf,end);

      while(1){
 ret=_get_prev_page(vf,&og);
 if(ret<0){

   vorbis_info_clear(vf->vi+i);
   vorbis_comment_clear(vf->vc+i);
   break;
 }
 if(ogg_page_granulepos(&og)!=-1){
   vf->pcmlengths[i*2+1]=ogg_page_granulepos(&og)-vf->pcmlengths[i*2];
   break;
 }
 vf->offset=ret;
      }
    }
  }
}

static int _make_decode_ready(OggVorbis_File *vf){
  if(vf->ready_state>3)return 0;
  if(vf->ready_state<3)return -129;
  if(vf->seekable){
    if(vorbis_synthesis_init(&vf->vd,vf->vi+vf->current_link))
      return -137;
  }else{
    if(vorbis_synthesis_init(&vf->vd,vf->vi))
      return -137;
  }
  vorbis_block_init(&vf->vd,&vf->vb);
  vf->ready_state=4;
  vf->bittrack=0.f;
  vf->samptrack=0.f;
  return 0;
}

static int _open_seekable2(OggVorbis_File *vf){
  long serialno=vf->current_serialno;
  ogg_int64_t dataoffset=vf->offset, end;
  ogg_page og;




  (vf->callbacks.seek_func)(vf->datasource,0,
# 41939 "oggenc.c" 3 4
                                            2
# 41939 "oggenc.c"
                                                    );
  vf->offset=vf->end=(vf->callbacks.tell_func)(vf->datasource);



  end=_get_prev_page(vf,&og);
  if(end<0)return(end);


  if(ogg_page_serialno(&og)!=serialno){



    if(_bisect_forward_serialno(vf,0,0,end+1,serialno,0)<0)return(-128);

  }else{


    if(_bisect_forward_serialno(vf,0,end,end+1,serialno,0))return(-128);

  }


  _prefetch_all_headers(vf,dataoffset);
  return(ov_raw_seek(vf,0));
}


static void _decode_clear(OggVorbis_File *vf){
  vorbis_dsp_clear(&vf->vd);
  vorbis_block_clear(&vf->vb);
  vf->ready_state=2;
}
# 41984 "oggenc.c"
static int _fetch_and_process_packet(OggVorbis_File *vf,
         ogg_packet *op_in,
         int readp,
         int spanp){
  ogg_page og;



  while(1){



    if(vf->ready_state==4){
      while(1) {
       ogg_packet op;
       ogg_packet *op_ptr=(op_in?op_in:&op);
 int result=ogg_stream_packetout(&vf->os,op_ptr);
 ogg_int64_t granulepos;

 op_in=
# 42003 "oggenc.c" 3 4
      ((void *)0)
# 42003 "oggenc.c"
          ;
 if(result==-1)return(-3);
 if(result>0){

   granulepos=op_ptr->granulepos;
   if(!vorbis_synthesis(&vf->vb,op_ptr)){
# 42017 "oggenc.c"
     {
       int oldsamples=vorbis_synthesis_pcmout(&vf->vd,
# 42018 "oggenc.c" 3 4
                                                     ((void *)0)
# 42018 "oggenc.c"
                                                         );


       if(oldsamples)return(-129);

       vorbis_synthesis_blockin(&vf->vd,&vf->vb);
       vf->samptrack+=vorbis_synthesis_pcmout(&vf->vd,
# 42024 "oggenc.c" 3 4
                                                     ((void *)0)
# 42024 "oggenc.c"
                                                         )-oldsamples;
       vf->bittrack+=op_ptr->bytes*8;
     }


     if(granulepos!=-1 && !op_ptr->e_o_s){
       int link=(vf->seekable?vf->current_link:0);
       int i,samples;
# 42046 "oggenc.c"
       if(vf->seekable && link>0)
  granulepos-=vf->pcmlengths[link*2];
       if(granulepos<0)granulepos=0;




       samples=vorbis_synthesis_pcmout(&vf->vd,
# 42053 "oggenc.c" 3 4
                                              ((void *)0)
# 42053 "oggenc.c"
                                                  );

       granulepos-=samples;
       for(i=0;i<link;i++)
         granulepos+=vf->pcmlengths[i*2+1];
       vf->pcm_offset=granulepos;
     }
     return(1);
   }
 }
 else
   break;
      }
    }

    if(vf->ready_state>=2){
      int ret;
      if(!readp)return(0);
      if((ret=_get_next_page(vf,&og,-1))<0){
 return(-2);

      }



      vf->bittrack+=og.header_len*8;


      if(vf->ready_state==4){
 if(vf->current_serialno!=ogg_page_serialno(&og)){
   if(!spanp)
     return(-2);

   _decode_clear(vf);

   if(!vf->seekable){
     vorbis_info_clear(vf->vi);
     vorbis_comment_clear(vf->vc);
   }
 }
      }
    }
# 42108 "oggenc.c"
    if(vf->ready_state!=4){
      int link;

      if(vf->ready_state<3){
 if(vf->seekable){
   vf->current_serialno=ogg_page_serialno(&og);




   for(link=0;link<vf->links;link++)
     if(vf->serialnos[link]==vf->current_serialno)break;
   if(link==vf->links)return(-137);




   vf->current_link=link;

   ogg_stream_reset_serialno(&vf->os,vf->current_serialno);
   vf->ready_state=3;

 }else{



   int ret=_fetch_headers(vf,vf->vi,vf->vc,&vf->current_serialno,&og);
   if(ret)return(ret);
   vf->current_link++;
   link=0;
 }
      }

      {
 int ret=_make_decode_ready(vf);
 if(ret<0)return ret;
      }
    }
    ogg_stream_pagein(&vf->os,&og);
  }
}



static int _fseek64_wrap(FILE *f,ogg_int64_t off,int whence){
  if(f==
# 42153 "oggenc.c" 3 4
       ((void *)0)
# 42153 "oggenc.c"
           )return(-1);
  return fseek(f,off,whence);
}

static int _ov_open1(void *f,OggVorbis_File *vf,char *initial,
       long ibytes, ov_callbacks callbacks){
  int offsettest=(f?callbacks.seek_func(f,0,
# 42159 "oggenc.c" 3 4
                                           1
# 42159 "oggenc.c"
                                                   ):-1);
  int ret;

  memset(vf,0,sizeof(*vf));
  vf->datasource=f;
  vf->callbacks = callbacks;


  ogg_sync_init(&vf->oy);





  if(initial){
    char *buffer=ogg_sync_buffer(&vf->oy,ibytes);
    memcpy(buffer,initial,ibytes);
    ogg_sync_wrote(&vf->oy,ibytes);
  }


  if(offsettest!=-1)vf->seekable=1;



  vf->links=1;
  vf->vi=calloc(vf->links,sizeof(*vf->vi));
  vf->vc=calloc(vf->links,sizeof(*vf->vc));
  ogg_stream_init(&vf->os,-1);


  if((ret=_fetch_headers(vf,vf->vi,vf->vc,&vf->current_serialno,
# 42190 "oggenc.c" 3 4
                                                               ((void *)0)
# 42190 "oggenc.c"
                                                                   ))<0){
    vf->datasource=
# 42191 "oggenc.c" 3 4
                  ((void *)0)
# 42191 "oggenc.c"
                      ;
    ov_clear(vf);
  }else
    vf->ready_state=1;
  return(ret);
}

static int _ov_open2(OggVorbis_File *vf){
  if(vf->ready_state != 1) return -131;
  vf->ready_state=2;
  if(vf->seekable){
    int ret=_open_seekable2(vf);
    if(ret){
      vf->datasource=
# 42204 "oggenc.c" 3 4
                    ((void *)0)
# 42204 "oggenc.c"
                        ;
      ov_clear(vf);
    }
    return(ret);
  }else
    vf->ready_state=3;

  return 0;
}



int ov_clear(OggVorbis_File *vf){
  if(vf){
    vorbis_block_clear(&vf->vb);
    vorbis_dsp_clear(&vf->vd);
    ogg_stream_clear(&vf->os);

    if(vf->vi && vf->links){
      int i;
      for(i=0;i<vf->links;i++){
 vorbis_info_clear(vf->vi+i);
 vorbis_comment_clear(vf->vc+i);
      }
      free(vf->vi);
      free(vf->vc);
    }
    if(vf->dataoffsets)free(vf->dataoffsets);
    if(vf->pcmlengths)free(vf->pcmlengths);
    if(vf->serialnos)free(vf->serialnos);
    if(vf->offsets)free(vf->offsets);
    ogg_sync_clear(&vf->oy);
    if(vf->datasource)(vf->callbacks.close_func)(vf->datasource);
    memset(vf,0,sizeof(*vf));
  }



  return(0);
}
# 42253 "oggenc.c"
int ov_open_callbacks(void *f,OggVorbis_File *vf,char *initial,long ibytes,
    ov_callbacks callbacks){
  int ret=_ov_open1(f,vf,initial,ibytes,callbacks);
  if(ret)return ret;
  return _ov_open2(vf);
}

int ov_open(FILE *f,OggVorbis_File *vf,char *initial,long ibytes){
  ov_callbacks callbacks = {
    (size_t (*)(void *, size_t, size_t, void *)) fread,
    (int (*)(void *, ogg_int64_t, int)) _fseek64_wrap,
    (int (*)(void *)) fclose,
    (long (*)(void *)) ftell
  };

  return ov_open_callbacks((void *)f, vf, initial, ibytes, callbacks);
}




int ov_halfrate(OggVorbis_File *vf,int flag){
  int i;
  if(vf->vi==
# 42276 "oggenc.c" 3 4
            ((void *)0)
# 42276 "oggenc.c"
                )return -131;
  if(!vf->seekable)return -131;
  if(vf->ready_state>=3)
    _decode_clear(vf);





  for(i=0;i<vf->links;i++){
    if(vorbis_synthesis_halfrate(vf->vi+i,flag)){
      ov_halfrate(vf,0);
      return -131;
    }
  }
  return 0;
}

int ov_halfrate_p(OggVorbis_File *vf){
  if(vf->vi==
# 42295 "oggenc.c" 3 4
            ((void *)0)
# 42295 "oggenc.c"
                )return -131;
  return vorbis_synthesis_halfrate_p(vf->vi);
}






int ov_test_callbacks(void *f,OggVorbis_File *vf,char *initial,long ibytes,
    ov_callbacks callbacks)
{
  return _ov_open1(f,vf,initial,ibytes,callbacks);
}

int ov_test(FILE *f,OggVorbis_File *vf,char *initial,long ibytes){
  ov_callbacks callbacks = {
    (size_t (*)(void *, size_t, size_t, void *)) fread,
    (int (*)(void *, ogg_int64_t, int)) _fseek64_wrap,
    (int (*)(void *)) fclose,
    (long (*)(void *)) ftell
  };

  return ov_test_callbacks((void *)f, vf, initial, ibytes, callbacks);
}

int ov_test_open(OggVorbis_File *vf){
  if(vf->ready_state!=1)return(-131);
  return _ov_open2(vf);
}


long ov_streams(OggVorbis_File *vf){
  return vf->links;
}


long ov_seekable(OggVorbis_File *vf){
  return vf->seekable;
}
# 42345 "oggenc.c"
long ov_bitrate(OggVorbis_File *vf,int i){
  if(vf->ready_state<2)return(-131);
  if(i>=vf->links)return(-131);
  if(!vf->seekable && i!=0)return(ov_bitrate(vf,0));
  if(i<0){
    ogg_int64_t bits=0;
    int i;
    float br;
    for(i=0;i<vf->links;i++)
      bits+=(vf->offsets[i+1]-vf->dataoffsets[i])*8;




    br = bits/ov_time_total(vf,-1);
    return(rint(br));
  }else{
    if(vf->seekable){

      return(rint((vf->offsets[i+1]-vf->dataoffsets[i])*8/ov_time_total(vf,i)));
    }else{

      if(vf->vi[i].bitrate_nominal>0){
 return vf->vi[i].bitrate_nominal;
      }else{
 if(vf->vi[i].bitrate_upper>0){
   if(vf->vi[i].bitrate_lower>0){
     return (vf->vi[i].bitrate_upper+vf->vi[i].bitrate_lower)/2;
   }else{
     return vf->vi[i].bitrate_upper;
   }
 }
 return(-1);
      }
    }
  }
}





long ov_bitrate_instant(OggVorbis_File *vf){
  int link=(vf->seekable?vf->current_link:0);
  long ret;
  if(vf->ready_state<2)return(-131);
  if(vf->samptrack==0)return(-1);
  ret=vf->bittrack/vf->samptrack*vf->vi[link].rate+.5;
  vf->bittrack=0.f;
  vf->samptrack=0.f;
  return(ret);
}


long ov_serialnumber(OggVorbis_File *vf,int i){
  if(i>=vf->links)return(ov_serialnumber(vf,vf->links-1));
  if(!vf->seekable && i>=0)return(ov_serialnumber(vf,-1));
  if(i<0){
    return(vf->current_serialno);
  }else{
    return(vf->serialnos[i]);
  }
}






ogg_int64_t ov_raw_total(OggVorbis_File *vf,int i){
  if(vf->ready_state<2)return(-131);
  if(!vf->seekable || i>=vf->links)return(-131);
  if(i<0){
    ogg_int64_t acc=0;
    int i;
    for(i=0;i<vf->links;i++)
      acc+=ov_raw_total(vf,i);
    return(acc);
  }else{
    return(vf->offsets[i+1]-vf->offsets[i]);
  }
}






ogg_int64_t ov_pcm_total(OggVorbis_File *vf,int i){
  if(vf->ready_state<2)return(-131);
  if(!vf->seekable || i>=vf->links)return(-131);
  if(i<0){
    ogg_int64_t acc=0;
    int i;
    for(i=0;i<vf->links;i++)
      acc+=ov_pcm_total(vf,i);
    return(acc);
  }else{
    return(vf->pcmlengths[i*2+1]);
  }
}






double ov_time_total(OggVorbis_File *vf,int i){
  if(vf->ready_state<2)return(-131);
  if(!vf->seekable || i>=vf->links)return(-131);
  if(i<0){
    double acc=0;
    int i;
    for(i=0;i<vf->links;i++)
      acc+=ov_time_total(vf,i);
    return(acc);
  }else{
    return((double)(vf->pcmlengths[i*2+1])/vf->vi[i].rate);
  }
}
# 42473 "oggenc.c"
int ov_raw_seek(OggVorbis_File *vf,ogg_int64_t pos){
  ogg_stream_state work_os;

  if(vf->ready_state<2)return(-131);
  if(!vf->seekable)
    return(-138);

  if(pos<0 || pos>vf->end)return(-131);





  vf->pcm_offset=-1;
  ogg_stream_reset_serialno(&vf->os,
       vf->current_serialno);
  vorbis_synthesis_restart(&vf->vd);

  _seek_helper(vf,pos);
# 42508 "oggenc.c"
  {
    ogg_page og;
    ogg_packet op;
    int lastblock=0;
    int accblock=0;
    int thisblock;
    int eosflag;

    ogg_stream_init(&work_os,vf->current_serialno);
    ogg_stream_reset(&work_os);



    while(1){
      if(vf->ready_state>=3){

 int result=ogg_stream_packetout(&work_os,&op);

 if(result>0){

   if(vf->vi[vf->current_link].codec_setup){
     thisblock=vorbis_packet_blocksize(vf->vi+vf->current_link,&op);
     if(thisblock<0){
       ogg_stream_packetout(&vf->os,
# 42531 "oggenc.c" 3 4
                                   ((void *)0)
# 42531 "oggenc.c"
                                       );
       thisblock=0;
     }else{

       if(eosflag)
       ogg_stream_packetout(&vf->os,
# 42536 "oggenc.c" 3 4
                                   ((void *)0)
# 42536 "oggenc.c"
                                       );
       else
  if(lastblock)accblock+=(lastblock+thisblock)>>2;
     }

     if(op.granulepos!=-1){
       int i,link=vf->current_link;
       ogg_int64_t granulepos=op.granulepos-vf->pcmlengths[link*2];
       if(granulepos<0)granulepos=0;

       for(i=0;i<link;i++)
  granulepos+=vf->pcmlengths[i*2+1];
       vf->pcm_offset=granulepos-accblock;
       break;
     }
     lastblock=thisblock;
     continue;
   }else
     ogg_stream_packetout(&vf->os,
# 42554 "oggenc.c" 3 4
                                 ((void *)0)
# 42554 "oggenc.c"
                                     );
 }
      }

      if(!lastblock){
 if(_get_next_page(vf,&og,-1)<0){
   vf->pcm_offset=ov_pcm_total(vf,-1);
   break;
 }
      }else{

 vf->pcm_offset=-1;
 break;
      }


      if(vf->ready_state>=3)
 if(vf->current_serialno!=ogg_page_serialno(&og)){
   _decode_clear(vf);
   ogg_stream_clear(&work_os);
 }

      if(vf->ready_state<3){
 int link;

 vf->current_serialno=ogg_page_serialno(&og);
 for(link=0;link<vf->links;link++)
   if(vf->serialnos[link]==vf->current_serialno)break;
 if(link==vf->links)goto seek_error;


 vf->current_link=link;

 ogg_stream_reset_serialno(&vf->os,vf->current_serialno);
 ogg_stream_reset_serialno(&work_os,vf->current_serialno);
 vf->ready_state=3;

      }

      ogg_stream_pagein(&vf->os,&og);
      ogg_stream_pagein(&work_os,&og);
      eosflag=ogg_page_eos(&og);
    }
  }

  ogg_stream_clear(&work_os);
  vf->bittrack=0.f;
  vf->samptrack=0.f;
  return(0);

 seek_error:

  vf->pcm_offset=-1;
  ogg_stream_clear(&work_os);
  _decode_clear(vf);
  return -137;
}







int ov_pcm_seek_page(OggVorbis_File *vf,ogg_int64_t pos){
  int link=-1;
  ogg_int64_t result=0;
  ogg_int64_t total=ov_pcm_total(vf,-1);

  if(vf->ready_state<2)return(-131);
  if(!vf->seekable)return(-138);

  if(pos<0 || pos>total)return(-131);


  for(link=vf->links-1;link>=0;link--){
    total-=vf->pcmlengths[link*2+1];
    if(pos>=total)break;
  }
# 42641 "oggenc.c"
  {
    ogg_int64_t end=vf->offsets[link+1];
    ogg_int64_t begin=vf->offsets[link];
    ogg_int64_t begintime = vf->pcmlengths[link*2];
    ogg_int64_t endtime = vf->pcmlengths[link*2+1]+begintime;
    ogg_int64_t target=pos-total+begintime;
    ogg_int64_t best=begin;

    ogg_page og;
    while(begin<end){
      ogg_int64_t bisect;

      if(end-begin<8500){
 bisect=begin;
      }else{

 bisect=begin +
   (target-begintime)*(end-begin)/(endtime-begintime) - 8500;
 if(bisect<=begin)
   bisect=begin+1;
      }

      _seek_helper(vf,bisect);

      while(begin<end){
 result=_get_next_page(vf,&og,end-vf->offset);
 if(result==-128) goto seek_error;
 if(result<0){
   if(bisect<=begin+1)
     end=begin;
   else{
     if(bisect==0) goto seek_error;
     bisect-=8500;
     if(bisect<=begin)bisect=begin+1;
     _seek_helper(vf,bisect);
   }
 }else{
   ogg_int64_t granulepos=ogg_page_granulepos(&og);
   if(granulepos==-1)continue;
   if(granulepos<target){
     best=result;
     begin=vf->offset;
     begintime=granulepos;

     if(target-begintime>44100)break;
     bisect=begin;
   }else{
     if(bisect<=begin+1)
       end=begin;
     else{
       if(end==vf->offset){
  end=result;
  bisect-=8500;
  if(bisect<=begin)bisect=begin+1;
  _seek_helper(vf,bisect);
       }else{
  end=result;
  endtime=granulepos;
  break;
       }
     }
   }
 }
      }
    }



    {
      ogg_page og;
      ogg_packet op;


      _seek_helper(vf,best);
      vf->pcm_offset=-1;

      if(_get_next_page(vf,&og,-1)<0)return(-2);

      if(link!=vf->current_link){

 _decode_clear(vf);

 vf->current_link=link;
 vf->current_serialno=ogg_page_serialno(&og);
 vf->ready_state=3;

      }else{
 vorbis_synthesis_restart(&vf->vd);
      }

      ogg_stream_reset_serialno(&vf->os,vf->current_serialno);
      ogg_stream_pagein(&vf->os,&og);


      while(1){
 result=ogg_stream_packetpeek(&vf->os,&op);
 if(result==0){





   _seek_helper(vf,best);

   while(1){
     result=_get_prev_page(vf,&og);
     if(result<0) goto seek_error;
     if(ogg_page_granulepos(&og)>-1 ||
        !ogg_page_continued(&og)){
       return ov_raw_seek(vf,result);
     }
     vf->offset=result;
   }
 }
 if(result<0){
   result = -136;
   goto seek_error;
 }
 if(op.granulepos!=-1){
   vf->pcm_offset=op.granulepos-vf->pcmlengths[vf->current_link*2];
   if(vf->pcm_offset<0)vf->pcm_offset=0;
   vf->pcm_offset+=total;
   break;
 }else
   result=ogg_stream_packetout(&vf->os,
# 42765 "oggenc.c" 3 4
                                      ((void *)0)
# 42765 "oggenc.c"
                                          );
      }
    }
  }


  if(vf->pcm_offset>pos || pos>ov_pcm_total(vf,-1)){
    result=-129;
    goto seek_error;
  }
  vf->bittrack=0.f;
  vf->samptrack=0.f;
  return(0);

 seek_error:

  vf->pcm_offset=-1;
  _decode_clear(vf);
  return (int)result;
}




int ov_pcm_seek(OggVorbis_File *vf,ogg_int64_t pos){
  int thisblock,lastblock=0;
  int ret=ov_pcm_seek_page(vf,pos);
  if(ret<0)return(ret);
  if((ret=_make_decode_ready(vf)))return ret;




  while(1){
    ogg_packet op;
    ogg_page og;

    int ret=ogg_stream_packetpeek(&vf->os,&op);
    if(ret>0){
      thisblock=vorbis_packet_blocksize(vf->vi+vf->current_link,&op);
      if(thisblock<0){
 ogg_stream_packetout(&vf->os,
# 42806 "oggenc.c" 3 4
                             ((void *)0)
# 42806 "oggenc.c"
                                 );
 continue;
      }
      if(lastblock)vf->pcm_offset+=(lastblock+thisblock)>>2;

      if(vf->pcm_offset+((thisblock+
     vorbis_info_blocksize(vf->vi,1))>>2)>=pos)break;


      ogg_stream_packetout(&vf->os,
# 42815 "oggenc.c" 3 4
                                  ((void *)0)
# 42815 "oggenc.c"
                                      );
      vorbis_synthesis_trackonly(&vf->vb,&op);


      vorbis_synthesis_blockin(&vf->vd,&vf->vb);




      if(op.granulepos>-1){
 int i;

 vf->pcm_offset=op.granulepos-vf->pcmlengths[vf->current_link*2];
 if(vf->pcm_offset<0)vf->pcm_offset=0;
 for(i=0;i<vf->current_link;i++)
   vf->pcm_offset+=vf->pcmlengths[i*2+1];
      }

      lastblock=thisblock;

    }else{
      if(ret<0 && ret!=-3)break;


      if(_get_next_page(vf,&og,-1)<0)break;
      if(vf->current_serialno!=ogg_page_serialno(&og))_decode_clear(vf);

      if(vf->ready_state<3){
 int link;

 vf->current_serialno=ogg_page_serialno(&og);
 for(link=0;link<vf->links;link++)
   if(vf->serialnos[link]==vf->current_serialno)break;
 if(link==vf->links)return(-137);
 vf->current_link=link;

 ogg_stream_reset_serialno(&vf->os,vf->current_serialno);
 vf->ready_state=3;
 ret=_make_decode_ready(vf);
 if(ret)return ret;
 lastblock=0;
      }

      ogg_stream_pagein(&vf->os,&og);
    }
  }

  vf->bittrack=0.f;
  vf->samptrack=0.f;


  while(vf->pcm_offset<pos){
    ogg_int64_t target=pos-vf->pcm_offset;
    long samples=vorbis_synthesis_pcmout(&vf->vd,
# 42868 "oggenc.c" 3 4
                                                ((void *)0)
# 42868 "oggenc.c"
                                                    );

    if(samples>target)samples=target;
    vorbis_synthesis_read(&vf->vd,samples);
    vf->pcm_offset+=samples;

    if(samples<target)
      if(_fetch_and_process_packet(vf,
# 42875 "oggenc.c" 3 4
                                     ((void *)0)
# 42875 "oggenc.c"
                                         ,1,1)<=0)
 vf->pcm_offset=ov_pcm_total(vf,-1);
  }
  return 0;
}



int ov_time_seek(OggVorbis_File *vf,double seconds){


  int link=-1;
  ogg_int64_t pcm_total=ov_pcm_total(vf,-1);
  double time_total=ov_time_total(vf,-1);

  if(vf->ready_state<2)return(-131);
  if(!vf->seekable)return(-138);
  if(seconds<0 || seconds>time_total)return(-131);


  for(link=vf->links-1;link>=0;link--){
    pcm_total-=vf->pcmlengths[link*2+1];
    time_total-=ov_time_total(vf,link);
    if(seconds>=time_total)break;
  }


  {
    ogg_int64_t target=pcm_total+(seconds-time_total)*vf->vi[link].rate;
    return(ov_pcm_seek(vf,target));
  }
}



int ov_time_seek_page(OggVorbis_File *vf,double seconds){


  int link=-1;
  ogg_int64_t pcm_total=ov_pcm_total(vf,-1);
  double time_total=ov_time_total(vf,-1);

  if(vf->ready_state<2)return(-131);
  if(!vf->seekable)return(-138);
  if(seconds<0 || seconds>time_total)return(-131);


  for(link=vf->links-1;link>=0;link--){
    pcm_total-=vf->pcmlengths[link*2+1];
    time_total-=ov_time_total(vf,link);
    if(seconds>=time_total)break;
  }


  {
    ogg_int64_t target=pcm_total+(seconds-time_total)*vf->vi[link].rate;
    return(ov_pcm_seek_page(vf,target));
  }
}



ogg_int64_t ov_raw_tell(OggVorbis_File *vf){
  if(vf->ready_state<2)return(-131);
  return(vf->offset);
}


ogg_int64_t ov_pcm_tell(OggVorbis_File *vf){
  if(vf->ready_state<2)return(-131);
  return(vf->pcm_offset);
}


double ov_time_tell(OggVorbis_File *vf){
  int link=0;
  ogg_int64_t pcm_total=0;
  double time_total=0.f;

  if(vf->ready_state<2)return(-131);
  if(vf->seekable){
    pcm_total=ov_pcm_total(vf,-1);
    time_total=ov_time_total(vf,-1);


    for(link=vf->links-1;link>=0;link--){
      pcm_total-=vf->pcmlengths[link*2+1];
      time_total-=ov_time_total(vf,link);
      if(vf->pcm_offset>=pcm_total)break;
    }
  }

  return((double)time_total+(double)(vf->pcm_offset-pcm_total)/vf->vi[link].rate);
}
# 42978 "oggenc.c"
vorbis_info *ov_info(OggVorbis_File *vf,int link){
  if(vf->seekable){
    if(link<0)
      if(vf->ready_state>=3)
 return vf->vi+vf->current_link;
      else
      return vf->vi;
    else
      if(link>=vf->links)
 return 
# 42987 "oggenc.c" 3 4
       ((void *)0)
# 42987 "oggenc.c"
           ;
      else
 return vf->vi+link;
  }else{
    return vf->vi;
  }
}


vorbis_comment *ov_comment(OggVorbis_File *vf,int link){
  if(vf->seekable){
    if(link<0)
      if(vf->ready_state>=3)
 return vf->vc+vf->current_link;
      else
 return vf->vc;
    else
      if(link>=vf->links)
 return 
# 43005 "oggenc.c" 3 4
       ((void *)0)
# 43005 "oggenc.c"
           ;
      else
 return vf->vc+link;
  }else{
    return vf->vc;
  }
}

static int host_is_big_endian() {
  ogg_int32_t pattern = 0xfeedface;
  unsigned char *bytewise = (unsigned char *)&pattern;
  if (bytewise[0] == 0xfe) return 1;
  return 0;
}
# 43051 "oggenc.c"
long ov_read(OggVorbis_File *vf,char *buffer,int length,
      int bigendianp,int word,int sgned,int *bitstream){
  int i,j;
  int host_endian = host_is_big_endian();

  float **pcm;
  long samples;

  if(vf->ready_state<2)return(-131);

  while(1){
    if(vf->ready_state==4){
      samples=vorbis_synthesis_pcmout(&vf->vd,&pcm);
      if(samples)break;
    }


    {
      int ret=_fetch_and_process_packet(vf,
# 43069 "oggenc.c" 3 4
                                          ((void *)0)
# 43069 "oggenc.c"
                                              ,1,1);
      if(ret==-2)
 return(0);
      if(ret<=0)
 return(ret);
    }

  }

  if(samples>0){



    long channels=ov_info(vf,-1)->channels;
    long bytespersample=word * channels;
    vorbis_fpu_control fpu;
    if(samples>length/bytespersample)samples=length/bytespersample;

    if(samples <= 0)
      return -131;


    {
      int val;
      if(word==1){
 int off=(sgned?0:128);
 {};
 for(j=0;j<samples;j++)
   for(i=0;i<channels;i++){
     val=vorbis_ftoi(pcm[i][j]*128.f);
     if(val>127)val=127;
     else if(val<-128)val=-128;
     *buffer++=val+off;
   }
 {};
      }else{
 int off=(sgned?0:32768);

 if(host_endian==bigendianp){
   if(sgned){

     {};
     for(i=0;i<channels;i++) {
       float *src=pcm[i];
       short *dest=((short *)buffer)+i;
       for(j=0;j<samples;j++) {
  val=vorbis_ftoi(src[j]*32768.f);
  if(val>32767)val=32767;
  else if(val<-32768)val=-32768;
  *dest=val;
  dest+=channels;
       }
     }
     {};

   }else{

     {};
     for(i=0;i<channels;i++) {
       float *src=pcm[i];
       short *dest=((short *)buffer)+i;
       for(j=0;j<samples;j++) {
  val=vorbis_ftoi(src[j]*32768.f);
  if(val>32767)val=32767;
  else if(val<-32768)val=-32768;
  *dest=val+off;
  dest+=channels;
       }
     }
     {};

   }
 }else if(bigendianp){

   {};
   for(j=0;j<samples;j++)
     for(i=0;i<channels;i++){
       val=vorbis_ftoi(pcm[i][j]*32768.f);
       if(val>32767)val=32767;
       else if(val<-32768)val=-32768;
       val+=off;
       *buffer++=(val>>8);
       *buffer++=(val&0xff);
     }
   {};

 }else{
   int val;
   {};
   for(j=0;j<samples;j++)
     for(i=0;i<channels;i++){
       val=vorbis_ftoi(pcm[i][j]*32768.f);
       if(val>32767)val=32767;
       else if(val<-32768)val=-32768;
       val+=off;
       *buffer++=(val&0xff);
       *buffer++=(val>>8);
    }
   {};

 }
      }
    }

    vorbis_synthesis_read(&vf->vd,samples);
    vf->pcm_offset+=samples;
    if(bitstream)*bitstream=vf->current_link;
    return(samples*bytespersample);
  }else{
    return(samples);
  }
}
# 43196 "oggenc.c"
long ov_read_float(OggVorbis_File *vf,float ***pcm_channels,int length,
     int *bitstream){

  if(vf->ready_state<2)return(-131);

  while(1){
    if(vf->ready_state==4){
      float **pcm;
      long samples=vorbis_synthesis_pcmout(&vf->vd,&pcm);
      if(samples){
 if(pcm_channels)*pcm_channels=pcm;
 if(samples>length)samples=length;
 vorbis_synthesis_read(&vf->vd,samples);
 vf->pcm_offset+=samples;
 if(bitstream)*bitstream=vf->current_link;
 return samples;

      }
    }


    {
      int ret=_fetch_and_process_packet(vf,
# 43218 "oggenc.c" 3 4
                                          ((void *)0)
# 43218 "oggenc.c"
                                              ,1,1);
      if(ret==-2)return(0);
      if(ret<=0)return(ret);
    }

  }
}

extern float *vorbis_window(vorbis_dsp_state *v,int W);
extern void _analysis_output_always(char *base,int i,float *v,int n,int bark,int dB,
        ogg_int64_t off);

static void _ov_splice(float **pcm,float **lappcm,
         int n1, int n2,
         int ch1, int ch2,
         float *w1, float *w2){
  int i,j;
  float *w=w1;
  int n=n1;

  if(n1>n2){
    n=n2;
    w=w2;
  }


  for(j=0;j<ch1 && j<ch2;j++){
    float *s=lappcm[j];
    float *d=pcm[j];

    for(i=0;i<n;i++){
      float wd=w[i]*w[i];
      float ws=1.-wd;
      d[i]=d[i]*wd + s[i]*ws;
    }
  }

  for(;j<ch2;j++){
    float *d=pcm[j];
    for(i=0;i<n;i++){
      float wd=w[i]*w[i];
      d[i]=d[i]*wd;
    }
  }

}


static int _ov_initset(OggVorbis_File *vf){
  while(1){
    if(vf->ready_state==4)break;

    {
      int ret=_fetch_and_process_packet(vf,
# 43271 "oggenc.c" 3 4
                                          ((void *)0)
# 43271 "oggenc.c"
                                              ,1,0);
      if(ret<0 && ret!=-3)return(ret);
    }
  }
  return 0;
}




static int _ov_initprime(OggVorbis_File *vf){
  vorbis_dsp_state *vd=&vf->vd;
  while(1){
    if(vf->ready_state==4)
      if(vorbis_synthesis_pcmout(vd,
# 43285 "oggenc.c" 3 4
                                   ((void *)0)
# 43285 "oggenc.c"
                                       ))break;


    {
      int ret=_fetch_and_process_packet(vf,
# 43289 "oggenc.c" 3 4
                                          ((void *)0)
# 43289 "oggenc.c"
                                              ,1,0);
      if(ret<0 && ret!=-3)return(ret);
    }
  }
  return 0;
}




static void _ov_getlap(OggVorbis_File *vf,vorbis_info *vi,vorbis_dsp_state *vd,
         float **lappcm,int lapsize){
  int lapcount=0,i;
  float **pcm;


  while(lapcount<lapsize){
    int samples=vorbis_synthesis_pcmout(vd,&pcm);
    if(samples){
      if(samples>lapsize-lapcount)samples=lapsize-lapcount;
      for(i=0;i<vi->channels;i++)
 memcpy(lappcm[i]+lapcount,pcm[i],sizeof(**pcm)*samples);
      lapcount+=samples;
      vorbis_synthesis_read(vd,samples);
    }else{

      int ret=_fetch_and_process_packet(vf,
# 43315 "oggenc.c" 3 4
                                          ((void *)0)
# 43315 "oggenc.c"
                                              ,1,0);
      if(ret==-2)break;
    }
  }
  if(lapcount<lapsize){



    int samples=vorbis_synthesis_lapout(&vf->vd,&pcm);
    if(samples==0){
      for(i=0;i<vi->channels;i++)
 memset(lappcm[i]+lapcount,0,sizeof(**pcm)*lapsize-lapcount);
      lapcount=lapsize;
    }else{
      if(samples>lapsize-lapcount)samples=lapsize-lapcount;
      for(i=0;i<vi->channels;i++)
 memcpy(lappcm[i]+lapcount,pcm[i],sizeof(**pcm)*samples);
      lapcount+=samples;
    }
  }
}



int ov_crosslap(OggVorbis_File *vf1, OggVorbis_File *vf2){
  vorbis_info *vi1,*vi2;
  float **lappcm;
  float **pcm;
  float *w1,*w2;
  int n1,n2,i,ret,hs1,hs2;

  if(vf1==vf2)return(0);
  if(vf1->ready_state<2)return(-131);
  if(vf2->ready_state<2)return(-131);





  ret=_ov_initset(vf1);
  if(ret)return(ret);
  ret=_ov_initprime(vf2);
  if(ret)return(ret);

  vi1=ov_info(vf1,-1);
  vi2=ov_info(vf2,-1);
  hs1=ov_halfrate_p(vf1);
  hs2=ov_halfrate_p(vf2);

  lappcm=
# 43364 "oggenc.c" 3 4
        __builtin_alloca (
# 43364 "oggenc.c"
        sizeof(*lappcm)*vi1->channels
# 43364 "oggenc.c" 3 4
        )
# 43364 "oggenc.c"
                                             ;
  n1=vorbis_info_blocksize(vi1,0)>>(1+hs1);
  n2=vorbis_info_blocksize(vi2,0)>>(1+hs2);
  w1=vorbis_window(&vf1->vd,0);
  w2=vorbis_window(&vf2->vd,0);

  for(i=0;i<vi1->channels;i++)
    lappcm[i]=
# 43371 "oggenc.c" 3 4
             __builtin_alloca (
# 43371 "oggenc.c"
             sizeof(**lappcm)*n1
# 43371 "oggenc.c" 3 4
             )
# 43371 "oggenc.c"
                                        ;

  _ov_getlap(vf1,vi1,&vf1->vd,lappcm,n1);




  vorbis_synthesis_lapout(&vf2->vd,&pcm);
  _analysis_output_always("pcmL",0,pcm[0],n1*2,0,0,0);
  _analysis_output_always("pcmR",0,pcm[1],n1*2,0,0,0);


  _ov_splice(pcm,lappcm,n1,n2,vi1->channels,vi2->channels,w1,w2);


  return(0);
}

static int _ov_64_seek_lap(OggVorbis_File *vf,ogg_int64_t pos,
      int (*localseek)(OggVorbis_File *,ogg_int64_t)){
  vorbis_info *vi;
  float **lappcm;
  float **pcm;
  float *w1,*w2;
  int n1,n2,ch1,ch2,hs;
  int i,ret;

  if(vf->ready_state<2)return(-131);
  ret=_ov_initset(vf);
  if(ret)return(ret);
  vi=ov_info(vf,-1);
  hs=ov_halfrate_p(vf);

  ch1=vi->channels;
  n1=vorbis_info_blocksize(vi,0)>>(1+hs);
  w1=vorbis_window(&vf->vd,0);




  lappcm=
# 43411 "oggenc.c" 3 4
        __builtin_alloca (
# 43411 "oggenc.c"
        sizeof(*lappcm)*ch1
# 43411 "oggenc.c" 3 4
        )
# 43411 "oggenc.c"
                                   ;
  for(i=0;i<ch1;i++)
    lappcm[i]=
# 43413 "oggenc.c" 3 4
             __builtin_alloca (
# 43413 "oggenc.c"
             sizeof(**lappcm)*n1
# 43413 "oggenc.c" 3 4
             )
# 43413 "oggenc.c"
                                        ;
  _ov_getlap(vf,vi,&vf->vd,lappcm,n1);


  ret=localseek(vf,pos);
  if(ret)return ret;
  ret=_ov_initprime(vf);
  if(ret)return(ret);


  vi=ov_info(vf,-1);
  ch2=vi->channels;
  n2=vorbis_info_blocksize(vi,0)>>(1+hs);
  w2=vorbis_window(&vf->vd,0);


  vorbis_synthesis_lapout(&vf->vd,&pcm);


  _ov_splice(pcm,lappcm,n1,n2,ch1,ch2,w1,w2);


  return(0);
}

int ov_raw_seek_lap(OggVorbis_File *vf,ogg_int64_t pos){
  return _ov_64_seek_lap(vf,pos,ov_raw_seek);
}

int ov_pcm_seek_lap(OggVorbis_File *vf,ogg_int64_t pos){
  return _ov_64_seek_lap(vf,pos,ov_pcm_seek);
}

int ov_pcm_seek_page_lap(OggVorbis_File *vf,ogg_int64_t pos){
  return _ov_64_seek_lap(vf,pos,ov_pcm_seek_page);
}

static int _ov_d_seek_lap(OggVorbis_File *vf,double pos,
      int (*localseek)(OggVorbis_File *,double)){
  vorbis_info *vi;
  float **lappcm;
  float **pcm;
  float *w1,*w2;
  int n1,n2,ch1,ch2,hs;
  int i,ret;

  if(vf->ready_state<2)return(-131);
  ret=_ov_initset(vf);
  if(ret)return(ret);
  vi=ov_info(vf,-1);
  hs=ov_halfrate_p(vf);

  ch1=vi->channels;
  n1=vorbis_info_blocksize(vi,0)>>(1+hs);
  w1=vorbis_window(&vf->vd,0);




  lappcm=
# 43472 "oggenc.c" 3 4
        __builtin_alloca (
# 43472 "oggenc.c"
        sizeof(*lappcm)*ch1
# 43472 "oggenc.c" 3 4
        )
# 43472 "oggenc.c"
                                   ;
  for(i=0;i<ch1;i++)
    lappcm[i]=
# 43474 "oggenc.c" 3 4
             __builtin_alloca (
# 43474 "oggenc.c"
             sizeof(**lappcm)*n1
# 43474 "oggenc.c" 3 4
             )
# 43474 "oggenc.c"
                                        ;
  _ov_getlap(vf,vi,&vf->vd,lappcm,n1);


  ret=localseek(vf,pos);
  if(ret)return ret;
  ret=_ov_initprime(vf);
  if(ret)return(ret);


  vi=ov_info(vf,-1);
  ch2=vi->channels;
  n2=vorbis_info_blocksize(vi,0)>>(1+hs);
  w2=vorbis_window(&vf->vd,0);


  vorbis_synthesis_lapout(&vf->vd,&pcm);


  _ov_splice(pcm,lappcm,n1,n2,ch1,ch2,w1,w2);


  return(0);
}

int ov_time_seek_lap(OggVorbis_File *vf,double pos){
  return _ov_d_seek_lap(vf,pos,ov_time_seek);
}

int ov_time_seek_page_lap(OggVorbis_File *vf,double pos){
  return _ov_d_seek_lap(vf,pos,ov_time_seek_page);
}
# 43553 "oggenc.c"
extern vorbis_func_floor *_floor_P[];
extern vorbis_func_residue *_residue_P[];
extern vorbis_func_mapping *_mapping_P[];
# 43576 "oggenc.c"
extern float *_vorbis_window_get(int n);
extern void _vorbis_apply_window(float *d,int *winno,long *blocksizes,
                          int lW,int W,int nW);



static int ilog2(unsigned int v){
  int ret=0;
  if(v)--v;
  while(v){
    ret++;
    v>>=1;
  }
  return(ret);
}

static void _v_writestring(oggpack_buffer *o,char *s, int bytes){

  while(bytes--){
    oggpack_write(o,*s++,8);
  }
}

static void _v_readstring(oggpack_buffer *o,char *buf,int bytes){
  while(bytes--){
    *buf++=oggpack_read(o,8);
  }
}

void vorbis_comment_init(vorbis_comment *vc){
  memset(vc,0,sizeof(*vc));
}

void vorbis_comment_add(vorbis_comment *vc,char *comment){
  vc->user_comments=realloc(vc->user_comments,
       (vc->comments+2)*sizeof(*vc->user_comments));
  vc->comment_lengths=realloc(vc->comment_lengths,
             (vc->comments+2)*sizeof(*vc->comment_lengths));
  vc->comment_lengths[vc->comments]=strlen(comment);
  vc->user_comments[vc->comments]=malloc(vc->comment_lengths[vc->comments]+1);
  strcpy(vc->user_comments[vc->comments], comment);
  vc->comments++;
  vc->user_comments[vc->comments]=
# 43618 "oggenc.c" 3 4
                                 ((void *)0)
# 43618 "oggenc.c"
                                     ;
}

void vorbis_comment_add_tag(vorbis_comment *vc, char *tag, char *contents){
  char *comment=
# 43622 "oggenc.c" 3 4
               __builtin_alloca (
# 43622 "oggenc.c"
               strlen(tag)+strlen(contents)+2
# 43622 "oggenc.c" 3 4
               )
# 43622 "oggenc.c"
                                                     ;
  strcpy(comment, tag);
  strcat(comment, "=");
  strcat(comment, contents);
  vorbis_comment_add(vc, comment);
}



static int tagcompare(const char *s1, const char *s2, int n){
  int c=0;
  while(c < n){
    if(toupper(s1[c]) != toupper(s2[c]))
      return !0;
    c++;
  }
  return 0;
}

char *vorbis_comment_query(vorbis_comment *vc, char *tag, int count){
  long i;
  int found = 0;
  int taglen = strlen(tag)+1;
  char *fulltag = 
# 43645 "oggenc.c" 3 4
                 __builtin_alloca (
# 43645 "oggenc.c"
                 taglen+ 1
# 43645 "oggenc.c" 3 4
                 )
# 43645 "oggenc.c"
                                  ;

  strcpy(fulltag, tag);
  strcat(fulltag, "=");

  for(i=0;i<vc->comments;i++){
    if(!tagcompare(vc->user_comments[i], fulltag, taglen)){
      if(count == found)

       return vc->user_comments[i] + taglen;
      else
 found++;
    }
  }
  return 
# 43659 "oggenc.c" 3 4
        ((void *)0)
# 43659 "oggenc.c"
            ;
}

int vorbis_comment_query_count(vorbis_comment *vc, char *tag){
  int i,count=0;
  int taglen = strlen(tag)+1;
  char *fulltag = 
# 43665 "oggenc.c" 3 4
                 __builtin_alloca (
# 43665 "oggenc.c"
                 taglen+1
# 43665 "oggenc.c" 3 4
                 )
# 43665 "oggenc.c"
                                 ;
  strcpy(fulltag,tag);
  strcat(fulltag, "=");

  for(i=0;i<vc->comments;i++){
    if(!tagcompare(vc->user_comments[i], fulltag, taglen))
      count++;
  }

  return count;
}

void vorbis_comment_clear(vorbis_comment *vc){
  if(vc){
    long i;
    for(i=0;i<vc->comments;i++)
      if(vc->user_comments[i])free(vc->user_comments[i]);
    if(vc->user_comments)free(vc->user_comments);
 if(vc->comment_lengths)free(vc->comment_lengths);
    if(vc->vendor)free(vc->vendor);
  }
  memset(vc,0,sizeof(*vc));
}



int vorbis_info_blocksize(vorbis_info *vi,int zo){
  codec_setup_info *ci = vi->codec_setup;
  return ci ? ci->blocksizes[zo] : -1;
}


void vorbis_info_init(vorbis_info *vi){
  memset(vi,0,sizeof(*vi));
  vi->codec_setup=calloc(1,sizeof(codec_setup_info));
}

void vorbis_info_clear(vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  int i;

  if(ci){

    for(i=0;i<ci->modes;i++)
      if(ci->mode_param[i])free(ci->mode_param[i]);

    for(i=0;i<ci->maps;i++)
      _mapping_P[ci->map_type[i]]->free_info(ci->map_param[i]);

    for(i=0;i<ci->floors;i++)
      _floor_P[ci->floor_type[i]]->free_info(ci->floor_param[i]);

    for(i=0;i<ci->residues;i++)
      _residue_P[ci->residue_type[i]]->free_info(ci->residue_param[i]);

    for(i=0;i<ci->books;i++){
      if(ci->book_param[i]){

 vorbis_staticbook_destroy(ci->book_param[i]);
      }
      if(ci->fullbooks)
 vorbis_book_clear(ci->fullbooks+i);
    }
    if(ci->fullbooks)
 free(ci->fullbooks);

    for(i=0;i<ci->psys;i++)
      _vi_psy_free(ci->psy_param[i]);

    free(ci);
  }

  memset(vi,0,sizeof(*vi));
}



static int _vorbis_unpack_info(vorbis_info *vi,oggpack_buffer *opb){
  codec_setup_info *ci=vi->codec_setup;
  if(!ci)return(-129);

  vi->version=oggpack_read(opb,32);
  if(vi->version!=0)return(-134);

  vi->channels=oggpack_read(opb,8);
  vi->rate=oggpack_read(opb,32);

  vi->bitrate_upper=oggpack_read(opb,32);
  vi->bitrate_nominal=oggpack_read(opb,32);
  vi->bitrate_lower=oggpack_read(opb,32);

  ci->blocksizes[0]=1<<oggpack_read(opb,4);
  ci->blocksizes[1]=1<<oggpack_read(opb,4);

  if(vi->rate<1)goto err_out;
  if(vi->channels<1)goto err_out;
  if(ci->blocksizes[0]<8)goto err_out;
  if(ci->blocksizes[1]<ci->blocksizes[0])goto err_out;

  if(oggpack_read(opb,1)!=1)goto err_out;

  return(0);
 err_out:
  vorbis_info_clear(vi);
  return(-133);
}

static int _vorbis_unpack_comment(vorbis_comment *vc,oggpack_buffer *opb){
  int i;
  int vendorlen=oggpack_read(opb,32);
  if(vendorlen<0)goto err_out;
  vc->vendor=calloc(vendorlen+1,1);
  _v_readstring(opb,vc->vendor,vendorlen);
  vc->comments=oggpack_read(opb,32);
  if(vc->comments<0)goto err_out;
  vc->user_comments=calloc(vc->comments+1,sizeof(*vc->user_comments));
  vc->comment_lengths=calloc(vc->comments+1, sizeof(*vc->comment_lengths));

  for(i=0;i<vc->comments;i++){
    int len=oggpack_read(opb,32);
    if(len<0)goto err_out;
 vc->comment_lengths[i]=len;
    vc->user_comments[i]=calloc(len+1,1);
    _v_readstring(opb,vc->user_comments[i],len);
  }
  if(oggpack_read(opb,1)!=1)goto err_out;

  return(0);
 err_out:
  vorbis_comment_clear(vc);
  return(-133);
}



static int _vorbis_unpack_books(vorbis_info *vi,oggpack_buffer *opb){
  codec_setup_info *ci=vi->codec_setup;
  int i;
  if(!ci)return(-129);


  ci->books=oggpack_read(opb,8)+1;

  for(i=0;i<ci->books;i++){
    ci->book_param[i]=calloc(1,sizeof(*ci->book_param[i]));
    if(vorbis_staticbook_unpack(opb,ci->book_param[i]))goto err_out;
  }


  {
    int times=oggpack_read(opb,6)+1;
    for(i=0;i<times;i++){
      int test=oggpack_read(opb,16);
      if(test<0 || test>=1)goto err_out;
    }
  }


  ci->floors=oggpack_read(opb,6)+1;


  for(i=0;i<ci->floors;i++){
    ci->floor_type[i]=oggpack_read(opb,16);
    if(ci->floor_type[i]<0 || ci->floor_type[i]>=2)goto err_out;
    ci->floor_param[i]=_floor_P[ci->floor_type[i]]->unpack(vi,opb);
    if(!ci->floor_param[i])goto err_out;
  }


  ci->residues=oggpack_read(opb,6)+1;


  for(i=0;i<ci->residues;i++){
    ci->residue_type[i]=oggpack_read(opb,16);
    if(ci->residue_type[i]<0 || ci->residue_type[i]>=3)goto err_out;
    ci->residue_param[i]=_residue_P[ci->residue_type[i]]->unpack(vi,opb);
    if(!ci->residue_param[i])goto err_out;
  }


  ci->maps=oggpack_read(opb,6)+1;


  for(i=0;i<ci->maps;i++){
    ci->map_type[i]=oggpack_read(opb,16);
    if(ci->map_type[i]<0 || ci->map_type[i]>=1)goto err_out;
    ci->map_param[i]=_mapping_P[ci->map_type[i]]->unpack(vi,opb);
    if(!ci->map_param[i])goto err_out;
  }


  ci->modes=oggpack_read(opb,6)+1;

  for(i=0;i<ci->modes;i++){
    ci->mode_param[i]=calloc(1,sizeof(*ci->mode_param[i]));
    ci->mode_param[i]->blockflag=oggpack_read(opb,1);
    ci->mode_param[i]->windowtype=oggpack_read(opb,16);
    ci->mode_param[i]->transformtype=oggpack_read(opb,16);
    ci->mode_param[i]->mapping=oggpack_read(opb,8);

    if(ci->mode_param[i]->windowtype>=1)goto err_out;
    if(ci->mode_param[i]->transformtype>=1)goto err_out;
    if(ci->mode_param[i]->mapping>=ci->maps)goto err_out;
  }

  if(oggpack_read(opb,1)!=1)goto err_out;

  return(0);
 err_out:
  vorbis_info_clear(vi);
  return(-133);
}






int vorbis_synthesis_headerin(vorbis_info *vi,vorbis_comment *vc,ogg_packet *op){
  oggpack_buffer opb;

  if(op){
    oggpack_readinit(&opb,op->packet,op->bytes);



    {
      char buffer[6];
      int packtype=oggpack_read(&opb,8);
      memset(buffer,0,6);
      _v_readstring(&opb,buffer,6);
      if(memcmp(buffer,"vorbis",6)){

 return(-132);
      }
      switch(packtype){
      case 0x01:
 if(!op->b_o_s){

   return(-133);
 }
 if(vi->rate!=0){

   return(-133);
 }

 return(_vorbis_unpack_info(vi,&opb));

      case 0x03:
 if(vi->rate==0){

   return(-133);
 }

 return(_vorbis_unpack_comment(vc,&opb));

      case 0x05:
 if(vi->rate==0 || vc->vendor==
# 43922 "oggenc.c" 3 4
                              ((void *)0)
# 43922 "oggenc.c"
                                  ){

   return(-133);
 }

 return(_vorbis_unpack_books(vi,&opb));

      default:

 return(-133);
 break;
      }
    }
  }
  return(-133);
}



static int _vorbis_pack_info(oggpack_buffer *opb,vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  if(!ci)return(-129);


  oggpack_write(opb,0x01,8);
  _v_writestring(opb,"vorbis", 6);


  oggpack_write(opb,0x00,32);
  oggpack_write(opb,vi->channels,8);
  oggpack_write(opb,vi->rate,32);

  oggpack_write(opb,vi->bitrate_upper,32);
  oggpack_write(opb,vi->bitrate_nominal,32);
  oggpack_write(opb,vi->bitrate_lower,32);

  oggpack_write(opb,ilog2(ci->blocksizes[0]),4);
  oggpack_write(opb,ilog2(ci->blocksizes[1]),4);
  oggpack_write(opb,1,1);

  return(0);
}

static int _vorbis_pack_comment(oggpack_buffer *opb,vorbis_comment *vc){
  char temp[]="Xiph.Org libVorbis I 20030909";
  int bytes = strlen(temp);


  oggpack_write(opb,0x03,8);
  _v_writestring(opb,"vorbis", 6);


  oggpack_write(opb,bytes,32);
  _v_writestring(opb,temp, bytes);



  oggpack_write(opb,vc->comments,32);
  if(vc->comments){
    int i;
    for(i=0;i<vc->comments;i++){
      if(vc->user_comments[i]){
 oggpack_write(opb,vc->comment_lengths[i],32);
 _v_writestring(opb,vc->user_comments[i], vc->comment_lengths[i]);
      }else{
 oggpack_write(opb,0,32);
      }
    }
  }
  oggpack_write(opb,1,1);

  return(0);
}

static int _vorbis_pack_books(oggpack_buffer *opb,vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  int i;
  if(!ci)return(-129);

  oggpack_write(opb,0x05,8);
  _v_writestring(opb,"vorbis", 6);


  oggpack_write(opb,ci->books-1,8);
  for(i=0;i<ci->books;i++)
    if(vorbis_staticbook_pack(ci->book_param[i],opb))goto err_out;


  oggpack_write(opb,0,6);
  oggpack_write(opb,0,16);


  oggpack_write(opb,ci->floors-1,6);
  for(i=0;i<ci->floors;i++){
    oggpack_write(opb,ci->floor_type[i],16);
    if(_floor_P[ci->floor_type[i]]->pack)
      _floor_P[ci->floor_type[i]]->pack(ci->floor_param[i],opb);
    else
      goto err_out;
  }


  oggpack_write(opb,ci->residues-1,6);
  for(i=0;i<ci->residues;i++){
    oggpack_write(opb,ci->residue_type[i],16);
    _residue_P[ci->residue_type[i]]->pack(ci->residue_param[i],opb);
  }


  oggpack_write(opb,ci->maps-1,6);
  for(i=0;i<ci->maps;i++){
    oggpack_write(opb,ci->map_type[i],16);
    _mapping_P[ci->map_type[i]]->pack(vi,ci->map_param[i],opb);
  }


  oggpack_write(opb,ci->modes-1,6);
  for(i=0;i<ci->modes;i++){
    oggpack_write(opb,ci->mode_param[i]->blockflag,1);
    oggpack_write(opb,ci->mode_param[i]->windowtype,16);
    oggpack_write(opb,ci->mode_param[i]->transformtype,16);
    oggpack_write(opb,ci->mode_param[i]->mapping,8);
  }
  oggpack_write(opb,1,1);

  return(0);
err_out:
  return(-1);
}

int vorbis_commentheader_out(vorbis_comment *vc,
              ogg_packet *op){

  oggpack_buffer opb;

  oggpack_writeinit(&opb);
  if(_vorbis_pack_comment(&opb,vc)) return -130;

  op->packet = malloc(oggpack_bytes(&opb));
  memcpy(op->packet, opb.buffer, oggpack_bytes(&opb));

  op->bytes=oggpack_bytes(&opb);
  op->b_o_s=0;
  op->e_o_s=0;
  op->granulepos=0;

  return 0;
}

int vorbis_analysis_headerout(vorbis_dsp_state *v,
         vorbis_comment *vc,
         ogg_packet *op,
         ogg_packet *op_comm,
         ogg_packet *op_code){
  int ret=-130;
  vorbis_info *vi=v->vi;
  oggpack_buffer opb;
  private_state *b=v->backend_state;

  if(!b){
    ret=-129;
    goto err_out;
  }



  oggpack_writeinit(&opb);
  if(_vorbis_pack_info(&opb,vi))goto err_out;


  if(b->header)free(b->header);
  b->header=malloc(oggpack_bytes(&opb));
  memcpy(b->header,opb.buffer,oggpack_bytes(&opb));
  op->packet=b->header;
  op->bytes=oggpack_bytes(&opb);
  op->b_o_s=1;
  op->e_o_s=0;
  op->granulepos=0;



  oggpack_reset(&opb);
  if(_vorbis_pack_comment(&opb,vc))goto err_out;

  if(b->header1)free(b->header1);
  b->header1=malloc(oggpack_bytes(&opb));
  memcpy(b->header1,opb.buffer,oggpack_bytes(&opb));
  op_comm->packet=b->header1;
  op_comm->bytes=oggpack_bytes(&opb);
  op_comm->b_o_s=0;
  op_comm->e_o_s=0;
  op_comm->granulepos=0;



  oggpack_reset(&opb);
  if(_vorbis_pack_books(&opb,vi))goto err_out;

  if(b->header2)free(b->header2);
  b->header2=malloc(oggpack_bytes(&opb));
  memcpy(b->header2,opb.buffer,oggpack_bytes(&opb));
  op_code->packet=b->header2;
  op_code->bytes=oggpack_bytes(&opb);
  op_code->b_o_s=0;
  op_code->e_o_s=0;
  op_code->granulepos=0;

  oggpack_writeclear(&opb);
  return(0);
 err_out:
  oggpack_writeclear(&opb);
  memset(op,0,sizeof(*op));
  memset(op_comm,0,sizeof(*op_comm));
  memset(op_code,0,sizeof(*op_code));

  if(b->header)free(b->header);
  if(b->header1)free(b->header1);
  if(b->header2)free(b->header2);
  b->header=
# 44140 "oggenc.c" 3 4
           ((void *)0)
# 44140 "oggenc.c"
               ;
  b->header1=
# 44141 "oggenc.c" 3 4
            ((void *)0)
# 44141 "oggenc.c"
                ;
  b->header2=
# 44142 "oggenc.c" 3 4
            ((void *)0)
# 44142 "oggenc.c"
                ;
  return(ret);
}

double vorbis_granule_time(vorbis_dsp_state *v,ogg_int64_t granulepos){
  if(granulepos>=0)
    return((double)granulepos/v->vi->rate);
  return(-1);
}
# 44193 "oggenc.c"
extern float vorbis_lpc_from_data(float *data,float *lpc,int n,int m);

extern void vorbis_lpc_predict(float *coeff,float *prime,int m,
          float *data,long n);
# 44242 "oggenc.c"
int vorbis_block_init(vorbis_dsp_state *v, vorbis_block *vb){
  memset(vb,0,sizeof(*vb));
  vb->vd=v;
  vb->localalloc=0;
  vb->localstore=
# 44246 "oggenc.c" 3 4
                ((void *)0)
# 44246 "oggenc.c"
                    ;
  if(v->analysisp){
    vorbis_block_internal *vbi=
      vb->internal=calloc(1,sizeof(vorbis_block_internal));
    oggpack_writeinit(&vb->opb);
    vbi->ampmax=-9999;
  }

  return(0);
}

void *_vorbis_block_alloc(vorbis_block *vb,long bytes){
  bytes=(bytes+(8 -1)) & ~(8 -1);
  if(bytes+vb->localtop>vb->localalloc){

    if(vb->localstore){
      struct alloc_chain *link=malloc(sizeof(*link));
      vb->totaluse+=vb->localtop;
      link->next=vb->reap;
      link->ptr=vb->localstore;
      vb->reap=link;
    }

    vb->localalloc=bytes;
    vb->localstore=malloc(vb->localalloc);
    vb->localtop=0;
  }
  {
    void *ret=(void *)(((char *)vb->localstore)+vb->localtop);
    vb->localtop+=bytes;
    return ret;
  }
}


void _vorbis_block_ripcord(vorbis_block *vb){

  struct alloc_chain *reap=vb->reap;
  while(reap){
    struct alloc_chain *next=reap->next;
    free(reap->ptr);
    memset(reap,0,sizeof(*reap));
    free(reap);
    reap=next;
  }

  if(vb->totaluse){
    vb->localstore=realloc(vb->localstore,vb->totaluse+vb->localalloc);
    vb->localalloc+=vb->totaluse;
    vb->totaluse=0;
  }


  vb->localtop=0;
  vb->reap=
# 44300 "oggenc.c" 3 4
          ((void *)0)
# 44300 "oggenc.c"
              ;
}

int vorbis_block_clear(vorbis_block *vb){
  if(vb->vd)
    if(vb->vd->analysisp)
      oggpack_writeclear(&vb->opb);
  _vorbis_block_ripcord(vb);
  if(vb->localstore)free(vb->localstore);

  if(vb->internal)
    free(vb->internal);

  memset(vb,0,sizeof(*vb));
  return(0);
}





static int _vds_shared_init(vorbis_dsp_state *v,vorbis_info *vi,int encp){
  int i;
  codec_setup_info *ci=vi->codec_setup;
  private_state *b=
# 44324 "oggenc.c" 3 4
                  ((void *)0)
# 44324 "oggenc.c"
                      ;
  int hs;

  if(ci==
# 44327 "oggenc.c" 3 4
        ((void *)0)
# 44327 "oggenc.c"
            ) return 1;
  hs=ci->halfrate_flag;

  memset(v,0,sizeof(*v));
  b=v->backend_state=calloc(1,sizeof(*b));

  v->vi=vi;
  b->modebits=ilog2(ci->modes);

  b->transform[0]=calloc(1,sizeof(*b->transform[0]));
  b->transform[1]=calloc(1,sizeof(*b->transform[1]));



  b->transform[0][0]=calloc(1,sizeof(mdct_lookup));
  b->transform[1][0]=calloc(1,sizeof(mdct_lookup));
  mdct_init(b->transform[0][0],ci->blocksizes[0]>>hs);
  mdct_init(b->transform[1][0],ci->blocksizes[1]>>hs);


  b->window[0]=ilog2(ci->blocksizes[0])-6;
  b->window[1]=ilog2(ci->blocksizes[1])-6;

  if(encp){


    drft_init(&b->fft_look[0],ci->blocksizes[0]);
    drft_init(&b->fft_look[1],ci->blocksizes[1]);


    if(!ci->fullbooks){
      ci->fullbooks=calloc(ci->books,sizeof(*ci->fullbooks));
      for(i=0;i<ci->books;i++)
 vorbis_book_init_encode(ci->fullbooks+i,ci->book_param[i]);
    }

    b->psy=calloc(ci->psys,sizeof(*b->psy));
    for(i=0;i<ci->psys;i++){
      _vp_psy_init(b->psy+i,
     ci->psy_param[i],
     &ci->psy_g_param,
     ci->blocksizes[ci->psy_param[i]->blockflag]/2,
     vi->rate);
    }

    v->analysisp=1;
  }else{

    if(!ci->fullbooks){
      ci->fullbooks=calloc(ci->books,sizeof(*ci->fullbooks));
      for(i=0;i<ci->books;i++){
 vorbis_book_init_decode(ci->fullbooks+i,ci->book_param[i]);

 vorbis_staticbook_destroy(ci->book_param[i]);
 ci->book_param[i]=
# 44381 "oggenc.c" 3 4
                  ((void *)0)
# 44381 "oggenc.c"
                      ;
      }
    }
  }



  v->pcm_storage=ci->blocksizes[1];
  v->pcm=malloc(vi->channels*sizeof(*v->pcm));
  v->pcmret=malloc(vi->channels*sizeof(*v->pcmret));
  {
    int i;
    for(i=0;i<vi->channels;i++)
      v->pcm[i]=calloc(v->pcm_storage,sizeof(*v->pcm[i]));
  }



  v->lW=0;
  v->W=0;


  v->centerW=ci->blocksizes[1]/2;

  v->pcm_current=v->centerW;


  b->flr=calloc(ci->floors,sizeof(*b->flr));
  b->residue=calloc(ci->residues,sizeof(*b->residue));

  for(i=0;i<ci->floors;i++)
    b->flr[i]=_floor_P[ci->floor_type[i]]->
      look(v,ci->floor_param[i]);

  for(i=0;i<ci->residues;i++)
    b->residue[i]=_residue_P[ci->residue_type[i]]->
      look(v,ci->residue_param[i]);

  return 0;
}


int vorbis_analysis_init(vorbis_dsp_state *v,vorbis_info *vi){
  private_state *b=
# 44424 "oggenc.c" 3 4
                  ((void *)0)
# 44424 "oggenc.c"
                      ;

  if(_vds_shared_init(v,vi,1))return 1;
  b=v->backend_state;
  b->psy_g_look=_vp_global_look(vi);


  b->ve=calloc(1,sizeof(*b->ve));
  _ve_envelope_init(b->ve,vi);

  vorbis_bitrate_init(vi,&b->bms);

  return(0);
}

void vorbis_dsp_clear(vorbis_dsp_state *v){
  int i;
  if(v){
    vorbis_info *vi=v->vi;
    codec_setup_info *ci=(vi?vi->codec_setup:
# 44443 "oggenc.c" 3 4
                                            ((void *)0)
# 44443 "oggenc.c"
                                                );
    private_state *b=v->backend_state;

    if(b){

      if(b->ve){
 _ve_envelope_clear(b->ve);
 free(b->ve);
      }

      if(b->transform[0]){
 mdct_clear(b->transform[0][0]);
 free(b->transform[0][0]);
 free(b->transform[0]);
      }
      if(b->transform[1]){
 mdct_clear(b->transform[1][0]);
 free(b->transform[1][0]);
 free(b->transform[1]);
      }

      if(b->flr){
 for(i=0;i<ci->floors;i++)
   _floor_P[ci->floor_type[i]]->
     free_look(b->flr[i]);
 free(b->flr);
      }
      if(b->residue){
 for(i=0;i<ci->residues;i++)
   _residue_P[ci->residue_type[i]]->
     free_look(b->residue[i]);
 free(b->residue);
      }
      if(b->psy){
 for(i=0;i<ci->psys;i++)
   _vp_psy_clear(b->psy+i);
 free(b->psy);
      }

      if(b->psy_g_look)_vp_global_free(b->psy_g_look);
      vorbis_bitrate_clear(&b->bms);

      drft_clear(&b->fft_look[0]);
      drft_clear(&b->fft_look[1]);

    }

    if(v->pcm){
      for(i=0;i<vi->channels;i++)
 if(v->pcm[i])free(v->pcm[i]);
      free(v->pcm);
      if(v->pcmret)free(v->pcmret);
    }

    if(b){

      if(b->header)free(b->header);
      if(b->header1)free(b->header1);
      if(b->header2)free(b->header2);
      free(b);
    }

    memset(v,0,sizeof(*v));
  }
}

float **vorbis_analysis_buffer(vorbis_dsp_state *v, int vals){
  int i;
  vorbis_info *vi=v->vi;
  private_state *b=v->backend_state;


  if(b->header)free(b->header);b->header=
# 44515 "oggenc.c" 3 4
                                             ((void *)0)
# 44515 "oggenc.c"
                                                 ;
  if(b->header1)free(b->header1);b->header1=
# 44516 "oggenc.c" 3 4
                                                ((void *)0)
# 44516 "oggenc.c"
                                                    ;
  if(b->header2)free(b->header2);b->header2=
# 44517 "oggenc.c" 3 4
                                                ((void *)0)
# 44517 "oggenc.c"
                                                    ;




  if(v->pcm_current+vals>=v->pcm_storage){
    v->pcm_storage=v->pcm_current+vals*2;

    for(i=0;i<vi->channels;i++){
      v->pcm[i]=realloc(v->pcm[i],v->pcm_storage*sizeof(*v->pcm[i]));
    }
  }

  for(i=0;i<vi->channels;i++)
    v->pcmret[i]=v->pcm[i]+v->pcm_current;

  return(v->pcmret);
}

static void _preextrapolate_helper(vorbis_dsp_state *v){
  int i;
  int order=32;
  float *lpc=
# 44539 "oggenc.c" 3 4
            __builtin_alloca (
# 44539 "oggenc.c"
            order*sizeof(*lpc)
# 44539 "oggenc.c" 3 4
            )
# 44539 "oggenc.c"
                                      ;
  float *work=
# 44540 "oggenc.c" 3 4
             __builtin_alloca (
# 44540 "oggenc.c"
             v->pcm_current*sizeof(*work)
# 44540 "oggenc.c" 3 4
             )
# 44540 "oggenc.c"
                                                 ;
  long j;
  v->preextrapolate=1;

  if(v->pcm_current-v->centerW>order*2){
    for(i=0;i<v->vi->channels;i++){

      for(j=0;j<v->pcm_current;j++)
 work[j]=v->pcm[i][v->pcm_current-j-1];


      vorbis_lpc_from_data(work,lpc,v->pcm_current-v->centerW,order);


      vorbis_lpc_predict(lpc,work+v->pcm_current-v->centerW-order,
    order,
    work+v->pcm_current-v->centerW,
    v->centerW);

      for(j=0;j<v->pcm_current;j++)
 v->pcm[i][v->pcm_current-j-1]=work[j];

    }
  }
}




int vorbis_analysis_wrote(vorbis_dsp_state *v, int vals){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;

  if(vals<=0){
    int order=32;
    int i;
    float *lpc=
# 44576 "oggenc.c" 3 4
              __builtin_alloca (
# 44576 "oggenc.c"
              order*sizeof(*lpc)
# 44576 "oggenc.c" 3 4
              )
# 44576 "oggenc.c"
                                        ;


    if(!v->preextrapolate)
      _preextrapolate_helper(v);







    vorbis_analysis_buffer(v,ci->blocksizes[1]*3);
    v->eofflag=v->pcm_current;
    v->pcm_current+=ci->blocksizes[1]*3;

    for(i=0;i<vi->channels;i++){
      if(v->eofflag>order*2){

 long n;


 n=v->eofflag;
 if(n>ci->blocksizes[1])n=ci->blocksizes[1];
 vorbis_lpc_from_data(v->pcm[i]+v->eofflag-n,lpc,n,order);


 vorbis_lpc_predict(lpc,v->pcm[i]+v->eofflag-order,order,
      v->pcm[i]+v->eofflag,v->pcm_current-v->eofflag);
      }else{



 memset(v->pcm[i]+v->eofflag,0,
        (v->pcm_current-v->eofflag)*sizeof(*v->pcm[i]));

      }
    }
  }else{

    if(v->pcm_current+vals>v->pcm_storage)
      return(-131);

    v->pcm_current+=vals;




    if(!v->preextrapolate && v->pcm_current-v->centerW>ci->blocksizes[1])
      _preextrapolate_helper(v);

  }
  return(0);
}



int vorbis_analysis_blockout(vorbis_dsp_state *v,vorbis_block *vb){
  int i;
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  private_state *b=v->backend_state;
  vorbis_look_psy_global *g=b->psy_g_look;
  long beginW=v->centerW-ci->blocksizes[v->W]/2,centerNext;
  vorbis_block_internal *vbi=(vorbis_block_internal *)vb->internal;


  if(!v->preextrapolate)return(0);


  if(v->eofflag==-1)return(0);
# 44655 "oggenc.c"
  {
    long bp=_ve_envelope_search(v);
    if(bp==-1){

      if(v->eofflag==0)return(0);

      v->nW=0;
    }else{

      if(ci->blocksizes[0]==ci->blocksizes[1])
 v->nW=0;
      else
 v->nW=bp;
    }
  }

  centerNext=v->centerW+ci->blocksizes[v->W]/4+ci->blocksizes[v->nW]/4;

  {


    long blockbound=centerNext+ci->blocksizes[v->nW]/2;
    if(v->pcm_current<blockbound)return(0);
# 44686 "oggenc.c"
  }




  _vorbis_block_ripcord(vb);
  vb->lW=v->lW;
  vb->W=v->W;
  vb->nW=v->nW;

  if(v->W){
    if(!v->lW || !v->nW){
      vbi->blocktype=0;

    }else{
      vbi->blocktype=1;

    }
  }else{
    if(_ve_envelope_mark(v)){
      vbi->blocktype=0;


    }else{
      vbi->blocktype=1;


    }
  }

  vb->vd=v;
  vb->sequence=v->sequence++;
  vb->granulepos=v->granulepos;
  vb->pcmend=ci->blocksizes[v->W];





  if(vbi->ampmax>g->ampmax)g->ampmax=vbi->ampmax;
  g->ampmax=_vp_ampmax_decay(g->ampmax,v);
  vbi->ampmax=g->ampmax;

  vb->pcm=_vorbis_block_alloc(vb,sizeof(*vb->pcm)*vi->channels);
  vbi->pcmdelay=_vorbis_block_alloc(vb,sizeof(*vbi->pcmdelay)*vi->channels);
  for(i=0;i<vi->channels;i++){
    vbi->pcmdelay[i]=
      _vorbis_block_alloc(vb,(vb->pcmend+beginW)*sizeof(*vbi->pcmdelay[i]));
    memcpy(vbi->pcmdelay[i],v->pcm[i],(vb->pcmend+beginW)*sizeof(*vbi->pcmdelay[i]));
    vb->pcm[i]=vbi->pcmdelay[i]+beginW;






  }





  if(v->eofflag){
    if(v->centerW>=v->eofflag){
      v->eofflag=-1;
      vb->eofflag=1;
      return(1);
    }
  }


  {
    int new_centerNext=ci->blocksizes[1]/2;
    int movementW=centerNext-new_centerNext;

    if(movementW>0){

      _ve_envelope_shift(b->ve,movementW);
      v->pcm_current-=movementW;

      for(i=0;i<vi->channels;i++)
 memmove(v->pcm[i],v->pcm[i]+movementW,
  v->pcm_current*sizeof(*v->pcm[i]));


      v->lW=v->W;
      v->W=v->nW;
      v->centerW=new_centerNext;

      if(v->eofflag){
 v->eofflag-=movementW;
 if(v->eofflag<=0)v->eofflag=-1;

 if(v->centerW>=v->eofflag){
   v->granulepos+=movementW-(v->centerW-v->eofflag);
 }else{
   v->granulepos+=movementW;
 }
      }else{
 v->granulepos+=movementW;
      }
    }
  }


  return(1);
}

int vorbis_synthesis_restart(vorbis_dsp_state *v){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci;
  int hs;

  if(!v->backend_state)return -1;
  if(!vi)return -1;
  ci=vi->codec_setup;
  if(!ci)return -1;
  hs=ci->halfrate_flag;

  v->centerW=ci->blocksizes[1]>>(hs+1);
  v->pcm_current=v->centerW>>hs;

  v->pcm_returned=-1;
  v->granulepos=-1;
  v->sequence=-1;
  v->eofflag=0;
  ((private_state *)(v->backend_state))->sample_count=-1;

  return(0);
}

int vorbis_synthesis_init(vorbis_dsp_state *v,vorbis_info *vi){
  if(_vds_shared_init(v,vi,0)) return 1;
  vorbis_synthesis_restart(v);

  return 0;
}





int vorbis_synthesis_blockin(vorbis_dsp_state *v,vorbis_block *vb){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  private_state *b=v->backend_state;
  int hs=ci->halfrate_flag;
  int i,j;

  if(!vb)return(-131);
  if(v->pcm_current>v->pcm_returned && v->pcm_returned!=-1)return(-131);

  v->lW=v->W;
  v->W=vb->W;
  v->nW=-1;

  if((v->sequence==-1)||
     (v->sequence+1 != vb->sequence)){
    v->granulepos=-1;
    b->sample_count=-1;
  }

  v->sequence=vb->sequence;

  if(vb->pcm){

    int n=ci->blocksizes[v->W]>>(hs+1);
    int n0=ci->blocksizes[0]>>(hs+1);
    int n1=ci->blocksizes[1]>>(hs+1);

    int thisCenter;
    int prevCenter;

    v->glue_bits+=vb->glue_bits;
    v->time_bits+=vb->time_bits;
    v->floor_bits+=vb->floor_bits;
    v->res_bits+=vb->res_bits;

    if(v->centerW){
      thisCenter=n1;
      prevCenter=0;
    }else{
      thisCenter=0;
      prevCenter=n1;
    }





    for(j=0;j<vi->channels;j++){

      if(v->lW){
 if(v->W){

   float *w=_vorbis_window_get(b->window[1]-hs);
   float *pcm=v->pcm[j]+prevCenter;
   float *p=vb->pcm[j];
   for(i=0;i<n1;i++)
     pcm[i]=pcm[i]*w[n1-i-1] + p[i]*w[i];
 }else{

   float *w=_vorbis_window_get(b->window[0]-hs);
   float *pcm=v->pcm[j]+prevCenter+n1/2-n0/2;
   float *p=vb->pcm[j];
   for(i=0;i<n0;i++)
     pcm[i]=pcm[i]*w[n0-i-1] +p[i]*w[i];
 }
      }else{
 if(v->W){

   float *w=_vorbis_window_get(b->window[0]-hs);
   float *pcm=v->pcm[j]+prevCenter;
   float *p=vb->pcm[j]+n1/2-n0/2;
   for(i=0;i<n0;i++)
     pcm[i]=pcm[i]*w[n0-i-1] +p[i]*w[i];
   for(;i<n1/2+n0/2;i++)
     pcm[i]=p[i];
 }else{

   float *w=_vorbis_window_get(b->window[0]-hs);
   float *pcm=v->pcm[j]+prevCenter;
   float *p=vb->pcm[j];
   for(i=0;i<n0;i++)
     pcm[i]=pcm[i]*w[n0-i-1] +p[i]*w[i];
 }
      }


      {
 float *pcm=v->pcm[j]+thisCenter;
 float *p=vb->pcm[j]+n;
 for(i=0;i<n;i++)
   pcm[i]=p[i];
      }
    }

    if(v->centerW)
      v->centerW=0;
    else
      v->centerW=n1;





    if(v->pcm_returned==-1){
      v->pcm_returned=thisCenter;
      v->pcm_current=thisCenter;
    }else{
      v->pcm_returned=prevCenter;
      v->pcm_current=prevCenter+
 ((ci->blocksizes[v->lW]/4+
 ci->blocksizes[v->W]/4)>>hs);
    }

  }
# 44955 "oggenc.c"
  if(b->sample_count==-1){
    b->sample_count=0;
  }else{
    b->sample_count+=ci->blocksizes[v->lW]/4+ci->blocksizes[v->W]/4;
  }

  if(v->granulepos==-1){
    if(vb->granulepos!=-1){

      v->granulepos=vb->granulepos;


      if(b->sample_count>v->granulepos){


 if(vb->eofflag){






   v->pcm_current-=(b->sample_count-v->granulepos)>>hs;
 }else{

   v->pcm_returned+=(b->sample_count-v->granulepos)>>hs;
   if(v->pcm_returned>v->pcm_current)
     v->pcm_returned=v->pcm_current;
 }

      }

    }
  }else{
    v->granulepos+=ci->blocksizes[v->lW]/4+ci->blocksizes[v->W]/4;
    if(vb->granulepos!=-1 && v->granulepos!=vb->granulepos){

      if(v->granulepos>vb->granulepos){
 long extra=v->granulepos-vb->granulepos;

 if(extra)
   if(vb->eofflag){

     v->pcm_current-=extra>>hs;
   }

      }

      v->granulepos=vb->granulepos;
    }
  }



  if(vb->eofflag)v->eofflag=1;
  return(0);

}


int vorbis_synthesis_pcmout(vorbis_dsp_state *v,float ***pcm){
  vorbis_info *vi=v->vi;

  if(v->pcm_returned>-1 && v->pcm_returned<v->pcm_current){
    if(pcm){
      int i;
      for(i=0;i<vi->channels;i++)
 v->pcmret[i]=v->pcm[i]+v->pcm_returned;
      *pcm=v->pcmret;
    }
    return(v->pcm_current-v->pcm_returned);
  }
  return(0);
}

int vorbis_synthesis_read(vorbis_dsp_state *v,int n){
  if(n && v->pcm_returned+n>v->pcm_current)return(-131);
  v->pcm_returned+=n;
  return(0);
}






int vorbis_synthesis_lapout(vorbis_dsp_state *v,float ***pcm){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  int hs=ci->halfrate_flag;

  int n=ci->blocksizes[v->W]>>(hs+1);
  int n0=ci->blocksizes[0]>>(hs+1);
  int n1=ci->blocksizes[1]>>(hs+1);
  int i,j;

  if(v->pcm_returned<0)return 0;
# 45063 "oggenc.c"
  if(v->centerW==n1){


    for(j=0;j<vi->channels;j++){
      float *p=v->pcm[j];
      for(i=0;i<n1;i++){
 float temp=p[i];
 p[i]=p[i+n1];
 p[i+n1]=temp;
      }
    }

    v->pcm_current-=n1;
    v->pcm_returned-=n1;
    v->centerW=0;
  }


  if((v->lW^v->W)==1){

    for(j=0;j<vi->channels;j++){
      float *s=v->pcm[j];
      float *d=v->pcm[j]+(n1-n0)/2;
      for(i=(n1+n0)/2-1;i>=0;--i)
 d[i]=s[i];
    }
    v->pcm_returned+=(n1-n0)/2;
    v->pcm_current+=(n1-n0)/2;
  }else{
    if(v->lW==0){

      for(j=0;j<vi->channels;j++){
 float *s=v->pcm[j];
 float *d=v->pcm[j]+n1-n0;
 for(i=n0-1;i>=0;--i)
   d[i]=s[i];
      }
      v->pcm_returned+=n1-n0;
      v->pcm_current+=n1-n0;
    }
  }

  if(pcm){
    int i;
    for(i=0;i<vi->channels;i++)
      v->pcmret[i]=v->pcm[i]+v->pcm_returned;
    *pcm=v->pcmret;
  }

  return(n1+n-v->pcm_returned);

}

float *vorbis_window(vorbis_dsp_state *v,int W){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  int hs=ci->halfrate_flag;
  private_state *b=v->backend_state;

  if(b->window[W]-1<0)return 
# 45122 "oggenc.c" 3 4
                            ((void *)0)
# 45122 "oggenc.c"
                                ;
  return _vorbis_window_get(b->window[W]-hs);
}
# 45166 "oggenc.c"
static float unitnorm(float x){
  ogg_uint32_t *ix=(ogg_uint32_t *)&x;
  *ix=(*ix&0x80000000UL)|(0x3f800000UL);
  return(x);
}

float FABS(float *x){
  ogg_uint32_t *ix=(ogg_uint32_t *)x;
  *ix&=0x7fffffffUL;
  return(*x);
}

static float todB(const float *x){
  float calc;
  ogg_int32_t *i=(ogg_int32_t *)x;
  calc = ((*i) & 0x7fffffff);
  calc *= 7.1771144e-7f;
  calc += -764.27118f;
  return calc;
}
# 45225 "oggenc.c"
int analysis_noisy=1;


int vorbis_analysis(vorbis_block *vb, ogg_packet *op){
  int ret;

  vb->glue_bits=0;
  vb->time_bits=0;
  vb->floor_bits=0;
  vb->res_bits=0;


  oggpack_reset(&vb->opb);





  if((ret=_mapping_P[0]->forward(vb)))
    return(ret);

  if(op){
    if(vorbis_bitrate_managed(vb))


      return(-131);

    op->packet=oggpack_get_buffer(&vb->opb);
    op->bytes=oggpack_bytes(&vb->opb);
    op->b_o_s=0;
    op->e_o_s=vb->eofflag;
    op->granulepos=vb->granulepos;
    op->packetno=vb->sequence;
  }
  return(0);
}


void _analysis_output_always(char *base,int i,float *v,int n,int bark,int dB,ogg_int64_t off){
  int j;
  FILE *of;
  char buffer[80];


    sprintf(buffer,"%s_%d.m",base,i);
    of=fopen(buffer,"w");

    if(!of)perror("failed to open data dump file");

    for(j=0;j<n;j++){
      if(bark){
 float b=(13.1f*atan(.00074f*((4000.f*j/n)+.25))+2.24f*atan(((4000.f*j/n)+.25)*((4000.f*j/n)+.25)*1.85e-8f)+1e-4f*((4000.f*j/n)+.25));
 fprintf(of,"%f ",b);
      }else
 if(off!=0)
   fprintf(of,"%f ",(double)(j+off)/8000.);
 else
   fprintf(of,"%f ",(double)j);

      if(dB){
 float val;
 if(v[j]==0.)
   val=-140.;
 else
   val=todB(v+j);
 fprintf(of,"%f\n",val);
      }else{
 fprintf(of,"%f\n",v[j]);
      }
    }
    fclose(of);

}

void _analysis_output(char *base,int i,float *v,int n,int bark,int dB,
        ogg_int64_t off){
  if(analysis_noisy)_analysis_output_always(base,i,v,n,bark,dB,off);
}
# 45321 "oggenc.c"
static long BINBYTES(bitrate_manager_state *bm,long pos,long bin){
  int bins=bm->queue_bins;
  return(bm->queue_binned[pos*bins+bin]);
}



static long LACING_ADJUST(long bytes){
  int addto=bytes/255+1;
  return(bytes+addto);
}

static int floater_interpolate(bitrate_manager_state *bm,vorbis_info *vi,
      double desired_rate){
  int bin=rint(bm->avgfloat);
  double lobitrate,hibitrate;


  lobitrate=(double)(bm->avg_binacc[bin]*8)/bm->avg_sampleacc*vi->rate;
  while(lobitrate>desired_rate && bin>0){
    bin--;
    lobitrate=(double)(bm->avg_binacc[bin]*8)/bm->avg_sampleacc*vi->rate;
  }

  if(bin+1<bm->queue_bins){
    hibitrate=(double)(bm->avg_binacc[bin+1]*8)/bm->avg_sampleacc*vi->rate;
    if(fabs(hibitrate-desired_rate) < fabs(lobitrate-desired_rate))bin++;
  }
  return(bin);
}


static long limit_sum(bitrate_manager_state *bm,int limit){
  int i=bm->minmax_stackptr;
  long acc=bm->minmax_acctotal;
  long bins=bm->queue_bins;

  acc-=(bm->minmax_binstack[(i)*bins*2+((0)+bins)]);
  acc+=(bm->minmax_binstack[(i)*bins*2+((limit)+bins)]);

  while(i-->0){
    if(bm->minmax_limitstack[i]<=limit)break;
    acc-=(bm->minmax_binstack[(i)*bins*2+((bm->minmax_limitstack[i])+bins)]);
    acc+=(bm->minmax_binstack[(i)*bins*2+((limit)+bins)]);
  }
  return(acc);
}


void vorbis_bitrate_init(vorbis_info *vi,bitrate_manager_state *bm){
  int i;
  codec_setup_info *ci=vi->codec_setup;
  bitrate_manager_info *bi=&ci->bi;
  long maxlatency;

  memset(bm,0,sizeof(*bm));

  if(bi){

    bm->avg_sampledesired=bi->queue_avg_time*vi->rate;
    bm->avg_centerdesired=bi->queue_avg_time*vi->rate*bi->queue_avg_center;
    bm->minmax_sampledesired=bi->queue_minmax_time*vi->rate;


    maxlatency=((bm->avg_sampledesired-bm->avg_centerdesired)<(bm->minmax_sampledesired)?(bm->minmax_sampledesired):(bm->avg_sampledesired-bm->avg_centerdesired))
                              +bm->avg_centerdesired;

    if(maxlatency>0 &&
       (bi->queue_avgmin>0 || bi->queue_avgmax>0 || bi->queue_hardmax>0 ||
 bi->queue_hardmin>0)){
      long maxpackets=maxlatency/(ci->blocksizes[0]>>1)+3;
      long bins=15;

      bm->queue_size=maxpackets;
      bm->queue_bins=bins;
      bm->queue_binned=calloc(maxpackets,bins*sizeof(*bm->queue_binned));
      bm->queue_actual=calloc(maxpackets,sizeof(*bm->queue_actual));

      if((bi->queue_avgmin>0 || bi->queue_avgmax>0) &&
  bi->queue_avg_time>0){

 bm->avg_binacc=calloc(bins,sizeof(*bm->avg_binacc));
 bm->avgfloat=15/2;

      }else{
 bm->avg_tail= -1;
      }

      if((bi->queue_hardmin>0 || bi->queue_hardmax>0) &&
  bi->queue_minmax_time>0){

 bm->minmax_binstack=calloc((bins*2+1)*bins*2,
     sizeof(*bm->minmax_binstack));
 bm->minmax_posstack=calloc((bins*2+1),
          sizeof(*bm->minmax_posstack));
 bm->minmax_limitstack=calloc((bins*2+1),
       sizeof(*bm->minmax_limitstack));
      }else{
 bm->minmax_tail= -1;
      }


      bm->packetbuffers=calloc(maxpackets,sizeof(*bm->packetbuffers));
      bm->packets=calloc(maxpackets,sizeof(*bm->packets));
      for(i=0;i<maxpackets;i++)
 oggpack_writeinit(bm->packetbuffers+i);

    }else{
      bm->packetbuffers=calloc(1,sizeof(*bm->packetbuffers));
      bm->packets=calloc(1,sizeof(*bm->packets));
      oggpack_writeinit(bm->packetbuffers);

    }
  }
}

void vorbis_bitrate_clear(bitrate_manager_state *bm){
  int i;
  if(bm){
    if(bm->queue_binned)free(bm->queue_binned);
    if(bm->queue_actual)free(bm->queue_actual);
    if(bm->avg_binacc)free(bm->avg_binacc);
    if(bm->minmax_binstack)free(bm->minmax_binstack);
    if(bm->minmax_posstack)free(bm->minmax_posstack);
    if(bm->minmax_limitstack)free(bm->minmax_limitstack);

    if(bm->packetbuffers){
      if(bm->queue_size==0){
 oggpack_writeclear(bm->packetbuffers);
      }else{
 for(i=0;i<bm->queue_size;i++)
   oggpack_writeclear(bm->packetbuffers+i);
      }
      free(bm->packetbuffers);
    }
    if(bm->packets)free(bm->packets);

    memset(bm,0,sizeof(*bm));
  }
}

int vorbis_bitrate_managed(vorbis_block *vb){
  vorbis_dsp_state *vd=vb->vd;
  private_state *b=vd->backend_state;
  bitrate_manager_state *bm=&b->bms;

  if(bm->queue_binned)return(1);
  return(0);
}


int vorbis_bitrate_addblock(vorbis_block *vb){
  int i;
  vorbis_block_internal *vbi=vb->internal;
  vorbis_dsp_state *vd=vb->vd;
  private_state *b=vd->backend_state;
  bitrate_manager_state *bm=&b->bms;
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  bitrate_manager_info *bi=&ci->bi;
  int eofflag=vb->eofflag;
  int head=bm->queue_head;
  int next_head=head+1;
  int bins=bm->queue_bins;
  int minmax_head,new_minmax_head;

  ogg_uint32_t *head_ptr;
  oggpack_buffer temp;

  if(!bm->queue_binned){
    oggpack_buffer temp;



    if(bm->queue_head)return(-1);

    bm->queue_head++;

    bm->packets[0].packet=oggpack_get_buffer(&vb->opb);
    bm->packets[0].bytes=oggpack_bytes(&vb->opb);
    bm->packets[0].b_o_s=0;
    bm->packets[0].e_o_s=vb->eofflag;
    bm->packets[0].granulepos=vb->granulepos;
    bm->packets[0].packetno=vb->sequence;

    memcpy(&temp,bm->packetbuffers,sizeof(vb->opb));
    memcpy(bm->packetbuffers,&vb->opb,sizeof(vb->opb));
    memcpy(&vb->opb,&temp,sizeof(vb->opb));

    return(0);
  }


  if(next_head>=bm->queue_size)next_head=0;
  head_ptr=bm->queue_binned+bins*head;



  if(next_head==bm->avg_tail || next_head==bm->minmax_tail)return(-1);


  bm->queue_head=next_head;
  bm->queue_actual[head]=(vb->W?0x80000000UL:0);


  bm->packets[head].packet=oggpack_get_buffer(&vb->opb);
  bm->packets[head].bytes=oggpack_bytes(&vb->opb);
  bm->packets[head].b_o_s=0;
  bm->packets[head].e_o_s=vb->eofflag;
  bm->packets[head].granulepos=vb->granulepos;
  bm->packets[head].packetno=vb->sequence;


  memcpy(&temp,bm->packetbuffers+head,sizeof(vb->opb));
  memcpy(bm->packetbuffers+head,&vb->opb,sizeof(vb->opb));
  memcpy(&vb->opb,&temp,sizeof(vb->opb));


  head_ptr[0]=vbi->packetblob_markers[0];
  for(i=1;i<15;i++){
    head_ptr[i]=vbi->packetblob_markers[i]-vbi->packetblob_markers[i-1];
  }

  if(bm->avg_binacc)
    new_minmax_head=minmax_head=bm->avg_center;
  else
    new_minmax_head=minmax_head=head;




  if(bm->avg_binacc){
    unsigned long desired_center=bm->avg_centerdesired;
    if(eofflag)desired_center=0;


    for(i=0;i<bins;i++)
      bm->avg_binacc[i]+=LACING_ADJUST(head_ptr[i]);
    bm->avg_sampleacc+=ci->blocksizes[vb->W]>>1;
    bm->avg_centeracc+=ci->blocksizes[vb->W]>>1;

    if(bm->avg_sampleacc>bm->avg_sampledesired || eofflag){


      if(bm->avg_centeracc>desired_center){

 int samples=ci->blocksizes[vb->W]>>1;
 double upper=floater_interpolate(bm,vi,bi->queue_avgmax);
 double lower=floater_interpolate(bm,vi,bi->queue_avgmin);
 double new=15/2.,slew;
 int bin;

 if(upper<new)new=upper;
 if(lower>new)new=lower;

 slew=(new-bm->avgfloat)/samples*vi->rate;

 if(slew<bi->avgfloat_downslew_max)
   new=bm->avgfloat+bi->avgfloat_downslew_max/vi->rate*samples;
 if(slew>bi->avgfloat_upslew_max)
   new=bm->avgfloat+bi->avgfloat_upslew_max/vi->rate*samples;

 bm->avgfloat=new;

 bin=rint(bm->avgfloat);



 while(bm->avg_centeracc>desired_center){
   samples=ci->blocksizes[bm->queue_actual[bm->avg_center]&
    0x80000000UL?1:0]>>1;

   bm->queue_actual[bm->avg_center]|=bin;

   bm->avg_centeracc-=samples;
   bm->avg_center++;
   if(bm->avg_center>=bm->queue_size)bm->avg_center=0;
 }
 new_minmax_head=bm->avg_center;

      }


      while(bm->avg_sampleacc>bm->avg_sampledesired){
 int samples=
   ci->blocksizes[bm->queue_actual[bm->avg_tail]&0x80000000UL?1:0]>>1;
 for(i=0;i<bm->queue_bins;i++)
   bm->avg_binacc[i]-=LACING_ADJUST(bm->queue_binned[bins*bm->avg_tail+i]);
 bm->avg_sampleacc-=samples;
 bm->avg_tail++;
 if(bm->avg_tail>=bm->queue_size)bm->avg_tail=0;
      }


    }
  }else{



    long bin=15/2;
    bm->queue_actual[head]|=bin;
    new_minmax_head=next_head;
  }


  if(bm->minmax_binstack){
    unsigned long sampledesired=eofflag?0:bm->minmax_sampledesired;


    while(minmax_head!=new_minmax_head){
      unsigned int i;
      int samples=ci->blocksizes[bm->queue_actual[minmax_head]&
    0x80000000UL?1:0]>>1;
      int actual=bm->queue_actual[minmax_head]&0x7fffffffUL;

      for(i=0;i<(unsigned int)bins;i++){
 bm->minmax_binstack[bm->minmax_stackptr*bins*2+bins+i]+=
   LACING_ADJUST(BINBYTES(bm,minmax_head,
    actual>i?actual:i));

 bm->minmax_binstack[bm->minmax_stackptr*bins*2+i]+=
   LACING_ADJUST(BINBYTES(bm,minmax_head,
    actual<i?actual:i));
      }

      bm->minmax_posstack[bm->minmax_stackptr]=minmax_head;



      bm->minmax_limitstack[bm->minmax_stackptr]=0;
      bm->minmax_sampleacc+=samples;
      bm->minmax_acctotal+=
 LACING_ADJUST(BINBYTES(bm,minmax_head,actual));

      minmax_head++;
      if(minmax_head>=bm->queue_size)minmax_head=0;


    }


    if(bm->minmax_sampleacc>sampledesired){
      double bitrate=(double)(bm->minmax_acctotal*8)/
 bm->minmax_sampleacc*vi->rate;
      int limit=0;

      if((bi->queue_hardmax>0 && bitrate>bi->queue_hardmax) ||
  (bi->queue_hardmin>0 && bitrate<bi->queue_hardmin)){
 int newstack;
 int stackctr;
 long bitsum=bm->minmax_acctotal*8;

 bitrate=(double)bitsum/bm->minmax_sampleacc*vi->rate;




 if(bi->queue_hardmax>0 && bitrate>bi->queue_hardmax){
   for(limit=-1;limit>-bins+1;limit--){
     long bitsum=limit_sum(bm,limit)*8;
     bitrate=(double)bitsum/bm->minmax_sampleacc*vi->rate;
     if(bitrate<=bi->queue_hardmax)break;
   }
 }else if(bitrate<bi->queue_hardmin){
   for(limit=1;limit<bins-1;limit++){
     long bitsum=limit_sum(bm,limit)*8;
     bitrate=(double)bitsum/bm->minmax_sampleacc*vi->rate;
     if(bitrate>=bi->queue_hardmin)break;
   }
   if(bitrate>bi->queue_hardmax)limit--;
 }


 newstack=bm->minmax_stackptr-1;
 while(newstack>=0){
   if(bm->minmax_limitstack[newstack]<limit)break;
   newstack--;
 }



 stackctr=bm->minmax_stackptr;
 while(stackctr>newstack){
   bm->minmax_acctotal-=
     (bm->minmax_binstack[(stackctr)*bins*2+((bm->minmax_limitstack[stackctr])+bins)]);
   bm->minmax_acctotal+=(bm->minmax_binstack[(stackctr)*bins*2+((limit)+bins)]);

   if(stackctr<bm->minmax_stackptr)
     for(i=0;i<bins*2;i++)
       bm->minmax_binstack[stackctr*bins*2+i]+=
  bm->minmax_binstack[(stackctr+1)*bins*2+i];

   stackctr--;
 }
 stackctr++;
 bm->minmax_posstack[stackctr]=bm->minmax_posstack[bm->minmax_stackptr];
 bm->minmax_limitstack[stackctr]=limit;


 stackctr++;
 bm->minmax_stackptr=stackctr;
 memset(&bm->minmax_binstack[stackctr*bins*2],
        0,
        sizeof(*bm->minmax_binstack)*bins*2);
 bm->minmax_limitstack[stackctr]=0;
 bm->minmax_posstack[stackctr]=-1;

      }
    }


    while(bm->minmax_sampleacc>sampledesired){
      int samples=
 ci->blocksizes[bm->queue_actual[bm->minmax_tail]&0x80000000UL?1:0]>>1;
      int actual=bm->queue_actual[bm->minmax_tail]&0x7fffffffUL;

      for(i=0;i<bins;i++){
 bm->minmax_binstack[bins+i]-=
   LACING_ADJUST(BINBYTES(bm,bm->minmax_tail,
    actual>i?
    actual:i));
 bm->minmax_binstack[i]-=
   LACING_ADJUST(BINBYTES(bm,bm->minmax_tail,
    actual<i?
    actual:i));
      }

      if(bm->minmax_limitstack[0]>actual)
 actual=bm->minmax_limitstack[0];
      if(bins+bm->minmax_limitstack[0]<actual)
 actual=bins+bm->minmax_limitstack[0];

      bm->minmax_acctotal-=LACING_ADJUST(BINBYTES(bm,bm->minmax_tail,actual));
      bm->minmax_sampleacc-=samples;


      bm->queue_actual[bm->minmax_tail]&=0x80000000UL;
      bm->queue_actual[bm->minmax_tail]|=actual;

      if(bm->minmax_tail==bm->minmax_posstack[0]){

 memmove(bm->minmax_binstack,bm->minmax_binstack+bins*2,
  sizeof(*bm->minmax_binstack)*bins*2*bm->minmax_stackptr);
 memmove(bm->minmax_posstack,bm->minmax_posstack+1,
  sizeof(*bm->minmax_posstack)*bm->minmax_stackptr);
 memmove(bm->minmax_limitstack,bm->minmax_limitstack+1,
  sizeof(*bm->minmax_limitstack)*bm->minmax_stackptr);
 bm->minmax_stackptr--;
      }

      bm->minmax_tail++;
      if(bm->minmax_tail>=bm->queue_size)bm->minmax_tail=0;

    }


    bm->last_to_flush=bm->minmax_tail;
  }else{
    bm->last_to_flush=bm->avg_center;
  }
  if(eofflag)
    bm->last_to_flush=bm->queue_head;
  return(0);
}

int vorbis_bitrate_flushpacket(vorbis_dsp_state *vd,ogg_packet *op){
  private_state *b=vd->backend_state;
  bitrate_manager_state *bm=&b->bms;

  if(bm->queue_size==0){
    if(bm->queue_head==0)return(0);

    memcpy(op,bm->packets,sizeof(*op));
    bm->queue_head=0;

  }else{

    if(bm->next_to_flush==bm->last_to_flush)return(0);

    {
      long bin=bm->queue_actual[bm->next_to_flush]&0x7fffffff,i;
      long bins=bm->queue_bins;
      ogg_uint32_t *markers=bm->queue_binned+bins*bm->next_to_flush;
      long bytes=markers[bin];

      memcpy(op,bm->packets+bm->next_to_flush,sizeof(*op));



      for(i=0;i<bin;i++)
 op->packet+=markers[i];
      op->bytes=bytes;

    }

    bm->next_to_flush++;
    if(bm->next_to_flush>=bm->queue_size)bm->next_to_flush=0;

  }

  return(1);
}
# 45841 "oggenc.c"
int vorbis_synthesis(vorbis_block *vb,ogg_packet *op){
  vorbis_dsp_state *vd=vb->vd;
  private_state *b=vd->backend_state;
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  oggpack_buffer *opb=&vb->opb;
  int type,mode,i;


  _vorbis_block_ripcord(vb);
  oggpack_readinit(opb,op->packet,op->bytes);


  if(oggpack_read(opb,1)!=0){

    return(-135);
  }


  mode=oggpack_read(opb,b->modebits);
  if(mode==-1)return(-136);

  vb->mode=mode;
  vb->W=ci->mode_param[mode]->blockflag;
  if(vb->W){



    vb->lW=oggpack_read(opb,1);
    vb->nW=oggpack_read(opb,1);
    if(vb->nW==-1) return(-136);
  }else{
    vb->lW=0;
    vb->nW=0;
  }


  vb->granulepos=op->granulepos;
  vb->sequence=op->packetno;
  vb->eofflag=op->e_o_s;


  vb->pcmend=ci->blocksizes[vb->W];
  vb->pcm=_vorbis_block_alloc(vb,sizeof(*vb->pcm)*vi->channels);
  for(i=0;i<vi->channels;i++)
    vb->pcm[i]=_vorbis_block_alloc(vb,vb->pcmend*sizeof(*vb->pcm[i]));


  type=ci->map_type[ci->mode_param[mode]->mapping];

  return(_mapping_P[type]->inverse(vb,ci->map_param[ci->mode_param[mode]->
         mapping]));
}



int vorbis_synthesis_trackonly(vorbis_block *vb,ogg_packet *op){
  vorbis_dsp_state *vd=vb->vd;
  private_state *b=vd->backend_state;
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  oggpack_buffer *opb=&vb->opb;
  int mode;


  _vorbis_block_ripcord(vb);
  oggpack_readinit(opb,op->packet,op->bytes);


  if(oggpack_read(opb,1)!=0){

    return(-135);
  }


  mode=oggpack_read(opb,b->modebits);
  if(mode==-1)return(-136);

  vb->mode=mode;
  vb->W=ci->mode_param[mode]->blockflag;
  if(vb->W){
    vb->lW=oggpack_read(opb,1);
    vb->nW=oggpack_read(opb,1);
    if(vb->nW==-1) return(-136);
  }else{
    vb->lW=0;
    vb->nW=0;
  }


  vb->granulepos=op->granulepos;
  vb->sequence=op->packetno;
  vb->eofflag=op->e_o_s;


  vb->pcmend=0;
  vb->pcm=
# 45937 "oggenc.c" 3 4
         ((void *)0)
# 45937 "oggenc.c"
             ;

  return(0);
}

long vorbis_packet_blocksize(vorbis_info *vi,ogg_packet *op){
  codec_setup_info *ci=vi->codec_setup;
  oggpack_buffer opb;
  int mode;

  oggpack_readinit(&opb,op->packet,op->bytes);


  if(oggpack_read(&opb,1)!=0){

    return(-135);
  }

  {
    int modebits=0;
    int v=ci->modes;
    while(v>1){
      modebits++;
      v>>=1;
    }


    mode=oggpack_read(&opb,modebits);
  }
  if(mode==-1)return(-136);
  return(ci->blocksizes[ci->mode_param[mode]->blockflag]);
}

int vorbis_synthesis_halfrate(vorbis_info *vi,int flag){

  codec_setup_info *ci=vi->codec_setup;


  if(ci->blocksizes[0]<=64 && flag)return -1;
  ci->halfrate_flag=(flag?1:0);
  return 0;
}

int vorbis_synthesis_halfrate_p(vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  return ci->halfrate_flag;
}
# 46005 "oggenc.c"
int _ilog(unsigned int v){
  int ret=0;
  while(v){
    ret++;
    v>>=1;
  }
  return(ret);
}
# 46023 "oggenc.c"
long _float32_pack(float val){
  int sign=0;
  long exp;
  long mant;
  if(val<0){
    sign=0x80000000;
    val= -val;
  }
  exp= floor(log(val)/log(2.f));
  mant=rint(ldexp(val,(21 -1)-exp));
  exp=(exp+768)<<21;

  return(sign|exp|mant);
}

float _float32_unpack(long val){
  double mant=val&0x1fffff;
  int sign=val&0x80000000;
  long exp =(val&0x7fe00000L)>>21;
  if(sign)mant= -mant;
  return(ldexp(mant,exp-(21 -1)-768));
}




ogg_uint32_t *_make_words(long *l,long n,long sparsecount){
  long i,j,count=0;
  ogg_uint32_t marker[33];
  ogg_uint32_t *r=malloc((sparsecount?sparsecount:n)*sizeof(*r));
  memset(marker,0,sizeof(marker));

  for(i=0;i<n;i++){
    long length=l[i];
    if(length>0){
      ogg_uint32_t entry=marker[length];







      if(length<32 && (entry>>length)){

 free(r);
 return(
# 46069 "oggenc.c" 3 4
       ((void *)0)
# 46069 "oggenc.c"
           );
      }
      r[count++]=entry;



      {
 for(j=length;j>0;j--){

   if(marker[j]&1){

     if(j==1)
       marker[1]++;
     else
       marker[j]=marker[j-1]<<1;
     break;

   }
   marker[j]++;
 }
      }




      for(j=length+1;j<33;j++)
 if((marker[j]>>1) == entry){
   entry=marker[j];
   marker[j]=marker[j-1]<<1;
 }else
   break;
    }else
      if(sparsecount==0)count++;
  }



  for(i=0,count=0;i<n;i++){
    ogg_uint32_t temp=0;
    for(j=0;j<l[i];j++){
      temp<<=1;
      temp|=(r[count]>>j)&1;
    }

    if(sparsecount){
      if(l[i])
 r[count++]=temp;
    }else
      r[count++]=temp;
  }

  return(r);
}




long _book_maptype1_quantvals(const static_codebook *b){
  long vals=floor(pow((float)b->entries,1.f/b->dim));






  while(1){
    long acc=1;
    long acc1=1;
    int i;
    for(i=0;i<b->dim;i++){
      acc*=vals;
      acc1*=vals+1;
    }
    if(acc<=b->entries && acc1>b->entries){
      return(vals);
    }else{
      if(acc>b->entries){
 vals--;
      }else{
 vals++;
      }
    }
  }
}






float *_book_unquantize(const static_codebook *b,int n,int *sparsemap){
  long j,k,count=0;
  if(b->maptype==1 || b->maptype==2){
    int quantvals;
    float mindel=_float32_unpack(b->q_min);
    float delta=_float32_unpack(b->q_delta);
    float *r=calloc(n*b->dim,sizeof(*r));



    switch(b->maptype){
    case 1:







      quantvals=_book_maptype1_quantvals(b);
      for(j=0;j<b->entries;j++){
 if((sparsemap && b->lengthlist[j]) || !sparsemap){
   float last=0.f;
   int indexdiv=1;
   for(k=0;k<b->dim;k++){
     int index= (j/indexdiv)%quantvals;
     float val=b->quantlist[index];
     val=fabs(val)*delta+mindel+last;
     if(b->q_sequencep)last=val;
     if(sparsemap)
       r[sparsemap[count]*b->dim+k]=val;
     else
       r[count*b->dim+k]=val;
     indexdiv*=quantvals;
   }
   count++;
 }

      }
      break;
    case 2:
      for(j=0;j<b->entries;j++){
 if((sparsemap && b->lengthlist[j]) || !sparsemap){
   float last=0.f;

   for(k=0;k<b->dim;k++){
     float val=b->quantlist[j*b->dim+k];
     val=fabs(val)*delta+mindel+last;
     if(b->q_sequencep)last=val;
     if(sparsemap)
       r[sparsemap[count]*b->dim+k]=val;
     else
       r[count*b->dim+k]=val;
   }
   count++;
 }
      }
      break;
    }

    return(r);
  }
  return(
# 46221 "oggenc.c" 3 4
        ((void *)0)
# 46221 "oggenc.c"
            );
}

void vorbis_staticbook_clear(static_codebook *b){
  if(b->allocedp){
    if(b->quantlist)free(b->quantlist);
    if(b->lengthlist)free(b->lengthlist);
    if(b->nearest_tree){
      free(b->nearest_tree->ptr0);
      free(b->nearest_tree->ptr1);
      free(b->nearest_tree->p);
      free(b->nearest_tree->q);
      memset(b->nearest_tree,0,sizeof(*b->nearest_tree));
      free(b->nearest_tree);
    }
    if(b->thresh_tree){
      free(b->thresh_tree->quantthresh);
      free(b->thresh_tree->quantmap);
      memset(b->thresh_tree,0,sizeof(*b->thresh_tree));
      free(b->thresh_tree);
    }

    memset(b,0,sizeof(*b));
  }
}

void vorbis_staticbook_destroy(static_codebook *b){
  if(b->allocedp){
    vorbis_staticbook_clear(b);
    free(b);
  }
}

void vorbis_book_clear(codebook *b){


  if(b->valuelist)free(b->valuelist);
  if(b->codelist)free(b->codelist);

  if(b->dec_index)free(b->dec_index);
  if(b->dec_codelengths)free(b->dec_codelengths);
  if(b->dec_firsttable)free(b->dec_firsttable);

  memset(b,0,sizeof(*b));
}

int vorbis_book_init_encode(codebook *c,const static_codebook *s){

  memset(c,0,sizeof(*c));
  c->c=s;
  c->entries=s->entries;
  c->used_entries=s->entries;
  c->dim=s->dim;
  c->codelist=_make_words(s->lengthlist,s->entries,0);
  c->valuelist=_book_unquantize(s,s->entries,
# 46275 "oggenc.c" 3 4
                                            ((void *)0)
# 46275 "oggenc.c"
                                                );

  return(0);
}

static ogg_uint32_t bitreverse(ogg_uint32_t x){
  x= ((x>>16)&0x0000ffffUL) | ((x<<16)&0xffff0000UL);
  x= ((x>> 8)&0x00ff00ffUL) | ((x<< 8)&0xff00ff00UL);
  x= ((x>> 4)&0x0f0f0f0fUL) | ((x<< 4)&0xf0f0f0f0UL);
  x= ((x>> 2)&0x33333333UL) | ((x<< 2)&0xccccccccUL);
  return((x>> 1)&0x55555555UL) | ((x<< 1)&0xaaaaaaaaUL);
}

static int sort32a(const void *a,const void *b){
  return ( **(ogg_uint32_t **)a>**(ogg_uint32_t **)b)-
    ( **(ogg_uint32_t **)a<**(ogg_uint32_t **)b);
}


int vorbis_book_init_decode(codebook *c,const static_codebook *s){
  int i,j,n=0,tabn;
  int *sortindex;
  memset(c,0,sizeof(*c));


  for(i=0;i<s->entries;i++)
    if(s->lengthlist[i]>0)
      n++;

  c->entries=s->entries;
  c->used_entries=n;
  c->dim=s->dim;
# 46318 "oggenc.c"
  {

    ogg_uint32_t *codes=_make_words(s->lengthlist,s->entries,c->used_entries);
    ogg_uint32_t **codep=
# 46321 "oggenc.c" 3 4
                        __builtin_alloca (
# 46321 "oggenc.c"
                        sizeof(*codep)*n
# 46321 "oggenc.c" 3 4
                        )
# 46321 "oggenc.c"
                                                ;

    if(codes==
# 46323 "oggenc.c" 3 4
             ((void *)0)
# 46323 "oggenc.c"
                 )goto err_out;

    for(i=0;i<n;i++){
      codes[i]=bitreverse(codes[i]);
      codep[i]=codes+i;
    }

    qsort(codep,n,sizeof(*codep),sort32a);

    sortindex=
# 46332 "oggenc.c" 3 4
             __builtin_alloca (
# 46332 "oggenc.c"
             n*sizeof(*sortindex)
# 46332 "oggenc.c" 3 4
             )
# 46332 "oggenc.c"
                                         ;
    c->codelist=malloc(n*sizeof(*c->codelist));

    for(i=0;i<n;i++){
      int position=codep[i]-codes;
      sortindex[position]=i;
    }

    for(i=0;i<n;i++)
      c->codelist[sortindex[i]]=codes[i];
    free(codes);
  }

  c->valuelist=_book_unquantize(s,n,sortindex);
  c->dec_index=malloc(n*sizeof(*c->dec_index));

  for(n=0,i=0;i<s->entries;i++)
    if(s->lengthlist[i]>0)
      c->dec_index[sortindex[n++]]=i;

  c->dec_codelengths=malloc(n*sizeof(*c->dec_codelengths));
  for(n=0,i=0;i<s->entries;i++)
    if(s->lengthlist[i]>0)
      c->dec_codelengths[sortindex[n++]]=s->lengthlist[i];

  c->dec_firsttablen=_ilog(c->used_entries)-4;
  if(c->dec_firsttablen<5)c->dec_firsttablen=5;
  if(c->dec_firsttablen>8)c->dec_firsttablen=8;

  tabn=1<<c->dec_firsttablen;
  c->dec_firsttable=calloc(tabn,sizeof(*c->dec_firsttable));
  c->dec_maxlength=0;

  for(i=0;i<n;i++){
    if(c->dec_maxlength<c->dec_codelengths[i])
      c->dec_maxlength=c->dec_codelengths[i];
    if(c->dec_codelengths[i]<=c->dec_firsttablen){
      ogg_uint32_t orig=bitreverse(c->codelist[i]);
      for(j=0;j<(1<<(c->dec_firsttablen-c->dec_codelengths[i]));j++)
 c->dec_firsttable[orig|(j<<c->dec_codelengths[i])]=i+1;
    }
  }



  {
    ogg_uint32_t mask=0xfffffffeUL<<(31-c->dec_firsttablen);
    long lo=0,hi=0;

    for(i=0;i<tabn;i++){
      ogg_uint32_t word=i<<(32-c->dec_firsttablen);
      if(c->dec_firsttable[bitreverse(word)]==0){
 while((lo+1)<n && c->codelist[lo+1]<=word)lo++;
 while( hi<n && word>=(c->codelist[hi]&mask))hi++;




 {
   unsigned long loval=lo;
   unsigned long hival=n-hi;

   if(loval>0x7fff)loval=0x7fff;
   if(hival>0x7fff)hival=0x7fff;
   c->dec_firsttable[bitreverse(word)]=
     0x80000000UL | (loval<<15) | hival;
 }
      }
    }
  }


  return(0);
 err_out:
  vorbis_book_clear(c);
  return(-1);
}

static float _dist(int el,float *ref, float *b,int step){
  int i;
  float acc=0.f;
  for(i=0;i<el;i++){
    float val=(ref[i]-b[i*step]);
    acc+=val*val;
  }
  return(acc);
}

int _best(codebook *book, float *a, int step){
  encode_aux_threshmatch *tt=book->c->thresh_tree;





  int dim=book->dim;
  int k,o;




  if(tt){
    int index=0,i;

    for(k=0,o=step*(dim-1);k<dim;k++,o-=step){

      i=tt->threshvals>>1;
      if(a[o]<tt->quantthresh[i]){

 for(;i>0;i--)
   if(a[o]>=tt->quantthresh[i-1])
     break;

      }else{

 for(i++;i<tt->threshvals-1;i++)
   if(a[o]<tt->quantthresh[i])break;

      }

      index=(index*tt->quantvals)+tt->quantmap[i];
    }

    if(book->c->lengthlist[index]>0)


      return(index);
  }
# 46527 "oggenc.c"
  {
    const static_codebook *c=book->c;
    int i,besti=-1;
    float best=0.f;
    float *e=book->valuelist;
    for(i=0;i<book->entries;i++){
      if(c->lengthlist[i]>0){
 float this=_dist(dim,e,a,step);
 if(besti==-1 || this<best){
   best=this;
   besti=i;
 }
      }
      e+=dim;
    }
# 46557 "oggenc.c"
    return(besti);
  }
}

long vorbis_book_codeword(codebook *book,int entry){
  if(book->c)

    return book->codelist[entry];
  return -1;
}

long vorbis_book_codelen(codebook *book,int entry){
  if(book->c)

    return book->c->lengthlist[entry];
  return -1;
}
# 46594 "oggenc.c"
int vorbis_staticbook_pack(const static_codebook *c,oggpack_buffer *opb){
  long i,j;
  int ordered=0;


  oggpack_write(opb,0x564342,24);
  oggpack_write(opb,c->dim,16);
  oggpack_write(opb,c->entries,24);




  for(i=1;i<c->entries;i++)
    if(c->lengthlist[i-1]==0 || c->lengthlist[i]<c->lengthlist[i-1])break;
  if(i==c->entries)ordered=1;

  if(ordered){




    long count=0;
    oggpack_write(opb,1,1);
    oggpack_write(opb,c->lengthlist[0]-1,5);

    for(i=1;i<c->entries;i++){
      long this=c->lengthlist[i];
      long last=c->lengthlist[i-1];
      if(this>last){
 for(j=last;j<this;j++){
   oggpack_write(opb,i-count,_ilog(c->entries-count));
   count=i;
 }
      }
    }
    oggpack_write(opb,i-count,_ilog(c->entries-count));

  }else{


    oggpack_write(opb,0,1);




    for(i=0;i<c->entries;i++)
      if(c->lengthlist[i]==0)break;

    if(i==c->entries){
      oggpack_write(opb,0,1);
      for(i=0;i<c->entries;i++)
 oggpack_write(opb,c->lengthlist[i]-1,5);
    }else{
      oggpack_write(opb,1,1);
      for(i=0;i<c->entries;i++){
 if(c->lengthlist[i]==0){
   oggpack_write(opb,0,1);
 }else{
   oggpack_write(opb,1,1);
   oggpack_write(opb,c->lengthlist[i]-1,5);
 }
      }
    }
  }



  oggpack_write(opb,c->maptype,4);
  switch(c->maptype){
  case 0:

    break;
  case 1:case 2:



    if(!c->quantlist){

      return(-1);
    }


    oggpack_write(opb,c->q_min,32);
    oggpack_write(opb,c->q_delta,32);
    oggpack_write(opb,c->q_quant-1,4);
    oggpack_write(opb,c->q_sequencep,1);

    {
      int quantvals;
      switch(c->maptype){
      case 1:


 quantvals=_book_maptype1_quantvals(c);
 break;
      case 2:

 quantvals=c->entries*c->dim;
 break;
      default:
 quantvals=-1;
      }


      for(i=0;i<quantvals;i++)
 oggpack_write(opb,labs(c->quantlist[i]),c->q_quant);

    }
    break;
  default:

    return(-1);
  }

  return(0);
}



int vorbis_staticbook_unpack(oggpack_buffer *opb,static_codebook *s){
  long i,j;
  memset(s,0,sizeof(*s));
  s->allocedp=1;


  if(oggpack_read(opb,24)!=0x564342)goto _eofout;


  s->dim=oggpack_read(opb,16);
  s->entries=oggpack_read(opb,24);
  if(s->entries==-1)goto _eofout;


  switch((int)oggpack_read(opb,1)){
  case 0:

    s->lengthlist=malloc(sizeof(*s->lengthlist)*s->entries);


    if(oggpack_read(opb,1)){


      for(i=0;i<s->entries;i++){
 if(oggpack_read(opb,1)){
   long num=oggpack_read(opb,5);
   if(num==-1)goto _eofout;
   s->lengthlist[i]=num+1;
 }else
   s->lengthlist[i]=0;
      }
    }else{

      for(i=0;i<s->entries;i++){
 long num=oggpack_read(opb,5);
 if(num==-1)goto _eofout;
 s->lengthlist[i]=num+1;
      }
    }

    break;
  case 1:

    {
      long length=oggpack_read(opb,5)+1;
      s->lengthlist=malloc(sizeof(*s->lengthlist)*s->entries);

      for(i=0;i<s->entries;){
 long num=oggpack_read(opb,_ilog(s->entries-i));
 if(num==-1)goto _eofout;
 for(j=0;j<num && i<s->entries;j++,i++)
   s->lengthlist[i]=length;
 length++;
      }
    }
    break;
  default:

    return(-1);
  }


  switch((s->maptype=oggpack_read(opb,4))){
  case 0:

    break;
  case 1: case 2:



    s->q_min=oggpack_read(opb,32);
    s->q_delta=oggpack_read(opb,32);
    s->q_quant=oggpack_read(opb,4)+1;
    s->q_sequencep=oggpack_read(opb,1);

    {
      int quantvals=0;
      switch(s->maptype){
      case 1:
 quantvals=_book_maptype1_quantvals(s);
 break;
      case 2:
 quantvals=s->entries*s->dim;
 break;
      }


      s->quantlist=malloc(sizeof(*s->quantlist)*quantvals);
      for(i=0;i<quantvals;i++)
 s->quantlist[i]=oggpack_read(opb,s->q_quant);

      if(quantvals&&s->quantlist[quantvals-1]==-1)goto _eofout;
    }
    break;
  default:
    goto _errout;
  }


  return(0);

 _errout:
 _eofout:
  vorbis_staticbook_clear(s);
  return(-1);
}


int vorbis_book_encode(codebook *book, int a, oggpack_buffer *b){
  oggpack_write(b,book->codelist[a],book->c->lengthlist[a]);
  return(book->c->lengthlist[a]);
}
# 46841 "oggenc.c"
int vorbis_book_errorv(codebook *book,float *a){
  int dim=book->dim,k;
  int best=_best(book,a,1);
  for(k=0;k<dim;k++)
    a[k]=(book->valuelist+best*dim)[k];
  return(best);
}


int vorbis_book_encodev(codebook *book,int best,float *a,oggpack_buffer *b){
  int k,dim=book->dim;
  for(k=0;k<dim;k++)
    a[k]=(book->valuelist+best*dim)[k];
  return(vorbis_book_encode(book,best,b));
}
# 46865 "oggenc.c"
static __inline__ long decode_packed_entry_number(codebook *book, oggpack_buffer *b){
  int read=book->dec_maxlength;
  long lo,hi;
  long lok = oggpack_look(b,book->dec_firsttablen);

  if (lok >= 0) {
    long entry = book->dec_firsttable[lok];
    if(entry&0x80000000UL){
      lo=(entry>>15)&0x7fff;
      hi=book->used_entries-(entry&0x7fff);
    }else{
      oggpack_adv(b, book->dec_codelengths[entry-1]);
      return(entry-1);
    }
  }else{
    lo=0;
    hi=book->used_entries;
  }

  lok = oggpack_look(b, read);

  while(lok<0 && read>1)
    lok = oggpack_look(b, --read);
  if(lok<0)return -1;


  {
    ogg_uint32_t testword=bitreverse((ogg_uint32_t)lok);

    while(hi-lo>1){
      long p=(hi-lo)>>1;
      long test=book->codelist[lo+p]>testword;
      lo+=p&(test-1);
      hi-=p&(-test);
    }

    if(book->dec_codelengths[lo]<=read){
      oggpack_adv(b, book->dec_codelengths[lo]);
      return(lo);
    }
  }

  oggpack_adv(b, read);
  return(-1);
}
# 46926 "oggenc.c"
long vorbis_book_decode(codebook *book, oggpack_buffer *b){
  long packed_entry=decode_packed_entry_number(book,b);
  if(packed_entry>=0)
    return(book->dec_index[packed_entry]);


  return(packed_entry);
}


long vorbis_book_decodevs_add(codebook *book,float *a,oggpack_buffer *b,int n){
  int step=n/book->dim;
  long *entry = 
# 46938 "oggenc.c" 3 4
               __builtin_alloca (
# 46938 "oggenc.c"
               sizeof(*entry)*step
# 46938 "oggenc.c" 3 4
               )
# 46938 "oggenc.c"
                                          ;
  float **t = 
# 46939 "oggenc.c" 3 4
             __builtin_alloca (
# 46939 "oggenc.c"
             sizeof(*t)*step
# 46939 "oggenc.c" 3 4
             )
# 46939 "oggenc.c"
                                    ;
  int i,j,o;

  for (i = 0; i < step; i++) {
    entry[i]=decode_packed_entry_number(book,b);
    if(entry[i]==-1)return(-1);
    t[i] = book->valuelist+entry[i]*book->dim;
  }
  for(i=0,o=0;i<book->dim;i++,o+=step)
    for (j=0;j<step;j++)
      a[o+j]+=t[j][i];
  return(0);
}

long vorbis_book_decodev_add(codebook *book,float *a,oggpack_buffer *b,int n){
  int i,j,entry;
  float *t;

  if(book->dim>8){
    for(i=0;i<n;){
      entry = decode_packed_entry_number(book,b);
      if(entry==-1)return(-1);
      t = book->valuelist+entry*book->dim;
      for (j=0;j<book->dim;)
 a[i++]+=t[j++];
    }
  }else{
    for(i=0;i<n;){
      entry = decode_packed_entry_number(book,b);
      if(entry==-1)return(-1);
      t = book->valuelist+entry*book->dim;
      j=0;
      switch((int)book->dim){
      case 8:
 a[i++]+=t[j++];
      case 7:
 a[i++]+=t[j++];
      case 6:
 a[i++]+=t[j++];
      case 5:
 a[i++]+=t[j++];
      case 4:
 a[i++]+=t[j++];
      case 3:
 a[i++]+=t[j++];
      case 2:
 a[i++]+=t[j++];
      case 1:
 a[i++]+=t[j++];
      case 0:
 break;
      }
    }
  }
  return(0);
}

long vorbis_book_decodev_set(codebook *book,float *a,oggpack_buffer *b,int n){
  int i,j,entry;
  float *t;

  for(i=0;i<n;){
    entry = decode_packed_entry_number(book,b);
    if(entry==-1)return(-1);
    t = book->valuelist+entry*book->dim;
    for (j=0;j<book->dim;)
      a[i++]=t[j++];
  }
  return(0);
}

long vorbis_book_decodevv_add(codebook *book,float **a,long offset,int ch,
         oggpack_buffer *b,int n){
  long i,j,entry;
  int chptr=0;

  for(i=offset/ch;i<(offset+n)/ch;){
    entry = decode_packed_entry_number(book,b);
    if(entry==-1)return(-1);
    {
      const float *t = book->valuelist+entry*book->dim;
      for (j=0;j<book->dim;j++){
 a[chptr++][i]+=t[j];
 if(chptr==ch){
   chptr=0;
   i++;
 }
      }
    }
  }
  return(0);
}
# 47053 "oggenc.c"
extern vorbis_func_floor floor0_exportbundle;
extern vorbis_func_floor floor1_exportbundle;
extern vorbis_func_residue residue0_exportbundle;
extern vorbis_func_residue residue1_exportbundle;
extern vorbis_func_residue residue2_exportbundle;
extern vorbis_func_mapping mapping0_exportbundle;

vorbis_func_floor *_floor_P[]={
  &floor0_exportbundle,
  &floor1_exportbundle,
};

vorbis_func_residue *_residue_P[]={
  &residue0_exportbundle,
  &residue1_exportbundle,
  &residue2_exportbundle,
};

vorbis_func_mapping *_mapping_P[]={
  &mapping0_exportbundle,
};
# 47117 "oggenc.c"
void mdct_init(mdct_lookup *lookup,int n){
  int *bitrev=malloc(sizeof(*bitrev)*(n/4));
  float *T=malloc(sizeof(*T)*(n+n/4));

  int i;
  int n2=n>>1;
  int log2n=lookup->log2n=rint(log((float)n)/log(2.f));
  lookup->n=n;
  lookup->trig=T;
  lookup->bitrev=bitrev;



  for(i=0;i<n/4;i++){
    T[i*2]=(cos((
# 47131 "oggenc.c" 3 4
          3.14159265358979323846
# 47131 "oggenc.c"
          /n)*(4*i)));
    T[i*2+1]=(-sin((
# 47132 "oggenc.c" 3 4
            3.14159265358979323846
# 47132 "oggenc.c"
            /n)*(4*i)));
    T[n2+i*2]=(cos((
# 47133 "oggenc.c" 3 4
             3.14159265358979323846
# 47133 "oggenc.c"
             /(2*n))*(2*i+1)));
    T[n2+i*2+1]=(sin((
# 47134 "oggenc.c" 3 4
               3.14159265358979323846
# 47134 "oggenc.c"
               /(2*n))*(2*i+1)));
  }
  for(i=0;i<n/8;i++){
    T[n+i*2]=(cos((
# 47137 "oggenc.c" 3 4
            3.14159265358979323846
# 47137 "oggenc.c"
            /n)*(4*i+2))*.5);
    T[n+i*2+1]=(-sin((
# 47138 "oggenc.c" 3 4
              3.14159265358979323846
# 47138 "oggenc.c"
              /n)*(4*i+2))*.5);
  }



  {
    int mask=(1<<(log2n-1))-1,i,j;
    int msb=1<<(log2n-2);
    for(i=0;i<n/8;i++){
      int acc=0;
      for(j=0;msb>>j;j++)
 if((msb>>j)&i)acc|=1<<j;
      bitrev[i*2]=((~acc)&mask)-1;
      bitrev[i*2+1]=acc;

    }
  }
  lookup->scale=(4.f/n);
}


static __inline__ void mdct_butterfly_8(float *x){
  float r0 = x[6] + x[2];
  float r1 = x[6] - x[2];
  float r2 = x[4] + x[0];
  float r3 = x[4] - x[0];

    x[6] = r0 + r2;
    x[4] = r0 - r2;

    r0 = x[5] - x[1];
    r2 = x[7] - x[3];
    x[0] = r1 + r0;
    x[2] = r1 - r0;

    r0 = x[5] + x[1];
    r1 = x[7] + x[3];
    x[3] = r2 + r3;
    x[1] = r2 - r3;
    x[7] = r1 + r0;
    x[5] = r1 - r0;

}


static __inline__ void mdct_butterfly_16(float *x){
  float r0 = x[1] - x[9];
  float r1 = x[0] - x[8];

           x[8] += x[0];
           x[9] += x[1];
           x[0] = ((r0 + r1) * .70710678118654752441F);
           x[1] = ((r0 - r1) * .70710678118654752441F);

           r0 = x[3] - x[11];
           r1 = x[10] - x[2];
           x[10] += x[2];
           x[11] += x[3];
           x[2] = r0;
           x[3] = r1;

           r0 = x[12] - x[4];
           r1 = x[13] - x[5];
           x[12] += x[4];
           x[13] += x[5];
           x[4] = ((r0 - r1) * .70710678118654752441F);
           x[5] = ((r0 + r1) * .70710678118654752441F);

           r0 = x[14] - x[6];
           r1 = x[15] - x[7];
           x[14] += x[6];
           x[15] += x[7];
           x[6] = r0;
           x[7] = r1;

    mdct_butterfly_8(x);
    mdct_butterfly_8(x+8);
}


static __inline__ void mdct_butterfly_32(float *x){
  float r0 = x[30] - x[14];
  float r1 = x[31] - x[15];

           x[30] += x[14];
    x[31] += x[15];
           x[14] = r0;
    x[15] = r1;

           r0 = x[28] - x[12];
    r1 = x[29] - x[13];
           x[28] += x[12];
    x[29] += x[13];
           x[12] = (r0 * .92387953251128675613F - r1 * .38268343236508977175F);
    x[13] = (r0 * .38268343236508977175F + r1 * .92387953251128675613F);

           r0 = x[26] - x[10];
    r1 = x[27] - x[11];
    x[26] += x[10];
    x[27] += x[11];
    x[10] = (( r0 - r1 ) * .70710678118654752441F);
    x[11] = (( r0 + r1 ) * .70710678118654752441F);

    r0 = x[24] - x[8];
    r1 = x[25] - x[9];
    x[24] += x[8];
    x[25] += x[9];
    x[8] = (r0 * .38268343236508977175F - r1 * .92387953251128675613F);
    x[9] = (r1 * .38268343236508977175F + r0 * .92387953251128675613F);

    r0 = x[22] - x[6];
    r1 = x[7] - x[23];
    x[22] += x[6];
    x[23] += x[7];
    x[6] = r1;
    x[7] = r0;

    r0 = x[4] - x[20];
    r1 = x[5] - x[21];
    x[20] += x[4];
    x[21] += x[5];
    x[4] = (r1 * .92387953251128675613F + r0 * .38268343236508977175F);
    x[5] = (r1 * .38268343236508977175F - r0 * .92387953251128675613F);

    r0 = x[2] - x[18];
    r1 = x[3] - x[19];
    x[18] += x[2];
    x[19] += x[3];
    x[2] = (( r1 + r0 ) * .70710678118654752441F);
    x[3] = (( r1 - r0 ) * .70710678118654752441F);

    r0 = x[0] - x[16];
    r1 = x[1] - x[17];
    x[16] += x[0];
    x[17] += x[1];
    x[0] = (r1 * .38268343236508977175F + r0 * .92387953251128675613F);
    x[1] = (r1 * .92387953251128675613F - r0 * .38268343236508977175F);

    mdct_butterfly_16(x);
    mdct_butterfly_16(x+16);

}


static __inline__ void mdct_butterfly_first(float *T,
     float *x,
     int points){

  float *x1 = x + points - 8;
  float *x2 = x + (points>>1) - 8;
  float r0;
  float r1;

  do{

               r0 = x1[6] - x2[6];
        r1 = x1[7] - x2[7];
        x1[6] += x2[6];
        x1[7] += x2[7];
        x2[6] = (r1 * T[1] + r0 * T[0]);
        x2[7] = (r1 * T[0] - r0 * T[1]);

        r0 = x1[4] - x2[4];
        r1 = x1[5] - x2[5];
        x1[4] += x2[4];
        x1[5] += x2[5];
        x2[4] = (r1 * T[5] + r0 * T[4]);
        x2[5] = (r1 * T[4] - r0 * T[5]);

        r0 = x1[2] - x2[2];
        r1 = x1[3] - x2[3];
        x1[2] += x2[2];
        x1[3] += x2[3];
        x2[2] = (r1 * T[9] + r0 * T[8]);
        x2[3] = (r1 * T[8] - r0 * T[9]);

        r0 = x1[0] - x2[0];
        r1 = x1[1] - x2[1];
        x1[0] += x2[0];
        x1[1] += x2[1];
        x2[0] = (r1 * T[13] + r0 * T[12]);
        x2[1] = (r1 * T[12] - r0 * T[13]);

    x1-=8;
    x2-=8;
    T+=16;

  }while(x2>=x);
}


static __inline__ void mdct_butterfly_generic(float *T,
       float *x,
       int points,
       int trigint){

  float *x1 = x + points - 8;
  float *x2 = x + (points>>1) - 8;
  float r0;
  float r1;

  do{

               r0 = x1[6] - x2[6];
        r1 = x1[7] - x2[7];
        x1[6] += x2[6];
        x1[7] += x2[7];
        x2[6] = (r1 * T[1] + r0 * T[0]);
        x2[7] = (r1 * T[0] - r0 * T[1]);

        T+=trigint;

        r0 = x1[4] - x2[4];
        r1 = x1[5] - x2[5];
        x1[4] += x2[4];
        x1[5] += x2[5];
        x2[4] = (r1 * T[1] + r0 * T[0]);
        x2[5] = (r1 * T[0] - r0 * T[1]);

        T+=trigint;

        r0 = x1[2] - x2[2];
        r1 = x1[3] - x2[3];
        x1[2] += x2[2];
        x1[3] += x2[3];
        x2[2] = (r1 * T[1] + r0 * T[0]);
        x2[3] = (r1 * T[0] - r0 * T[1]);

        T+=trigint;

        r0 = x1[0] - x2[0];
        r1 = x1[1] - x2[1];
        x1[0] += x2[0];
        x1[1] += x2[1];
        x2[0] = (r1 * T[1] + r0 * T[0]);
        x2[1] = (r1 * T[0] - r0 * T[1]);

        T+=trigint;
    x1-=8;
    x2-=8;

  }while(x2>=x);
}

static __inline__ void mdct_butterflies(mdct_lookup *init,
        float *x,
        int points){

  float *T=init->trig;
  int stages=init->log2n-5;
  int i,j;

  if(--stages>0){
    mdct_butterfly_first(T,x,points);
  }

  for(i=1;--stages>0;i++){
    for(j=0;j<(1<<i);j++)
      mdct_butterfly_generic(T,x+(points>>i)*j,points>>i,4<<i);
  }

  for(j=0;j<points;j+=32)
    mdct_butterfly_32(x+j);

}

void mdct_clear(mdct_lookup *l){
  if(l){
    if(l->trig)free(l->trig);
    if(l->bitrev)free(l->bitrev);
    memset(l,0,sizeof(*l));
  }
}

static __inline__ void mdct_bitreverse(mdct_lookup *init,
       float *x){
  int n = init->n;
  int *bit = init->bitrev;
  float *w0 = x;
  float *w1 = x = w0+(n>>1);
  float *T = init->trig+n;

  do{
    float *x0 = x+bit[0];
    float *x1 = x+bit[1];

    float r0 = x0[1] - x1[1];
    float r1 = x0[0] + x1[0];
    float r2 = (r1 * T[0] + r0 * T[1]);
    float r3 = (r1 * T[1] - r0 * T[0]);

       w1 -= 4;

              r0 = ((x0[1] + x1[1])*.5f);
              r1 = ((x0[0] - x1[0])*.5f);

       w0[0] = r0 + r2;
       w1[2] = r0 - r2;
       w0[1] = r1 + r3;
       w1[3] = r3 - r1;

              x0 = x+bit[2];
              x1 = x+bit[3];

              r0 = x0[1] - x1[1];
              r1 = x0[0] + x1[0];
              r2 = (r1 * T[2] + r0 * T[3]);
              r3 = (r1 * T[3] - r0 * T[2]);

              r0 = ((x0[1] + x1[1])*.5f);
              r1 = ((x0[0] - x1[0])*.5f);

       w0[2] = r0 + r2;
       w1[0] = r0 - r2;
       w0[3] = r1 + r3;
       w1[1] = r3 - r1;

       T += 4;
       bit += 4;
       w0 += 4;

  }while(w0<w1);
}

void mdct_backward(mdct_lookup *init, float *in, float *out){
  int n=init->n;
  int n2=n>>1;
  int n4=n>>2;



  float *iX = in+n2-7;
  float *oX = out+n2+n4;
  float *T = init->trig+n4;

  do{
    oX -= 4;
    oX[0] = (-iX[2] * T[3] - iX[0] * T[2]);
    oX[1] = (iX[0] * T[3] - iX[2] * T[2]);
    oX[2] = (-iX[6] * T[1] - iX[4] * T[0]);
    oX[3] = (iX[4] * T[1] - iX[6] * T[0]);
    iX -= 8;
    T += 4;
  }while(iX>=in);

  iX = in+n2-8;
  oX = out+n2+n4;
  T = init->trig+n4;

  do{
    T -= 4;
    oX[0] = (iX[4] * T[3] + iX[6] * T[2]);
    oX[1] = (iX[4] * T[2] - iX[6] * T[3]);
    oX[2] = (iX[0] * T[1] + iX[2] * T[0]);
    oX[3] = (iX[0] * T[0] - iX[2] * T[1]);
    iX -= 8;
    oX += 4;
  }while(iX>=in);

  mdct_butterflies(init,out+n2,n2);
  mdct_bitreverse(init,out);



  {
    float *oX1=out+n2+n4;
    float *oX2=out+n2+n4;
    float *iX =out;
    T =init->trig+n2;

    do{
      oX1-=4;

      oX1[3] = (iX[0] * T[1] - iX[1] * T[0]);
      oX2[0] = -(iX[0] * T[0] + iX[1] * T[1]);

      oX1[2] = (iX[2] * T[3] - iX[3] * T[2]);
      oX2[1] = -(iX[2] * T[2] + iX[3] * T[3]);

      oX1[1] = (iX[4] * T[5] - iX[5] * T[4]);
      oX2[2] = -(iX[4] * T[4] + iX[5] * T[5]);

      oX1[0] = (iX[6] * T[7] - iX[7] * T[6]);
      oX2[3] = -(iX[6] * T[6] + iX[7] * T[7]);

      oX2+=4;
      iX += 8;
      T += 8;
    }while(iX<oX1);

    iX=out+n2+n4;
    oX1=out+n4;
    oX2=oX1;

    do{
      oX1-=4;
      iX-=4;

      oX2[0] = -(oX1[3] = iX[3]);
      oX2[1] = -(oX1[2] = iX[2]);
      oX2[2] = -(oX1[1] = iX[1]);
      oX2[3] = -(oX1[0] = iX[0]);

      oX2+=4;
    }while(oX2<iX);

    iX=out+n2+n4;
    oX1=out+n2+n4;
    oX2=out+n2;
    do{
      oX1-=4;
      oX1[0]= iX[3];
      oX1[1]= iX[2];
      oX1[2]= iX[1];
      oX1[3]= iX[0];
      iX+=4;
    }while(oX1>oX2);
  }
}

void mdct_forward(mdct_lookup *init, float *in, float *out){
  int n=init->n;
  int n2=n>>1;
  int n4=n>>2;
  int n8=n>>3;
  float *w=
# 47563 "oggenc.c" 3 4
              __builtin_alloca (
# 47563 "oggenc.c"
              n*sizeof(*w)
# 47563 "oggenc.c" 3 4
              )
# 47563 "oggenc.c"
                                  ;
  float *w2=w+n2;





  float r0;
  float r1;
  float *x0=in+n2+n4;
  float *x1=x0+1;
  float *T=init->trig+n2;

  int i=0;

  for(i=0;i<n8;i+=2){
    x0 -=4;
    T-=2;
    r0= x0[2] + x1[0];
    r1= x0[0] + x1[2];
    w2[i]= (r1*T[1] + r0*T[0]);
    w2[i+1]= (r1*T[0] - r0*T[1]);
    x1 +=4;
  }

  x1=in+1;

  for(;i<n2-n8;i+=2){
    T-=2;
    x0 -=4;
    r0= x0[2] - x1[0];
    r1= x0[0] - x1[2];
    w2[i]= (r1*T[1] + r0*T[0]);
    w2[i+1]= (r1*T[0] - r0*T[1]);
    x1 +=4;
  }

  x0=in+n;

  for(;i<n2;i+=2){
    T-=2;
    x0 -=4;
    r0= -x0[2] - x1[0];
    r1= -x0[0] - x1[2];
    w2[i]= (r1*T[1] + r0*T[0]);
    w2[i+1]= (r1*T[0] - r0*T[1]);
    x1 +=4;
  }


  mdct_butterflies(init,w+n2,n2);
  mdct_bitreverse(init,w);



  T=init->trig+n2;
  x0=out+n2;

  for(i=0;i<n4;i++){
    x0--;
    out[i] =((w[0]*T[0]+w[1]*T[1])*init->scale);
    x0[0] =((w[0]*T[1]-w[1]*T[0])*init->scale);
    w+=2;
    T+=2;
  }
}
# 47670 "oggenc.c"
static float ATH[]={
          -51, -52, -53, -54, -55, -56, -57, -58,
          -59, -60, -61, -62, -63, -64, -65, -66,
          -67, -68, -69, -70, -71, -72, -73, -74,
          -75, -76, -77, -78, -80, -81, -82, -83,
          -84, -85, -86, -87, -88, -88, -89, -89,
          -90, -91, -91, -92, -93, -94, -95, -96,
          -96, -97, -98, -98, -99, -99,-100,-100,
         -101,-102,-103,-104,-106,-107,-107,-107,
         -107,-105,-103,-102,-101, -99, -98, -96,
          -95, -95, -96, -97, -96, -95, -93, -90,
          -80, -70, -50, -40, -30, -30, -30, -30
};
# 47696 "oggenc.c"
static float tonemasks[17][6][56]={

  {{ -60, -60, -60, -60, -60, -60, -60, -60,
     -60, -60, -60, -60, -62, -62, -65, -73,
     -69, -68, -68, -67, -70, -70, -72, -74,
     -75, -79, -79, -80, -83, -88, -93, -100,
     -110, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -48, -48, -48, -48, -48, -48, -48, -48,
     -48, -48, -48, -48, -48, -53, -61, -66,
     -66, -68, -67, -70, -76, -76, -72, -73,
     -75, -76, -78, -79, -83, -88, -93, -100,
     -110, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -37, -37, -37, -37, -37, -37, -37, -37,
     -38, -40, -42, -46, -48, -53, -55, -62,
     -65, -58, -56, -56, -61, -60, -65, -67,
     -69, -71, -77, -77, -78, -80, -82, -84,
     -88, -93, -98, -106, -112, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -25, -25, -25, -25, -25, -25, -25, -25,
     -25, -26, -27, -29, -32, -38, -48, -52,
     -52, -50, -48, -48, -51, -52, -54, -60,
     -67, -67, -66, -68, -69, -73, -73, -76,
     -80, -81, -81, -85, -85, -86, -88, -93,
     -100, -110, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -16, -16, -16, -16, -16, -16, -16, -16,
     -17, -19, -20, -22, -26, -28, -31, -40,
     -47, -39, -39, -40, -42, -43, -47, -51,
     -57, -52, -55, -55, -60, -58, -62, -63,
     -70, -67, -69, -72, -73, -77, -80, -82,
     -83, -87, -90, -94, -98, -104, -115, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -8, -8, -8, -8, -8, -8, -8, -8,
      -8, -8, -10, -11, -15, -19, -25, -30,
      -34, -31, -30, -31, -29, -32, -35, -42,
      -48, -42, -44, -46, -50, -50, -51, -52,
      -59, -54, -55, -55, -58, -62, -63, -66,
      -72, -73, -76, -75, -78, -80, -80, -81,
      -84, -88, -90, -94, -98, -101, -106, -110}},

  {{ -66, -66, -66, -66, -66, -66, -66, -66,
     -66, -66, -66, -66, -66, -67, -67, -67,
     -76, -72, -71, -74, -76, -76, -75, -78,
     -79, -79, -81, -83, -86, -89, -93, -97,
     -100, -105, -110, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -47, -47, -47, -47, -47, -47, -47, -47,
     -47, -47, -47, -48, -51, -55, -59, -66,
     -66, -66, -67, -66, -68, -69, -70, -74,
     -79, -77, -77, -78, -80, -81, -82, -84,
     -86, -88, -91, -95, -100, -108, -116, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -36, -36, -36, -36, -36, -36, -36, -36,
     -36, -37, -37, -41, -44, -48, -51, -58,
     -62, -60, -57, -59, -59, -60, -63, -65,
     -72, -71, -70, -72, -74, -77, -76, -78,
     -81, -81, -80, -83, -86, -91, -96, -100,
     -105, -110, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -28, -28, -28, -28, -28, -28, -28, -28,
     -28, -30, -32, -32, -33, -35, -41, -49,
     -50, -49, -47, -48, -48, -52, -51, -57,
     -65, -61, -59, -61, -64, -69, -70, -74,
     -77, -77, -78, -81, -84, -85, -87, -90,
     -92, -96, -100, -107, -112, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -19, -19, -19, -19, -19, -19, -19, -19,
     -20, -21, -23, -27, -30, -35, -36, -41,
     -46, -44, -42, -40, -41, -41, -43, -48,
     -55, -53, -52, -53, -56, -59, -58, -60,
     -67, -66, -69, -71, -72, -75, -79, -81,
     -84, -87, -90, -93, -97, -101, -107, -114,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -9, -9, -9, -9, -9, -9, -9, -9,
      -11, -12, -12, -15, -16, -20, -23, -30,
      -37, -34, -33, -34, -31, -32, -32, -38,
      -47, -44, -41, -40, -47, -49, -46, -46,
      -58, -50, -50, -54, -58, -62, -64, -67,
      -67, -70, -72, -76, -79, -83, -87, -91,
      -96, -100, -104, -110, -999, -999, -999, -999}},

  {{ -62, -62, -62, -62, -62, -62, -62, -62,
     -62, -62, -63, -64, -66, -67, -66, -68,
     -75, -72, -76, -75, -76, -78, -79, -82,
     -84, -85, -90, -94, -101, -110, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -59, -59, -59, -59, -59, -59, -59, -59,
     -59, -59, -59, -60, -60, -61, -63, -66,
     -71, -68, -70, -70, -71, -72, -72, -75,
     -81, -78, -79, -82, -83, -86, -90, -97,
     -103, -113, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -53, -53, -53, -53, -53, -53, -53, -53,
     -53, -54, -55, -57, -56, -57, -55, -61,
     -65, -60, -60, -62, -63, -63, -66, -68,
     -74, -73, -75, -75, -78, -80, -80, -82,
     -85, -90, -96, -101, -108, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -46, -46, -46, -46, -46, -46, -46, -46,
     -46, -46, -47, -47, -47, -47, -48, -51,
     -57, -51, -49, -50, -51, -53, -54, -59,
     -66, -60, -62, -67, -67, -70, -72, -75,
     -76, -78, -81, -85, -88, -94, -97, -104,
     -112, -999, -999, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -36, -36, -36, -36, -36, -36, -36, -36,
     -39, -41, -42, -42, -39, -38, -41, -43,
     -52, -44, -40, -39, -37, -37, -40, -47,
     -54, -50, -48, -50, -55, -61, -59, -62,
     -66, -66, -66, -69, -69, -73, -74, -74,
     -75, -77, -79, -82, -87, -91, -95, -100,
     -108, -115, -999, -999, -999, -999, -999, -999},
   { -28, -26, -24, -22, -20, -20, -23, -29,
     -30, -31, -28, -27, -28, -28, -28, -35,
     -40, -33, -32, -29, -30, -30, -30, -37,
     -45, -41, -37, -38, -45, -47, -47, -48,
     -53, -49, -48, -50, -49, -49, -51, -52,
     -58, -56, -57, -56, -60, -61, -62, -70,
     -72, -74, -78, -83, -88, -93, -100, -106}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -110, -105, -100, -95, -91, -87, -83,
    -80, -78, -76, -78, -78, -81, -83, -85,
    -86, -85, -86, -87, -90, -97, -107, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -110, -105, -100, -95, -90,
    -85, -81, -77, -73, -70, -67, -67, -68,
    -75, -73, -70, -69, -70, -72, -75, -79,
    -84, -83, -84, -86, -88, -89, -89, -93,
    -98, -105, -112, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-105, -100, -95, -90, -85, -80, -76, -71,
    -68, -68, -65, -63, -63, -62, -62, -64,
    -65, -64, -61, -62, -63, -64, -66, -68,
    -73, -73, -74, -75, -76, -81, -83, -85,
    -88, -89, -92, -95, -100, -108, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   { -80, -75, -71, -68, -65, -63, -62, -61,
     -61, -61, -61, -59, -56, -57, -53, -50,
     -58, -52, -50, -50, -52, -53, -54, -58,
     -67, -63, -67, -68, -72, -75, -78, -80,
     -81, -81, -82, -85, -89, -90, -93, -97,
     -101, -107, -114, -999, -999, -999, -999, -999,
     -999, -999, -999, -999, -999, -999, -999, -999},
   { -65, -61, -59, -57, -56, -55, -55, -56,
     -56, -57, -55, -53, -52, -47, -44, -44,
     -50, -44, -41, -39, -39, -42, -40, -46,
     -51, -49, -50, -53, -54, -63, -60, -61,
     -62, -66, -66, -66, -70, -73, -74, -75,
     -76, -75, -79, -85, -89, -91, -96, -102,
     -110, -999, -999, -999, -999, -999, -999, -999},
   { -52, -50, -49, -49, -48, -48, -48, -49,
     -50, -50, -49, -46, -43, -39, -35, -33,
     -38, -36, -32, -29, -32, -32, -32, -35,
     -44, -39, -38, -38, -46, -50, -45, -46,
     -53, -50, -50, -50, -54, -54, -53, -53,
     -56, -57, -59, -66, -70, -72, -74, -79,
     -83, -85, -90, -97, -114, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -110, -105,
    -100, -95, -90, -86, -80, -75, -75, -79,
    -80, -79, -80, -81, -82, -88, -95, -103,
    -110, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -108, -103, -98, -93,
    -88, -83, -79, -78, -75, -71, -67, -68,
    -73, -73, -72, -73, -75, -77, -80, -82,
    -88, -93, -100, -107, -114, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -110, -105, -101, -96, -90,
    -86, -81, -77, -73, -69, -66, -61, -62,
    -66, -64, -62, -65, -66, -70, -72, -76,
    -81, -80, -84, -90, -95, -102, -110, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -107, -103, -97, -92, -88,
    -83, -79, -74, -70, -66, -59, -53, -58,
    -62, -55, -54, -54, -54, -58, -61, -62,
    -72, -70, -72, -75, -78, -80, -81, -80,
    -83, -83, -88, -93, -100, -107, -115, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -105, -100, -95, -90, -85,
    -80, -75, -70, -66, -62, -56, -48, -44,
    -48, -46, -46, -43, -46, -48, -48, -51,
    -58, -58, -59, -60, -62, -62, -61, -61,
    -65, -64, -65, -68, -70, -74, -75, -78,
    -81, -86, -95, -110, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -105, -100, -95, -90, -85, -80,
    -75, -70, -65, -61, -55, -49, -39, -33,
    -40, -35, -32, -38, -40, -33, -35, -37,
    -46, -41, -45, -44, -46, -42, -45, -46,
    -52, -50, -50, -50, -54, -54, -55, -57,
    -62, -64, -66, -68, -70, -76, -81, -90,
    -100, -110, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -105, -98, -90, -85, -82, -83, -80, -78,
    -84, -79, -80, -83, -87, -89, -91, -93,
    -99, -106, -117, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -105, -98, -90, -85, -80, -75, -70, -68,
    -74, -72, -74, -77, -80, -82, -85, -87,
    -92, -89, -91, -95, -100, -106, -112, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -105, -98, -90, -83, -75, -71, -63, -64,
    -67, -62, -64, -67, -70, -73, -77, -81,
    -84, -83, -85, -89, -90, -93, -98, -104,
    -109, -114, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -103, -96, -88, -81, -75, -68, -58, -54,
    -56, -54, -56, -56, -58, -60, -63, -66,
    -74, -69, -72, -72, -75, -74, -77, -81,
    -81, -82, -84, -87, -93, -96, -99, -104,
    -110, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -108, -102, -96,
    -91, -85, -80, -74, -68, -60, -51, -46,
    -48, -46, -43, -45, -47, -47, -49, -48,
    -56, -53, -55, -58, -57, -63, -58, -60,
    -66, -64, -67, -70, -70, -74, -77, -84,
    -86, -89, -91, -93, -94, -101, -109, -118,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -108, -103, -98, -93, -88,
    -83, -78, -73, -68, -60, -53, -44, -35,
    -38, -38, -34, -34, -36, -40, -41, -44,
    -51, -45, -46, -47, -46, -54, -50, -49,
    -50, -50, -50, -51, -54, -57, -58, -60,
    -66, -66, -66, -64, -65, -68, -77, -82,
    -87, -95, -110, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -107, -102, -97, -92, -87, -83, -78, -75,
    -82, -79, -83, -85, -89, -92, -95, -98,
    -101, -105, -109, -113, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -106,
    -100, -95, -90, -86, -81, -78, -74, -69,
    -74, -74, -76, -79, -83, -84, -86, -89,
    -92, -97, -93, -100, -103, -107, -110, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -106, -100,
    -95, -90, -87, -83, -80, -75, -69, -60,
    -66, -66, -68, -70, -74, -78, -79, -81,
    -81, -83, -84, -87, -93, -96, -99, -103,
    -107, -110, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -108, -103, -98,
    -93, -89, -85, -82, -78, -71, -62, -55,
    -58, -58, -54, -54, -55, -59, -61, -62,
    -70, -66, -66, -67, -70, -72, -75, -78,
    -84, -84, -84, -88, -91, -90, -95, -98,
    -102, -103, -106, -110, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -108, -103, -98, -94,
    -90, -87, -82, -79, -73, -67, -58, -47,
    -50, -45, -41, -45, -48, -44, -44, -49,
    -54, -51, -48, -47, -49, -50, -51, -57,
    -58, -60, -63, -69, -70, -69, -71, -74,
    -78, -82, -90, -95, -101, -105, -110, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -105, -101, -97, -93, -90,
    -85, -80, -77, -72, -65, -56, -48, -37,
    -40, -36, -34, -40, -50, -47, -38, -41,
    -47, -38, -35, -39, -38, -43, -40, -45,
    -50, -45, -44, -47, -50, -55, -48, -48,
    -52, -66, -70, -76, -82, -90, -97, -105,
    -110, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -108, -103, -98, -93, -86, -79, -76,
    -83, -81, -85, -87, -89, -93, -98, -102,
    -107, -112, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -108, -103, -98, -93, -86, -79, -71,
    -77, -74, -77, -79, -81, -84, -85, -90,
    -92, -93, -92, -98, -101, -108, -112, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -108, -103, -98, -93, -87, -78, -68, -65,
    -66, -62, -65, -67, -70, -73, -75, -78,
    -82, -82, -83, -84, -91, -93, -98, -102,
    -106, -110, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -105, -100, -95, -90, -82, -74, -62, -57,
    -58, -56, -51, -52, -52, -54, -54, -58,
    -66, -59, -60, -63, -66, -69, -73, -79,
    -83, -84, -80, -81, -81, -82, -88, -92,
    -98, -105, -113, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -107,
    -102, -97, -92, -84, -79, -69, -57, -47,
    -52, -47, -44, -45, -50, -52, -42, -42,
    -53, -43, -43, -48, -51, -56, -55, -52,
    -57, -59, -61, -62, -67, -71, -78, -83,
    -86, -94, -98, -103, -110, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -105, -100,
    -95, -90, -84, -78, -70, -61, -51, -41,
    -40, -38, -40, -46, -52, -51, -41, -40,
    -46, -40, -38, -38, -41, -46, -41, -46,
    -47, -43, -43, -45, -41, -45, -56, -67,
    -68, -83, -87, -90, -95, -102, -107, -113,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -109, -105, -101, -96, -91, -84, -77,
    -82, -82, -85, -89, -94, -100, -106, -110,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -106, -103, -98, -92, -85, -80, -71,
    -75, -72, -76, -80, -84, -86, -89, -93,
    -100, -107, -113, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -107,
    -104, -101, -97, -92, -88, -84, -80, -64,
    -66, -63, -64, -66, -69, -73, -77, -83,
    -83, -86, -91, -98, -104, -111, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -107,
    -104, -101, -97, -92, -90, -84, -74, -57,
    -58, -52, -55, -54, -50, -52, -50, -52,
    -63, -62, -69, -76, -77, -78, -78, -79,
    -82, -88, -94, -100, -106, -111, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -106, -102,
    -98, -95, -90, -85, -83, -78, -70, -50,
    -50, -41, -44, -49, -47, -50, -50, -44,
    -55, -46, -47, -48, -48, -54, -49, -49,
    -58, -62, -71, -81, -87, -92, -97, -102,
    -108, -114, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -106, -102,
    -98, -95, -90, -85, -83, -78, -70, -45,
    -43, -41, -47, -50, -51, -50, -49, -45,
    -47, -41, -44, -41, -39, -43, -38, -37,
    -40, -41, -44, -50, -58, -65, -73, -79,
    -85, -92, -97, -101, -105, -109, -113, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -107, -100, -95, -87, -81,
    -85, -83, -88, -93, -100, -107, -114, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -107, -101, -95, -88, -83, -76,
    -73, -72, -79, -84, -90, -95, -100, -105,
    -110, -115, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -104, -98, -92, -87, -81, -70,
    -65, -62, -67, -71, -74, -80, -85, -91,
    -95, -99, -103, -108, -111, -114, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -103, -97, -90, -85, -76, -60,
    -56, -54, -60, -62, -61, -56, -63, -65,
    -73, -74, -77, -75, -78, -81, -86, -87,
    -88, -91, -94, -98, -103, -110, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -105,
    -100, -97, -92, -86, -81, -79, -70, -57,
    -51, -47, -51, -58, -60, -56, -53, -50,
    -58, -52, -50, -50, -53, -55, -64, -69,
    -71, -85, -82, -78, -81, -85, -95, -102,
    -112, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -105,
    -100, -97, -92, -85, -83, -79, -72, -49,
    -40, -43, -43, -54, -56, -51, -50, -40,
    -43, -38, -36, -35, -37, -38, -37, -44,
    -54, -60, -57, -60, -70, -75, -84, -92,
    -103, -112, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -102, -95, -89, -82,
    -83, -84, -90, -92, -99, -107, -113, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -107, -101, -95, -89, -83, -72,
    -74, -78, -85, -88, -88, -90, -92, -98,
    -105, -111, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -109, -103, -97, -93, -87, -81, -70,
    -70, -67, -75, -73, -76, -79, -81, -83,
    -88, -89, -97, -103, -110, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -107, -100, -94, -88, -83, -75, -63,
    -59, -59, -63, -66, -60, -62, -67, -67,
    -77, -76, -81, -88, -86, -92, -96, -102,
    -109, -116, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -105, -98, -92, -86, -81, -73, -56,
    -52, -47, -55, -60, -58, -52, -51, -45,
    -49, -50, -53, -54, -61, -71, -70, -69,
    -78, -79, -87, -90, -96, -104, -112, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -103, -96, -90, -86, -78, -70, -51,
    -42, -47, -48, -55, -54, -54, -53, -42,
    -35, -28, -33, -38, -37, -44, -47, -49,
    -54, -63, -68, -78, -82, -89, -94, -99,
    -104, -109, -114, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -110, -100, -90, -79,
    -85, -81, -82, -82, -89, -94, -99, -103,
    -109, -115, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -105, -97, -85, -72,
    -74, -70, -70, -70, -76, -85, -91, -93,
    -97, -103, -109, -115, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -112, -93, -81, -68,
    -62, -60, -60, -57, -63, -70, -77, -82,
    -90, -93, -98, -104, -109, -113, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -113, -100, -93, -84, -63,
    -58, -48, -53, -54, -52, -52, -57, -64,
    -66, -76, -83, -81, -85, -85, -90, -95,
    -98, -101, -103, -106, -108, -111, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -105, -95, -86, -74, -53,
    -50, -38, -43, -49, -43, -42, -39, -39,
    -46, -52, -57, -56, -72, -69, -74, -81,
    -87, -92, -94, -97, -99, -102, -105, -108,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -108, -99, -90, -76, -66, -45,
    -43, -41, -44, -47, -43, -47, -40, -30,
    -31, -31, -39, -33, -40, -41, -43, -53,
    -59, -70, -73, -77, -79, -82, -84, -87,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -91, -76,
    -75, -85, -93, -98, -104, -110, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -91, -70,
    -70, -75, -86, -89, -94, -98, -101, -106,
    -110, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -110, -95, -80, -60,
    -65, -64, -74, -83, -88, -91, -95, -99,
    -103, -107, -110, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -110, -95, -80, -58,
    -55, -49, -66, -68, -71, -78, -78, -80,
    -88, -85, -89, -97, -100, -105, -110, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -110, -95, -80, -53,
    -52, -41, -59, -59, -49, -58, -56, -63,
    -86, -79, -90, -93, -98, -103, -107, -112,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -97, -91, -73, -45,
    -40, -33, -53, -61, -49, -54, -50, -50,
    -60, -52, -67, -74, -81, -92, -96, -100,
    -105, -110, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -113, -106, -99, -92, -77,
    -80, -88, -97, -106, -115, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -116, -109, -102, -95, -89, -74,
    -72, -88, -87, -95, -102, -109, -116, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -116, -109, -102, -95, -89, -75,
    -66, -74, -77, -78, -86, -87, -90, -96,
    -105, -115, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -115, -108, -101, -94, -88, -66,
    -56, -61, -70, -65, -78, -72, -83, -84,
    -93, -98, -105, -110, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -110, -105, -95, -89, -82, -57,
    -52, -52, -59, -56, -59, -58, -69, -67,
    -88, -82, -82, -89, -94, -100, -108, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -110, -101, -96, -90, -83, -77, -54,
    -43, -38, -50, -48, -52, -48, -42, -42,
    -51, -52, -53, -59, -65, -71, -78, -85,
    -95, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -120, -105, -86, -68,
    -78, -79, -90, -100, -110, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -120, -105, -86, -66,
    -73, -77, -88, -96, -105, -115, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -120, -105, -92, -80, -61,
    -64, -68, -80, -87, -92, -100, -110, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -120, -104, -91, -79, -52,
    -60, -54, -64, -69, -77, -80, -82, -84,
    -85, -87, -88, -90, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -118, -100, -87, -77, -49,
    -50, -44, -58, -61, -61, -67, -65, -62,
    -62, -62, -65, -68, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -115, -98, -84, -62, -49,
    -44, -38, -46, -49, -49, -46, -39, -37,
    -39, -40, -42, -43, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -88, -74,
    -77, -82, -82, -85, -90, -94, -99, -104,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -88, -66,
    -70, -81, -80, -81, -84, -88, -91, -93,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -88, -61,
    -63, -70, -71, -74, -77, -80, -83, -85,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -110, -86, -62,
    -63, -62, -62, -58, -52, -50, -50, -52,
    -54, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -118, -108, -84, -53,
    -50, -50, -50, -55, -47, -45, -40, -40,
    -40, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -118, -100, -73, -43,
    -37, -42, -43, -53, -38, -37, -35, -35,
    -38, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}},

  {{-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -91, -84, -74,
    -80, -80, -80, -80, -80, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -91, -84, -74,
    -68, -68, -68, -68, -68, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -86, -78, -70,
    -60, -45, -30, -21, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -87, -78, -67,
    -48, -38, -29, -21, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -86, -69, -56,
    -45, -35, -33, -29, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999},
   {-999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -110, -100, -83, -71, -48,
    -27, -38, -37, -34, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999,
    -999, -999, -999, -999, -999, -999, -999, -999}}
};


static double stereo_threshholds[]={0.0, .5, 1.0, 1.5, 2.5, 4.5, 8.5, 16.5, 9e10};

vorbis_look_psy_global *_vp_global_look(vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *gi=&ci->psy_g_param;
  vorbis_look_psy_global *look=calloc(1,sizeof(*look));

  look->channels=vi->channels;

  look->ampmax=-9999.;
  look->gi=gi;
  return(look);
}

void _vp_global_free(vorbis_look_psy_global *look){
  if(look){
    memset(look,0,sizeof(*look));
    free(look);
  }
}

void _vi_gpsy_free(vorbis_info_psy_global *i){
  if(i){
    memset(i,0,sizeof(*i));
    free(i);
  }
}

void _vi_psy_free(vorbis_info_psy *i){
  if(i){
    memset(i,0,sizeof(*i));
    free(i);
  }
}

static void min_curve(float *c,
         float *c2){
  int i;
  for(i=0;i<56;i++)if(c2[i]<c[i])c[i]=c2[i];
}
static void max_curve(float *c,
         float *c2){
  int i;
  for(i=0;i<56;i++)if(c2[i]>c[i])c[i]=c2[i];
}

static void attenuate_curve(float *c,float att){
  int i;
  for(i=0;i<56;i++)
    c[i]+=att;
}

static float ***setup_tone_curves(float curveatt_dB[17],float binHz,int n,
      float center_boost, float center_decay_rate){
  int i,j,k,m;
  float ath[56];
  float workc[17][8][56];
  float athc[8][56];
  float *brute_buffer=
# 48489 "oggenc.c" 3 4
                     __builtin_alloca (
# 48489 "oggenc.c"
                     n*sizeof(*brute_buffer)
# 48489 "oggenc.c" 3 4
                     )
# 48489 "oggenc.c"
                                                    ;

  float ***ret=malloc(sizeof(*ret)*17);

  memset(workc,0,sizeof(workc));

  for(i=0;i<17;i++){






    int ath_offset=i*4;
    for(j=0;j<56;j++){
      float min=999.;
      for(k=0;k<4;k++)
 if(j+k+ath_offset<88){
   if(min>ATH[j+k+ath_offset])min=ATH[j+k+ath_offset];
 }else{
   if(min>ATH[88 -1])min=ATH[88 -1];
 }
      ath[j]=min;
    }



    for(j=0;j<6;j++)
      memcpy(workc[i][j+2],tonemasks[i][j],56*sizeof(*tonemasks[i][j]));
    memcpy(workc[i][0],tonemasks[i][0],56*sizeof(*tonemasks[i][0]));
    memcpy(workc[i][1],tonemasks[i][0],56*sizeof(*tonemasks[i][0]));


    for(j=0;j<8;j++){
      for(k=0;k<56;k++){
 float adj=center_boost+abs(16 -k)*center_decay_rate;
 if(adj<0. && center_boost>0)adj=0.;
 if(adj>0. && center_boost<0)adj=0.;
 workc[i][j][k]+=adj;
      }
    }



    for(j=0;j<8;j++){
      attenuate_curve(workc[i][j],curveatt_dB[i]+100.-(j<2?2:j)*10.-30.);
      memcpy(athc[j],ath,56*sizeof(**athc));
      attenuate_curve(athc[j],+100.-j*10.f-30.);
      max_curve(athc[j],workc[i][j]);
    }
# 48550 "oggenc.c"
    for(j=1;j<8;j++){
      min_curve(athc[j],athc[j-1]);
      min_curve(workc[i][j],athc[j]);
    }
  }

  for(i=0;i<17;i++){
    int hi_curve,lo_curve,bin;
    ret[i]=malloc(sizeof(**ret)*8);
# 48570 "oggenc.c"
    bin=floor((exp(((i*.5)+5.965784f)*.693147f))/binHz);
    lo_curve= ceil((log(bin*binHz+1)*1.442695f-5.965784f)*2);
    hi_curve= floor((log((bin+1)*binHz)*1.442695f-5.965784f)*2);
    if(lo_curve>i)lo_curve=i;
    if(lo_curve<0)lo_curve=0;
    if(hi_curve>=17)hi_curve=17 -1;

    for(m=0;m<8;m++){
      ret[i][m]=malloc(sizeof(***ret)*(56 +2));

      for(j=0;j<n;j++)brute_buffer[j]=999.;




      for(k=lo_curve;k<=hi_curve;k++){
 int l=0;

 for(j=0;j<56;j++){
   int lo_bin= (exp(((j*.125+k*.5-2.0625)+5.965784f)*.693147f))/binHz;
   int hi_bin= (exp(((j*.125+k*.5-1.9375)+5.965784f)*.693147f))/binHz+1;

   if(lo_bin<0)lo_bin=0;
   if(lo_bin>n)lo_bin=n;
   if(lo_bin<l)l=lo_bin;
   if(hi_bin<0)hi_bin=0;
   if(hi_bin>n)hi_bin=n;

   for(;l<hi_bin && l<n;l++)
     if(brute_buffer[l]>workc[k][m][j])
       brute_buffer[l]=workc[k][m][j];
 }

 for(;l<n;l++)
   if(brute_buffer[l]>workc[k][m][56 -1])
     brute_buffer[l]=workc[k][m][56 -1];

      }


      if(i+1<17){
 int l=0;
 k=i+1;
 for(j=0;j<56;j++){
   int lo_bin= (exp(((j*.125+i*.5-2.0625)+5.965784f)*.693147f))/binHz;
   int hi_bin= (exp(((j*.125+i*.5-1.9375)+5.965784f)*.693147f))/binHz+1;

   if(lo_bin<0)lo_bin=0;
   if(lo_bin>n)lo_bin=n;
   if(lo_bin<l)l=lo_bin;
   if(hi_bin<0)hi_bin=0;
   if(hi_bin>n)hi_bin=n;

   for(;l<hi_bin && l<n;l++)
     if(brute_buffer[l]>workc[k][m][j])
       brute_buffer[l]=workc[k][m][j];
 }

 for(;l<n;l++)
   if(brute_buffer[l]>workc[k][m][56 -1])
     brute_buffer[l]=workc[k][m][56 -1];

      }


      for(j=0;j<56;j++){
 int bin=(exp(((j*.125+i*.5-2.)+5.965784f)*.693147f))/binHz;
 if(bin<0){
   ret[i][m][j+2]=-999.;
 }else{
   if(bin>=n){
     ret[i][m][j+2]=-999.;
   }else{
     ret[i][m][j+2]=brute_buffer[bin];
   }
 }
      }


      for(j=0;j<16;j++)
 if(ret[i][m][j+2]>-200.f)break;
      ret[i][m][0]=j;

      for(j=56 -1;j>16 +1;j--)
 if(ret[i][m][j+2]>-200.f)
   break;
      ret[i][m][1]=j;

    }
  }

  return(ret);
}

void _vp_psy_init(vorbis_look_psy *p,vorbis_info_psy *vi,
    vorbis_info_psy_global *gi,int n,long rate){
  long i,j,lo=-99,hi=1;
  long maxoc;
  memset(p,0,sizeof(*p));

  p->eighth_octave_lines=gi->eighth_octave_lines;
  p->shiftoc=rint(log(gi->eighth_octave_lines*8.f)/log(2.f))-1;

  p->firstoc=(log(.25f*rate*.5/n)*1.442695f-5.965784f)*(1<<(p->shiftoc+1))-gi->eighth_octave_lines;
  maxoc=(log((n+.25f)*rate*.5/n)*1.442695f-5.965784f)*(1<<(p->shiftoc+1))+.5f;
  p->total_octave_lines=maxoc-p->firstoc+1;
  p->ath=malloc(n*sizeof(*p->ath));

  p->octave=malloc(n*sizeof(*p->octave));
  p->bark=malloc(n*sizeof(*p->bark));
  p->vi=vi;
  p->n=n;
  p->rate=rate;



  for(i=0,j=0;i<88 -1;i++){
    int endpos=rint((exp((((i+1)*.125-2.)+5.965784f)*.693147f))*2*n/rate);
    float base=ATH[i];
    if(j<endpos){
      float delta=(ATH[i+1]-base)/(endpos-j);
      for(;j<endpos && j<n;j++){
        p->ath[j]=base+100.;
        base+=delta;
      }
    }
  }

  for(i=0;i<n;i++){
    float bark=(13.1f*atan(.00074f*(rate/(2*n)*i))+2.24f*atan((rate/(2*n)*i)*(rate/(2*n)*i)*1.85e-8f)+1e-4f*(rate/(2*n)*i));

    for(;lo+vi->noisewindowlomin<i &&
   (13.1f*atan(.00074f*(rate/(2*n)*lo))+2.24f*atan((rate/(2*n)*lo)*(rate/(2*n)*lo)*1.85e-8f)+1e-4f*(rate/(2*n)*lo))<(bark-vi->noisewindowlo);lo++);

    for(;hi<=n && (hi<i+vi->noisewindowhimin ||
   (13.1f*atan(.00074f*(rate/(2*n)*hi))+2.24f*atan((rate/(2*n)*hi)*(rate/(2*n)*hi)*1.85e-8f)+1e-4f*(rate/(2*n)*hi))<(bark+vi->noisewindowhi));hi++);

    p->bark[i]=((lo-1)<<16)+(hi-1);

  }

  for(i=0;i<n;i++)
    p->octave[i]=(log((i+.25f)*.5*rate/n)*1.442695f-5.965784f)*(1<<(p->shiftoc+1))+.5f;

  p->tonecurves=setup_tone_curves(vi->toneatt,rate*.5/n,n,
      vi->tone_centerboost,vi->tone_decay);


  p->noiseoffset=malloc(3*sizeof(*p->noiseoffset));
  for(i=0;i<3;i++)
    p->noiseoffset[i]=malloc(n*sizeof(**p->noiseoffset));

  for(i=0;i<n;i++){
    float halfoc=(log((i+.5)*rate/(2.*n))*1.442695f-5.965784f)*2.;
    int inthalfoc;
    float del;

    if(halfoc<0)halfoc=0;
    if(halfoc>=17 -1)halfoc=17 -1;
    inthalfoc=(int)halfoc;
    del=halfoc-inthalfoc;

    for(j=0;j<3;j++)
      p->noiseoffset[j][i]=
 p->vi->noiseoff[j][inthalfoc]*(1.-del) +
 p->vi->noiseoff[j][inthalfoc+1]*del;

  }
# 48746 "oggenc.c"
}

void _vp_psy_clear(vorbis_look_psy *p){
  int i,j;
  if(p){
    if(p->ath)free(p->ath);
    if(p->octave)free(p->octave);
    if(p->bark)free(p->bark);
    if(p->tonecurves){
      for(i=0;i<17;i++){
 for(j=0;j<8;j++){
   free(p->tonecurves[i][j]);
 }
 free(p->tonecurves[i]);
      }
      free(p->tonecurves);
    }
    if(p->noiseoffset){
      for(i=0;i<3;i++){
        free(p->noiseoffset[i]);
      }
      free(p->noiseoffset);
    }
    memset(p,0,sizeof(*p));
  }
}


static void seed_curve(float *seed,
         const float **curves,
         float amp,
         int oc, int n,
         int linesper,float dBoffset){
  int i,post1;
  int seedptr;
  const float *posts,*curve;

  int choice=(int)((amp+dBoffset-30.)*.1f);
  choice=((choice)<(0)?(0):(choice));
  choice=((choice)>(8 -1)?(8 -1):(choice));
  posts=curves[choice];
  curve=posts+2;
  post1=(int)posts[1];
  seedptr=oc+(posts[0]-16)*linesper-(linesper>>1);

  for(i=posts[0];i<post1;i++){
    if(seedptr>0){
      float lin=amp+curve[i];
      if(seed[seedptr]<lin)seed[seedptr]=lin;
    }
    seedptr+=linesper;
    if(seedptr>=n)break;
  }
}

static void seed_loop(vorbis_look_psy *p,
        const float ***curves,
        const float *f,
        const float *flr,
        float *seed,
        float specmax){
  vorbis_info_psy *vi=p->vi;
  long n=p->n,i;
  float dBoffset=vi->max_curve_dB-specmax;



  for(i=0;i<n;i++){
    float max=f[i];
    long oc=p->octave[i];
    while(i+1<n && p->octave[i+1]==oc){
      i++;
      if(f[i]>max)max=f[i];
    }

    if(max+6.f>flr[i]){
      oc=oc>>p->shiftoc;

      if(oc>=17)oc=17 -1;
      if(oc<0)oc=0;

      seed_curve(seed,
   curves[oc],
   max,
   p->octave[i]-p->firstoc,
   p->total_octave_lines,
   p->eighth_octave_lines,
   dBoffset);
    }
  }
}

static void seed_chase(float *seeds, int linesper, long n){
  long *posstack=
# 48839 "oggenc.c" 3 4
                 __builtin_alloca (
# 48839 "oggenc.c"
                 n*sizeof(*posstack)
# 48839 "oggenc.c" 3 4
                 )
# 48839 "oggenc.c"
                                            ;
  float *ampstack=
# 48840 "oggenc.c" 3 4
                 __builtin_alloca (
# 48840 "oggenc.c"
                 n*sizeof(*ampstack)
# 48840 "oggenc.c" 3 4
                 )
# 48840 "oggenc.c"
                                            ;
  long stack=0;
  long pos=0;
  long i;

  for(i=0;i<n;i++){
    if(stack<2){
      posstack[stack]=i;
      ampstack[stack++]=seeds[i];
    }else{
      while(1){
 if(seeds[i]<ampstack[stack-1]){
   posstack[stack]=i;
   ampstack[stack++]=seeds[i];
   break;
 }else{
   if(i<posstack[stack-1]+linesper){
     if(stack>1 && ampstack[stack-1]<=ampstack[stack-2] &&
        i<posstack[stack-2]+linesper){

       stack--;
       continue;
     }
   }
   posstack[stack]=i;
   ampstack[stack++]=seeds[i];
   break;

 }
      }
    }
  }




  for(i=0;i<stack;i++){
    long endpos;
    if(i<stack-1 && ampstack[i+1]>ampstack[i]){
      endpos=posstack[i+1];
    }else{
      endpos=posstack[i]+linesper+1;

    }
    if(endpos>n)endpos=n;
    for(;pos<endpos;pos++)
      seeds[pos]=ampstack[i];
  }




}


static void max_seeds(vorbis_look_psy *p,
        float *seed,
        float *flr){
  long n=p->total_octave_lines;
  int linesper=p->eighth_octave_lines;
  long linpos=0;
  long pos;

  seed_chase(seed,linesper,n);

  pos=p->octave[0]-p->firstoc-(linesper>>1);

  while(linpos+1<p->n){
    float minV=seed[pos];
    long end=((p->octave[linpos]+p->octave[linpos+1])>>1)-p->firstoc;
    if(minV>p->vi->tone_abs_limit)minV=p->vi->tone_abs_limit;
    while(pos+1<=end){
      pos++;
      if((seed[pos]>-9999.f && seed[pos]<minV) || minV==-9999.f)
 minV=seed[pos];
    }

    end=pos+p->firstoc;
    for(;linpos<p->n && p->octave[linpos]<=end;linpos++)
      if(flr[linpos]<minV)flr[linpos]=minV;
  }

  {
    float minV=seed[p->total_octave_lines-1];
    for(;linpos<p->n;linpos++)
      if(flr[linpos]<minV)flr[linpos]=minV;
  }

}

static void bark_noise_hybridmp(int n,const long *b,
                                const float *f,
                                float *noise,
                                const float offset,
                                const int fixed){

  float *N=
# 48936 "oggenc.c" 3 4
          __builtin_alloca (
# 48936 "oggenc.c"
          n*sizeof(*N)
# 48936 "oggenc.c" 3 4
          )
# 48936 "oggenc.c"
                              ;
  float *X=
# 48937 "oggenc.c" 3 4
          __builtin_alloca (
# 48937 "oggenc.c"
          n*sizeof(*N)
# 48937 "oggenc.c" 3 4
          )
# 48937 "oggenc.c"
                              ;
  float *XX=
# 48938 "oggenc.c" 3 4
           __builtin_alloca (
# 48938 "oggenc.c"
           n*sizeof(*N)
# 48938 "oggenc.c" 3 4
           )
# 48938 "oggenc.c"
                               ;
  float *Y=
# 48939 "oggenc.c" 3 4
          __builtin_alloca (
# 48939 "oggenc.c"
          n*sizeof(*N)
# 48939 "oggenc.c" 3 4
          )
# 48939 "oggenc.c"
                              ;
  float *XY=
# 48940 "oggenc.c" 3 4
           __builtin_alloca (
# 48940 "oggenc.c"
           n*sizeof(*N)
# 48940 "oggenc.c" 3 4
           )
# 48940 "oggenc.c"
                               ;

  float tN, tX, tXX, tY, tXY;
  int i;

  int lo, hi;
  float R, A, B, D;
  float w, x, y;

  tN = tX = tXX = tY = tXY = 0.f;

  y = f[0] + offset;
  if (y < 1.f) y = 1.f;

  w = y * y * .5;

  tN += w;
  tX += w;
  tY += w * y;

  N[0] = tN;
  X[0] = tX;
  XX[0] = tXX;
  Y[0] = tY;
  XY[0] = tXY;

  for (i = 1, x = 1.f; i < n; i++, x += 1.f) {

    y = f[i] + offset;
    if (y < 1.f) y = 1.f;

    w = y * y;

    tN += w;
    tX += w * x;
    tXX += w * x * x;
    tY += w * y;
    tXY += w * x * y;

    N[i] = tN;
    X[i] = tX;
    XX[i] = tXX;
    Y[i] = tY;
    XY[i] = tXY;
  }

  for (i = 0, x = 0.f;; i++, x += 1.f) {

    lo = b[i] >> 16;
    if( lo>=0 ) break;
    hi = b[i] & 0xffff;

    tN = N[hi] + N[-lo];
    tX = X[hi] - X[-lo];
    tXX = XX[hi] + XX[-lo];
    tY = Y[hi] + Y[-lo];
    tXY = XY[hi] - XY[-lo];

    A = tY * tXX - tX * tXY;
    B = tN * tXY - tX * tY;
    D = tN * tXX - tX * tX;
    R = (A + x * B) / D;
    if (R < 0.f)
      R = 0.f;

    noise[i] = R - offset;
  }

  for ( ;; i++, x += 1.f) {

    lo = b[i] >> 16;
    hi = b[i] & 0xffff;
    if(hi>=n)break;

    tN = N[hi] - N[lo];
    tX = X[hi] - X[lo];
    tXX = XX[hi] - XX[lo];
    tY = Y[hi] - Y[lo];
    tXY = XY[hi] - XY[lo];

    A = tY * tXX - tX * tXY;
    B = tN * tXY - tX * tY;
    D = tN * tXX - tX * tX;
    R = (A + x * B) / D;
    if (R < 0.f) R = 0.f;

    noise[i] = R - offset;
  }
  for ( ; i < n; i++, x += 1.f) {

    R = (A + x * B) / D;
    if (R < 0.f) R = 0.f;

    noise[i] = R - offset;
  }

  if (fixed <= 0) return;

  for (i = 0, x = 0.f;; i++, x += 1.f) {
    hi = i + fixed / 2;
    lo = hi - fixed;
    if(lo>=0)break;

    tN = N[hi] + N[-lo];
    tX = X[hi] - X[-lo];
    tXX = XX[hi] + XX[-lo];
    tY = Y[hi] + Y[-lo];
    tXY = XY[hi] - XY[-lo];


    A = tY * tXX - tX * tXY;
    B = tN * tXY - tX * tY;
    D = tN * tXX - tX * tX;
    R = (A + x * B) / D;

    if (R - offset < noise[i]) noise[i] = R - offset;
  }
  for ( ;; i++, x += 1.f) {

    hi = i + fixed / 2;
    lo = hi - fixed;
    if(hi>=n)break;

    tN = N[hi] - N[lo];
    tX = X[hi] - X[lo];
    tXX = XX[hi] - XX[lo];
    tY = Y[hi] - Y[lo];
    tXY = XY[hi] - XY[lo];

    A = tY * tXX - tX * tXY;
    B = tN * tXY - tX * tY;
    D = tN * tXX - tX * tX;
    R = (A + x * B) / D;

    if (R - offset < noise[i]) noise[i] = R - offset;
  }
  for ( ; i < n; i++, x += 1.f) {
    R = (A + x * B) / D;
    if (R - offset < noise[i]) noise[i] = R - offset;
  }
}

static float FLOOR1_fromdB_INV_LOOKUP[256]={
  0.F, 8.81683e+06F, 8.27882e+06F, 7.77365e+06F,
  7.29930e+06F, 6.85389e+06F, 6.43567e+06F, 6.04296e+06F,
  5.67422e+06F, 5.32798e+06F, 5.00286e+06F, 4.69759e+06F,
  4.41094e+06F, 4.14178e+06F, 3.88905e+06F, 3.65174e+06F,
  3.42891e+06F, 3.21968e+06F, 3.02321e+06F, 2.83873e+06F,
  2.66551e+06F, 2.50286e+06F, 2.35014e+06F, 2.20673e+06F,
  2.07208e+06F, 1.94564e+06F, 1.82692e+06F, 1.71544e+06F,
  1.61076e+06F, 1.51247e+06F, 1.42018e+06F, 1.33352e+06F,
  1.25215e+06F, 1.17574e+06F, 1.10400e+06F, 1.03663e+06F,
  973377.F, 913981.F, 858210.F, 805842.F,
  756669.F, 710497.F, 667142.F, 626433.F,
  588208.F, 552316.F, 518613.F, 486967.F,
  457252.F, 429351.F, 403152.F, 378551.F,
  355452.F, 333762.F, 313396.F, 294273.F,
  276316.F, 259455.F, 243623.F, 228757.F,
  214798.F, 201691.F, 189384.F, 177828.F,
  166977.F, 156788.F, 147221.F, 138237.F,
  129802.F, 121881.F, 114444.F, 107461.F,
  100903.F, 94746.3F, 88964.9F, 83536.2F,
  78438.8F, 73652.5F, 69158.2F, 64938.1F,
  60975.6F, 57254.9F, 53761.2F, 50480.6F,
  47400.3F, 44507.9F, 41792.0F, 39241.9F,
  36847.3F, 34598.9F, 32487.7F, 30505.3F,
  28643.8F, 26896.0F, 25254.8F, 23713.7F,
  22266.7F, 20908.0F, 19632.2F, 18434.2F,
  17309.4F, 16253.1F, 15261.4F, 14330.1F,
  13455.7F, 12634.6F, 11863.7F, 11139.7F,
  10460.0F, 9821.72F, 9222.39F, 8659.64F,
  8131.23F, 7635.06F, 7169.17F, 6731.70F,
  6320.93F, 5935.23F, 5573.06F, 5232.99F,
  4913.67F, 4613.84F, 4332.30F, 4067.94F,
  3819.72F, 3586.64F, 3367.78F, 3162.28F,
  2969.31F, 2788.13F, 2617.99F, 2458.24F,
  2308.24F, 2167.39F, 2035.14F, 1910.95F,
  1794.35F, 1684.85F, 1582.04F, 1485.51F,
  1394.86F, 1309.75F, 1229.83F, 1154.78F,
  1084.32F, 1018.15F, 956.024F, 897.687F,
  842.910F, 791.475F, 743.179F, 697.830F,
  655.249F, 615.265F, 577.722F, 542.469F,
  509.367F, 478.286F, 449.101F, 421.696F,
  395.964F, 371.803F, 349.115F, 327.812F,
  307.809F, 289.026F, 271.390F, 254.830F,
  239.280F, 224.679F, 210.969F, 198.096F,
  186.008F, 174.658F, 164.000F, 153.993F,
  144.596F, 135.773F, 127.488F, 119.708F,
  112.404F, 105.545F, 99.1046F, 93.0572F,
  87.3788F, 82.0469F, 77.0404F, 72.3394F,
  67.9252F, 63.7804F, 59.8885F, 56.2341F,
  52.8027F, 49.5807F, 46.5553F, 43.7144F,
  41.0470F, 38.5423F, 36.1904F, 33.9821F,
  31.9085F, 29.9614F, 28.1332F, 26.4165F,
  24.8045F, 23.2910F, 21.8697F, 20.5352F,
  19.2822F, 18.1056F, 17.0008F, 15.9634F,
  14.9893F, 14.0746F, 13.2158F, 12.4094F,
  11.6522F, 10.9411F, 10.2735F, 9.64662F,
  9.05798F, 8.50526F, 7.98626F, 7.49894F,
  7.04135F, 6.61169F, 6.20824F, 5.82941F,
  5.47370F, 5.13970F, 4.82607F, 4.53158F,
  4.25507F, 3.99542F, 3.75162F, 3.52269F,
  3.30774F, 3.10590F, 2.91638F, 2.73842F,
  2.57132F, 2.41442F, 2.26709F, 2.12875F,
  1.99885F, 1.87688F, 1.76236F, 1.65482F,
  1.55384F, 1.45902F, 1.36999F, 1.28640F,
  1.20790F, 1.13419F, 1.06499F, 1.F
};

void _vp_remove_floor(vorbis_look_psy *p,
        float *mdct,
        int *codedflr,
        float *residue,
        int sliding_lowpass){

  int i,n=p->n;

  if(sliding_lowpass>n)sliding_lowpass=n;

  for(i=0;i<sliding_lowpass;i++){
    residue[i]=
      mdct[i]*FLOOR1_fromdB_INV_LOOKUP[codedflr[i]];
  }

  for(;i<n;i++)
    residue[i]=0.;
}

void _vp_noisemask(vorbis_look_psy *p,
     float *logmdct,
     float *logmask){

  int i,n=p->n;
  float *work=
# 49173 "oggenc.c" 3 4
             __builtin_alloca (
# 49173 "oggenc.c"
             n*sizeof(*work)
# 49173 "oggenc.c" 3 4
             )
# 49173 "oggenc.c"
                                    ;

  bark_noise_hybridmp(n,p->bark,logmdct,logmask,
        140.,-1);

  for(i=0;i<n;i++)work[i]=logmdct[i]-logmask[i];

  bark_noise_hybridmp(n,p->bark,work,logmask,0.,
        p->vi->noisewindowfixed);

  for(i=0;i<n;i++)work[i]=logmdct[i]-work[i];
# 49207 "oggenc.c"
  for(i=0;i<n;i++){
    int dB=logmask[i]+.5;
    if(dB>=40)dB=40 -1;
    if(dB<0)dB=0;
    logmask[i]= work[i]+p->vi->noisecompand[dB];
  }

}

void _vp_tonemask(vorbis_look_psy *p,
    float *logfft,
    float *logmask,
    float global_specmax,
    float local_specmax){

  int i,n=p->n;

  float *seed=
# 49224 "oggenc.c" 3 4
             __builtin_alloca (
# 49224 "oggenc.c"
             sizeof(*seed)*p->total_octave_lines
# 49224 "oggenc.c" 3 4
             )
# 49224 "oggenc.c"
                                                        ;
  float att=local_specmax+p->vi->ath_adjatt;
  for(i=0;i<p->total_octave_lines;i++)seed[i]=-9999.f;



  if(att<p->vi->ath_maxatt)att=p->vi->ath_maxatt;

  for(i=0;i<n;i++)
    logmask[i]=p->ath[i]+att;


  seed_loop(p,(const float ***)p->tonecurves,logfft,logmask,seed,global_specmax);
  max_seeds(p,seed,logmask);

}

void _vp_offset_and_mix(vorbis_look_psy *p,
   float *noise,
   float *tone,
   int offset_select,
   float *logmask){
  int i,n=p->n;
  float toneatt=p->vi->tone_masteratt[offset_select];

  for(i=0;i<n;i++){
    float val= noise[i]+p->noiseoffset[offset_select][i];
    if(val>p->vi->noisemaxsupp)val=p->vi->noisemaxsupp;
    logmask[i]=((val)<(tone[i]+toneatt)?(tone[i]+toneatt):(val));
  }
}

float _vp_ampmax_decay(float amp,vorbis_dsp_state *vd){
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *gi=&ci->psy_g_param;

  int n=ci->blocksizes[vd->W]/2;
  float secs=(float)n/vi->rate;

  amp+=secs*gi->ampmax_att_per_sec;
  if(amp<-9999)amp=-9999;
  return(amp);
}

static void couple_lossless(float A, float B,
       float *qA, float *qB){
  int test1=fabs(*qA)>fabs(*qB);
  test1-= fabs(*qA)<fabs(*qB);

  if(!test1)test1=((fabs(A)>fabs(B))<<1)-1;
  if(test1==1){
    *qB=(*qA>0.f?*qA-*qB:*qB-*qA);
  }else{
    float temp=*qB;
    *qB=(*qB>0.f?*qA-*qB:*qB-*qA);
    *qA=temp;
  }

  if(*qB>fabs(*qA)*1.9999f){
    *qB= -fabs(*qA)*2.f;
    *qA= -*qA;
  }
}

static float hypot_lookup[32]={
  -0.009935, -0.011245, -0.012726, -0.014397,
  -0.016282, -0.018407, -0.020800, -0.023494,
  -0.026522, -0.029923, -0.033737, -0.038010,
  -0.042787, -0.048121, -0.054064, -0.060671,
  -0.068000, -0.076109, -0.085054, -0.094892,
  -0.105675, -0.117451, -0.130260, -0.144134,
  -0.159093, -0.175146, -0.192286, -0.210490,
  -0.229718, -0.249913, -0.271001, -0.292893};

static void precomputed_couple_point(float premag,
         int floorA,int floorB,
         float *mag, float *ang){

  int test=(floorA>floorB)-1;
  int offset=31-abs(floorA-floorB);
  float floormag=hypot_lookup[((offset<0)-1)&offset]+1.f;

  floormag*=FLOOR1_fromdB_INV_LOOKUP[(floorB&test)|(floorA&(~test))];

  *mag=premag*floormag;
  *ang=0.f;
}







static float dipole_hypot(float a, float b){
  if(a>0.){
    if(b>0.)return sqrt(a*a+b*b);
    if(a>-b)return sqrt(a*a-b*b);
    return -sqrt(b*b-a*a);
  }
  if(b<0.)return -sqrt(a*a+b*b);
  if(-a>b)return -sqrt(a*a-b*b);
  return sqrt(b*b-a*a);
}
static float round_hypot(float a, float b){
  if(a>0.){
    if(b>0.)return sqrt(a*a+b*b);
    if(a>-b)return sqrt(a*a+b*b);
    return -sqrt(b*b+a*a);
  }
  if(b<0.)return -sqrt(a*a+b*b);
  if(-a>b)return -sqrt(a*a+b*b);
  return sqrt(b*b+a*a);
}


float **_vp_quantize_couple_memo(vorbis_block *vb,
     vorbis_info_psy_global *g,
     vorbis_look_psy *p,
     vorbis_info_mapping0 *vi,
     float **mdct){

  int i,j,n=p->n;
  float **ret=_vorbis_block_alloc(vb,vi->coupling_steps*sizeof(*ret));
  int limit=g->coupling_pointlimit[p->vi->blockflag][15/2];

  for(i=0;i<vi->coupling_steps;i++){
    float *mdctM=mdct[vi->coupling_mag[i]];
    float *mdctA=mdct[vi->coupling_ang[i]];
    ret[i]=_vorbis_block_alloc(vb,n*sizeof(**ret));
    for(j=0;j<limit;j++)
      ret[i][j]=dipole_hypot(mdctM[j],mdctA[j]);
    for(;j<n;j++)
      ret[i][j]=round_hypot(mdctM[j],mdctA[j]);
  }

  return(ret);
}


static int apsort(const void *a, const void *b){
  float f1=fabs(**(float**)a);
  float f2=fabs(**(float**)b);
  return (f1<f2)-(f1>f2);
}

int **_vp_quantize_couple_sort(vorbis_block *vb,
          vorbis_look_psy *p,
          vorbis_info_mapping0 *vi,
          float **mags){


  if(p->vi->normal_point_p){
    int i,j,k,n=p->n;
    int **ret=_vorbis_block_alloc(vb,vi->coupling_steps*sizeof(*ret));
    int partition=p->vi->normal_partition;
    float **work=
# 49381 "oggenc.c" 3 4
                __builtin_alloca (
# 49381 "oggenc.c"
                sizeof(*work)*partition
# 49381 "oggenc.c" 3 4
                )
# 49381 "oggenc.c"
                                               ;

    for(i=0;i<vi->coupling_steps;i++){
      ret[i]=_vorbis_block_alloc(vb,n*sizeof(**ret));

      for(j=0;j<n;j+=partition){
 for(k=0;k<partition;k++)work[k]=mags[i]+k+j;
 qsort(work,partition,sizeof(*work),apsort);
 for(k=0;k<partition;k++)ret[i][k+j]=work[k]-mags[i];
      }
    }
    return(ret);
  }
  return(
# 49394 "oggenc.c" 3 4
        ((void *)0)
# 49394 "oggenc.c"
            );
}

void _vp_noise_normalize_sort(vorbis_look_psy *p,
         float *magnitudes,int *sortedindex){
  int i,j,n=p->n;
  vorbis_info_psy *vi=p->vi;
  int partition=vi->normal_partition;
  float **work=
# 49402 "oggenc.c" 3 4
              __builtin_alloca (
# 49402 "oggenc.c"
              sizeof(*work)*partition
# 49402 "oggenc.c" 3 4
              )
# 49402 "oggenc.c"
                                             ;
  int start=vi->normal_start;

  for(j=start;j<n;j+=partition){
    if(j+partition>n)partition=n-j;
    for(i=0;i<partition;i++)work[i]=magnitudes+i+j;
    qsort(work,partition,sizeof(*work),apsort);
    for(i=0;i<partition;i++){
      sortedindex[i+j-start]=work[i]-magnitudes;
    }
  }
}

void _vp_noise_normalize(vorbis_look_psy *p,
    float *in,float *out,int *sortedindex){
  int flag=0,i,j=0,n=p->n;
  vorbis_info_psy *vi=p->vi;
  int partition=vi->normal_partition;
  int start=vi->normal_start;

  if(start>n)start=n;

  if(vi->normal_channel_p){
    for(;j<start;j++)
      out[j]=rint(in[j]);

    for(;j+partition<=n;j+=partition){
      float acc=0.;
      int k;

      for(i=j;i<j+partition;i++)
 acc+=in[i]*in[i];

      for(i=0;i<partition;i++){
 k=sortedindex[i+j-start];

 if(in[k]*in[k]>=.25f){
   out[k]=rint(in[k]);
   acc-=in[k]*in[k];
   flag=1;
 }else{
   if(acc<vi->normal_thresh)break;
   out[k]=unitnorm(in[k]);
   acc-=1.;
 }
      }

      for(;i<partition;i++){
 k=sortedindex[i+j-start];
 out[k]=0.;
      }
    }
  }

  for(;j<n;j++)
    out[j]=rint(in[j]);

}

void _vp_couple(int blobno,
  vorbis_info_psy_global *g,
  vorbis_look_psy *p,
  vorbis_info_mapping0 *vi,
  float **res,
  float **mag_memo,
  int **mag_sort,
  int **ifloor,
  int *nonzero,
  int sliding_lowpass){

  int i,j,k,n=p->n;




  for(i=0;i<vi->coupling_steps;i++){
# 49488 "oggenc.c"
    if(nonzero[vi->coupling_mag[i]] ||
       nonzero[vi->coupling_ang[i]]){


      float *rM=res[vi->coupling_mag[i]];
      float *rA=res[vi->coupling_ang[i]];
      float *qM=rM+n;
      float *qA=rA+n;
      int *floorM=ifloor[vi->coupling_mag[i]];
      int *floorA=ifloor[vi->coupling_ang[i]];
      float prepoint=stereo_threshholds[g->coupling_prepointamp[blobno]];
      float postpoint=stereo_threshholds[g->coupling_postpointamp[blobno]];
      int partition=(p->vi->normal_point_p?p->vi->normal_partition:p->n);
      int limit=g->coupling_pointlimit[p->vi->blockflag][blobno];
      int pointlimit=limit;

      nonzero[vi->coupling_mag[i]]=1;
      nonzero[vi->coupling_ang[i]]=1;

      for(j=0;j<p->n;j+=partition){
 float acc=0.f;

 for(k=0;k<partition;k++){
   int l=k+j;

   if(l<sliding_lowpass){
     if((l>=limit && fabs(rM[l])<postpoint && fabs(rA[l])<postpoint) ||
        (fabs(rM[l])<prepoint && fabs(rA[l])<prepoint)){


       precomputed_couple_point(mag_memo[i][l],
           floorM[l],floorA[l],
           qM+l,qA+l);

       if(rint(qM[l])==0.f)acc+=qM[l]*qM[l];
     }else{
       couple_lossless(rM[l],rA[l],qM+l,qA+l);
     }
   }else{
     qM[l]=0.;
     qA[l]=0.;
   }
 }

 if(p->vi->normal_point_p){
   for(k=0;k<partition && acc>=p->vi->normal_thresh;k++){
     int l=mag_sort[i][j+k];
     if(l<sliding_lowpass && l>=pointlimit && rint(qM[l])==0.f){
       qM[l]=unitnorm(qM[l]);
       acc-=1.f;
     }
   }
 }
      }
    }
  }
}
# 49577 "oggenc.c"
static void drfti1(int n, float *wa, int *ifac){
  static int ntryh[4] = { 4,2,3,5 };
  static float tpi = 6.28318530717958648f;
  float arg,argh,argld,fi;
  int ntry=0,i,j=-1;
  int k1, l1, l2, ib;
  int ld, ii, ip, is, nq, nr;
  int ido, ipm, nfm1;
  int nl=n;
  int nf=0;

 L101:
  j++;
  if (j < 4)
    ntry=ntryh[j];
  else
    ntry+=2;

 L104:
  nq=nl/ntry;
  nr=nl-ntry*nq;
  if (nr!=0) goto L101;

  nf++;
  ifac[nf+1]=ntry;
  nl=nq;
  if(ntry!=2)goto L107;
  if(nf==1)goto L107;

  for (i=1;i<nf;i++){
    ib=nf-i+1;
    ifac[ib+1]=ifac[ib];
  }
  ifac[2] = 2;

 L107:
  if(nl!=1)goto L104;
  ifac[0]=n;
  ifac[1]=nf;
  argh=tpi/n;
  is=0;
  nfm1=nf-1;
  l1=1;

  if(nfm1==0)return;

  for (k1=0;k1<nfm1;k1++){
    ip=ifac[k1+2];
    ld=0;
    l2=l1*ip;
    ido=n/l2;
    ipm=ip-1;

    for (j=0;j<ipm;j++){
      ld+=l1;
      i=is;
      argld=(float)ld*argh;
      fi=0.f;
      for (ii=2;ii<ido;ii+=2){
 fi+=1.f;
 arg=fi*argld;
 wa[i++]=cos(arg);
 wa[i++]=sin(arg);
      }
      is+=ido;
    }
    l1=l2;
  }
}

static void fdrffti(int n, float *wsave, int *ifac){

  if (n == 1) return;
  drfti1(n, wsave+n, ifac);
}

static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
  int i,k;
  float ti2,tr2;
  int t0,t1,t2,t3,t4,t5,t6;

  t1=0;
  t0=(t2=l1*ido);
  t3=ido<<1;
  for(k=0;k<l1;k++){
    ch[t1<<1]=cc[t1]+cc[t2];
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    t1+=ido;
    t2+=ido;
  }

  if(ido<2)return;
  if(ido==2)goto L105;

  t1=0;
  t2=t0;
  for(k=0;k<l1;k++){
    t3=t2;
    t4=(t1<<1)+(ido<<1);
    t5=t1;
    t6=t1+t1;
    for(i=2;i<ido;i+=2){
      t3+=2;
      t4-=2;
      t5+=2;
      t6+=2;
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
      ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
      ch[t6]=cc[t5]+ti2;
      ch[t4]=ti2-cc[t5];
      ch[t6-1]=cc[t5-1]+tr2;
      ch[t4-1]=cc[t5-1]-tr2;
    }
    t1+=ido;
    t2+=ido;
  }

  if(ido%2==1)return;

 L105:
  t3=(t2=(t1=ido)-1);
  t2+=t0;
  for(k=0;k<l1;k++){
    ch[t1]=-cc[t2];
    ch[t1-1]=cc[t3];
    t1+=ido<<1;
    t2+=ido;
    t3+=ido;
  }
}

static void dradf4(int ido,int l1,float *cc,float *ch,float *wa1,
     float *wa2,float *wa3){
  static float hsqt2 = .70710678118654752f;
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;

  t1=t0;
  t4=t1<<1;
  t2=t1+(t1<<1);
  t3=0;

  for(k=0;k<l1;k++){
    tr1=cc[t1]+cc[t2];
    tr2=cc[t3]+cc[t4];

    ch[t5=t3<<2]=tr1+tr2;
    ch[(ido<<2)+t5-1]=tr2-tr1;
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    ch[t5]=cc[t2]-cc[t1];

    t1+=ido;
    t2+=ido;
    t3+=ido;
    t4+=ido;
  }

  if(ido<2)return;
  if(ido==2)goto L105;


  t1=0;
  for(k=0;k<l1;k++){
    t2=t1;
    t4=t1<<2;
    t5=(t6=ido<<1)+t4;
    for(i=2;i<ido;i+=2){
      t3=(t2+=2);
      t4+=2;
      t5-=2;

      t3+=t0;
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
      ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
      t3+=t0;
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
      ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
      t3+=t0;
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
      ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];

      tr1=cr2+cr4;
      tr4=cr4-cr2;
      ti1=ci2+ci4;
      ti4=ci2-ci4;

      ti2=cc[t2]+ci3;
      ti3=cc[t2]-ci3;
      tr2=cc[t2-1]+cr3;
      tr3=cc[t2-1]-cr3;

      ch[t4-1]=tr1+tr2;
      ch[t4]=ti1+ti2;

      ch[t5-1]=tr3-ti4;
      ch[t5]=tr4-ti3;

      ch[t4+t6-1]=ti4+tr3;
      ch[t4+t6]=tr4+ti3;

      ch[t5+t6-1]=tr2-tr1;
      ch[t5+t6]=ti1-ti2;
    }
    t1+=ido;
  }
  if(ido&1)return;

 L105:

  t2=(t1=t0+ido-1)+(t0<<1);
  t3=ido<<2;
  t4=ido;
  t5=ido<<1;
  t6=ido;

  for(k=0;k<l1;k++){
    ti1=-hsqt2*(cc[t1]+cc[t2]);
    tr1=hsqt2*(cc[t1]-cc[t2]);

    ch[t4-1]=tr1+cc[t6-1];
    ch[t4+t5-1]=cc[t6-1]-tr1;

    ch[t4]=ti1-cc[t1+t0];
    ch[t4+t5]=ti1+cc[t1+t0];

    t1+=ido;
    t2+=ido;
    t4+=t3;
    t6+=ido;
  }
}

static void dradfg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
                          float *c2,float *ch,float *ch2,float *wa){

  static float tpi=6.283185307179586f;
  int idij,ipph,i,j,k,l,ic,ik,is;
  int t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10;
  float dc2,ai1,ai2,ar1,ar2,ds2;
  int nbd;
  float dcp,arg,dsp,ar1h,ar2h;
  int idp2,ipp2;

  arg=tpi/(float)ip;
  dcp=cos(arg);
  dsp=sin(arg);
  ipph=(ip+1)>>1;
  ipp2=ip;
  idp2=ido;
  nbd=(ido-1)>>1;
  t0=l1*ido;
  t10=ip*ido;

  if(ido==1)goto L119;
  for(ik=0;ik<idl1;ik++)ch2[ik]=c2[ik];

  t1=0;
  for(j=1;j<ip;j++){
    t1+=t0;
    t2=t1;
    for(k=0;k<l1;k++){
      ch[t2]=c1[t2];
      t2+=ido;
    }
  }

  is=-ido;
  t1=0;
  if(nbd>l1){
    for(j=1;j<ip;j++){
      t1+=t0;
      is+=ido;
      t2= -ido+t1;
      for(k=0;k<l1;k++){
        idij=is-1;
        t2+=ido;
        t3=t2;
        for(i=2;i<ido;i+=2){
          idij+=2;
          t3+=2;
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
        }
      }
    }
  }else{

    for(j=1;j<ip;j++){
      is+=ido;
      idij=is-1;
      t1+=t0;
      t2=t1;
      for(i=2;i<ido;i+=2){
        idij+=2;
        t2+=2;
        t3=t2;
        for(k=0;k<l1;k++){
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
          t3+=ido;
        }
      }
    }
  }

  t1=0;
  t2=ipp2*t0;
  if(nbd<l1){
    for(j=1;j<ipph;j++){
      t1+=t0;
      t2-=t0;
      t3=t1;
      t4=t2;
      for(i=2;i<ido;i+=2){
        t3+=2;
        t4+=2;
        t5=t3-ido;
        t6=t4-ido;
        for(k=0;k<l1;k++){
          t5+=ido;
          t6+=ido;
          c1[t5-1]=ch[t5-1]+ch[t6-1];
          c1[t6-1]=ch[t5]-ch[t6];
          c1[t5]=ch[t5]+ch[t6];
          c1[t6]=ch[t6-1]-ch[t5-1];
        }
      }
    }
  }else{
    for(j=1;j<ipph;j++){
      t1+=t0;
      t2-=t0;
      t3=t1;
      t4=t2;
      for(k=0;k<l1;k++){
        t5=t3;
        t6=t4;
        for(i=2;i<ido;i+=2){
          t5+=2;
          t6+=2;
          c1[t5-1]=ch[t5-1]+ch[t6-1];
          c1[t6-1]=ch[t5]-ch[t6];
          c1[t5]=ch[t5]+ch[t6];
          c1[t6]=ch[t6-1]-ch[t5-1];
        }
        t3+=ido;
        t4+=ido;
      }
    }
  }

L119:
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];

  t1=0;
  t2=ipp2*idl1;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1-ido;
    t4=t2-ido;
    for(k=0;k<l1;k++){
      t3+=ido;
      t4+=ido;
      c1[t3]=ch[t3]+ch[t4];
      c1[t4]=ch[t4]-ch[t3];
    }
  }

  ar1=1.f;
  ai1=0.f;
  t1=0;
  t2=ipp2*idl1;
  t3=(ip-1)*idl1;
  for(l=1;l<ipph;l++){
    t1+=idl1;
    t2-=idl1;
    ar1h=dcp*ar1-dsp*ai1;
    ai1=dcp*ai1+dsp*ar1;
    ar1=ar1h;
    t4=t1;
    t5=t2;
    t6=t3;
    t7=idl1;

    for(ik=0;ik<idl1;ik++){
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
      ch2[t5++]=ai1*c2[t6++];
    }

    dc2=ar1;
    ds2=ai1;
    ar2=ar1;
    ai2=ai1;

    t4=idl1;
    t5=(ipp2-1)*idl1;
    for(j=2;j<ipph;j++){
      t4+=idl1;
      t5-=idl1;

      ar2h=dc2*ar2-ds2*ai2;
      ai2=dc2*ai2+ds2*ar2;
      ar2=ar2h;

      t6=t1;
      t7=t2;
      t8=t4;
      t9=t5;
      for(ik=0;ik<idl1;ik++){
        ch2[t6++]+=ar2*c2[t8++];
        ch2[t7++]+=ai2*c2[t9++];
      }
    }
  }

  t1=0;
  for(j=1;j<ipph;j++){
    t1+=idl1;
    t2=t1;
    for(ik=0;ik<idl1;ik++)ch2[ik]+=c2[t2++];
  }

  if(ido<l1)goto L132;

  t1=0;
  t2=0;
  for(k=0;k<l1;k++){
    t3=t1;
    t4=t2;
    for(i=0;i<ido;i++)cc[t4++]=ch[t3++];
    t1+=ido;
    t2+=t10;
  }

  goto L135;

 L132:
  for(i=0;i<ido;i++){
    t1=i;
    t2=i;
    for(k=0;k<l1;k++){
      cc[t2]=ch[t1];
      t1+=ido;
      t2+=t10;
    }
  }

 L135:
  t1=0;
  t2=ido<<1;
  t3=0;
  t4=ipp2*t0;
  for(j=1;j<ipph;j++){

    t1+=t2;
    t3+=t0;
    t4-=t0;

    t5=t1;
    t6=t3;
    t7=t4;

    for(k=0;k<l1;k++){
      cc[t5-1]=ch[t6];
      cc[t5]=ch[t7];
      t5+=t10;
      t6+=ido;
      t7+=ido;
    }
  }

  if(ido==1)return;
  if(nbd<l1)goto L141;

  t1=-ido;
  t3=0;
  t4=0;
  t5=ipp2*t0;
  for(j=1;j<ipph;j++){
    t1+=t2;
    t3+=t2;
    t4+=t0;
    t5-=t0;
    t6=t1;
    t7=t3;
    t8=t4;
    t9=t5;
    for(k=0;k<l1;k++){
      for(i=2;i<ido;i+=2){
        ic=idp2-i;
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
        cc[ic+t6-1]=ch[i+t8-1]-ch[i+t9-1];
        cc[i+t7]=ch[i+t8]+ch[i+t9];
        cc[ic+t6]=ch[i+t9]-ch[i+t8];
      }
      t6+=t10;
      t7+=t10;
      t8+=ido;
      t9+=ido;
    }
  }
  return;

 L141:

  t1=-ido;
  t3=0;
  t4=0;
  t5=ipp2*t0;
  for(j=1;j<ipph;j++){
    t1+=t2;
    t3+=t2;
    t4+=t0;
    t5-=t0;
    for(i=2;i<ido;i+=2){
      t6=idp2+t1-i;
      t7=i+t3;
      t8=i+t4;
      t9=i+t5;
      for(k=0;k<l1;k++){
        cc[t7-1]=ch[t8-1]+ch[t9-1];
        cc[t6-1]=ch[t8-1]-ch[t9-1];
        cc[t7]=ch[t8]+ch[t9];
        cc[t6]=ch[t9]-ch[t8];
        t6+=t10;
        t7+=t10;
        t8+=ido;
        t9+=ido;
      }
    }
  }
}

static void drftf1(int n,float *c,float *ch,float *wa,int *ifac){
  int i,k1,l1,l2;
  int na,kh,nf;
  int ip,iw,ido,idl1,ix2,ix3;

  nf=ifac[1];
  na=1;
  l2=n;
  iw=n;

  for(k1=0;k1<nf;k1++){
    kh=nf-k1;
    ip=ifac[kh+1];
    l1=l2/ip;
    ido=n/l2;
    idl1=ido*l1;
    iw-=(ip-1)*ido;
    na=1-na;

    if(ip!=4)goto L102;

    ix2=iw+ido;
    ix3=ix2+ido;
    if(na!=0)
      dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    else
      dradf4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    goto L110;

 L102:
    if(ip!=2)goto L104;
    if(na!=0)goto L103;

    dradf2(ido,l1,c,ch,wa+iw-1);
    goto L110;

  L103:
    dradf2(ido,l1,ch,c,wa+iw-1);
    goto L110;

  L104:
    if(ido==1)na=1-na;
    if(na!=0)goto L109;

    dradfg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    na=1;
    goto L110;

  L109:
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    na=0;

  L110:
    l2=l1;
  }

  if(na==1)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

static void dradb2(int ido,int l1,float *cc,float *ch,float *wa1){
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ti2,tr2;

  t0=l1*ido;

  t1=0;
  t2=0;
  t3=(ido<<1)-1;
  for(k=0;k<l1;k++){
    ch[t1]=cc[t2]+cc[t3+t2];
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    t2=(t1+=ido)<<1;
  }

  if(ido<2)return;
  if(ido==2)goto L105;

  t1=0;
  t2=0;
  for(k=0;k<l1;k++){
    t3=t1;
    t5=(t4=t2)+(ido<<1);
    t6=t0+t1;
    for(i=2;i<ido;i+=2){
      t3+=2;
      t4+=2;
      t5-=2;
      t6+=2;
      ch[t3-1]=cc[t4-1]+cc[t5-1];
      tr2=cc[t4-1]-cc[t5-1];
      ch[t3]=cc[t4]-cc[t5];
      ti2=cc[t4]+cc[t5];
      ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
      ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
    }
    t2=(t1+=ido)<<1;
  }

  if(ido%2==1)return;

L105:
  t1=ido-1;
  t2=ido-1;
  for(k=0;k<l1;k++){
    ch[t1]=cc[t2]+cc[t2];
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    t1+=ido;
    t2+=ido<<1;
  }
}

static void dradb3(int ido,int l1,float *cc,float *ch,float *wa1,
                          float *wa2){
  static float taur = -.5f;
  static float taui = .8660254037844386f;
  int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10;
  float ci2,ci3,di2,di3,cr2,cr3,dr2,dr3,ti2,tr2;
  t0=l1*ido;

  t1=0;
  t2=t0<<1;
  t3=ido<<1;
  t4=ido+(ido<<1);
  t5=0;
  for(k=0;k<l1;k++){
    tr2=cc[t3-1]+cc[t3-1];
    cr2=cc[t5]+(taur*tr2);
    ch[t1]=cc[t5]+tr2;
    ci3=taui*(cc[t3]+cc[t3]);
    ch[t1+t0]=cr2-ci3;
    ch[t1+t2]=cr2+ci3;
    t1+=ido;
    t3+=t4;
    t5+=t4;
  }

  if(ido==1)return;

  t1=0;
  t3=ido<<1;
  for(k=0;k<l1;k++){
    t7=t1+(t1<<1);
    t6=(t5=t7+t3);
    t8=t1;
    t10=(t9=t1+t0)+t0;

    for(i=2;i<ido;i+=2){
      t5+=2;
      t6-=2;
      t7+=2;
      t8+=2;
      t9+=2;
      t10+=2;
      tr2=cc[t5-1]+cc[t6-1];
      cr2=cc[t7-1]+(taur*tr2);
      ch[t8-1]=cc[t7-1]+tr2;
      ti2=cc[t5]-cc[t6];
      ci2=cc[t7]+(taur*ti2);
      ch[t8]=cc[t7]+ti2;
      cr3=taui*(cc[t5-1]-cc[t6-1]);
      ci3=taui*(cc[t5]+cc[t6]);
      dr2=cr2-ci3;
      dr3=cr2+ci3;
      di2=ci2+cr3;
      di3=ci2-cr3;
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
      ch[t9]=wa1[i-2]*di2+wa1[i-1]*dr2;
      ch[t10-1]=wa2[i-2]*dr3-wa2[i-1]*di3;
      ch[t10]=wa2[i-2]*di3+wa2[i-1]*dr3;
    }
    t1+=ido;
  }
}

static void dradb4(int ido,int l1,float *cc,float *ch,float *wa1,
     float *wa2,float *wa3){
  static float sqrt2=1.414213562373095f;
  int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;

  t1=0;
  t2=ido<<2;
  t3=0;
  t6=ido<<1;
  for(k=0;k<l1;k++){
    t4=t3+t6;
    t5=t1;
    tr3=cc[t4-1]+cc[t4-1];
    tr4=cc[t4]+cc[t4];
    tr1=cc[t3]-cc[(t4+=t6)-1];
    tr2=cc[t3]+cc[t4-1];
    ch[t5]=tr2+tr3;
    ch[t5+=t0]=tr1-tr4;
    ch[t5+=t0]=tr2-tr3;
    ch[t5+=t0]=tr1+tr4;
    t1+=ido;
    t3+=t2;
  }

  if(ido<2)return;
  if(ido==2)goto L105;

  t1=0;
  for(k=0;k<l1;k++){
    t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
    t7=t1;
    for(i=2;i<ido;i+=2){
      t2+=2;
      t3+=2;
      t4-=2;
      t5-=2;
      t7+=2;
      ti1=cc[t2]+cc[t5];
      ti2=cc[t2]-cc[t5];
      ti3=cc[t3]-cc[t4];
      tr4=cc[t3]+cc[t4];
      tr1=cc[t2-1]-cc[t5-1];
      tr2=cc[t2-1]+cc[t5-1];
      ti4=cc[t3-1]-cc[t4-1];
      tr3=cc[t3-1]+cc[t4-1];
      ch[t7-1]=tr2+tr3;
      cr3=tr2-tr3;
      ch[t7]=ti2+ti3;
      ci3=ti2-ti3;
      cr2=tr1-tr4;
      cr4=tr1+tr4;
      ci2=ti1+ti4;
      ci4=ti1-ti4;

      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
      ch[(t8+=t0)-1]=wa2[i-2]*cr3-wa2[i-1]*ci3;
      ch[t8]=wa2[i-2]*ci3+wa2[i-1]*cr3;
      ch[(t8+=t0)-1]=wa3[i-2]*cr4-wa3[i-1]*ci4;
      ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
    }
    t1+=ido;
  }

  if(ido%2 == 1)return;

 L105:

  t1=ido;
  t2=ido<<2;
  t3=ido-1;
  t4=ido+(ido<<1);
  for(k=0;k<l1;k++){
    t5=t3;
    ti1=cc[t1]+cc[t4];
    ti2=cc[t4]-cc[t1];
    tr1=cc[t1-1]-cc[t4-1];
    tr2=cc[t1-1]+cc[t4-1];
    ch[t5]=tr2+tr2;
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    ch[t5+=t0]=ti2+ti2;
    ch[t5+=t0]=-sqrt2*(tr1+ti1);

    t3+=ido;
    t1+=t2;
    t4+=t2;
  }
}

static void dradbg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
            float *c2,float *ch,float *ch2,float *wa){
  static float tpi=6.283185307179586f;
  int idij,ipph,i,j,k,l,ik,is,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,
      t11,t12;
  float dc2,ai1,ai2,ar1,ar2,ds2;
  int nbd;
  float dcp,arg,dsp,ar1h,ar2h;
  int ipp2;

  t10=ip*ido;
  t0=l1*ido;
  arg=tpi/(float)ip;
  dcp=cos(arg);
  dsp=sin(arg);
  nbd=(ido-1)>>1;
  ipp2=ip;
  ipph=(ip+1)>>1;
  if(ido<l1)goto L103;

  t1=0;
  t2=0;
  for(k=0;k<l1;k++){
    t3=t1;
    t4=t2;
    for(i=0;i<ido;i++){
      ch[t3]=cc[t4];
      t3++;
      t4++;
    }
    t1+=ido;
    t2+=t10;
  }
  goto L106;

 L103:
  t1=0;
  for(i=0;i<ido;i++){
    t2=t1;
    t3=t1;
    for(k=0;k<l1;k++){
      ch[t2]=cc[t3];
      t2+=ido;
      t3+=t10;
    }
    t1++;
  }

 L106:
  t1=0;
  t2=ipp2*t0;
  t7=(t5=ido<<1);
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    t6=t5;
    for(k=0;k<l1;k++){
      ch[t3]=cc[t6-1]+cc[t6-1];
      ch[t4]=cc[t6]+cc[t6];
      t3+=ido;
      t4+=ido;
      t6+=t10;
    }
    t5+=t7;
  }

  if (ido == 1)goto L116;
  if(nbd<l1)goto L112;

  t1=0;
  t2=ipp2*t0;
  t7=0;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;

    t7+=(ido<<1);
    t8=t7;
    for(k=0;k<l1;k++){
      t5=t3;
      t6=t4;
      t9=t8;
      t11=t8;
      for(i=2;i<ido;i+=2){
        t5+=2;
        t6+=2;
        t9+=2;
        t11-=2;
        ch[t5-1]=cc[t9-1]+cc[t11-1];
        ch[t6-1]=cc[t9-1]-cc[t11-1];
        ch[t5]=cc[t9]-cc[t11];
        ch[t6]=cc[t9]+cc[t11];
      }
      t3+=ido;
      t4+=ido;
      t8+=t10;
    }
  }
  goto L116;

 L112:
  t1=0;
  t2=ipp2*t0;
  t7=0;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    t7+=(ido<<1);
    t8=t7;
    t9=t7;
    for(i=2;i<ido;i+=2){
      t3+=2;
      t4+=2;
      t8+=2;
      t9-=2;
      t5=t3;
      t6=t4;
      t11=t8;
      t12=t9;
      for(k=0;k<l1;k++){
        ch[t5-1]=cc[t11-1]+cc[t12-1];
        ch[t6-1]=cc[t11-1]-cc[t12-1];
        ch[t5]=cc[t11]-cc[t12];
        ch[t6]=cc[t11]+cc[t12];
        t5+=ido;
        t6+=ido;
        t11+=t10;
        t12+=t10;
      }
    }
  }

L116:
  ar1=1.f;
  ai1=0.f;
  t1=0;
  t9=(t2=ipp2*idl1);
  t3=(ip-1)*idl1;
  for(l=1;l<ipph;l++){
    t1+=idl1;
    t2-=idl1;

    ar1h=dcp*ar1-dsp*ai1;
    ai1=dcp*ai1+dsp*ar1;
    ar1=ar1h;
    t4=t1;
    t5=t2;
    t6=0;
    t7=idl1;
    t8=t3;
    for(ik=0;ik<idl1;ik++){
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
      c2[t5++]=ai1*ch2[t8++];
    }
    dc2=ar1;
    ds2=ai1;
    ar2=ar1;
    ai2=ai1;

    t6=idl1;
    t7=t9-idl1;
    for(j=2;j<ipph;j++){
      t6+=idl1;
      t7-=idl1;
      ar2h=dc2*ar2-ds2*ai2;
      ai2=dc2*ai2+ds2*ar2;
      ar2=ar2h;
      t4=t1;
      t5=t2;
      t11=t6;
      t12=t7;
      for(ik=0;ik<idl1;ik++){
        c2[t4++]+=ar2*ch2[t11++];
        c2[t5++]+=ai2*ch2[t12++];
      }
    }
  }

  t1=0;
  for(j=1;j<ipph;j++){
    t1+=idl1;
    t2=t1;
    for(ik=0;ik<idl1;ik++)ch2[ik]+=ch2[t2++];
  }

  t1=0;
  t2=ipp2*t0;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(k=0;k<l1;k++){
      ch[t3]=c1[t3]-c1[t4];
      ch[t4]=c1[t3]+c1[t4];
      t3+=ido;
      t4+=ido;
    }
  }

  if(ido==1)goto L132;
  if(nbd<l1)goto L128;

  t1=0;
  t2=ipp2*t0;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(k=0;k<l1;k++){
      t5=t3;
      t6=t4;
      for(i=2;i<ido;i+=2){
        t5+=2;
        t6+=2;
        ch[t5-1]=c1[t5-1]-c1[t6];
        ch[t6-1]=c1[t5-1]+c1[t6];
        ch[t5]=c1[t5]+c1[t6-1];
        ch[t6]=c1[t5]-c1[t6-1];
      }
      t3+=ido;
      t4+=ido;
    }
  }
  goto L132;

 L128:
  t1=0;
  t2=ipp2*t0;
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(i=2;i<ido;i+=2){
      t3+=2;
      t4+=2;
      t5=t3;
      t6=t4;
      for(k=0;k<l1;k++){
        ch[t5-1]=c1[t5-1]-c1[t6];
        ch[t6-1]=c1[t5-1]+c1[t6];
        ch[t5]=c1[t5]+c1[t6-1];
        ch[t6]=c1[t5]-c1[t6-1];
        t5+=ido;
        t6+=ido;
      }
    }
  }

L132:
  if(ido==1)return;

  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];

  t1=0;
  for(j=1;j<ip;j++){
    t2=(t1+=t0);
    for(k=0;k<l1;k++){
      c1[t2]=ch[t2];
      t2+=ido;
    }
  }

  if(nbd>l1)goto L139;

  is= -ido-1;
  t1=0;
  for(j=1;j<ip;j++){
    is+=ido;
    t1+=t0;
    idij=is;
    t2=t1;
    for(i=2;i<ido;i+=2){
      t2+=2;
      idij+=2;
      t3=t2;
      for(k=0;k<l1;k++){
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
        t3+=ido;
      }
    }
  }
  return;

 L139:
  is= -ido-1;
  t1=0;
  for(j=1;j<ip;j++){
    is+=ido;
    t1+=t0;
    t2=t1;
    for(k=0;k<l1;k++){
      idij=is;
      t3=t2;
      for(i=2;i<ido;i+=2){
        idij+=2;
        t3+=2;
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
      }
      t2+=ido;
    }
  }
}

static void drftb1(int n, float *c, float *ch, float *wa, int *ifac){
  int i,k1,l1,l2;
  int na;
  int nf,ip,iw,ix2,ix3,ido,idl1;

  nf=ifac[1];
  na=0;
  l1=1;
  iw=1;

  for(k1=0;k1<nf;k1++){
    ip=ifac[k1 + 2];
    l2=ip*l1;
    ido=n/l2;
    idl1=ido*l1;
    if(ip!=4)goto L103;
    ix2=iw+ido;
    ix3=ix2+ido;

    if(na!=0)
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    else
      dradb4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    na=1-na;
    goto L115;

  L103:
    if(ip!=2)goto L106;

    if(na!=0)
      dradb2(ido,l1,ch,c,wa+iw-1);
    else
      dradb2(ido,l1,c,ch,wa+iw-1);
    na=1-na;
    goto L115;

  L106:
    if(ip!=3)goto L109;

    ix2=iw+ido;
    if(na!=0)
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    else
      dradb3(ido,l1,c,ch,wa+iw-1,wa+ix2-1);
    na=1-na;
    goto L115;

  L109:
# 50755 "oggenc.c"
    if(na!=0)
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    else
      dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    if(ido==1)na=1-na;

  L115:
    l1=l2;
    iw+=(ip-1)*ido;
  }

  if(na==0)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

void drft_forward(drft_lookup *l,float *data){
  if(l->n==1)return;
  drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
}

void drft_backward(drft_lookup *l,float *data){
  if (l->n==1)return;
  drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
}

void drft_init(drft_lookup *l,int n){
  l->n=n;
  l->trigcache=calloc(3*n,sizeof(*l->trigcache));
  l->splitcache=calloc(32,sizeof(*l->splitcache));
  fdrffti(n, l->trigcache, l->splitcache);
}

void drft_clear(drft_lookup *l){
  if(l){
    if(l->trigcache)free(l->trigcache);
    if(l->splitcache)free(l->splitcache);
    memset(l,0,sizeof(*l));
  }
}
# 50813 "oggenc.c"
void _ve_envelope_init(envelope_lookup *e,vorbis_info *vi){
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *gi=&ci->psy_g_param;
  int ch=vi->channels;
  int i,j;
  int n=e->winlength=128;
  e->searchstep=64;

  e->minenergy=gi->preecho_minenergy;
  e->ch=ch;
  e->storage=128;
  e->cursor=ci->blocksizes[1]/2;
  e->mdct_win=calloc(n,sizeof(*e->mdct_win));
  mdct_init(&e->mdct,n);

  for(i=0;i<n;i++){
    e->mdct_win[i]=sin(i/(n-1.)*
# 50829 "oggenc.c" 3 4
                               3.14159265358979323846
# 50829 "oggenc.c"
                                   );
    e->mdct_win[i]*=e->mdct_win[i];
  }


  e->band[0].begin=2; e->band[0].end=4;
  e->band[1].begin=4; e->band[1].end=5;
  e->band[2].begin=6; e->band[2].end=6;
  e->band[3].begin=9; e->band[3].end=8;
  e->band[4].begin=13; e->band[4].end=8;
  e->band[5].begin=17; e->band[5].end=8;
  e->band[6].begin=22; e->band[6].end=8;

  for(j=0;j<7;j++){
    n=e->band[j].end;
    e->band[j].window=malloc(n*sizeof(*e->band[0].window));
    for(i=0;i<n;i++){
      e->band[j].window[i]=sin((i+.5)/n*
# 50846 "oggenc.c" 3 4
                                       3.14159265358979323846
# 50846 "oggenc.c"
                                           );
      e->band[j].total+=e->band[j].window[i];
    }
    e->band[j].total=1./e->band[j].total;
  }

  e->filter=calloc(7*ch,sizeof(*e->filter));
  e->mark=calloc(e->storage,sizeof(*e->mark));

}

void _ve_envelope_clear(envelope_lookup *e){
  int i;
  mdct_clear(&e->mdct);
  for(i=0;i<7;i++)
    free(e->band[i].window);
  free(e->mdct_win);
  free(e->filter);
  free(e->mark);
  memset(e,0,sizeof(*e));
}




static int _ve_amp(envelope_lookup *ve,
     vorbis_info_psy_global *gi,
     float *data,
     envelope_band *bands,
     envelope_filter_state *filters,
     long pos){
  long n=ve->winlength;
  int ret=0;
  long i,j;
  float decay;





  float minV=ve->minenergy;
  float *vec=
# 50887 "oggenc.c" 3 4
            __builtin_alloca (
# 50887 "oggenc.c"
            n*sizeof(*vec)
# 50887 "oggenc.c" 3 4
            )
# 50887 "oggenc.c"
                                  ;



  int stretch=((2)<(ve->stretch/2)?(ve->stretch/2):(2));
  float penalty=gi->stretch_penalty-(ve->stretch/2-2);
  if(penalty<0.f)penalty=0.f;
  if(penalty>gi->stretch_penalty)penalty=gi->stretch_penalty;





  for(i=0;i<n;i++)
    vec[i]=data[i]*ve->mdct_win[i];
  mdct_forward(&ve->mdct,vec,vec);





  {
    float temp=vec[0]*vec[0]+.7*vec[1]*vec[1]+.2*vec[2]*vec[2];
    int ptr=filters->nearptr;



    if(ptr==0){
      decay=filters->nearDC_acc=filters->nearDC_partialacc+temp;
      filters->nearDC_partialacc=temp;
    }else{
      decay=filters->nearDC_acc+=temp;
      filters->nearDC_partialacc+=temp;
    }
    filters->nearDC_acc-=filters->nearDC[ptr];
    filters->nearDC[ptr]=temp;

    decay*=(1./(15 +1));
    filters->nearptr++;
    if(filters->nearptr>=15)filters->nearptr=0;
    decay=todB(&decay)*.5-15.f;
  }




  for(i=0;i<n/2;i+=2){
    float val=vec[i]*vec[i]+vec[i+1]*vec[i+1];
    val=todB(&val)*.5f;
    if(val<decay)val=decay;
    if(val<minV)val=minV;
    vec[i>>1]=val;
    decay-=8.;
  }




  for(j=0;j<7;j++){
    float acc=0.;
    float valmax,valmin;


    for(i=0;i<bands[j].end;i++)
      acc+=vec[i+bands[j].begin]*bands[j].window[i];

    acc*=bands[j].total;


    {
      int p,this=filters[j].ampptr;
      float postmax,postmin,premax=-99999.f,premin=99999.f;

      p=this;
      p--;
      if(p<0)p+=(16 +2 -1);
      postmax=((acc)<(filters[j].ampbuf[p])?(filters[j].ampbuf[p]):(acc));
      postmin=((acc)>(filters[j].ampbuf[p])?(filters[j].ampbuf[p]):(acc));

      for(i=0;i<stretch;i++){
 p--;
 if(p<0)p+=(16 +2 -1);
 premax=((premax)<(filters[j].ampbuf[p])?(filters[j].ampbuf[p]):(premax));
 premin=((premin)>(filters[j].ampbuf[p])?(filters[j].ampbuf[p]):(premin));
      }

      valmin=postmin-premin;
      valmax=postmax-premax;


      filters[j].ampbuf[this]=acc;
      filters[j].ampptr++;
      if(filters[j].ampptr>=(16 +2 -1))filters[j].ampptr=0;
    }


    if(valmax>gi->preecho_thresh[j]+penalty){
      ret|=1;
      ret|=4;
    }
    if(valmin<gi->postecho_thresh[j]-penalty)ret|=2;
  }

  return(ret);
}






long _ve_envelope_search(vorbis_dsp_state *v){
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  vorbis_info_psy_global *gi=&ci->psy_g_param;
  envelope_lookup *ve=((private_state *)(v->backend_state))->ve;
  long i,j;

  int first=ve->current/ve->searchstep;
  int last=v->pcm_current/ve->searchstep-4;
  if(first<0)first=0;


  if(last+4 +2>ve->storage){
    ve->storage=last+4 +2;
    ve->mark=realloc(ve->mark,ve->storage*sizeof(*ve->mark));
  }

  for(j=first;j<last;j++){
    int ret=0;

    ve->stretch++;
    if(ve->stretch>12*2)
      ve->stretch=12*2;

    for(i=0;i<ve->ch;i++){
      float *pcm=v->pcm[i]+ve->searchstep*(j);
      ret|=_ve_amp(ve,gi,pcm,ve->band,ve->filter+i*7,j);
    }

    ve->mark[j+2]=0;
    if(ret&1){
      ve->mark[j]=1;
      ve->mark[j+1]=1;
    }

    if(ret&2){
      ve->mark[j]=1;
      if(j>0)ve->mark[j-1]=1;
    }

    if(ret&4)ve->stretch=-1;
  }

  ve->current=last*ve->searchstep;

  {
    long centerW=v->centerW;
    long testW=
      centerW+
      ci->blocksizes[v->W]/4+
      ci->blocksizes[1]/2+
      ci->blocksizes[0]/4;

    j=ve->cursor;

    while(j<ve->current-(ve->searchstep)){

      if(j>=testW)return(1);

      ve->cursor=j;

      if(ve->mark[j/ve->searchstep]){
 if(j>centerW){
# 51100 "oggenc.c"
   ve->curmark=j;
   if(j>=testW)return(1);
   return(0);
 }
      }
      j+=ve->searchstep;
    }
  }

  return(-1);
}

int _ve_envelope_mark(vorbis_dsp_state *v){
  envelope_lookup *ve=((private_state *)(v->backend_state))->ve;
  vorbis_info *vi=v->vi;
  codec_setup_info *ci=vi->codec_setup;
  long centerW=v->centerW;
  long beginW=centerW-ci->blocksizes[v->W]/4;
  long endW=centerW+ci->blocksizes[v->W]/4;
  if(v->W){
    beginW-=ci->blocksizes[v->lW]/4;
    endW+=ci->blocksizes[v->nW]/4;
  }else{
    beginW-=ci->blocksizes[0]/4;
    endW+=ci->blocksizes[0]/4;
  }

  if(ve->curmark>=beginW && ve->curmark<endW)return(1);
  {
    long first=beginW/ve->searchstep;
    long last=endW/ve->searchstep;
    long i;
    for(i=first;i<last;i++)
      if(ve->mark[i])return(1);
  }
  return(0);
}

void _ve_envelope_shift(envelope_lookup *e,long shift){
  int smallsize=e->current/e->searchstep+2;

  int smallshift=shift/e->searchstep;

  memmove(e->mark,e->mark+smallshift,(smallsize-smallshift)*sizeof(*e->mark));
# 51153 "oggenc.c"
  e->current-=shift;
  if(e->curmark>=0)
    e->curmark-=shift;
  e->cursor-=shift;
}
# 51210 "oggenc.c"
float vorbis_lpc_from_data(float *data,float *lpci,int n,int m){
  double *aut=
# 51211 "oggenc.c" 3 4
             __builtin_alloca (
# 51211 "oggenc.c"
             sizeof(*aut)*(m+1)
# 51211 "oggenc.c" 3 4
             )
# 51211 "oggenc.c"
                                       ;
  double *lpc=
# 51212 "oggenc.c" 3 4
             __builtin_alloca (
# 51212 "oggenc.c"
             sizeof(*lpc)*(m)
# 51212 "oggenc.c" 3 4
             )
# 51212 "oggenc.c"
                                     ;
  double error;
  int i,j;


  j=m+1;
  while(j--){
    double d=0;
    for(i=j;i<n;i++)d+=(double)data[i]*data[i-j];
    aut[j]=d;
  }



  error=aut[0];

  for(i=0;i<m;i++){
    double r= -aut[i+1];

    if(error==0){
      memset(lpci,0,m*sizeof(*lpci));
      return 0;
    }






    for(j=0;j<i;j++)r-=lpc[j]*aut[i-j];
    r/=error;



    lpc[i]=r;
    for(j=0;j<i/2;j++){
      double tmp=lpc[j];

      lpc[j]+=r*lpc[i-1-j];
      lpc[i-1-j]+=r*tmp;
    }
    if(i%2)lpc[j]+=lpc[j]*r;

    error*=1.f-r*r;
  }

  for(j=0;j<m;j++)lpci[j]=(float)lpc[j];




  return error;
}

void vorbis_lpc_predict(float *coeff,float *prime,int m,
                     float *data,long n){





  long i,j,o,p;
  float y;
  float *work=
# 51275 "oggenc.c" 3 4
             __builtin_alloca (
# 51275 "oggenc.c"
             sizeof(*work)*(m+n)
# 51275 "oggenc.c" 3 4
             )
# 51275 "oggenc.c"
                                        ;

  if(!prime)
    for(i=0;i<m;i++)
      work[i]=0.f;
  else
    for(i=0;i<m;i++)
      work[i]=prime[i];

  for(i=0;i<n;i++){
    y=0;
    o=i;
    p=m;
    for(j=0;j<m;j++)
      y-=work[o++]*coeff[--p];

    data[i]=work[o]=y;
  }
}
# 51313 "oggenc.c"
static float vwin64[32] = {
  0.0009460463F, 0.0085006468F, 0.0235352254F, 0.0458950567F,
  0.0753351908F, 0.1115073077F, 0.1539457973F, 0.2020557475F,
  0.2551056759F, 0.3122276645F, 0.3724270287F, 0.4346027792F,
  0.4975789974F, 0.5601459521F, 0.6211085051F, 0.6793382689F,
  0.7338252629F, 0.7837245849F, 0.8283939355F, 0.8674186656F,
  0.9006222429F, 0.9280614787F, 0.9500073081F, 0.9669131782F,
  0.9793740220F, 0.9880792941F, 0.9937636139F, 0.9971582668F,
  0.9989462667F, 0.9997230082F, 0.9999638688F, 0.9999995525F,
};

static float vwin128[64] = {
  0.0002365472F, 0.0021280687F, 0.0059065254F, 0.0115626550F,
  0.0190823442F, 0.0284463735F, 0.0396300935F, 0.0526030430F,
  0.0673285281F, 0.0837631763F, 0.1018564887F, 0.1215504095F,
  0.1427789367F, 0.1654677960F, 0.1895342001F, 0.2148867160F,
  0.2414252576F, 0.2690412240F, 0.2976177952F, 0.3270303960F,
  0.3571473350F, 0.3878306189F, 0.4189369387F, 0.4503188188F,
  0.4818259135F, 0.5133064334F, 0.5446086751F, 0.5755826278F,
  0.6060816248F, 0.6359640047F, 0.6650947483F, 0.6933470543F,
  0.7206038179F, 0.7467589810F, 0.7717187213F, 0.7954024542F,
  0.8177436264F, 0.8386902831F, 0.8582053981F, 0.8762669622F,
  0.8928678298F, 0.9080153310F, 0.9217306608F, 0.9340480615F,
  0.9450138200F, 0.9546851041F, 0.9631286621F, 0.9704194171F,
  0.9766389810F, 0.9818741197F, 0.9862151938F, 0.9897546035F,
  0.9925852598F, 0.9947991032F, 0.9964856900F, 0.9977308602F,
  0.9986155015F, 0.9992144193F, 0.9995953200F, 0.9998179155F,
  0.9999331503F, 0.9999825563F, 0.9999977357F, 0.9999999720F,
};

static float vwin256[128] = {
  0.0000591390F, 0.0005321979F, 0.0014780301F, 0.0028960636F,
  0.0047854363F, 0.0071449926F, 0.0099732775F, 0.0132685298F,
  0.0170286741F, 0.0212513119F, 0.0259337111F, 0.0310727950F,
  0.0366651302F, 0.0427069140F, 0.0491939614F, 0.0561216907F,
  0.0634851102F, 0.0712788035F, 0.0794969160F, 0.0881331402F,
  0.0971807028F, 0.1066323515F, 0.1164803426F, 0.1267164297F,
  0.1373318534F, 0.1483173323F, 0.1596630553F, 0.1713586755F,
  0.1833933062F, 0.1957555184F, 0.2084333404F, 0.2214142599F,
  0.2346852280F, 0.2482326664F, 0.2620424757F, 0.2761000481F,
  0.2903902813F, 0.3048975959F, 0.3196059553F, 0.3344988887F,
  0.3495595160F, 0.3647705766F, 0.3801144597F, 0.3955732382F,
  0.4111287047F, 0.4267624093F, 0.4424557009F, 0.4581897696F,
  0.4739456913F, 0.4897044744F, 0.5054471075F, 0.5211546088F,
  0.5368080763F, 0.5523887395F, 0.5678780103F, 0.5832575361F,
  0.5985092508F, 0.6136154277F, 0.6285587300F, 0.6433222619F,
  0.6578896175F, 0.6722449294F, 0.6863729144F, 0.7002589187F,
  0.7138889597F, 0.7272497662F, 0.7403288154F, 0.7531143679F,
  0.7655954985F, 0.7777621249F, 0.7896050322F, 0.8011158947F,
  0.8122872932F, 0.8231127294F, 0.8335866365F, 0.8437043850F,
  0.8534622861F, 0.8628575905F, 0.8718884835F, 0.8805540765F,
  0.8888543947F, 0.8967903616F, 0.9043637797F, 0.9115773078F,
  0.9184344360F, 0.9249394562F, 0.9310974312F, 0.9369141608F,
  0.9423961446F, 0.9475505439F, 0.9523851406F, 0.9569082947F,
  0.9611289005F, 0.9650563408F, 0.9687004405F, 0.9720714191F,
  0.9751798427F, 0.9780365753F, 0.9806527301F, 0.9830396204F,
  0.9852087111F, 0.9871715701F, 0.9889398207F, 0.9905250941F,
  0.9919389832F, 0.9931929973F, 0.9942985174F, 0.9952667537F,
  0.9961087037F, 0.9968351119F, 0.9974564312F, 0.9979827858F,
  0.9984239359F, 0.9987892441F, 0.9990876435F, 0.9993276081F,
  0.9995171241F, 0.9996636648F, 0.9997741654F, 0.9998550016F,
  0.9999119692F, 0.9999502656F, 0.9999744742F, 0.9999885497F,
  0.9999958064F, 0.9999989077F, 0.9999998584F, 0.9999999983F,
};

static float vwin512[256] = {
  0.0000147849F, 0.0001330607F, 0.0003695946F, 0.0007243509F,
  0.0011972759F, 0.0017882983F, 0.0024973285F, 0.0033242588F,
  0.0042689632F, 0.0053312973F, 0.0065110982F, 0.0078081841F,
  0.0092223540F, 0.0107533880F, 0.0124010466F, 0.0141650703F,
  0.0160451800F, 0.0180410758F, 0.0201524373F, 0.0223789233F,
  0.0247201710F, 0.0271757958F, 0.0297453914F, 0.0324285286F,
  0.0352247556F, 0.0381335972F, 0.0411545545F, 0.0442871045F,
  0.0475306997F, 0.0508847676F, 0.0543487103F, 0.0579219038F,
  0.0616036982F, 0.0653934164F, 0.0692903546F, 0.0732937809F,
  0.0774029356F, 0.0816170305F, 0.0859352485F, 0.0903567428F,
  0.0948806375F, 0.0995060259F, 0.1042319712F, 0.1090575056F,
  0.1139816300F, 0.1190033137F, 0.1241214941F, 0.1293350764F,
  0.1346429333F, 0.1400439046F, 0.1455367974F, 0.1511203852F,
  0.1567934083F, 0.1625545735F, 0.1684025537F, 0.1743359881F,
  0.1803534820F, 0.1864536069F, 0.1926349000F, 0.1988958650F,
  0.2052349715F, 0.2116506555F, 0.2181413191F, 0.2247053313F,
  0.2313410275F, 0.2380467105F, 0.2448206500F, 0.2516610835F,
  0.2585662164F, 0.2655342226F, 0.2725632448F, 0.2796513950F,
  0.2867967551F, 0.2939973773F, 0.3012512852F, 0.3085564739F,
  0.3159109111F, 0.3233125375F, 0.3307592680F, 0.3382489922F,
  0.3457795756F, 0.3533488602F, 0.3609546657F, 0.3685947904F,
  0.3762670121F, 0.3839690896F, 0.3916987634F, 0.3994537572F,
  0.4072317788F, 0.4150305215F, 0.4228476653F, 0.4306808783F,
  0.4385278181F, 0.4463861329F, 0.4542534630F, 0.4621274424F,
  0.4700057001F, 0.4778858615F, 0.4857655502F, 0.4936423891F,
  0.5015140023F, 0.5093780165F, 0.5172320626F, 0.5250737772F,
  0.5329008043F, 0.5407107971F, 0.5485014192F, 0.5562703465F,
  0.5640152688F, 0.5717338914F, 0.5794239366F, 0.5870831457F,
  0.5947092801F, 0.6023001235F, 0.6098534829F, 0.6173671907F,
  0.6248391059F, 0.6322671161F, 0.6396491384F, 0.6469831217F,
  0.6542670475F, 0.6614989319F, 0.6686768267F, 0.6757988210F,
  0.6828630426F, 0.6898676592F, 0.6968108799F, 0.7036909564F,
  0.7105061843F, 0.7172549043F, 0.7239355032F, 0.7305464154F,
  0.7370861235F, 0.7435531598F, 0.7499461068F, 0.7562635986F,
  0.7625043214F, 0.7686670148F, 0.7747504721F, 0.7807535410F,
  0.7866751247F, 0.7925141825F, 0.7982697296F, 0.8039408387F,
  0.8095266395F, 0.8150263196F, 0.8204391248F, 0.8257643590F,
  0.8310013848F, 0.8361496236F, 0.8412085555F, 0.8461777194F,
  0.8510567129F, 0.8558451924F, 0.8605428730F, 0.8651495278F,
  0.8696649882F, 0.8740891432F, 0.8784219392F, 0.8826633797F,
  0.8868135244F, 0.8908724888F, 0.8948404441F, 0.8987176157F,
  0.9025042831F, 0.9062007791F, 0.9098074886F, 0.9133248482F,
  0.9167533451F, 0.9200935163F, 0.9233459472F, 0.9265112712F,
  0.9295901680F, 0.9325833632F, 0.9354916263F, 0.9383157705F,
  0.9410566504F, 0.9437151618F, 0.9462922398F, 0.9487888576F,
  0.9512060252F, 0.9535447882F, 0.9558062262F, 0.9579914516F,
  0.9601016078F, 0.9621378683F, 0.9641014348F, 0.9659935361F,
  0.9678154261F, 0.9695683830F, 0.9712537071F, 0.9728727198F,
  0.9744267618F, 0.9759171916F, 0.9773453842F, 0.9787127293F,
  0.9800206298F, 0.9812705006F, 0.9824637665F, 0.9836018613F,
  0.9846862258F, 0.9857183066F, 0.9866995544F, 0.9876314227F,
  0.9885153662F, 0.9893528393F, 0.9901452948F, 0.9908941823F,
  0.9916009470F, 0.9922670279F, 0.9928938570F, 0.9934828574F,
  0.9940354423F, 0.9945530133F, 0.9950369595F, 0.9954886562F,
  0.9959094633F, 0.9963007242F, 0.9966637649F, 0.9969998925F,
  0.9973103939F, 0.9975965351F, 0.9978595598F, 0.9981006885F,
  0.9983211172F, 0.9985220166F, 0.9987045311F, 0.9988697776F,
  0.9990188449F, 0.9991527924F, 0.9992726499F, 0.9993794157F,
  0.9994740570F, 0.9995575079F, 0.9996306699F, 0.9996944099F,
  0.9997495605F, 0.9997969190F, 0.9998372465F, 0.9998712678F,
  0.9998996704F, 0.9999231041F, 0.9999421807F, 0.9999574732F,
  0.9999695157F, 0.9999788026F, 0.9999857885F, 0.9999908879F,
  0.9999944746F, 0.9999968817F, 0.9999984010F, 0.9999992833F,
  0.9999997377F, 0.9999999317F, 0.9999999911F, 0.9999999999F,
};

static float vwin1024[512] = {
  0.0000036962F, 0.0000332659F, 0.0000924041F, 0.0001811086F,
  0.0002993761F, 0.0004472021F, 0.0006245811F, 0.0008315063F,
  0.0010679699F, 0.0013339631F, 0.0016294757F, 0.0019544965F,
  0.0023090133F, 0.0026930125F, 0.0031064797F, 0.0035493989F,
  0.0040217533F, 0.0045235250F, 0.0050546946F, 0.0056152418F,
  0.0062051451F, 0.0068243817F, 0.0074729278F, 0.0081507582F,
  0.0088578466F, 0.0095941655F, 0.0103596863F, 0.0111543789F,
  0.0119782122F, 0.0128311538F, 0.0137131701F, 0.0146242260F,
  0.0155642855F, 0.0165333111F, 0.0175312640F, 0.0185581042F,
  0.0196137903F, 0.0206982797F, 0.0218115284F, 0.0229534910F,
  0.0241241208F, 0.0253233698F, 0.0265511886F, 0.0278075263F,
  0.0290923308F, 0.0304055484F, 0.0317471241F, 0.0331170013F,
  0.0345151222F, 0.0359414274F, 0.0373958560F, 0.0388783456F,
  0.0403888325F, 0.0419272511F, 0.0434935347F, 0.0450876148F,
  0.0467094213F, 0.0483588828F, 0.0500359261F, 0.0517404765F,
  0.0534724575F, 0.0552317913F, 0.0570183983F, 0.0588321971F,
  0.0606731048F, 0.0625410369F, 0.0644359070F, 0.0663576272F,
  0.0683061077F, 0.0702812571F, 0.0722829821F, 0.0743111878F,
  0.0763657775F, 0.0784466526F, 0.0805537129F, 0.0826868561F,
  0.0848459782F, 0.0870309736F, 0.0892417345F, 0.0914781514F,
  0.0937401128F, 0.0960275056F, 0.0983402145F, 0.1006781223F,
  0.1030411101F, 0.1054290568F, 0.1078418397F, 0.1102793336F,
  0.1127414119F, 0.1152279457F, 0.1177388042F, 0.1202738544F,
  0.1228329618F, 0.1254159892F, 0.1280227980F, 0.1306532471F,
  0.1333071937F, 0.1359844927F, 0.1386849970F, 0.1414085575F,
  0.1441550230F, 0.1469242403F, 0.1497160539F, 0.1525303063F,
  0.1553668381F, 0.1582254875F, 0.1611060909F, 0.1640084822F,
  0.1669324936F, 0.1698779549F, 0.1728446939F, 0.1758325362F,
  0.1788413055F, 0.1818708232F, 0.1849209084F, 0.1879913785F,
  0.1910820485F, 0.1941927312F, 0.1973232376F, 0.2004733764F,
  0.2036429541F, 0.2068317752F, 0.2100396421F, 0.2132663552F,
  0.2165117125F, 0.2197755102F, 0.2230575422F, 0.2263576007F,
  0.2296754753F, 0.2330109540F, 0.2363638225F, 0.2397338646F,
  0.2431208619F, 0.2465245941F, 0.2499448389F, 0.2533813719F,
  0.2568339669F, 0.2603023956F, 0.2637864277F, 0.2672858312F,
  0.2708003718F, 0.2743298135F, 0.2778739186F, 0.2814324472F,
  0.2850051576F, 0.2885918065F, 0.2921921485F, 0.2958059366F,
  0.2994329219F, 0.3030728538F, 0.3067254799F, 0.3103905462F,
  0.3140677969F, 0.3177569747F, 0.3214578205F, 0.3251700736F,
  0.3288934718F, 0.3326277513F, 0.3363726468F, 0.3401278914F,
  0.3438932168F, 0.3476683533F, 0.3514530297F, 0.3552469734F,
  0.3590499106F, 0.3628615659F, 0.3666816630F, 0.3705099239F,
  0.3743460698F, 0.3781898204F, 0.3820408945F, 0.3858990095F,
  0.3897638820F, 0.3936352274F, 0.3975127601F, 0.4013961936F,
  0.4052852405F, 0.4091796123F, 0.4130790198F, 0.4169831732F,
  0.4208917815F, 0.4248045534F, 0.4287211965F, 0.4326414181F,
  0.4365649248F, 0.4404914225F, 0.4444206167F, 0.4483522125F,
  0.4522859146F, 0.4562214270F, 0.4601584538F, 0.4640966984F,
  0.4680358644F, 0.4719756548F, 0.4759157726F, 0.4798559209F,
  0.4837958024F, 0.4877351199F, 0.4916735765F, 0.4956108751F,
  0.4995467188F, 0.5034808109F, 0.5074128550F, 0.5113425550F,
  0.5152696149F, 0.5191937395F, 0.5231146336F, 0.5270320028F,
  0.5309455530F, 0.5348549910F, 0.5387600239F, 0.5426603597F,
  0.5465557070F, 0.5504457754F, 0.5543302752F, 0.5582089175F,
  0.5620814145F, 0.5659474793F, 0.5698068262F, 0.5736591704F,
  0.5775042283F, 0.5813417176F, 0.5851713571F, 0.5889928670F,
  0.5928059689F, 0.5966103856F, 0.6004058415F, 0.6041920626F,
  0.6079687761F, 0.6117357113F, 0.6154925986F, 0.6192391705F,
  0.6229751612F, 0.6267003064F, 0.6304143441F, 0.6341170137F,
  0.6378080569F, 0.6414872173F, 0.6451542405F, 0.6488088741F,
  0.6524508681F, 0.6560799742F, 0.6596959469F, 0.6632985424F,
  0.6668875197F, 0.6704626398F, 0.6740236662F, 0.6775703649F,
  0.6811025043F, 0.6846198554F, 0.6881221916F, 0.6916092892F,
  0.6950809269F, 0.6985368861F, 0.7019769510F, 0.7054009085F,
  0.7088085484F, 0.7121996632F, 0.7155740484F, 0.7189315023F,
  0.7222718263F, 0.7255948245F, 0.7289003043F, 0.7321880760F,
  0.7354579530F, 0.7387097518F, 0.7419432921F, 0.7451583966F,
  0.7483548915F, 0.7515326059F, 0.7546913723F, 0.7578310265F,
  0.7609514077F, 0.7640523581F, 0.7671337237F, 0.7701953535F,
  0.7732371001F, 0.7762588195F, 0.7792603711F, 0.7822416178F,
  0.7852024259F, 0.7881426654F, 0.7910622097F, 0.7939609356F,
  0.7968387237F, 0.7996954579F, 0.8025310261F, 0.8053453193F,
  0.8081382324F, 0.8109096638F, 0.8136595156F, 0.8163876936F,
  0.8190941071F, 0.8217786690F, 0.8244412960F, 0.8270819086F,
  0.8297004305F, 0.8322967896F, 0.8348709171F, 0.8374227481F,
  0.8399522213F, 0.8424592789F, 0.8449438672F, 0.8474059356F,
  0.8498454378F, 0.8522623306F, 0.8546565748F, 0.8570281348F,
  0.8593769787F, 0.8617030779F, 0.8640064080F, 0.8662869477F,
  0.8685446796F, 0.8707795899F, 0.8729916682F, 0.8751809079F,
  0.8773473059F, 0.8794908626F, 0.8816115819F, 0.8837094713F,
  0.8857845418F, 0.8878368079F, 0.8898662874F, 0.8918730019F,
  0.8938569760F, 0.8958182380F, 0.8977568194F, 0.8996727552F,
  0.9015660837F, 0.9034368465F, 0.9052850885F, 0.9071108577F,
  0.9089142057F, 0.9106951869F, 0.9124538591F, 0.9141902832F,
  0.9159045233F, 0.9175966464F, 0.9192667228F, 0.9209148257F,
  0.9225410313F, 0.9241454187F, 0.9257280701F, 0.9272890704F,
  0.9288285075F, 0.9303464720F, 0.9318430576F, 0.9333183603F,
  0.9347724792F, 0.9362055158F, 0.9376175745F, 0.9390087622F,
  0.9403791881F, 0.9417289644F, 0.9430582055F, 0.9443670283F,
  0.9456555521F, 0.9469238986F, 0.9481721917F, 0.9494005577F,
  0.9506091252F, 0.9517980248F, 0.9529673894F, 0.9541173540F,
  0.9552480557F, 0.9563596334F, 0.9574522282F, 0.9585259830F,
  0.9595810428F, 0.9606175542F, 0.9616356656F, 0.9626355274F,
  0.9636172915F, 0.9645811114F, 0.9655271425F, 0.9664555414F,
  0.9673664664F, 0.9682600774F, 0.9691365355F, 0.9699960034F,
  0.9708386448F, 0.9716646250F, 0.9724741103F, 0.9732672685F,
  0.9740442683F, 0.9748052795F, 0.9755504729F, 0.9762800205F,
  0.9769940950F, 0.9776928703F, 0.9783765210F, 0.9790452223F,
  0.9796991504F, 0.9803384823F, 0.9809633954F, 0.9815740679F,
  0.9821706784F, 0.9827534063F, 0.9833224312F, 0.9838779332F,
  0.9844200928F, 0.9849490910F, 0.9854651087F, 0.9859683274F,
  0.9864589286F, 0.9869370940F, 0.9874030054F, 0.9878568447F,
  0.9882987937F, 0.9887290343F, 0.9891477481F, 0.9895551169F,
  0.9899513220F, 0.9903365446F, 0.9907109658F, 0.9910747662F,
  0.9914281260F, 0.9917712252F, 0.9921042433F, 0.9924273593F,
  0.9927407516F, 0.9930445982F, 0.9933390763F, 0.9936243626F,
  0.9939006331F, 0.9941680631F, 0.9944268269F, 0.9946770982F,
  0.9949190498F, 0.9951528537F, 0.9953786808F, 0.9955967011F,
  0.9958070836F, 0.9960099963F, 0.9962056061F, 0.9963940787F,
  0.9965755786F, 0.9967502693F, 0.9969183129F, 0.9970798704F,
  0.9972351013F, 0.9973841640F, 0.9975272151F, 0.9976644103F,
  0.9977959036F, 0.9979218476F, 0.9980423932F, 0.9981576901F,
  0.9982678862F, 0.9983731278F, 0.9984735596F, 0.9985693247F,
  0.9986605645F, 0.9987474186F, 0.9988300248F, 0.9989085193F,
  0.9989830364F, 0.9990537085F, 0.9991206662F, 0.9991840382F,
  0.9992439513F, 0.9993005303F, 0.9993538982F, 0.9994041757F,
  0.9994514817F, 0.9994959330F, 0.9995376444F, 0.9995767286F,
  0.9996132960F, 0.9996474550F, 0.9996793121F, 0.9997089710F,
  0.9997365339F, 0.9997621003F, 0.9997857677F, 0.9998076311F,
  0.9998277836F, 0.9998463156F, 0.9998633155F, 0.9998788692F,
  0.9998930603F, 0.9999059701F, 0.9999176774F, 0.9999282586F,
  0.9999377880F, 0.9999463370F, 0.9999539749F, 0.9999607685F,
  0.9999667820F, 0.9999720773F, 0.9999767136F, 0.9999807479F,
  0.9999842344F, 0.9999872249F, 0.9999897688F, 0.9999919127F,
  0.9999937009F, 0.9999951749F, 0.9999963738F, 0.9999973342F,
  0.9999980900F, 0.9999986724F, 0.9999991103F, 0.9999994297F,
  0.9999996543F, 0.9999998049F, 0.9999999000F, 0.9999999552F,
  0.9999999836F, 0.9999999957F, 0.9999999994F, 1.0000000000F,
};

static float vwin2048[1024] = {
  0.0000009241F, 0.0000083165F, 0.0000231014F, 0.0000452785F,
  0.0000748476F, 0.0001118085F, 0.0001561608F, 0.0002079041F,
  0.0002670379F, 0.0003335617F, 0.0004074748F, 0.0004887765F,
  0.0005774661F, 0.0006735427F, 0.0007770054F, 0.0008878533F,
  0.0010060853F, 0.0011317002F, 0.0012646969F, 0.0014050742F,
  0.0015528307F, 0.0017079650F, 0.0018704756F, 0.0020403610F,
  0.0022176196F, 0.0024022497F, 0.0025942495F, 0.0027936173F,
  0.0030003511F, 0.0032144490F, 0.0034359088F, 0.0036647286F,
  0.0039009061F, 0.0041444391F, 0.0043953253F, 0.0046535621F,
  0.0049191472F, 0.0051920781F, 0.0054723520F, 0.0057599664F,
  0.0060549184F, 0.0063572052F, 0.0066668239F, 0.0069837715F,
  0.0073080449F, 0.0076396410F, 0.0079785566F, 0.0083247884F,
  0.0086783330F, 0.0090391871F, 0.0094073470F, 0.0097828092F,
  0.0101655700F, 0.0105556258F, 0.0109529726F, 0.0113576065F,
  0.0117695237F, 0.0121887200F, 0.0126151913F, 0.0130489335F,
  0.0134899422F, 0.0139382130F, 0.0143937415F, 0.0148565233F,
  0.0153265536F, 0.0158038279F, 0.0162883413F, 0.0167800889F,
  0.0172790660F, 0.0177852675F, 0.0182986882F, 0.0188193231F,
  0.0193471668F, 0.0198822141F, 0.0204244594F, 0.0209738974F,
  0.0215305225F, 0.0220943289F, 0.0226653109F, 0.0232434627F,
  0.0238287784F, 0.0244212519F, 0.0250208772F, 0.0256276481F,
  0.0262415582F, 0.0268626014F, 0.0274907711F, 0.0281260608F,
  0.0287684638F, 0.0294179736F, 0.0300745833F, 0.0307382859F,
  0.0314090747F, 0.0320869424F, 0.0327718819F, 0.0334638860F,
  0.0341629474F, 0.0348690586F, 0.0355822122F, 0.0363024004F,
  0.0370296157F, 0.0377638502F, 0.0385050960F, 0.0392533451F,
  0.0400085896F, 0.0407708211F, 0.0415400315F, 0.0423162123F,
  0.0430993552F, 0.0438894515F, 0.0446864926F, 0.0454904698F,
  0.0463013742F, 0.0471191969F, 0.0479439288F, 0.0487755607F,
  0.0496140836F, 0.0504594879F, 0.0513117642F, 0.0521709031F,
  0.0530368949F, 0.0539097297F, 0.0547893979F, 0.0556758894F,
  0.0565691941F, 0.0574693019F, 0.0583762026F, 0.0592898858F,
  0.0602103410F, 0.0611375576F, 0.0620715250F, 0.0630122324F,
  0.0639596688F, 0.0649138234F, 0.0658746848F, 0.0668422421F,
  0.0678164838F, 0.0687973985F, 0.0697849746F, 0.0707792005F,
  0.0717800645F, 0.0727875547F, 0.0738016591F, 0.0748223656F,
  0.0758496620F, 0.0768835359F, 0.0779239751F, 0.0789709668F,
  0.0800244985F, 0.0810845574F, 0.0821511306F, 0.0832242052F,
  0.0843037679F, 0.0853898056F, 0.0864823050F, 0.0875812525F,
  0.0886866347F, 0.0897984378F, 0.0909166480F, 0.0920412513F,
  0.0931722338F, 0.0943095813F, 0.0954532795F, 0.0966033140F,
  0.0977596702F, 0.0989223336F, 0.1000912894F, 0.1012665227F,
  0.1024480185F, 0.1036357616F, 0.1048297369F, 0.1060299290F,
  0.1072363224F, 0.1084489014F, 0.1096676504F, 0.1108925534F,
  0.1121235946F, 0.1133607577F, 0.1146040267F, 0.1158533850F,
  0.1171088163F, 0.1183703040F, 0.1196378312F, 0.1209113812F,
  0.1221909370F, 0.1234764815F, 0.1247679974F, 0.1260654674F,
  0.1273688740F, 0.1286781995F, 0.1299934263F, 0.1313145365F,
  0.1326415121F, 0.1339743349F, 0.1353129866F, 0.1366574490F,
  0.1380077035F, 0.1393637315F, 0.1407255141F, 0.1420930325F,
  0.1434662677F, 0.1448452004F, 0.1462298115F, 0.1476200814F,
  0.1490159906F, 0.1504175195F, 0.1518246482F, 0.1532373569F,
  0.1546556253F, 0.1560794333F, 0.1575087606F, 0.1589435866F,
  0.1603838909F, 0.1618296526F, 0.1632808509F, 0.1647374648F,
  0.1661994731F, 0.1676668546F, 0.1691395880F, 0.1706176516F,
  0.1721010238F, 0.1735896829F, 0.1750836068F, 0.1765827736F,
  0.1780871610F, 0.1795967468F, 0.1811115084F, 0.1826314234F,
  0.1841564689F, 0.1856866221F, 0.1872218600F, 0.1887621595F,
  0.1903074974F, 0.1918578503F, 0.1934131947F, 0.1949735068F,
  0.1965387630F, 0.1981089393F, 0.1996840117F, 0.2012639560F,
  0.2028487479F, 0.2044383630F, 0.2060327766F, 0.2076319642F,
  0.2092359007F, 0.2108445614F, 0.2124579211F, 0.2140759545F,
  0.2156986364F, 0.2173259411F, 0.2189578432F, 0.2205943168F,
  0.2222353361F, 0.2238808751F, 0.2255309076F, 0.2271854073F,
  0.2288443480F, 0.2305077030F, 0.2321754457F, 0.2338475493F,
  0.2355239869F, 0.2372047315F, 0.2388897560F, 0.2405790329F,
  0.2422725350F, 0.2439702347F, 0.2456721043F, 0.2473781159F,
  0.2490882418F, 0.2508024539F, 0.2525207240F, 0.2542430237F,
  0.2559693248F, 0.2576995986F, 0.2594338166F, 0.2611719498F,
  0.2629139695F, 0.2646598466F, 0.2664095520F, 0.2681630564F,
  0.2699203304F, 0.2716813445F, 0.2734460691F, 0.2752144744F,
  0.2769865307F, 0.2787622079F, 0.2805414760F, 0.2823243047F,
  0.2841106637F, 0.2859005227F, 0.2876938509F, 0.2894906179F,
  0.2912907928F, 0.2930943447F, 0.2949012426F, 0.2967114554F,
  0.2985249520F, 0.3003417009F, 0.3021616708F, 0.3039848301F,
  0.3058111471F, 0.3076405901F, 0.3094731273F, 0.3113087266F,
  0.3131473560F, 0.3149889833F, 0.3168335762F, 0.3186811024F,
  0.3205315294F, 0.3223848245F, 0.3242409552F, 0.3260998886F,
  0.3279615918F, 0.3298260319F, 0.3316931758F, 0.3335629903F,
  0.3354354423F, 0.3373104982F, 0.3391881247F, 0.3410682882F,
  0.3429509551F, 0.3448360917F, 0.3467236642F, 0.3486136387F,
  0.3505059811F, 0.3524006575F, 0.3542976336F, 0.3561968753F,
  0.3580983482F, 0.3600020179F, 0.3619078499F, 0.3638158096F,
  0.3657258625F, 0.3676379737F, 0.3695521086F, 0.3714682321F,
  0.3733863094F, 0.3753063055F, 0.3772281852F, 0.3791519134F,
  0.3810774548F, 0.3830047742F, 0.3849338362F, 0.3868646053F,
  0.3887970459F, 0.3907311227F, 0.3926667998F, 0.3946040417F,
  0.3965428125F, 0.3984830765F, 0.4004247978F, 0.4023679403F,
  0.4043124683F, 0.4062583455F, 0.4082055359F, 0.4101540034F,
  0.4121037117F, 0.4140546246F, 0.4160067058F, 0.4179599190F,
  0.4199142277F, 0.4218695956F, 0.4238259861F, 0.4257833627F,
  0.4277416888F, 0.4297009279F, 0.4316610433F, 0.4336219983F,
  0.4355837562F, 0.4375462803F, 0.4395095337F, 0.4414734797F,
  0.4434380815F, 0.4454033021F, 0.4473691046F, 0.4493354521F,
  0.4513023078F, 0.4532696345F, 0.4552373954F, 0.4572055533F,
  0.4591740713F, 0.4611429123F, 0.4631120393F, 0.4650814151F,
  0.4670510028F, 0.4690207650F, 0.4709906649F, 0.4729606651F,
  0.4749307287F, 0.4769008185F, 0.4788708972F, 0.4808409279F,
  0.4828108732F, 0.4847806962F, 0.4867503597F, 0.4887198264F,
  0.4906890593F, 0.4926580213F, 0.4946266753F, 0.4965949840F,
  0.4985629105F, 0.5005304176F, 0.5024974683F, 0.5044640255F,
  0.5064300522F, 0.5083955114F, 0.5103603659F, 0.5123245790F,
  0.5142881136F, 0.5162509328F, 0.5182129997F, 0.5201742774F,
  0.5221347290F, 0.5240943178F, 0.5260530070F, 0.5280107598F,
  0.5299675395F, 0.5319233095F, 0.5338780330F, 0.5358316736F,
  0.5377841946F, 0.5397355596F, 0.5416857320F, 0.5436346755F,
  0.5455823538F, 0.5475287304F, 0.5494737691F, 0.5514174337F,
  0.5533596881F, 0.5553004962F, 0.5572398218F, 0.5591776291F,
  0.5611138821F, 0.5630485449F, 0.5649815818F, 0.5669129570F,
  0.5688426349F, 0.5707705799F, 0.5726967564F, 0.5746211290F,
  0.5765436624F, 0.5784643212F, 0.5803830702F, 0.5822998743F,
  0.5842146984F, 0.5861275076F, 0.5880382669F, 0.5899469416F,
  0.5918534968F, 0.5937578981F, 0.5956601107F, 0.5975601004F,
  0.5994578326F, 0.6013532732F, 0.6032463880F, 0.6051371429F,
  0.6070255039F, 0.6089114372F, 0.6107949090F, 0.6126758856F,
  0.6145543334F, 0.6164302191F, 0.6183035092F, 0.6201741706F,
  0.6220421700F, 0.6239074745F, 0.6257700513F, 0.6276298674F,
  0.6294868903F, 0.6313410873F, 0.6331924262F, 0.6350408745F,
  0.6368864001F, 0.6387289710F, 0.6405685552F, 0.6424051209F,
  0.6442386364F, 0.6460690702F, 0.6478963910F, 0.6497205673F,
  0.6515415682F, 0.6533593625F, 0.6551739194F, 0.6569852082F,
  0.6587931984F, 0.6605978593F, 0.6623991609F, 0.6641970728F,
  0.6659915652F, 0.6677826081F, 0.6695701718F, 0.6713542268F,
  0.6731347437F, 0.6749116932F, 0.6766850461F, 0.6784547736F,
  0.6802208469F, 0.6819832374F, 0.6837419164F, 0.6854968559F,
  0.6872480275F, 0.6889954034F, 0.6907389556F, 0.6924786566F,
  0.6942144788F, 0.6959463950F, 0.6976743780F, 0.6993984008F,
  0.7011184365F, 0.7028344587F, 0.7045464407F, 0.7062543564F,
  0.7079581796F, 0.7096578844F, 0.7113534450F, 0.7130448359F,
  0.7147320316F, 0.7164150070F, 0.7180937371F, 0.7197681970F,
  0.7214383620F, 0.7231042077F, 0.7247657098F, 0.7264228443F,
  0.7280755871F, 0.7297239147F, 0.7313678035F, 0.7330072301F,
  0.7346421715F, 0.7362726046F, 0.7378985069F, 0.7395198556F,
  0.7411366285F, 0.7427488034F, 0.7443563584F, 0.7459592717F,
  0.7475575218F, 0.7491510873F, 0.7507399471F, 0.7523240803F,
  0.7539034661F, 0.7554780839F, 0.7570479136F, 0.7586129349F,
  0.7601731279F, 0.7617284730F, 0.7632789506F, 0.7648245416F,
  0.7663652267F, 0.7679009872F, 0.7694318044F, 0.7709576599F,
  0.7724785354F, 0.7739944130F, 0.7755052749F, 0.7770111035F,
  0.7785118815F, 0.7800075916F, 0.7814982170F, 0.7829837410F,
  0.7844641472F, 0.7859394191F, 0.7874095408F, 0.7888744965F,
  0.7903342706F, 0.7917888476F, 0.7932382124F, 0.7946823501F,
  0.7961212460F, 0.7975548855F, 0.7989832544F, 0.8004063386F,
  0.8018241244F, 0.8032365981F, 0.8046437463F, 0.8060455560F,
  0.8074420141F, 0.8088331080F, 0.8102188253F, 0.8115991536F,
  0.8129740810F, 0.8143435957F, 0.8157076861F, 0.8170663409F,
  0.8184195489F, 0.8197672994F, 0.8211095817F, 0.8224463853F,
  0.8237777001F, 0.8251035161F, 0.8264238235F, 0.8277386129F,
  0.8290478750F, 0.8303516008F, 0.8316497814F, 0.8329424083F,
  0.8342294731F, 0.8355109677F, 0.8367868841F, 0.8380572148F,
  0.8393219523F, 0.8405810893F, 0.8418346190F, 0.8430825345F,
  0.8443248294F, 0.8455614974F, 0.8467925323F, 0.8480179285F,
  0.8492376802F, 0.8504517822F, 0.8516602292F, 0.8528630164F,
  0.8540601391F, 0.8552515928F, 0.8564373733F, 0.8576174766F,
  0.8587918990F, 0.8599606368F, 0.8611236868F, 0.8622810460F,
  0.8634327113F, 0.8645786802F, 0.8657189504F, 0.8668535195F,
  0.8679823857F, 0.8691055472F, 0.8702230025F, 0.8713347503F,
  0.8724407896F, 0.8735411194F, 0.8746357394F, 0.8757246489F,
  0.8768078479F, 0.8778853364F, 0.8789571146F, 0.8800231832F,
  0.8810835427F, 0.8821381942F, 0.8831871387F, 0.8842303777F,
  0.8852679127F, 0.8862997456F, 0.8873258784F, 0.8883463132F,
  0.8893610527F, 0.8903700994F, 0.8913734562F, 0.8923711263F,
  0.8933631129F, 0.8943494196F, 0.8953300500F, 0.8963050083F,
  0.8972742985F, 0.8982379249F, 0.8991958922F, 0.9001482052F,
  0.9010948688F, 0.9020358883F, 0.9029712690F, 0.9039010165F,
  0.9048251367F, 0.9057436357F, 0.9066565195F, 0.9075637946F,
  0.9084654678F, 0.9093615456F, 0.9102520353F, 0.9111369440F,
  0.9120162792F, 0.9128900484F, 0.9137582595F, 0.9146209204F,
  0.9154780394F, 0.9163296248F, 0.9171756853F, 0.9180162296F,
  0.9188512667F, 0.9196808057F, 0.9205048559F, 0.9213234270F,
  0.9221365285F, 0.9229441704F, 0.9237463629F, 0.9245431160F,
  0.9253344404F, 0.9261203465F, 0.9269008453F, 0.9276759477F,
  0.9284456648F, 0.9292100080F, 0.9299689889F, 0.9307226190F,
  0.9314709103F, 0.9322138747F, 0.9329515245F, 0.9336838721F,
  0.9344109300F, 0.9351327108F, 0.9358492275F, 0.9365604931F,
  0.9372665208F, 0.9379673239F, 0.9386629160F, 0.9393533107F,
  0.9400385220F, 0.9407185637F, 0.9413934501F, 0.9420631954F,
  0.9427278141F, 0.9433873208F, 0.9440417304F, 0.9446910576F,
  0.9453353176F, 0.9459745255F, 0.9466086968F, 0.9472378469F,
  0.9478619915F, 0.9484811463F, 0.9490953274F, 0.9497045506F,
  0.9503088323F, 0.9509081888F, 0.9515026365F, 0.9520921921F,
  0.9526768723F, 0.9532566940F, 0.9538316742F, 0.9544018300F,
  0.9549671786F, 0.9555277375F, 0.9560835241F, 0.9566345562F,
  0.9571808513F, 0.9577224275F, 0.9582593027F, 0.9587914949F,
  0.9593190225F, 0.9598419038F, 0.9603601571F, 0.9608738012F,
  0.9613828546F, 0.9618873361F, 0.9623872646F, 0.9628826591F,
  0.9633735388F, 0.9638599227F, 0.9643418303F, 0.9648192808F,
  0.9652922939F, 0.9657608890F, 0.9662250860F, 0.9666849046F,
  0.9671403646F, 0.9675914861F, 0.9680382891F, 0.9684807937F,
  0.9689190202F, 0.9693529890F, 0.9697827203F, 0.9702082347F,
  0.9706295529F, 0.9710466953F, 0.9714596828F, 0.9718685362F,
  0.9722732762F, 0.9726739240F, 0.9730705005F, 0.9734630267F,
  0.9738515239F, 0.9742360134F, 0.9746165163F, 0.9749930540F,
  0.9753656481F, 0.9757343198F, 0.9760990909F, 0.9764599829F,
  0.9768170175F, 0.9771702164F, 0.9775196013F, 0.9778651941F,
  0.9782070167F, 0.9785450909F, 0.9788794388F, 0.9792100824F,
  0.9795370437F, 0.9798603449F, 0.9801800080F, 0.9804960554F,
  0.9808085092F, 0.9811173916F, 0.9814227251F, 0.9817245318F,
  0.9820228343F, 0.9823176549F, 0.9826090160F, 0.9828969402F,
  0.9831814498F, 0.9834625674F, 0.9837403156F, 0.9840147169F,
  0.9842857939F, 0.9845535692F, 0.9848180654F, 0.9850793052F,
  0.9853373113F, 0.9855921062F, 0.9858437127F, 0.9860921535F,
  0.9863374512F, 0.9865796287F, 0.9868187085F, 0.9870547136F,
  0.9872876664F, 0.9875175899F, 0.9877445067F, 0.9879684396F,
  0.9881894112F, 0.9884074444F, 0.9886225619F, 0.9888347863F,
  0.9890441404F, 0.9892506468F, 0.9894543284F, 0.9896552077F,
  0.9898533074F, 0.9900486502F, 0.9902412587F, 0.9904311555F,
  0.9906183633F, 0.9908029045F, 0.9909848019F, 0.9911640779F,
  0.9913407550F, 0.9915148557F, 0.9916864025F, 0.9918554179F,
  0.9920219241F, 0.9921859437F, 0.9923474989F, 0.9925066120F,
  0.9926633054F, 0.9928176012F, 0.9929695218F, 0.9931190891F,
  0.9932663254F, 0.9934112527F, 0.9935538932F, 0.9936942686F,
  0.9938324012F, 0.9939683126F, 0.9941020248F, 0.9942335597F,
  0.9943629388F, 0.9944901841F, 0.9946153170F, 0.9947383593F,
  0.9948593325F, 0.9949782579F, 0.9950951572F, 0.9952100516F,
  0.9953229625F, 0.9954339111F, 0.9955429186F, 0.9956500062F,
  0.9957551948F, 0.9958585056F, 0.9959599593F, 0.9960595769F,
  0.9961573792F, 0.9962533869F, 0.9963476206F, 0.9964401009F,
  0.9965308483F, 0.9966198833F, 0.9967072261F, 0.9967928971F,
  0.9968769164F, 0.9969593041F, 0.9970400804F, 0.9971192651F,
  0.9971968781F, 0.9972729391F, 0.9973474680F, 0.9974204842F,
  0.9974920074F, 0.9975620569F, 0.9976306521F, 0.9976978122F,
  0.9977635565F, 0.9978279039F, 0.9978908736F, 0.9979524842F,
  0.9980127547F, 0.9980717037F, 0.9981293499F, 0.9981857116F,
  0.9982408073F, 0.9982946554F, 0.9983472739F, 0.9983986810F,
  0.9984488947F, 0.9984979328F, 0.9985458132F, 0.9985925534F,
  0.9986381711F, 0.9986826838F, 0.9987261086F, 0.9987684630F,
  0.9988097640F, 0.9988500286F, 0.9988892738F, 0.9989275163F,
  0.9989647727F, 0.9990010597F, 0.9990363938F, 0.9990707911F,
  0.9991042679F, 0.9991368404F, 0.9991685244F, 0.9991993358F,
  0.9992292905F, 0.9992584038F, 0.9992866914F, 0.9993141686F,
  0.9993408506F, 0.9993667526F, 0.9993918895F, 0.9994162761F,
  0.9994399273F, 0.9994628576F, 0.9994850815F, 0.9995066133F,
  0.9995274672F, 0.9995476574F, 0.9995671978F, 0.9995861021F,
  0.9996043841F, 0.9996220573F, 0.9996391352F, 0.9996556310F,
  0.9996715579F, 0.9996869288F, 0.9997017568F, 0.9997160543F,
  0.9997298342F, 0.9997431088F, 0.9997558905F, 0.9997681914F,
  0.9997800236F, 0.9997913990F, 0.9998023292F, 0.9998128261F,
  0.9998229009F, 0.9998325650F, 0.9998418296F, 0.9998507058F,
  0.9998592044F, 0.9998673362F, 0.9998751117F, 0.9998825415F,
  0.9998896358F, 0.9998964047F, 0.9999028584F, 0.9999090066F,
  0.9999148590F, 0.9999204253F, 0.9999257148F, 0.9999307368F,
  0.9999355003F, 0.9999400144F, 0.9999442878F, 0.9999483293F,
  0.9999521472F, 0.9999557499F, 0.9999591457F, 0.9999623426F,
  0.9999653483F, 0.9999681708F, 0.9999708175F, 0.9999732959F,
  0.9999756132F, 0.9999777765F, 0.9999797928F, 0.9999816688F,
  0.9999834113F, 0.9999850266F, 0.9999865211F, 0.9999879009F,
  0.9999891721F, 0.9999903405F, 0.9999914118F, 0.9999923914F,
  0.9999932849F, 0.9999940972F, 0.9999948336F, 0.9999954989F,
  0.9999960978F, 0.9999966349F, 0.9999971146F, 0.9999975411F,
  0.9999979185F, 0.9999982507F, 0.9999985414F, 0.9999987944F,
  0.9999990129F, 0.9999992003F, 0.9999993596F, 0.9999994939F,
  0.9999996059F, 0.9999996981F, 0.9999997732F, 0.9999998333F,
  0.9999998805F, 0.9999999170F, 0.9999999444F, 0.9999999643F,
  0.9999999784F, 0.9999999878F, 0.9999999937F, 0.9999999972F,
  0.9999999990F, 0.9999999997F, 1.0000000000F, 1.0000000000F,
};

static float vwin4096[2048] = {
  0.0000002310F, 0.0000020791F, 0.0000057754F, 0.0000113197F,
  0.0000187121F, 0.0000279526F, 0.0000390412F, 0.0000519777F,
  0.0000667623F, 0.0000833949F, 0.0001018753F, 0.0001222036F,
  0.0001443798F, 0.0001684037F, 0.0001942754F, 0.0002219947F,
  0.0002515616F, 0.0002829761F, 0.0003162380F, 0.0003513472F,
  0.0003883038F, 0.0004271076F, 0.0004677584F, 0.0005102563F,
  0.0005546011F, 0.0006007928F, 0.0006488311F, 0.0006987160F,
  0.0007504474F, 0.0008040251F, 0.0008594490F, 0.0009167191F,
  0.0009758351F, 0.0010367969F, 0.0010996044F, 0.0011642574F,
  0.0012307558F, 0.0012990994F, 0.0013692880F, 0.0014413216F,
  0.0015151998F, 0.0015909226F, 0.0016684898F, 0.0017479011F,
  0.0018291565F, 0.0019122556F, 0.0019971983F, 0.0020839845F,
  0.0021726138F, 0.0022630861F, 0.0023554012F, 0.0024495588F,
  0.0025455588F, 0.0026434008F, 0.0027430847F, 0.0028446103F,
  0.0029479772F, 0.0030531853F, 0.0031602342F, 0.0032691238F,
  0.0033798538F, 0.0034924239F, 0.0036068338F, 0.0037230833F,
  0.0038411721F, 0.0039610999F, 0.0040828664F, 0.0042064714F,
  0.0043319145F, 0.0044591954F, 0.0045883139F, 0.0047192696F,
  0.0048520622F, 0.0049866914F, 0.0051231569F, 0.0052614583F,
  0.0054015953F, 0.0055435676F, 0.0056873748F, 0.0058330166F,
  0.0059804926F, 0.0061298026F, 0.0062809460F, 0.0064339226F,
  0.0065887320F, 0.0067453738F, 0.0069038476F, 0.0070641531F,
  0.0072262899F, 0.0073902575F, 0.0075560556F, 0.0077236838F,
  0.0078931417F, 0.0080644288F, 0.0082375447F, 0.0084124891F,
  0.0085892615F, 0.0087678614F, 0.0089482885F, 0.0091305422F,
  0.0093146223F, 0.0095005281F, 0.0096882592F, 0.0098778153F,
  0.0100691958F, 0.0102624002F, 0.0104574281F, 0.0106542791F,
  0.0108529525F, 0.0110534480F, 0.0112557651F, 0.0114599032F,
  0.0116658618F, 0.0118736405F, 0.0120832387F, 0.0122946560F,
  0.0125078917F, 0.0127229454F, 0.0129398166F, 0.0131585046F,
  0.0133790090F, 0.0136013292F, 0.0138254647F, 0.0140514149F,
  0.0142791792F, 0.0145087572F, 0.0147401481F, 0.0149733515F,
  0.0152083667F, 0.0154451932F, 0.0156838304F, 0.0159242777F,
  0.0161665345F, 0.0164106001F, 0.0166564741F, 0.0169041557F,
  0.0171536443F, 0.0174049393F, 0.0176580401F, 0.0179129461F,
  0.0181696565F, 0.0184281708F, 0.0186884883F, 0.0189506084F,
  0.0192145303F, 0.0194802535F, 0.0197477772F, 0.0200171008F,
  0.0202882236F, 0.0205611449F, 0.0208358639F, 0.0211123801F,
  0.0213906927F, 0.0216708011F, 0.0219527043F, 0.0222364019F,
  0.0225218930F, 0.0228091769F, 0.0230982529F, 0.0233891203F,
  0.0236817782F, 0.0239762259F, 0.0242724628F, 0.0245704880F,
  0.0248703007F, 0.0251719002F, 0.0254752858F, 0.0257804565F,
  0.0260874117F, 0.0263961506F, 0.0267066722F, 0.0270189760F,
  0.0273330609F, 0.0276489263F, 0.0279665712F, 0.0282859949F,
  0.0286071966F, 0.0289301753F, 0.0292549303F, 0.0295814607F,
  0.0299097656F, 0.0302398442F, 0.0305716957F, 0.0309053191F,
  0.0312407135F, 0.0315778782F, 0.0319168122F, 0.0322575145F,
  0.0325999844F, 0.0329442209F, 0.0332902231F, 0.0336379900F,
  0.0339875208F, 0.0343388146F, 0.0346918703F, 0.0350466871F,
  0.0354032640F, 0.0357616000F, 0.0361216943F, 0.0364835458F,
  0.0368471535F, 0.0372125166F, 0.0375796339F, 0.0379485046F,
  0.0383191276F, 0.0386915020F, 0.0390656267F, 0.0394415008F,
  0.0398191231F, 0.0401984927F, 0.0405796086F, 0.0409624698F,
  0.0413470751F, 0.0417334235F, 0.0421215141F, 0.0425113457F,
  0.0429029172F, 0.0432962277F, 0.0436912760F, 0.0440880610F,
  0.0444865817F, 0.0448868370F, 0.0452888257F, 0.0456925468F,
  0.0460979992F, 0.0465051816F, 0.0469140931F, 0.0473247325F,
  0.0477370986F, 0.0481511902F, 0.0485670064F, 0.0489845458F,
  0.0494038074F, 0.0498247899F, 0.0502474922F, 0.0506719131F,
  0.0510980514F, 0.0515259060F, 0.0519554756F, 0.0523867590F,
  0.0528197550F, 0.0532544624F, 0.0536908800F, 0.0541290066F,
  0.0545688408F, 0.0550103815F, 0.0554536274F, 0.0558985772F,
  0.0563452297F, 0.0567935837F, 0.0572436377F, 0.0576953907F,
  0.0581488412F, 0.0586039880F, 0.0590608297F, 0.0595193651F,
  0.0599795929F, 0.0604415117F, 0.0609051202F, 0.0613704170F,
  0.0618374009F, 0.0623060704F, 0.0627764243F, 0.0632484611F,
  0.0637221795F, 0.0641975781F, 0.0646746555F, 0.0651534104F,
  0.0656338413F, 0.0661159469F, 0.0665997257F, 0.0670851763F,
  0.0675722973F, 0.0680610873F, 0.0685515448F, 0.0690436684F,
  0.0695374567F, 0.0700329081F, 0.0705300213F, 0.0710287947F,
  0.0715292269F, 0.0720313163F, 0.0725350616F, 0.0730404612F,
  0.0735475136F, 0.0740562172F, 0.0745665707F, 0.0750785723F,
  0.0755922207F, 0.0761075143F, 0.0766244515F, 0.0771430307F,
  0.0776632505F, 0.0781851092F, 0.0787086052F, 0.0792337371F,
  0.0797605032F, 0.0802889018F, 0.0808189315F, 0.0813505905F,
  0.0818838773F, 0.0824187903F, 0.0829553277F, 0.0834934881F,
  0.0840332697F, 0.0845746708F, 0.0851176899F, 0.0856623252F,
  0.0862085751F, 0.0867564379F, 0.0873059119F, 0.0878569954F,
  0.0884096867F, 0.0889639840F, 0.0895198858F, 0.0900773902F,
  0.0906364955F, 0.0911972000F, 0.0917595019F, 0.0923233995F,
  0.0928888909F, 0.0934559745F, 0.0940246485F, 0.0945949110F,
  0.0951667604F, 0.0957401946F, 0.0963152121F, 0.0968918109F,
  0.0974699893F, 0.0980497454F, 0.0986310773F, 0.0992139832F,
  0.0997984614F, 0.1003845098F, 0.1009721267F, 0.1015613101F,
  0.1021520582F, 0.1027443692F, 0.1033382410F, 0.1039336718F,
  0.1045306597F, 0.1051292027F, 0.1057292990F, 0.1063309466F,
  0.1069341435F, 0.1075388878F, 0.1081451776F, 0.1087530108F,
  0.1093623856F, 0.1099732998F, 0.1105857516F, 0.1111997389F,
  0.1118152597F, 0.1124323121F, 0.1130508939F, 0.1136710032F,
  0.1142926379F, 0.1149157960F, 0.1155404755F, 0.1161666742F,
  0.1167943901F, 0.1174236211F, 0.1180543652F, 0.1186866202F,
  0.1193203841F, 0.1199556548F, 0.1205924300F, 0.1212307078F,
  0.1218704860F, 0.1225117624F, 0.1231545349F, 0.1237988013F,
  0.1244445596F, 0.1250918074F, 0.1257405427F, 0.1263907632F,
  0.1270424667F, 0.1276956512F, 0.1283503142F, 0.1290064537F,
  0.1296640674F, 0.1303231530F, 0.1309837084F, 0.1316457312F,
  0.1323092193F, 0.1329741703F, 0.1336405820F, 0.1343084520F,
  0.1349777782F, 0.1356485582F, 0.1363207897F, 0.1369944704F,
  0.1376695979F, 0.1383461700F, 0.1390241842F, 0.1397036384F,
  0.1403845300F, 0.1410668567F, 0.1417506162F, 0.1424358061F,
  0.1431224240F, 0.1438104674F, 0.1444999341F, 0.1451908216F,
  0.1458831274F, 0.1465768492F, 0.1472719844F, 0.1479685308F,
  0.1486664857F, 0.1493658468F, 0.1500666115F, 0.1507687775F,
  0.1514723422F, 0.1521773031F, 0.1528836577F, 0.1535914035F,
  0.1543005380F, 0.1550110587F, 0.1557229631F, 0.1564362485F,
  0.1571509124F, 0.1578669524F, 0.1585843657F, 0.1593031499F,
  0.1600233024F, 0.1607448205F, 0.1614677017F, 0.1621919433F,
  0.1629175428F, 0.1636444975F, 0.1643728047F, 0.1651024619F,
  0.1658334665F, 0.1665658156F, 0.1672995067F, 0.1680345371F,
  0.1687709041F, 0.1695086050F, 0.1702476372F, 0.1709879978F,
  0.1717296843F, 0.1724726938F, 0.1732170237F, 0.1739626711F,
  0.1747096335F, 0.1754579079F, 0.1762074916F, 0.1769583819F,
  0.1777105760F, 0.1784640710F, 0.1792188642F, 0.1799749529F,
  0.1807323340F, 0.1814910049F, 0.1822509628F, 0.1830122046F,
  0.1837747277F, 0.1845385292F, 0.1853036062F, 0.1860699558F,
  0.1868375751F, 0.1876064613F, 0.1883766114F, 0.1891480226F,
  0.1899206919F, 0.1906946164F, 0.1914697932F, 0.1922462194F,
  0.1930238919F, 0.1938028079F, 0.1945829643F, 0.1953643583F,
  0.1961469868F, 0.1969308468F, 0.1977159353F, 0.1985022494F,
  0.1992897859F, 0.2000785420F, 0.2008685145F, 0.2016597005F,
  0.2024520968F, 0.2032457005F, 0.2040405084F, 0.2048365175F,
  0.2056337247F, 0.2064321269F, 0.2072317211F, 0.2080325041F,
  0.2088344727F, 0.2096376240F, 0.2104419547F, 0.2112474618F,
  0.2120541420F, 0.2128619923F, 0.2136710094F, 0.2144811902F,
  0.2152925315F, 0.2161050301F, 0.2169186829F, 0.2177334866F,
  0.2185494381F, 0.2193665340F, 0.2201847712F, 0.2210041465F,
  0.2218246565F, 0.2226462981F, 0.2234690680F, 0.2242929629F,
  0.2251179796F, 0.2259441147F, 0.2267713650F, 0.2275997272F,
  0.2284291979F, 0.2292597739F, 0.2300914518F, 0.2309242283F,
  0.2317581001F, 0.2325930638F, 0.2334291160F, 0.2342662534F,
  0.2351044727F, 0.2359437703F, 0.2367841431F, 0.2376255875F,
  0.2384681001F, 0.2393116776F, 0.2401563165F, 0.2410020134F,
  0.2418487649F, 0.2426965675F, 0.2435454178F, 0.2443953122F,
  0.2452462474F, 0.2460982199F, 0.2469512262F, 0.2478052628F,
  0.2486603262F, 0.2495164129F, 0.2503735194F, 0.2512316421F,
  0.2520907776F, 0.2529509222F, 0.2538120726F, 0.2546742250F,
  0.2555373760F, 0.2564015219F, 0.2572666593F, 0.2581327845F,
  0.2589998939F, 0.2598679840F, 0.2607370510F, 0.2616070916F,
  0.2624781019F, 0.2633500783F, 0.2642230173F, 0.2650969152F,
  0.2659717684F, 0.2668475731F, 0.2677243257F, 0.2686020226F,
  0.2694806601F, 0.2703602344F, 0.2712407419F, 0.2721221789F,
  0.2730045417F, 0.2738878265F, 0.2747720297F, 0.2756571474F,
  0.2765431760F, 0.2774301117F, 0.2783179508F, 0.2792066895F,
  0.2800963240F, 0.2809868505F, 0.2818782654F, 0.2827705647F,
  0.2836637447F, 0.2845578016F, 0.2854527315F, 0.2863485307F,
  0.2872451953F, 0.2881427215F, 0.2890411055F, 0.2899403433F,
  0.2908404312F, 0.2917413654F, 0.2926431418F, 0.2935457567F,
  0.2944492061F, 0.2953534863F, 0.2962585932F, 0.2971645230F,
  0.2980712717F, 0.2989788356F, 0.2998872105F, 0.3007963927F,
  0.3017063781F, 0.3026171629F, 0.3035287430F, 0.3044411145F,
  0.3053542736F, 0.3062682161F, 0.3071829381F, 0.3080984356F,
  0.3090147047F, 0.3099317413F, 0.3108495414F, 0.3117681011F,
  0.3126874163F, 0.3136074830F, 0.3145282972F, 0.3154498548F,
  0.3163721517F, 0.3172951841F, 0.3182189477F, 0.3191434385F,
  0.3200686525F, 0.3209945856F, 0.3219212336F, 0.3228485927F,
  0.3237766585F, 0.3247054271F, 0.3256348943F, 0.3265650560F,
  0.3274959081F, 0.3284274465F, 0.3293596671F, 0.3302925657F,
  0.3312261382F, 0.3321603804F, 0.3330952882F, 0.3340308574F,
  0.3349670838F, 0.3359039634F, 0.3368414919F, 0.3377796651F,
  0.3387184789F, 0.3396579290F, 0.3405980113F, 0.3415387216F,
  0.3424800556F, 0.3434220091F, 0.3443645779F, 0.3453077578F,
  0.3462515446F, 0.3471959340F, 0.3481409217F, 0.3490865036F,
  0.3500326754F, 0.3509794328F, 0.3519267715F, 0.3528746873F,
  0.3538231759F, 0.3547722330F, 0.3557218544F, 0.3566720357F,
  0.3576227727F, 0.3585740610F, 0.3595258964F, 0.3604782745F,
  0.3614311910F, 0.3623846417F, 0.3633386221F, 0.3642931280F,
  0.3652481549F, 0.3662036987F, 0.3671597548F, 0.3681163191F,
  0.3690733870F, 0.3700309544F, 0.3709890167F, 0.3719475696F,
  0.3729066089F, 0.3738661299F, 0.3748261285F, 0.3757866002F,
  0.3767475406F, 0.3777089453F, 0.3786708100F, 0.3796331302F,
  0.3805959014F, 0.3815591194F, 0.3825227796F, 0.3834868777F,
  0.3844514093F, 0.3854163698F, 0.3863817549F, 0.3873475601F,
  0.3883137810F, 0.3892804131F, 0.3902474521F, 0.3912148933F,
  0.3921827325F, 0.3931509650F, 0.3941195865F, 0.3950885925F,
  0.3960579785F, 0.3970277400F, 0.3979978725F, 0.3989683716F,
  0.3999392328F, 0.4009104516F, 0.4018820234F, 0.4028539438F,
  0.4038262084F, 0.4047988125F, 0.4057717516F, 0.4067450214F,
  0.4077186172F, 0.4086925345F, 0.4096667688F, 0.4106413155F,
  0.4116161703F, 0.4125913284F, 0.4135667854F, 0.4145425368F,
  0.4155185780F, 0.4164949044F, 0.4174715116F, 0.4184483949F,
  0.4194255498F, 0.4204029718F, 0.4213806563F, 0.4223585987F,
  0.4233367946F, 0.4243152392F, 0.4252939281F, 0.4262728566F,
  0.4272520202F, 0.4282314144F, 0.4292110345F, 0.4301908760F,
  0.4311709343F, 0.4321512047F, 0.4331316828F, 0.4341123639F,
  0.4350932435F, 0.4360743168F, 0.4370555794F, 0.4380370267F,
  0.4390186540F, 0.4400004567F, 0.4409824303F, 0.4419645701F,
  0.4429468716F, 0.4439293300F, 0.4449119409F, 0.4458946996F,
  0.4468776014F, 0.4478606418F, 0.4488438162F, 0.4498271199F,
  0.4508105483F, 0.4517940967F, 0.4527777607F, 0.4537615355F,
  0.4547454165F, 0.4557293991F, 0.4567134786F, 0.4576976505F,
  0.4586819101F, 0.4596662527F, 0.4606506738F, 0.4616351687F,
  0.4626197328F, 0.4636043614F, 0.4645890499F, 0.4655737936F,
  0.4665585880F, 0.4675434284F, 0.4685283101F, 0.4695132286F,
  0.4704981791F, 0.4714831570F, 0.4724681577F, 0.4734531766F,
  0.4744382089F, 0.4754232501F, 0.4764082956F, 0.4773933406F,
  0.4783783806F, 0.4793634108F, 0.4803484267F, 0.4813334237F,
  0.4823183969F, 0.4833033419F, 0.4842882540F, 0.4852731285F,
  0.4862579608F, 0.4872427462F, 0.4882274802F, 0.4892121580F,
  0.4901967751F, 0.4911813267F, 0.4921658083F, 0.4931502151F,
  0.4941345427F, 0.4951187863F, 0.4961029412F, 0.4970870029F,
  0.4980709667F, 0.4990548280F, 0.5000385822F, 0.5010222245F,
  0.5020057505F, 0.5029891553F, 0.5039724345F, 0.5049555834F,
  0.5059385973F, 0.5069214716F, 0.5079042018F, 0.5088867831F,
  0.5098692110F, 0.5108514808F, 0.5118335879F, 0.5128155277F,
  0.5137972956F, 0.5147788869F, 0.5157602971F, 0.5167415215F,
  0.5177225555F, 0.5187033945F, 0.5196840339F, 0.5206644692F,
  0.5216446956F, 0.5226247086F, 0.5236045035F, 0.5245840759F,
  0.5255634211F, 0.5265425344F, 0.5275214114F, 0.5285000474F,
  0.5294784378F, 0.5304565781F, 0.5314344637F, 0.5324120899F,
  0.5333894522F, 0.5343665461F, 0.5353433670F, 0.5363199102F,
  0.5372961713F, 0.5382721457F, 0.5392478287F, 0.5402232159F,
  0.5411983027F, 0.5421730845F, 0.5431475569F, 0.5441217151F,
  0.5450955548F, 0.5460690714F, 0.5470422602F, 0.5480151169F,
  0.5489876368F, 0.5499598155F, 0.5509316484F, 0.5519031310F,
  0.5528742587F, 0.5538450271F, 0.5548154317F, 0.5557854680F,
  0.5567551314F, 0.5577244174F, 0.5586933216F, 0.5596618395F,
  0.5606299665F, 0.5615976983F, 0.5625650302F, 0.5635319580F,
  0.5644984770F, 0.5654645828F, 0.5664302709F, 0.5673955370F,
  0.5683603765F, 0.5693247850F, 0.5702887580F, 0.5712522912F,
  0.5722153800F, 0.5731780200F, 0.5741402069F, 0.5751019362F,
  0.5760632034F, 0.5770240042F, 0.5779843341F, 0.5789441889F,
  0.5799035639F, 0.5808624549F, 0.5818208575F, 0.5827787673F,
  0.5837361800F, 0.5846930910F, 0.5856494961F, 0.5866053910F,
  0.5875607712F, 0.5885156324F, 0.5894699703F, 0.5904237804F,
  0.5913770586F, 0.5923298004F, 0.5932820016F, 0.5942336578F,
  0.5951847646F, 0.5961353179F, 0.5970853132F, 0.5980347464F,
  0.5989836131F, 0.5999319090F, 0.6008796298F, 0.6018267713F,
  0.6027733292F, 0.6037192993F, 0.6046646773F, 0.6056094589F,
  0.6065536400F, 0.6074972162F, 0.6084401833F, 0.6093825372F,
  0.6103242736F, 0.6112653884F, 0.6122058772F, 0.6131457359F,
  0.6140849604F, 0.6150235464F, 0.6159614897F, 0.6168987862F,
  0.6178354318F, 0.6187714223F, 0.6197067535F, 0.6206414213F,
  0.6215754215F, 0.6225087501F, 0.6234414028F, 0.6243733757F,
  0.6253046646F, 0.6262352654F, 0.6271651739F, 0.6280943862F,
  0.6290228982F, 0.6299507057F, 0.6308778048F, 0.6318041913F,
  0.6327298612F, 0.6336548105F, 0.6345790352F, 0.6355025312F,
  0.6364252945F, 0.6373473211F, 0.6382686070F, 0.6391891483F,
  0.6401089409F, 0.6410279808F, 0.6419462642F, 0.6428637869F,
  0.6437805452F, 0.6446965350F, 0.6456117524F, 0.6465261935F,
  0.6474398544F, 0.6483527311F, 0.6492648197F, 0.6501761165F,
  0.6510866174F, 0.6519963186F, 0.6529052162F, 0.6538133064F,
  0.6547205854F, 0.6556270492F, 0.6565326941F, 0.6574375162F,
  0.6583415117F, 0.6592446769F, 0.6601470079F, 0.6610485009F,
  0.6619491521F, 0.6628489578F, 0.6637479143F, 0.6646460177F,
  0.6655432643F, 0.6664396505F, 0.6673351724F, 0.6682298264F,
  0.6691236087F, 0.6700165157F, 0.6709085436F, 0.6717996889F,
  0.6726899478F, 0.6735793167F, 0.6744677918F, 0.6753553697F,
  0.6762420466F, 0.6771278190F, 0.6780126832F, 0.6788966357F,
  0.6797796728F, 0.6806617909F, 0.6815429866F, 0.6824232562F,
  0.6833025961F, 0.6841810030F, 0.6850584731F, 0.6859350031F,
  0.6868105894F, 0.6876852284F, 0.6885589168F, 0.6894316510F,
  0.6903034275F, 0.6911742430F, 0.6920440939F, 0.6929129769F,
  0.6937808884F, 0.6946478251F, 0.6955137837F, 0.6963787606F,
  0.6972427525F, 0.6981057560F, 0.6989677678F, 0.6998287845F,
  0.7006888028F, 0.7015478194F, 0.7024058309F, 0.7032628340F,
  0.7041188254F, 0.7049738019F, 0.7058277601F, 0.7066806969F,
  0.7075326089F, 0.7083834929F, 0.7092333457F, 0.7100821640F,
  0.7109299447F, 0.7117766846F, 0.7126223804F, 0.7134670291F,
  0.7143106273F, 0.7151531721F, 0.7159946602F, 0.7168350885F,
  0.7176744539F, 0.7185127534F, 0.7193499837F, 0.7201861418F,
  0.7210212247F, 0.7218552293F, 0.7226881526F, 0.7235199914F,
  0.7243507428F, 0.7251804039F, 0.7260089715F, 0.7268364426F,
  0.7276628144F, 0.7284880839F, 0.7293122481F, 0.7301353040F,
  0.7309572487F, 0.7317780794F, 0.7325977930F, 0.7334163868F,
  0.7342338579F, 0.7350502033F, 0.7358654202F, 0.7366795059F,
  0.7374924573F, 0.7383042718F, 0.7391149465F, 0.7399244787F,
  0.7407328655F, 0.7415401041F, 0.7423461920F, 0.7431511261F,
  0.7439549040F, 0.7447575227F, 0.7455589797F, 0.7463592723F,
  0.7471583976F, 0.7479563532F, 0.7487531363F, 0.7495487443F,
  0.7503431745F, 0.7511364244F, 0.7519284913F, 0.7527193726F,
  0.7535090658F, 0.7542975683F, 0.7550848776F, 0.7558709910F,
  0.7566559062F, 0.7574396205F, 0.7582221314F, 0.7590034366F,
  0.7597835334F, 0.7605624194F, 0.7613400923F, 0.7621165495F,
  0.7628917886F, 0.7636658072F, 0.7644386030F, 0.7652101735F,
  0.7659805164F, 0.7667496292F, 0.7675175098F, 0.7682841556F,
  0.7690495645F, 0.7698137341F, 0.7705766622F, 0.7713383463F,
  0.7720987844F, 0.7728579741F, 0.7736159132F, 0.7743725994F,
  0.7751280306F, 0.7758822046F, 0.7766351192F, 0.7773867722F,
  0.7781371614F, 0.7788862848F, 0.7796341401F, 0.7803807253F,
  0.7811260383F, 0.7818700769F, 0.7826128392F, 0.7833543230F,
  0.7840945263F, 0.7848334471F, 0.7855710833F, 0.7863074330F,
  0.7870424941F, 0.7877762647F, 0.7885087428F, 0.7892399264F,
  0.7899698137F, 0.7906984026F, 0.7914256914F, 0.7921516780F,
  0.7928763607F, 0.7935997375F, 0.7943218065F, 0.7950425661F,
  0.7957620142F, 0.7964801492F, 0.7971969692F, 0.7979124724F,
  0.7986266570F, 0.7993395214F, 0.8000510638F, 0.8007612823F,
  0.8014701754F, 0.8021777413F, 0.8028839784F, 0.8035888849F,
  0.8042924592F, 0.8049946997F, 0.8056956048F, 0.8063951727F,
  0.8070934020F, 0.8077902910F, 0.8084858381F, 0.8091800419F,
  0.8098729007F, 0.8105644130F, 0.8112545774F, 0.8119433922F,
  0.8126308561F, 0.8133169676F, 0.8140017251F, 0.8146851272F,
  0.8153671726F, 0.8160478598F, 0.8167271874F, 0.8174051539F,
  0.8180817582F, 0.8187569986F, 0.8194308741F, 0.8201033831F,
  0.8207745244F, 0.8214442966F, 0.8221126986F, 0.8227797290F,
  0.8234453865F, 0.8241096700F, 0.8247725781F, 0.8254341097F,
  0.8260942636F, 0.8267530385F, 0.8274104334F, 0.8280664470F,
  0.8287210782F, 0.8293743259F, 0.8300261889F, 0.8306766662F,
  0.8313257566F, 0.8319734591F, 0.8326197727F, 0.8332646963F,
  0.8339082288F, 0.8345503692F, 0.8351911167F, 0.8358304700F,
  0.8364684284F, 0.8371049907F, 0.8377401562F, 0.8383739238F,
  0.8390062927F, 0.8396372618F, 0.8402668305F, 0.8408949977F,
  0.8415217626F, 0.8421471245F, 0.8427710823F, 0.8433936354F,
  0.8440147830F, 0.8446345242F, 0.8452528582F, 0.8458697844F,
  0.8464853020F, 0.8470994102F, 0.8477121084F, 0.8483233958F,
  0.8489332718F, 0.8495417356F, 0.8501487866F, 0.8507544243F,
  0.8513586479F, 0.8519614568F, 0.8525628505F, 0.8531628283F,
  0.8537613897F, 0.8543585341F, 0.8549542611F, 0.8555485699F,
  0.8561414603F, 0.8567329315F, 0.8573229832F, 0.8579116149F,
  0.8584988262F, 0.8590846165F, 0.8596689855F, 0.8602519327F,
  0.8608334577F, 0.8614135603F, 0.8619922399F, 0.8625694962F,
  0.8631453289F, 0.8637197377F, 0.8642927222F, 0.8648642821F,
  0.8654344172F, 0.8660031272F, 0.8665704118F, 0.8671362708F,
  0.8677007039F, 0.8682637109F, 0.8688252917F, 0.8693854460F,
  0.8699441737F, 0.8705014745F, 0.8710573485F, 0.8716117953F,
  0.8721648150F, 0.8727164073F, 0.8732665723F, 0.8738153098F,
  0.8743626197F, 0.8749085021F, 0.8754529569F, 0.8759959840F,
  0.8765375835F, 0.8770777553F, 0.8776164996F, 0.8781538162F,
  0.8786897054F, 0.8792241670F, 0.8797572013F, 0.8802888082F,
  0.8808189880F, 0.8813477407F, 0.8818750664F, 0.8824009653F,
  0.8829254375F, 0.8834484833F, 0.8839701028F, 0.8844902961F,
  0.8850090636F, 0.8855264054F, 0.8860423218F, 0.8865568131F,
  0.8870698794F, 0.8875815212F, 0.8880917386F, 0.8886005319F,
  0.8891079016F, 0.8896138479F, 0.8901183712F, 0.8906214719F,
  0.8911231503F, 0.8916234067F, 0.8921222417F, 0.8926196556F,
  0.8931156489F, 0.8936102219F, 0.8941033752F, 0.8945951092F,
  0.8950854244F, 0.8955743212F, 0.8960618003F, 0.8965478621F,
  0.8970325071F, 0.8975157359F, 0.8979975490F, 0.8984779471F,
  0.8989569307F, 0.8994345004F, 0.8999106568F, 0.9003854005F,
  0.9008587323F, 0.9013306526F, 0.9018011623F, 0.9022702619F,
  0.9027379521F, 0.9032042337F, 0.9036691074F, 0.9041325739F,
  0.9045946339F, 0.9050552882F, 0.9055145376F, 0.9059723828F,
  0.9064288246F, 0.9068838638F, 0.9073375013F, 0.9077897379F,
  0.9082405743F, 0.9086900115F, 0.9091380503F, 0.9095846917F,
  0.9100299364F, 0.9104737854F, 0.9109162397F, 0.9113573001F,
  0.9117969675F, 0.9122352430F, 0.9126721275F, 0.9131076219F,
  0.9135417273F, 0.9139744447F, 0.9144057750F, 0.9148357194F,
  0.9152642787F, 0.9156914542F, 0.9161172468F, 0.9165416576F,
  0.9169646877F, 0.9173863382F, 0.9178066102F, 0.9182255048F,
  0.9186430232F, 0.9190591665F, 0.9194739359F, 0.9198873324F,
  0.9202993574F, 0.9207100120F, 0.9211192973F, 0.9215272147F,
  0.9219337653F, 0.9223389504F, 0.9227427713F, 0.9231452290F,
  0.9235463251F, 0.9239460607F, 0.9243444371F, 0.9247414557F,
  0.9251371177F, 0.9255314245F, 0.9259243774F, 0.9263159778F,
  0.9267062270F, 0.9270951264F, 0.9274826774F, 0.9278688814F,
  0.9282537398F, 0.9286372540F, 0.9290194254F, 0.9294002555F,
  0.9297797458F, 0.9301578976F, 0.9305347125F, 0.9309101919F,
  0.9312843373F, 0.9316571503F, 0.9320286323F, 0.9323987849F,
  0.9327676097F, 0.9331351080F, 0.9335012816F, 0.9338661320F,
  0.9342296607F, 0.9345918694F, 0.9349527596F, 0.9353123330F,
  0.9356705911F, 0.9360275357F, 0.9363831683F, 0.9367374905F,
  0.9370905042F, 0.9374422108F, 0.9377926122F, 0.9381417099F,
  0.9384895057F, 0.9388360014F, 0.9391811985F, 0.9395250989F,
  0.9398677043F, 0.9402090165F, 0.9405490371F, 0.9408877680F,
  0.9412252110F, 0.9415613678F, 0.9418962402F, 0.9422298301F,
  0.9425621392F, 0.9428931695F, 0.9432229226F, 0.9435514005F,
  0.9438786050F, 0.9442045381F, 0.9445292014F, 0.9448525971F,
  0.9451747268F, 0.9454955926F, 0.9458151963F, 0.9461335399F,
  0.9464506253F, 0.9467664545F, 0.9470810293F, 0.9473943517F,
  0.9477064238F, 0.9480172474F, 0.9483268246F, 0.9486351573F,
  0.9489422475F, 0.9492480973F, 0.9495527087F, 0.9498560837F,
  0.9501582243F, 0.9504591325F, 0.9507588105F, 0.9510572603F,
  0.9513544839F, 0.9516504834F, 0.9519452609F, 0.9522388186F,
  0.9525311584F, 0.9528222826F, 0.9531121932F, 0.9534008923F,
  0.9536883821F, 0.9539746647F, 0.9542597424F, 0.9545436171F,
  0.9548262912F, 0.9551077667F, 0.9553880459F, 0.9556671309F,
  0.9559450239F, 0.9562217272F, 0.9564972429F, 0.9567715733F,
  0.9570447206F, 0.9573166871F, 0.9575874749F, 0.9578570863F,
  0.9581255236F, 0.9583927890F, 0.9586588849F, 0.9589238134F,
  0.9591875769F, 0.9594501777F, 0.9597116180F, 0.9599719003F,
  0.9602310267F, 0.9604889995F, 0.9607458213F, 0.9610014942F,
  0.9612560206F, 0.9615094028F, 0.9617616433F, 0.9620127443F,
  0.9622627083F, 0.9625115376F, 0.9627592345F, 0.9630058016F,
  0.9632512411F, 0.9634955555F, 0.9637387471F, 0.9639808185F,
  0.9642217720F, 0.9644616100F, 0.9647003349F, 0.9649379493F,
  0.9651744556F, 0.9654098561F, 0.9656441534F, 0.9658773499F,
  0.9661094480F, 0.9663404504F, 0.9665703593F, 0.9667991774F,
  0.9670269071F, 0.9672535509F, 0.9674791114F, 0.9677035909F,
  0.9679269921F, 0.9681493174F, 0.9683705694F, 0.9685907506F,
  0.9688098636F, 0.9690279108F, 0.9692448948F, 0.9694608182F,
  0.9696756836F, 0.9698894934F, 0.9701022503F, 0.9703139569F,
  0.9705246156F, 0.9707342291F, 0.9709428000F, 0.9711503309F,
  0.9713568243F, 0.9715622829F, 0.9717667093F, 0.9719701060F,
  0.9721724757F, 0.9723738210F, 0.9725741446F, 0.9727734490F,
  0.9729717369F, 0.9731690109F, 0.9733652737F, 0.9735605279F,
  0.9737547762F, 0.9739480212F, 0.9741402656F, 0.9743315120F,
  0.9745217631F, 0.9747110216F, 0.9748992901F, 0.9750865714F,
  0.9752728681F, 0.9754581829F, 0.9756425184F, 0.9758258775F,
  0.9760082627F, 0.9761896768F, 0.9763701224F, 0.9765496024F,
  0.9767281193F, 0.9769056760F, 0.9770822751F, 0.9772579193F,
  0.9774326114F, 0.9776063542F, 0.9777791502F, 0.9779510023F,
  0.9781219133F, 0.9782918858F, 0.9784609226F, 0.9786290264F,
  0.9787962000F, 0.9789624461F, 0.9791277676F, 0.9792921671F,
  0.9794556474F, 0.9796182113F, 0.9797798615F, 0.9799406009F,
  0.9801004321F, 0.9802593580F, 0.9804173813F, 0.9805745049F,
  0.9807307314F, 0.9808860637F, 0.9810405046F, 0.9811940568F,
  0.9813467232F, 0.9814985065F, 0.9816494095F, 0.9817994351F,
  0.9819485860F, 0.9820968650F, 0.9822442750F, 0.9823908186F,
  0.9825364988F, 0.9826813184F, 0.9828252801F, 0.9829683868F,
  0.9831106413F, 0.9832520463F, 0.9833926048F, 0.9835323195F,
  0.9836711932F, 0.9838092288F, 0.9839464291F, 0.9840827969F,
  0.9842183351F, 0.9843530464F, 0.9844869337F, 0.9846199998F,
  0.9847522475F, 0.9848836798F, 0.9850142993F, 0.9851441090F,
  0.9852731117F, 0.9854013101F, 0.9855287073F, 0.9856553058F,
  0.9857811087F, 0.9859061188F, 0.9860303388F, 0.9861537717F,
  0.9862764202F, 0.9863982872F, 0.9865193756F, 0.9866396882F,
  0.9867592277F, 0.9868779972F, 0.9869959993F, 0.9871132370F,
  0.9872297131F, 0.9873454304F, 0.9874603918F, 0.9875746001F,
  0.9876880581F, 0.9878007688F, 0.9879127348F, 0.9880239592F,
  0.9881344447F, 0.9882441941F, 0.9883532104F, 0.9884614962F,
  0.9885690546F, 0.9886758883F, 0.9887820001F, 0.9888873930F,
  0.9889920697F, 0.9890960331F, 0.9891992859F, 0.9893018312F,
  0.9894036716F, 0.9895048100F, 0.9896052493F, 0.9897049923F,
  0.9898040418F, 0.9899024006F, 0.9900000717F, 0.9900970577F,
  0.9901933616F, 0.9902889862F, 0.9903839343F, 0.9904782087F,
  0.9905718122F, 0.9906647477F, 0.9907570180F, 0.9908486259F,
  0.9909395742F, 0.9910298658F, 0.9911195034F, 0.9912084899F,
  0.9912968281F, 0.9913845208F, 0.9914715708F, 0.9915579810F,
  0.9916437540F, 0.9917288928F, 0.9918134001F, 0.9918972788F,
  0.9919805316F, 0.9920631613F, 0.9921451707F, 0.9922265626F,
  0.9923073399F, 0.9923875052F, 0.9924670615F, 0.9925460114F,
  0.9926243577F, 0.9927021033F, 0.9927792508F, 0.9928558032F,
  0.9929317631F, 0.9930071333F, 0.9930819167F, 0.9931561158F,
  0.9932297337F, 0.9933027728F, 0.9933752362F, 0.9934471264F,
  0.9935184462F, 0.9935891985F, 0.9936593859F, 0.9937290112F,
  0.9937980771F, 0.9938665864F, 0.9939345418F, 0.9940019460F,
  0.9940688018F, 0.9941351118F, 0.9942008789F, 0.9942661057F,
  0.9943307950F, 0.9943949494F, 0.9944585717F, 0.9945216645F,
  0.9945842307F, 0.9946462728F, 0.9947077936F, 0.9947687957F,
  0.9948292820F, 0.9948892550F, 0.9949487174F, 0.9950076719F,
  0.9950661212F, 0.9951240679F, 0.9951815148F, 0.9952384645F,
  0.9952949196F, 0.9953508828F, 0.9954063568F, 0.9954613442F,
  0.9955158476F, 0.9955698697F, 0.9956234132F, 0.9956764806F,
  0.9957290746F, 0.9957811978F, 0.9958328528F, 0.9958840423F,
  0.9959347688F, 0.9959850351F, 0.9960348435F, 0.9960841969F,
  0.9961330977F, 0.9961815486F, 0.9962295521F, 0.9962771108F,
  0.9963242274F, 0.9963709043F, 0.9964171441F, 0.9964629494F,
  0.9965083228F, 0.9965532668F, 0.9965977840F, 0.9966418768F,
  0.9966855479F, 0.9967287998F, 0.9967716350F, 0.9968140559F,
  0.9968560653F, 0.9968976655F, 0.9969388591F, 0.9969796485F,
  0.9970200363F, 0.9970600250F, 0.9970996170F, 0.9971388149F,
  0.9971776211F, 0.9972160380F, 0.9972540683F, 0.9972917142F,
  0.9973289783F, 0.9973658631F, 0.9974023709F, 0.9974385042F,
  0.9974742655F, 0.9975096571F, 0.9975446816F, 0.9975793413F,
  0.9976136386F, 0.9976475759F, 0.9976811557F, 0.9977143803F,
  0.9977472521F, 0.9977797736F, 0.9978119470F, 0.9978437748F,
  0.9978752593F, 0.9979064029F, 0.9979372079F, 0.9979676768F,
  0.9979978117F, 0.9980276151F, 0.9980570893F, 0.9980862367F,
  0.9981150595F, 0.9981435600F, 0.9981717406F, 0.9981996035F,
  0.9982271511F, 0.9982543856F, 0.9982813093F, 0.9983079246F,
  0.9983342336F, 0.9983602386F, 0.9983859418F, 0.9984113456F,
  0.9984364522F, 0.9984612638F, 0.9984857825F, 0.9985100108F,
  0.9985339507F, 0.9985576044F, 0.9985809743F, 0.9986040624F,
  0.9986268710F, 0.9986494022F, 0.9986716583F, 0.9986936413F,
  0.9987153535F, 0.9987367969F, 0.9987579738F, 0.9987788864F,
  0.9987995366F, 0.9988199267F, 0.9988400587F, 0.9988599348F,
  0.9988795572F, 0.9988989278F, 0.9989180487F, 0.9989369222F,
  0.9989555501F, 0.9989739347F, 0.9989920780F, 0.9990099820F,
  0.9990276487F, 0.9990450803F, 0.9990622787F, 0.9990792460F,
  0.9990959841F, 0.9991124952F, 0.9991287812F, 0.9991448440F,
  0.9991606858F, 0.9991763084F, 0.9991917139F, 0.9992069042F,
  0.9992218813F, 0.9992366471F, 0.9992512035F, 0.9992655525F,
  0.9992796961F, 0.9992936361F, 0.9993073744F, 0.9993209131F,
  0.9993342538F, 0.9993473987F, 0.9993603494F, 0.9993731080F,
  0.9993856762F, 0.9993980559F, 0.9994102490F, 0.9994222573F,
  0.9994340827F, 0.9994457269F, 0.9994571918F, 0.9994684793F,
  0.9994795910F, 0.9994905288F, 0.9995012945F, 0.9995118898F,
  0.9995223165F, 0.9995325765F, 0.9995426713F, 0.9995526029F,
  0.9995623728F, 0.9995719829F, 0.9995814349F, 0.9995907304F,
  0.9995998712F, 0.9996088590F, 0.9996176954F, 0.9996263821F,
  0.9996349208F, 0.9996433132F, 0.9996515609F, 0.9996596656F,
  0.9996676288F, 0.9996754522F, 0.9996831375F, 0.9996906862F,
  0.9996981000F, 0.9997053804F, 0.9997125290F, 0.9997195474F,
  0.9997264371F, 0.9997331998F, 0.9997398369F, 0.9997463500F,
  0.9997527406F, 0.9997590103F, 0.9997651606F, 0.9997711930F,
  0.9997771089F, 0.9997829098F, 0.9997885973F, 0.9997941728F,
  0.9997996378F, 0.9998049936F, 0.9998102419F, 0.9998153839F,
  0.9998204211F, 0.9998253550F, 0.9998301868F, 0.9998349182F,
  0.9998395503F, 0.9998440847F, 0.9998485226F, 0.9998528654F,
  0.9998571146F, 0.9998612713F, 0.9998653370F, 0.9998693130F,
  0.9998732007F, 0.9998770012F, 0.9998807159F, 0.9998843461F,
  0.9998878931F, 0.9998913581F, 0.9998947424F, 0.9998980473F,
  0.9999012740F, 0.9999044237F, 0.9999074976F, 0.9999104971F,
  0.9999134231F, 0.9999162771F, 0.9999190601F, 0.9999217733F,
  0.9999244179F, 0.9999269950F, 0.9999295058F, 0.9999319515F,
  0.9999343332F, 0.9999366519F, 0.9999389088F, 0.9999411050F,
  0.9999432416F, 0.9999453196F, 0.9999473402F, 0.9999493044F,
  0.9999512132F, 0.9999530677F, 0.9999548690F, 0.9999566180F,
  0.9999583157F, 0.9999599633F, 0.9999615616F, 0.9999631116F,
  0.9999646144F, 0.9999660709F, 0.9999674820F, 0.9999688487F,
  0.9999701719F, 0.9999714526F, 0.9999726917F, 0.9999738900F,
  0.9999750486F, 0.9999761682F, 0.9999772497F, 0.9999782941F,
  0.9999793021F, 0.9999802747F, 0.9999812126F, 0.9999821167F,
  0.9999829878F, 0.9999838268F, 0.9999846343F, 0.9999854113F,
  0.9999861584F, 0.9999868765F, 0.9999875664F, 0.9999882287F,
  0.9999888642F, 0.9999894736F, 0.9999900577F, 0.9999906172F,
  0.9999911528F, 0.9999916651F, 0.9999921548F, 0.9999926227F,
  0.9999930693F, 0.9999934954F, 0.9999939015F, 0.9999942883F,
  0.9999946564F, 0.9999950064F, 0.9999953390F, 0.9999956547F,
  0.9999959541F, 0.9999962377F, 0.9999965062F, 0.9999967601F,
  0.9999969998F, 0.9999972260F, 0.9999974392F, 0.9999976399F,
  0.9999978285F, 0.9999980056F, 0.9999981716F, 0.9999983271F,
  0.9999984724F, 0.9999986081F, 0.9999987345F, 0.9999988521F,
  0.9999989613F, 0.9999990625F, 0.9999991562F, 0.9999992426F,
  0.9999993223F, 0.9999993954F, 0.9999994625F, 0.9999995239F,
  0.9999995798F, 0.9999996307F, 0.9999996768F, 0.9999997184F,
  0.9999997559F, 0.9999997895F, 0.9999998195F, 0.9999998462F,
  0.9999998698F, 0.9999998906F, 0.9999999088F, 0.9999999246F,
  0.9999999383F, 0.9999999500F, 0.9999999600F, 0.9999999684F,
  0.9999999754F, 0.9999999811F, 0.9999999858F, 0.9999999896F,
  0.9999999925F, 0.9999999948F, 0.9999999965F, 0.9999999978F,
  0.9999999986F, 0.9999999992F, 0.9999999996F, 0.9999999998F,
  0.9999999999F, 1.0000000000F, 1.0000000000F, 1.0000000000F,
};

static float vwin8192[4096] = {
  0.0000000578F, 0.0000005198F, 0.0000014438F, 0.0000028299F,
  0.0000046780F, 0.0000069882F, 0.0000097604F, 0.0000129945F,
  0.0000166908F, 0.0000208490F, 0.0000254692F, 0.0000305515F,
  0.0000360958F, 0.0000421021F, 0.0000485704F, 0.0000555006F,
  0.0000628929F, 0.0000707472F, 0.0000790635F, 0.0000878417F,
  0.0000970820F, 0.0001067842F, 0.0001169483F, 0.0001275744F,
  0.0001386625F, 0.0001502126F, 0.0001622245F, 0.0001746984F,
  0.0001876343F, 0.0002010320F, 0.0002148917F, 0.0002292132F,
  0.0002439967F, 0.0002592421F, 0.0002749493F, 0.0002911184F,
  0.0003077493F, 0.0003248421F, 0.0003423967F, 0.0003604132F,
  0.0003788915F, 0.0003978316F, 0.0004172335F, 0.0004370971F,
  0.0004574226F, 0.0004782098F, 0.0004994587F, 0.0005211694F,
  0.0005433418F, 0.0005659759F, 0.0005890717F, 0.0006126292F,
  0.0006366484F, 0.0006611292F, 0.0006860716F, 0.0007114757F,
  0.0007373414F, 0.0007636687F, 0.0007904576F, 0.0008177080F,
  0.0008454200F, 0.0008735935F, 0.0009022285F, 0.0009313250F,
  0.0009608830F, 0.0009909025F, 0.0010213834F, 0.0010523257F,
  0.0010837295F, 0.0011155946F, 0.0011479211F, 0.0011807090F,
  0.0012139582F, 0.0012476687F, 0.0012818405F, 0.0013164736F,
  0.0013515679F, 0.0013871235F, 0.0014231402F, 0.0014596182F,
  0.0014965573F, 0.0015339576F, 0.0015718190F, 0.0016101415F,
  0.0016489251F, 0.0016881698F, 0.0017278754F, 0.0017680421F,
  0.0018086698F, 0.0018497584F, 0.0018913080F, 0.0019333185F,
  0.0019757898F, 0.0020187221F, 0.0020621151F, 0.0021059690F,
  0.0021502837F, 0.0021950591F, 0.0022402953F, 0.0022859921F,
  0.0023321497F, 0.0023787679F, 0.0024258467F, 0.0024733861F,
  0.0025213861F, 0.0025698466F, 0.0026187676F, 0.0026681491F,
  0.0027179911F, 0.0027682935F, 0.0028190562F, 0.0028702794F,
  0.0029219628F, 0.0029741066F, 0.0030267107F, 0.0030797749F,
  0.0031332994F, 0.0031872841F, 0.0032417289F, 0.0032966338F,
  0.0033519988F, 0.0034078238F, 0.0034641089F, 0.0035208539F,
  0.0035780589F, 0.0036357237F, 0.0036938485F, 0.0037524331F,
  0.0038114775F, 0.0038709817F, 0.0039309456F, 0.0039913692F,
  0.0040522524F, 0.0041135953F, 0.0041753978F, 0.0042376599F,
  0.0043003814F, 0.0043635624F, 0.0044272029F, 0.0044913028F,
  0.0045558620F, 0.0046208806F, 0.0046863585F, 0.0047522955F,
  0.0048186919F, 0.0048855473F, 0.0049528619F, 0.0050206356F,
  0.0050888684F, 0.0051575601F, 0.0052267108F, 0.0052963204F,
  0.0053663890F, 0.0054369163F, 0.0055079025F, 0.0055793474F,
  0.0056512510F, 0.0057236133F, 0.0057964342F, 0.0058697137F,
  0.0059434517F, 0.0060176482F, 0.0060923032F, 0.0061674166F,
  0.0062429883F, 0.0063190183F, 0.0063955066F, 0.0064724532F,
  0.0065498579F, 0.0066277207F, 0.0067060416F, 0.0067848205F,
  0.0068640575F, 0.0069437523F, 0.0070239051F, 0.0071045157F,
  0.0071855840F, 0.0072671102F, 0.0073490940F, 0.0074315355F,
  0.0075144345F, 0.0075977911F, 0.0076816052F, 0.0077658768F,
  0.0078506057F, 0.0079357920F, 0.0080214355F, 0.0081075363F,
  0.0081940943F, 0.0082811094F, 0.0083685816F, 0.0084565108F,
  0.0085448970F, 0.0086337401F, 0.0087230401F, 0.0088127969F,
  0.0089030104F, 0.0089936807F, 0.0090848076F, 0.0091763911F,
  0.0092684311F, 0.0093609276F, 0.0094538805F, 0.0095472898F,
  0.0096411554F, 0.0097354772F, 0.0098302552F, 0.0099254894F,
  0.0100211796F, 0.0101173259F, 0.0102139281F, 0.0103109863F,
  0.0104085002F, 0.0105064700F, 0.0106048955F, 0.0107037766F,
  0.0108031133F, 0.0109029056F, 0.0110031534F, 0.0111038565F,
  0.0112050151F, 0.0113066289F, 0.0114086980F, 0.0115112222F,
  0.0116142015F, 0.0117176359F, 0.0118215252F, 0.0119258695F,
  0.0120306686F, 0.0121359225F, 0.0122416312F, 0.0123477944F,
  0.0124544123F, 0.0125614847F, 0.0126690116F, 0.0127769928F,
  0.0128854284F, 0.0129943182F, 0.0131036623F, 0.0132134604F,
  0.0133237126F, 0.0134344188F, 0.0135455790F, 0.0136571929F,
  0.0137692607F, 0.0138817821F, 0.0139947572F, 0.0141081859F,
  0.0142220681F, 0.0143364037F, 0.0144511927F, 0.0145664350F,
  0.0146821304F, 0.0147982791F, 0.0149148808F, 0.0150319355F,
  0.0151494431F, 0.0152674036F, 0.0153858168F, 0.0155046828F,
  0.0156240014F, 0.0157437726F, 0.0158639962F, 0.0159846723F,
  0.0161058007F, 0.0162273814F, 0.0163494142F, 0.0164718991F,
  0.0165948361F, 0.0167182250F, 0.0168420658F, 0.0169663584F,
  0.0170911027F, 0.0172162987F, 0.0173419462F, 0.0174680452F,
  0.0175945956F, 0.0177215974F, 0.0178490504F, 0.0179769545F,
  0.0181053098F, 0.0182341160F, 0.0183633732F, 0.0184930812F,
  0.0186232399F, 0.0187538494F, 0.0188849094F, 0.0190164200F,
  0.0191483809F, 0.0192807923F, 0.0194136539F, 0.0195469656F,
  0.0196807275F, 0.0198149394F, 0.0199496012F, 0.0200847128F,
  0.0202202742F, 0.0203562853F, 0.0204927460F, 0.0206296561F,
  0.0207670157F, 0.0209048245F, 0.0210430826F, 0.0211817899F,
  0.0213209462F, 0.0214605515F, 0.0216006057F, 0.0217411086F,
  0.0218820603F, 0.0220234605F, 0.0221653093F, 0.0223076066F,
  0.0224503521F, 0.0225935459F, 0.0227371879F, 0.0228812779F,
  0.0230258160F, 0.0231708018F, 0.0233162355F, 0.0234621169F,
  0.0236084459F, 0.0237552224F, 0.0239024462F, 0.0240501175F,
  0.0241982359F, 0.0243468015F, 0.0244958141F, 0.0246452736F,
  0.0247951800F, 0.0249455331F, 0.0250963329F, 0.0252475792F,
  0.0253992720F, 0.0255514111F, 0.0257039965F, 0.0258570281F,
  0.0260105057F, 0.0261644293F, 0.0263187987F, 0.0264736139F,
  0.0266288747F, 0.0267845811F, 0.0269407330F, 0.0270973302F,
  0.0272543727F, 0.0274118604F, 0.0275697930F, 0.0277281707F,
  0.0278869932F, 0.0280462604F, 0.0282059723F, 0.0283661287F,
  0.0285267295F, 0.0286877747F, 0.0288492641F, 0.0290111976F,
  0.0291735751F, 0.0293363965F, 0.0294996617F, 0.0296633706F,
  0.0298275231F, 0.0299921190F, 0.0301571583F, 0.0303226409F,
  0.0304885667F, 0.0306549354F, 0.0308217472F, 0.0309890017F,
  0.0311566989F, 0.0313248388F, 0.0314934211F, 0.0316624459F,
  0.0318319128F, 0.0320018220F, 0.0321721732F, 0.0323429663F,
  0.0325142013F, 0.0326858779F, 0.0328579962F, 0.0330305559F,
  0.0332035570F, 0.0333769994F, 0.0335508829F, 0.0337252074F,
  0.0338999728F, 0.0340751790F, 0.0342508259F, 0.0344269134F,
  0.0346034412F, 0.0347804094F, 0.0349578178F, 0.0351356663F,
  0.0353139548F, 0.0354926831F, 0.0356718511F, 0.0358514588F,
  0.0360315059F, 0.0362119924F, 0.0363929182F, 0.0365742831F,
  0.0367560870F, 0.0369383297F, 0.0371210113F, 0.0373041315F,
  0.0374876902F, 0.0376716873F, 0.0378561226F, 0.0380409961F,
  0.0382263077F, 0.0384120571F, 0.0385982443F, 0.0387848691F,
  0.0389719315F, 0.0391594313F, 0.0393473683F, 0.0395357425F,
  0.0397245537F, 0.0399138017F, 0.0401034866F, 0.0402936080F,
  0.0404841660F, 0.0406751603F, 0.0408665909F, 0.0410584576F,
  0.0412507603F, 0.0414434988F, 0.0416366731F, 0.0418302829F,
  0.0420243282F, 0.0422188088F, 0.0424137246F, 0.0426090755F,
  0.0428048613F, 0.0430010819F, 0.0431977371F, 0.0433948269F,
  0.0435923511F, 0.0437903095F, 0.0439887020F, 0.0441875285F,
  0.0443867889F, 0.0445864830F, 0.0447866106F, 0.0449871717F,
  0.0451881661F, 0.0453895936F, 0.0455914542F, 0.0457937477F,
  0.0459964738F, 0.0461996326F, 0.0464032239F, 0.0466072475F,
  0.0468117032F, 0.0470165910F, 0.0472219107F, 0.0474276622F,
  0.0476338452F, 0.0478404597F, 0.0480475056F, 0.0482549827F,
  0.0484628907F, 0.0486712297F, 0.0488799994F, 0.0490891998F,
  0.0492988306F, 0.0495088917F, 0.0497193830F, 0.0499303043F,
  0.0501416554F, 0.0503534363F, 0.0505656468F, 0.0507782867F,
  0.0509913559F, 0.0512048542F, 0.0514187815F, 0.0516331376F,
  0.0518479225F, 0.0520631358F, 0.0522787775F, 0.0524948475F,
  0.0527113455F, 0.0529282715F, 0.0531456252F, 0.0533634066F,
  0.0535816154F, 0.0538002515F, 0.0540193148F, 0.0542388051F,
  0.0544587222F, 0.0546790660F, 0.0548998364F, 0.0551210331F,
  0.0553426561F, 0.0555647051F, 0.0557871801F, 0.0560100807F,
  0.0562334070F, 0.0564571587F, 0.0566813357F, 0.0569059378F,
  0.0571309649F, 0.0573564168F, 0.0575822933F, 0.0578085942F,
  0.0580353195F, 0.0582624689F, 0.0584900423F, 0.0587180396F,
  0.0589464605F, 0.0591753049F, 0.0594045726F, 0.0596342635F,
  0.0598643774F, 0.0600949141F, 0.0603258735F, 0.0605572555F,
  0.0607890597F, 0.0610212862F, 0.0612539346F, 0.0614870049F,
  0.0617204968F, 0.0619544103F, 0.0621887451F, 0.0624235010F,
  0.0626586780F, 0.0628942758F, 0.0631302942F, 0.0633667331F,
  0.0636035923F, 0.0638408717F, 0.0640785710F, 0.0643166901F,
  0.0645552288F, 0.0647941870F, 0.0650335645F, 0.0652733610F,
  0.0655135765F, 0.0657542108F, 0.0659952636F, 0.0662367348F,
  0.0664786242F, 0.0667209316F, 0.0669636570F, 0.0672068000F,
  0.0674503605F, 0.0676943384F, 0.0679387334F, 0.0681835454F,
  0.0684287742F, 0.0686744196F, 0.0689204814F, 0.0691669595F,
  0.0694138536F, 0.0696611637F, 0.0699088894F, 0.0701570307F,
  0.0704055873F, 0.0706545590F, 0.0709039458F, 0.0711537473F,
  0.0714039634F, 0.0716545939F, 0.0719056387F, 0.0721570975F,
  0.0724089702F, 0.0726612565F, 0.0729139563F, 0.0731670694F,
  0.0734205956F, 0.0736745347F, 0.0739288866F, 0.0741836510F,
  0.0744388277F, 0.0746944166F, 0.0749504175F, 0.0752068301F,
  0.0754636543F, 0.0757208899F, 0.0759785367F, 0.0762365946F,
  0.0764950632F, 0.0767539424F, 0.0770132320F, 0.0772729319F,
  0.0775330418F, 0.0777935616F, 0.0780544909F, 0.0783158298F,
  0.0785775778F, 0.0788397349F, 0.0791023009F, 0.0793652755F,
  0.0796286585F, 0.0798924498F, 0.0801566492F, 0.0804212564F,
  0.0806862712F, 0.0809516935F, 0.0812175231F, 0.0814837597F,
  0.0817504031F, 0.0820174532F, 0.0822849097F, 0.0825527724F,
  0.0828210412F, 0.0830897158F, 0.0833587960F, 0.0836282816F,
  0.0838981724F, 0.0841684682F, 0.0844391688F, 0.0847102740F,
  0.0849817835F, 0.0852536973F, 0.0855260150F, 0.0857987364F,
  0.0860718614F, 0.0863453897F, 0.0866193211F, 0.0868936554F,
  0.0871683924F, 0.0874435319F, 0.0877190737F, 0.0879950175F,
  0.0882713632F, 0.0885481105F, 0.0888252592F, 0.0891028091F,
  0.0893807600F, 0.0896591117F, 0.0899378639F, 0.0902170165F,
  0.0904965692F, 0.0907765218F, 0.0910568740F, 0.0913376258F,
  0.0916187767F, 0.0919003268F, 0.0921822756F, 0.0924646230F,
  0.0927473687F, 0.0930305126F, 0.0933140545F, 0.0935979940F,
  0.0938823310F, 0.0941670653F, 0.0944521966F, 0.0947377247F,
  0.0950236494F, 0.0953099704F, 0.0955966876F, 0.0958838007F,
  0.0961713094F, 0.0964592136F, 0.0967475131F, 0.0970362075F,
  0.0973252967F, 0.0976147805F, 0.0979046585F, 0.0981949307F,
  0.0984855967F, 0.0987766563F, 0.0990681093F, 0.0993599555F,
  0.0996521945F, 0.0999448263F, 0.1002378506F, 0.1005312671F,
  0.1008250755F, 0.1011192757F, 0.1014138675F, 0.1017088505F,
  0.1020042246F, 0.1022999895F, 0.1025961450F, 0.1028926909F,
  0.1031896268F, 0.1034869526F, 0.1037846680F, 0.1040827729F,
  0.1043812668F, 0.1046801497F, 0.1049794213F, 0.1052790813F,
  0.1055791294F, 0.1058795656F, 0.1061803894F, 0.1064816006F,
  0.1067831991F, 0.1070851846F, 0.1073875568F, 0.1076903155F,
  0.1079934604F, 0.1082969913F, 0.1086009079F, 0.1089052101F,
  0.1092098975F, 0.1095149699F, 0.1098204270F, 0.1101262687F,
  0.1104324946F, 0.1107391045F, 0.1110460982F, 0.1113534754F,
  0.1116612359F, 0.1119693793F, 0.1122779055F, 0.1125868142F,
  0.1128961052F, 0.1132057781F, 0.1135158328F, 0.1138262690F,
  0.1141370863F, 0.1144482847F, 0.1147598638F, 0.1150718233F,
  0.1153841631F, 0.1156968828F, 0.1160099822F, 0.1163234610F,
  0.1166373190F, 0.1169515559F, 0.1172661714F, 0.1175811654F,
  0.1178965374F, 0.1182122874F, 0.1185284149F, 0.1188449198F,
  0.1191618018F, 0.1194790606F, 0.1197966960F, 0.1201147076F,
  0.1204330953F, 0.1207518587F, 0.1210709976F, 0.1213905118F,
  0.1217104009F, 0.1220306647F, 0.1223513029F, 0.1226723153F,
  0.1229937016F, 0.1233154615F, 0.1236375948F, 0.1239601011F,
  0.1242829803F, 0.1246062319F, 0.1249298559F, 0.1252538518F,
  0.1255782195F, 0.1259029586F, 0.1262280689F, 0.1265535501F,
  0.1268794019F, 0.1272056241F, 0.1275322163F, 0.1278591784F,
  0.1281865099F, 0.1285142108F, 0.1288422805F, 0.1291707190F,
  0.1294995259F, 0.1298287009F, 0.1301582437F, 0.1304881542F,
  0.1308184319F, 0.1311490766F, 0.1314800881F, 0.1318114660F,
  0.1321432100F, 0.1324753200F, 0.1328077955F, 0.1331406364F,
  0.1334738422F, 0.1338074129F, 0.1341413479F, 0.1344756472F,
  0.1348103103F, 0.1351453370F, 0.1354807270F, 0.1358164801F,
  0.1361525959F, 0.1364890741F, 0.1368259145F, 0.1371631167F,
  0.1375006805F, 0.1378386056F, 0.1381768917F, 0.1385155384F,
  0.1388545456F, 0.1391939129F, 0.1395336400F, 0.1398737266F,
  0.1402141724F, 0.1405549772F, 0.1408961406F, 0.1412376623F,
  0.1415795421F, 0.1419217797F, 0.1422643746F, 0.1426073268F,
  0.1429506358F, 0.1432943013F, 0.1436383231F, 0.1439827008F,
  0.1443274342F, 0.1446725229F, 0.1450179667F, 0.1453637652F,
  0.1457099181F, 0.1460564252F, 0.1464032861F, 0.1467505006F,
  0.1470980682F, 0.1474459888F, 0.1477942620F, 0.1481428875F,
  0.1484918651F, 0.1488411942F, 0.1491908748F, 0.1495409065F,
  0.1498912889F, 0.1502420218F, 0.1505931048F, 0.1509445376F,
  0.1512963200F, 0.1516484516F, 0.1520009321F, 0.1523537612F,
  0.1527069385F, 0.1530604638F, 0.1534143368F, 0.1537685571F,
  0.1541231244F, 0.1544780384F, 0.1548332987F, 0.1551889052F,
  0.1555448574F, 0.1559011550F, 0.1562577978F, 0.1566147853F,
  0.1569721173F, 0.1573297935F, 0.1576878135F, 0.1580461771F,
  0.1584048838F, 0.1587639334F, 0.1591233255F, 0.1594830599F,
  0.1598431361F, 0.1602035540F, 0.1605643131F, 0.1609254131F,
  0.1612868537F, 0.1616486346F, 0.1620107555F, 0.1623732160F,
  0.1627360158F, 0.1630991545F, 0.1634626319F, 0.1638264476F,
  0.1641906013F, 0.1645550926F, 0.1649199212F, 0.1652850869F,
  0.1656505892F, 0.1660164278F, 0.1663826024F, 0.1667491127F,
  0.1671159583F, 0.1674831388F, 0.1678506541F, 0.1682185036F,
  0.1685866872F, 0.1689552044F, 0.1693240549F, 0.1696932384F,
  0.1700627545F, 0.1704326029F, 0.1708027833F, 0.1711732952F,
  0.1715441385F, 0.1719153127F, 0.1722868175F, 0.1726586526F,
  0.1730308176F, 0.1734033121F, 0.1737761359F, 0.1741492886F,
  0.1745227698F, 0.1748965792F, 0.1752707164F, 0.1756451812F,
  0.1760199731F, 0.1763950918F, 0.1767705370F, 0.1771463083F,
  0.1775224054F, 0.1778988279F, 0.1782755754F, 0.1786526477F,
  0.1790300444F, 0.1794077651F, 0.1797858094F, 0.1801641771F,
  0.1805428677F, 0.1809218810F, 0.1813012165F, 0.1816808739F,
  0.1820608528F, 0.1824411530F, 0.1828217739F, 0.1832027154F,
  0.1835839770F, 0.1839655584F, 0.1843474592F, 0.1847296790F,
  0.1851122175F, 0.1854950744F, 0.1858782492F, 0.1862617417F,
  0.1866455514F, 0.1870296780F, 0.1874141211F, 0.1877988804F,
  0.1881839555F, 0.1885693461F, 0.1889550517F, 0.1893410721F,
  0.1897274068F, 0.1901140555F, 0.1905010178F, 0.1908882933F,
  0.1912758818F, 0.1916637828F, 0.1920519959F, 0.1924405208F,
  0.1928293571F, 0.1932185044F, 0.1936079625F, 0.1939977308F,
  0.1943878091F, 0.1947781969F, 0.1951688939F, 0.1955598998F,
  0.1959512141F, 0.1963428364F, 0.1967347665F, 0.1971270038F,
  0.1975195482F, 0.1979123990F, 0.1983055561F, 0.1986990190F,
  0.1990927873F, 0.1994868607F, 0.1998812388F, 0.2002759212F,
  0.2006709075F, 0.2010661974F, 0.2014617904F, 0.2018576862F,
  0.2022538844F, 0.2026503847F, 0.2030471865F, 0.2034442897F,
  0.2038416937F, 0.2042393982F, 0.2046374028F, 0.2050357071F,
  0.2054343107F, 0.2058332133F, 0.2062324145F, 0.2066319138F,
  0.2070317110F, 0.2074318055F, 0.2078321970F, 0.2082328852F,
  0.2086338696F, 0.2090351498F, 0.2094367255F, 0.2098385962F,
  0.2102407617F, 0.2106432213F, 0.2110459749F, 0.2114490220F,
  0.2118523621F, 0.2122559950F, 0.2126599202F, 0.2130641373F,
  0.2134686459F, 0.2138734456F, 0.2142785361F, 0.2146839168F,
  0.2150895875F, 0.2154955478F, 0.2159017972F, 0.2163083353F,
  0.2167151617F, 0.2171222761F, 0.2175296780F, 0.2179373670F,
  0.2183453428F, 0.2187536049F, 0.2191621529F, 0.2195709864F,
  0.2199801051F, 0.2203895085F, 0.2207991961F, 0.2212091677F,
  0.2216194228F, 0.2220299610F, 0.2224407818F, 0.2228518850F,
  0.2232632699F, 0.2236749364F, 0.2240868839F, 0.2244991121F,
  0.2249116204F, 0.2253244086F, 0.2257374763F, 0.2261508229F,
  0.2265644481F, 0.2269783514F, 0.2273925326F, 0.2278069911F,
  0.2282217265F, 0.2286367384F, 0.2290520265F, 0.2294675902F,
  0.2298834292F, 0.2302995431F, 0.2307159314F, 0.2311325937F,
  0.2315495297F, 0.2319667388F, 0.2323842207F, 0.2328019749F,
  0.2332200011F, 0.2336382988F, 0.2340568675F, 0.2344757070F,
  0.2348948166F, 0.2353141961F, 0.2357338450F, 0.2361537629F,
  0.2365739493F, 0.2369944038F, 0.2374151261F, 0.2378361156F,
  0.2382573720F, 0.2386788948F, 0.2391006836F, 0.2395227380F,
  0.2399450575F, 0.2403676417F, 0.2407904902F, 0.2412136026F,
  0.2416369783F, 0.2420606171F, 0.2424845185F, 0.2429086820F,
  0.2433331072F, 0.2437577936F, 0.2441827409F, 0.2446079486F,
  0.2450334163F, 0.2454591435F, 0.2458851298F, 0.2463113747F,
  0.2467378779F, 0.2471646389F, 0.2475916573F, 0.2480189325F,
  0.2484464643F, 0.2488742521F, 0.2493022955F, 0.2497305940F,
  0.2501591473F, 0.2505879549F, 0.2510170163F, 0.2514463311F,
  0.2518758989F, 0.2523057193F, 0.2527357916F, 0.2531661157F,
  0.2535966909F, 0.2540275169F, 0.2544585931F, 0.2548899193F,
  0.2553214948F, 0.2557533193F, 0.2561853924F, 0.2566177135F,
  0.2570502822F, 0.2574830981F, 0.2579161608F, 0.2583494697F,
  0.2587830245F, 0.2592168246F, 0.2596508697F, 0.2600851593F,
  0.2605196929F, 0.2609544701F, 0.2613894904F, 0.2618247534F,
  0.2622602586F, 0.2626960055F, 0.2631319938F, 0.2635682230F,
  0.2640046925F, 0.2644414021F, 0.2648783511F, 0.2653155391F,
  0.2657529657F, 0.2661906305F, 0.2666285329F, 0.2670666725F,
  0.2675050489F, 0.2679436616F, 0.2683825101F, 0.2688215940F,
  0.2692609127F, 0.2697004660F, 0.2701402532F, 0.2705802739F,
  0.2710205278F, 0.2714610142F, 0.2719017327F, 0.2723426830F,
  0.2727838644F, 0.2732252766F, 0.2736669191F, 0.2741087914F,
  0.2745508930F, 0.2749932235F, 0.2754357824F, 0.2758785693F,
  0.2763215837F, 0.2767648251F, 0.2772082930F, 0.2776519870F,
  0.2780959066F, 0.2785400513F, 0.2789844207F, 0.2794290143F,
  0.2798738316F, 0.2803188722F, 0.2807641355F, 0.2812096211F,
  0.2816553286F, 0.2821012574F, 0.2825474071F, 0.2829937773F,
  0.2834403673F, 0.2838871768F, 0.2843342053F, 0.2847814523F,
  0.2852289174F, 0.2856765999F, 0.2861244996F, 0.2865726159F,
  0.2870209482F, 0.2874694962F, 0.2879182594F, 0.2883672372F,
  0.2888164293F, 0.2892658350F, 0.2897154540F, 0.2901652858F,
  0.2906153298F, 0.2910655856F, 0.2915160527F, 0.2919667306F,
  0.2924176189F, 0.2928687171F, 0.2933200246F, 0.2937715409F,
  0.2942232657F, 0.2946751984F, 0.2951273386F, 0.2955796856F,
  0.2960322391F, 0.2964849986F, 0.2969379636F, 0.2973911335F,
  0.2978445080F, 0.2982980864F, 0.2987518684F, 0.2992058534F,
  0.2996600409F, 0.3001144305F, 0.3005690217F, 0.3010238139F,
  0.3014788067F, 0.3019339995F, 0.3023893920F, 0.3028449835F,
  0.3033007736F, 0.3037567618F, 0.3042129477F, 0.3046693306F,
  0.3051259102F, 0.3055826859F, 0.3060396572F, 0.3064968236F,
  0.3069541847F, 0.3074117399F, 0.3078694887F, 0.3083274307F,
  0.3087855653F, 0.3092438920F, 0.3097024104F, 0.3101611199F,
  0.3106200200F, 0.3110791103F, 0.3115383902F, 0.3119978592F,
  0.3124575169F, 0.3129173627F, 0.3133773961F, 0.3138376166F,
  0.3142980238F, 0.3147586170F, 0.3152193959F, 0.3156803598F,
  0.3161415084F, 0.3166028410F, 0.3170643573F, 0.3175260566F,
  0.3179879384F, 0.3184500023F, 0.3189122478F, 0.3193746743F,
  0.3198372814F, 0.3203000685F, 0.3207630351F, 0.3212261807F,
  0.3216895048F, 0.3221530069F, 0.3226166865F, 0.3230805430F,
  0.3235445760F, 0.3240087849F, 0.3244731693F, 0.3249377285F,
  0.3254024622F, 0.3258673698F, 0.3263324507F, 0.3267977045F,
  0.3272631306F, 0.3277287286F, 0.3281944978F, 0.3286604379F,
  0.3291265482F, 0.3295928284F, 0.3300592777F, 0.3305258958F,
  0.3309926821F, 0.3314596361F, 0.3319267573F, 0.3323940451F,
  0.3328614990F, 0.3333291186F, 0.3337969033F, 0.3342648525F,
  0.3347329658F, 0.3352012427F, 0.3356696825F, 0.3361382849F,
  0.3366070492F, 0.3370759749F, 0.3375450616F, 0.3380143087F,
  0.3384837156F, 0.3389532819F, 0.3394230071F, 0.3398928905F,
  0.3403629317F, 0.3408331302F, 0.3413034854F, 0.3417739967F,
  0.3422446638F, 0.3427154860F, 0.3431864628F, 0.3436575938F,
  0.3441288782F, 0.3446003158F, 0.3450719058F, 0.3455436478F,
  0.3460155412F, 0.3464875856F, 0.3469597804F, 0.3474321250F,
  0.3479046189F, 0.3483772617F, 0.3488500527F, 0.3493229914F,
  0.3497960774F, 0.3502693100F, 0.3507426887F, 0.3512162131F,
  0.3516898825F, 0.3521636965F, 0.3526376545F, 0.3531117559F,
  0.3535860003F, 0.3540603870F, 0.3545349157F, 0.3550095856F,
  0.3554843964F, 0.3559593474F, 0.3564344381F, 0.3569096680F,
  0.3573850366F, 0.3578605432F, 0.3583361875F, 0.3588119687F,
  0.3592878865F, 0.3597639402F, 0.3602401293F, 0.3607164533F,
  0.3611929117F, 0.3616695038F, 0.3621462292F, 0.3626230873F,
  0.3631000776F, 0.3635771995F, 0.3640544525F, 0.3645318360F,
  0.3650093496F, 0.3654869926F, 0.3659647645F, 0.3664426648F,
  0.3669206930F, 0.3673988484F, 0.3678771306F, 0.3683555390F,
  0.3688340731F, 0.3693127322F, 0.3697915160F, 0.3702704237F,
  0.3707494549F, 0.3712286091F, 0.3717078857F, 0.3721872840F,
  0.3726668037F, 0.3731464441F, 0.3736262047F, 0.3741060850F,
  0.3745860843F, 0.3750662023F, 0.3755464382F, 0.3760267915F,
  0.3765072618F, 0.3769878484F, 0.3774685509F, 0.3779493686F,
  0.3784303010F, 0.3789113475F, 0.3793925076F, 0.3798737809F,
  0.3803551666F, 0.3808366642F, 0.3813182733F, 0.3817999932F,
  0.3822818234F, 0.3827637633F, 0.3832458124F, 0.3837279702F,
  0.3842102360F, 0.3846926093F, 0.3851750897F, 0.3856576764F,
  0.3861403690F, 0.3866231670F, 0.3871060696F, 0.3875890765F,
  0.3880721870F, 0.3885554007F, 0.3890387168F, 0.3895221349F,
  0.3900056544F, 0.3904892748F, 0.3909729955F, 0.3914568160F,
  0.3919407356F, 0.3924247539F, 0.3929088702F, 0.3933930841F,
  0.3938773949F, 0.3943618021F, 0.3948463052F, 0.3953309035F,
  0.3958155966F, 0.3963003838F, 0.3967852646F, 0.3972702385F,
  0.3977553048F, 0.3982404631F, 0.3987257127F, 0.3992110531F,
  0.3996964838F, 0.4001820041F, 0.4006676136F, 0.4011533116F,
  0.4016390976F, 0.4021249710F, 0.4026109313F, 0.4030969779F,
  0.4035831102F, 0.4040693277F, 0.4045556299F, 0.4050420160F,
  0.4055284857F, 0.4060150383F, 0.4065016732F, 0.4069883899F,
  0.4074751879F, 0.4079620665F, 0.4084490252F, 0.4089360635F,
  0.4094231807F, 0.4099103763F, 0.4103976498F, 0.4108850005F,
  0.4113724280F, 0.4118599315F, 0.4123475107F, 0.4128351648F,
  0.4133228934F, 0.4138106959F, 0.4142985716F, 0.4147865201F,
  0.4152745408F, 0.4157626330F, 0.4162507963F, 0.4167390301F,
  0.4172273337F, 0.4177157067F, 0.4182041484F, 0.4186926583F,
  0.4191812359F, 0.4196698805F, 0.4201585915F, 0.4206473685F,
  0.4211362108F, 0.4216251179F, 0.4221140892F, 0.4226031241F,
  0.4230922221F, 0.4235813826F, 0.4240706050F, 0.4245598887F,
  0.4250492332F, 0.4255386379F, 0.4260281022F, 0.4265176256F,
  0.4270072075F, 0.4274968473F, 0.4279865445F, 0.4284762984F,
  0.4289661086F, 0.4294559743F, 0.4299458951F, 0.4304358704F,
  0.4309258996F, 0.4314159822F, 0.4319061175F, 0.4323963050F,
  0.4328865441F, 0.4333768342F, 0.4338671749F, 0.4343575654F,
  0.4348480052F, 0.4353384938F, 0.4358290306F, 0.4363196149F,
  0.4368102463F, 0.4373009241F, 0.4377916478F, 0.4382824168F,
  0.4387732305F, 0.4392640884F, 0.4397549899F, 0.4402459343F,
  0.4407369212F, 0.4412279499F, 0.4417190198F, 0.4422101305F,
  0.4427012813F, 0.4431924717F, 0.4436837010F, 0.4441749686F,
  0.4446662742F, 0.4451576169F, 0.4456489963F, 0.4461404118F,
  0.4466318628F, 0.4471233487F, 0.4476148690F, 0.4481064230F,
  0.4485980103F, 0.4490896302F, 0.4495812821F, 0.4500729654F,
  0.4505646797F, 0.4510564243F, 0.4515481986F, 0.4520400021F,
  0.4525318341F, 0.4530236942F, 0.4535155816F, 0.4540074959F,
  0.4544994365F, 0.4549914028F, 0.4554833941F, 0.4559754100F,
  0.4564674499F, 0.4569595131F, 0.4574515991F, 0.4579437074F,
  0.4584358372F, 0.4589279881F, 0.4594201595F, 0.4599123508F,
  0.4604045615F, 0.4608967908F, 0.4613890383F, 0.4618813034F,
  0.4623735855F, 0.4628658841F, 0.4633581984F, 0.4638505281F,
  0.4643428724F, 0.4648352308F, 0.4653276028F, 0.4658199877F,
  0.4663123849F, 0.4668047940F, 0.4672972143F, 0.4677896451F,
  0.4682820861F, 0.4687745365F, 0.4692669958F, 0.4697594634F,
  0.4702519387F, 0.4707444211F, 0.4712369102F, 0.4717294052F,
  0.4722219056F, 0.4727144109F, 0.4732069204F, 0.4736994336F,
  0.4741919498F, 0.4746844686F, 0.4751769893F, 0.4756695113F,
  0.4761620341F, 0.4766545571F, 0.4771470797F, 0.4776396013F,
  0.4781321213F, 0.4786246392F, 0.4791171544F, 0.4796096663F,
  0.4801021744F, 0.4805946779F, 0.4810871765F, 0.4815796694F,
  0.4820721561F, 0.4825646360F, 0.4830571086F, 0.4835495732F,
  0.4840420293F, 0.4845344763F, 0.4850269136F, 0.4855193407F,
  0.4860117569F, 0.4865041617F, 0.4869965545F, 0.4874889347F,
  0.4879813018F, 0.4884736551F, 0.4889659941F, 0.4894583182F,
  0.4899506268F, 0.4904429193F, 0.4909351952F, 0.4914274538F,
  0.4919196947F, 0.4924119172F, 0.4929041207F, 0.4933963046F,
  0.4938884685F, 0.4943806116F, 0.4948727335F, 0.4953648335F,
  0.4958569110F, 0.4963489656F, 0.4968409965F, 0.4973330032F,
  0.4978249852F, 0.4983169419F, 0.4988088726F, 0.4993007768F,
  0.4997926539F, 0.5002845034F, 0.5007763247F, 0.5012681171F,
  0.5017598801F, 0.5022516132F, 0.5027433157F, 0.5032349871F,
  0.5037266268F, 0.5042182341F, 0.5047098086F, 0.5052013497F,
  0.5056928567F, 0.5061843292F, 0.5066757664F, 0.5071671679F,
  0.5076585330F, 0.5081498613F, 0.5086411520F, 0.5091324047F,
  0.5096236187F, 0.5101147934F, 0.5106059284F, 0.5110970230F,
  0.5115880766F, 0.5120790887F, 0.5125700587F, 0.5130609860F,
  0.5135518700F, 0.5140427102F, 0.5145335059F, 0.5150242566F,
  0.5155149618F, 0.5160056208F, 0.5164962331F, 0.5169867980F,
  0.5174773151F, 0.5179677837F, 0.5184582033F, 0.5189485733F,
  0.5194388931F, 0.5199291621F, 0.5204193798F, 0.5209095455F,
  0.5213996588F, 0.5218897190F, 0.5223797256F, 0.5228696779F,
  0.5233595755F, 0.5238494177F, 0.5243392039F, 0.5248289337F,
  0.5253186063F, 0.5258082213F, 0.5262977781F, 0.5267872760F,
  0.5272767146F, 0.5277660932F, 0.5282554112F, 0.5287446682F,
  0.5292338635F, 0.5297229965F, 0.5302120667F, 0.5307010736F,
  0.5311900164F, 0.5316788947F, 0.5321677079F, 0.5326564554F,
  0.5331451366F, 0.5336337511F, 0.5341222981F, 0.5346107771F,
  0.5350991876F, 0.5355875290F, 0.5360758007F, 0.5365640021F,
  0.5370521327F, 0.5375401920F, 0.5380281792F, 0.5385160939F,
  0.5390039355F, 0.5394917034F, 0.5399793971F, 0.5404670159F,
  0.5409545594F, 0.5414420269F, 0.5419294179F, 0.5424167318F,
  0.5429039680F, 0.5433911261F, 0.5438782053F, 0.5443652051F,
  0.5448521250F, 0.5453389644F, 0.5458257228F, 0.5463123995F,
  0.5467989940F, 0.5472855057F, 0.5477719341F, 0.5482582786F,
  0.5487445387F, 0.5492307137F, 0.5497168031F, 0.5502028063F,
  0.5506887228F, 0.5511745520F, 0.5516602934F, 0.5521459463F,
  0.5526315103F, 0.5531169847F, 0.5536023690F, 0.5540876626F,
  0.5545728649F, 0.5550579755F, 0.5555429937F, 0.5560279189F,
  0.5565127507F, 0.5569974884F, 0.5574821315F, 0.5579666794F,
  0.5584511316F, 0.5589354875F, 0.5594197465F, 0.5599039080F,
  0.5603879716F, 0.5608719367F, 0.5613558026F, 0.5618395689F,
  0.5623232350F, 0.5628068002F, 0.5632902642F, 0.5637736262F,
  0.5642568858F, 0.5647400423F, 0.5652230953F, 0.5657060442F,
  0.5661888883F, 0.5666716272F, 0.5671542603F, 0.5676367870F,
  0.5681192069F, 0.5686015192F, 0.5690837235F, 0.5695658192F,
  0.5700478058F, 0.5705296827F, 0.5710114494F, 0.5714931052F,
  0.5719746497F, 0.5724560822F, 0.5729374023F, 0.5734186094F,
  0.5738997029F, 0.5743806823F, 0.5748615470F, 0.5753422965F,
  0.5758229301F, 0.5763034475F, 0.5767838480F, 0.5772641310F,
  0.5777442960F, 0.5782243426F, 0.5787042700F, 0.5791840778F,
  0.5796637654F, 0.5801433322F, 0.5806227778F, 0.5811021016F,
  0.5815813029F, 0.5820603814F, 0.5825393363F, 0.5830181673F,
  0.5834968737F, 0.5839754549F, 0.5844539105F, 0.5849322399F,
  0.5854104425F, 0.5858885179F, 0.5863664653F, 0.5868442844F,
  0.5873219746F, 0.5877995353F, 0.5882769660F, 0.5887542661F,
  0.5892314351F, 0.5897084724F, 0.5901853776F, 0.5906621500F,
  0.5911387892F, 0.5916152945F, 0.5920916655F, 0.5925679016F,
  0.5930440022F, 0.5935199669F, 0.5939957950F, 0.5944714861F,
  0.5949470396F, 0.5954224550F, 0.5958977317F, 0.5963728692F,
  0.5968478669F, 0.5973227244F, 0.5977974411F, 0.5982720163F,
  0.5987464497F, 0.5992207407F, 0.5996948887F, 0.6001688932F,
  0.6006427537F, 0.6011164696F, 0.6015900405F, 0.6020634657F,
  0.6025367447F, 0.6030098770F, 0.6034828621F, 0.6039556995F,
  0.6044283885F, 0.6049009288F, 0.6053733196F, 0.6058455606F,
  0.6063176512F, 0.6067895909F, 0.6072613790F, 0.6077330152F,
  0.6082044989F, 0.6086758295F, 0.6091470065F, 0.6096180294F,
  0.6100888977F, 0.6105596108F, 0.6110301682F, 0.6115005694F,
  0.6119708139F, 0.6124409011F, 0.6129108305F, 0.6133806017F,
  0.6138502139F, 0.6143196669F, 0.6147889599F, 0.6152580926F,
  0.6157270643F, 0.6161958746F, 0.6166645230F, 0.6171330088F,
  0.6176013317F, 0.6180694910F, 0.6185374863F, 0.6190053171F,
  0.6194729827F, 0.6199404828F, 0.6204078167F, 0.6208749841F,
  0.6213419842F, 0.6218088168F, 0.6222754811F, 0.6227419768F,
  0.6232083032F, 0.6236744600F, 0.6241404465F, 0.6246062622F,
  0.6250719067F, 0.6255373795F, 0.6260026799F, 0.6264678076F,
  0.6269327619F, 0.6273975425F, 0.6278621487F, 0.6283265800F,
  0.6287908361F, 0.6292549163F, 0.6297188201F, 0.6301825471F,
  0.6306460966F, 0.6311094683F, 0.6315726617F, 0.6320356761F,
  0.6324985111F, 0.6329611662F, 0.6334236410F, 0.6338859348F,
  0.6343480472F, 0.6348099777F, 0.6352717257F, 0.6357332909F,
  0.6361946726F, 0.6366558704F, 0.6371168837F, 0.6375777122F,
  0.6380383552F, 0.6384988123F, 0.6389590830F, 0.6394191668F,
  0.6398790631F, 0.6403387716F, 0.6407982916F, 0.6412576228F,
  0.6417167645F, 0.6421757163F, 0.6426344778F, 0.6430930483F,
  0.6435514275F, 0.6440096149F, 0.6444676098F, 0.6449254119F,
  0.6453830207F, 0.6458404356F, 0.6462976562F, 0.6467546820F,
  0.6472115125F, 0.6476681472F, 0.6481245856F, 0.6485808273F,
  0.6490368717F, 0.6494927183F, 0.6499483667F, 0.6504038164F,
  0.6508590670F, 0.6513141178F, 0.6517689684F, 0.6522236185F,
  0.6526780673F, 0.6531323146F, 0.6535863598F, 0.6540402024F,
  0.6544938419F, 0.6549472779F, 0.6554005099F, 0.6558535373F,
  0.6563063598F, 0.6567589769F, 0.6572113880F, 0.6576635927F,
  0.6581155906F, 0.6585673810F, 0.6590189637F, 0.6594703380F,
  0.6599215035F, 0.6603724598F, 0.6608232064F, 0.6612737427F,
  0.6617240684F, 0.6621741829F, 0.6626240859F, 0.6630737767F,
  0.6635232550F, 0.6639725202F, 0.6644215720F, 0.6648704098F,
  0.6653190332F, 0.6657674417F, 0.6662156348F, 0.6666636121F,
  0.6671113731F, 0.6675589174F, 0.6680062445F, 0.6684533538F,
  0.6689002450F, 0.6693469177F, 0.6697933712F, 0.6702396052F,
  0.6706856193F, 0.6711314129F, 0.6715769855F, 0.6720223369F,
  0.6724674664F, 0.6729123736F, 0.6733570581F, 0.6738015194F,
  0.6742457570F, 0.6746897706F, 0.6751335596F, 0.6755771236F,
  0.6760204621F, 0.6764635747F, 0.6769064609F, 0.6773491204F,
  0.6777915525F, 0.6782337570F, 0.6786757332F, 0.6791174809F,
  0.6795589995F, 0.6800002886F, 0.6804413477F, 0.6808821765F,
  0.6813227743F, 0.6817631409F, 0.6822032758F, 0.6826431785F,
  0.6830828485F, 0.6835222855F, 0.6839614890F, 0.6844004585F,
  0.6848391936F, 0.6852776939F, 0.6857159589F, 0.6861539883F,
  0.6865917815F, 0.6870293381F, 0.6874666576F, 0.6879037398F,
  0.6883405840F, 0.6887771899F, 0.6892135571F, 0.6896496850F,
  0.6900855733F, 0.6905212216F, 0.6909566294F, 0.6913917963F,
  0.6918267218F, 0.6922614055F, 0.6926958471F, 0.6931300459F,
  0.6935640018F, 0.6939977141F, 0.6944311825F, 0.6948644066F,
  0.6952973859F, 0.6957301200F, 0.6961626085F, 0.6965948510F,
  0.6970268470F, 0.6974585961F, 0.6978900980F, 0.6983213521F,
  0.6987523580F, 0.6991831154F, 0.6996136238F, 0.7000438828F,
  0.7004738921F, 0.7009036510F, 0.7013331594F, 0.7017624166F,
  0.7021914224F, 0.7026201763F, 0.7030486779F, 0.7034769268F,
  0.7039049226F, 0.7043326648F, 0.7047601531F, 0.7051873870F,
  0.7056143662F, 0.7060410902F, 0.7064675586F, 0.7068937711F,
  0.7073197271F, 0.7077454264F, 0.7081708684F, 0.7085960529F,
  0.7090209793F, 0.7094456474F, 0.7098700566F, 0.7102942066F,
  0.7107180970F, 0.7111417274F, 0.7115650974F, 0.7119882066F,
  0.7124110545F, 0.7128336409F, 0.7132559653F, 0.7136780272F,
  0.7140998264F, 0.7145213624F, 0.7149426348F, 0.7153636433F,
  0.7157843874F, 0.7162048668F, 0.7166250810F, 0.7170450296F,
  0.7174647124F, 0.7178841289F, 0.7183032786F, 0.7187221613F,
  0.7191407765F, 0.7195591239F, 0.7199772030F, 0.7203950135F,
  0.7208125550F, 0.7212298271F, 0.7216468294F, 0.7220635616F,
  0.7224800233F, 0.7228962140F, 0.7233121335F, 0.7237277813F,
  0.7241431571F, 0.7245582604F, 0.7249730910F, 0.7253876484F,
  0.7258019322F, 0.7262159422F, 0.7266296778F, 0.7270431388F,
  0.7274563247F, 0.7278692353F, 0.7282818700F, 0.7286942287F,
  0.7291063108F, 0.7295181160F, 0.7299296440F, 0.7303408944F,
  0.7307518669F, 0.7311625609F, 0.7315729763F, 0.7319831126F,
  0.7323929695F, 0.7328025466F, 0.7332118435F, 0.7336208600F,
  0.7340295955F, 0.7344380499F, 0.7348462226F, 0.7352541134F,
  0.7356617220F, 0.7360690478F, 0.7364760907F, 0.7368828502F,
  0.7372893259F, 0.7376955176F, 0.7381014249F, 0.7385070475F,
  0.7389123849F, 0.7393174368F, 0.7397222029F, 0.7401266829F,
  0.7405308763F, 0.7409347829F, 0.7413384023F, 0.7417417341F,
  0.7421447780F, 0.7425475338F, 0.7429500009F, 0.7433521791F,
  0.7437540681F, 0.7441556674F, 0.7445569769F, 0.7449579960F,
  0.7453587245F, 0.7457591621F, 0.7461593084F, 0.7465591631F,
  0.7469587259F, 0.7473579963F, 0.7477569741F, 0.7481556590F,
  0.7485540506F, 0.7489521486F, 0.7493499526F, 0.7497474623F,
  0.7501446775F, 0.7505415977F, 0.7509382227F, 0.7513345521F,
  0.7517305856F, 0.7521263229F, 0.7525217636F, 0.7529169074F,
  0.7533117541F, 0.7537063032F, 0.7541005545F, 0.7544945076F,
  0.7548881623F, 0.7552815182F, 0.7556745749F, 0.7560673323F,
  0.7564597899F, 0.7568519474F, 0.7572438046F, 0.7576353611F,
  0.7580266166F, 0.7584175708F, 0.7588082235F, 0.7591985741F,
  0.7595886226F, 0.7599783685F, 0.7603678116F, 0.7607569515F,
  0.7611457879F, 0.7615343206F, 0.7619225493F, 0.7623104735F,
  0.7626980931F, 0.7630854078F, 0.7634724171F, 0.7638591209F,
  0.7642455188F, 0.7646316106F, 0.7650173959F, 0.7654028744F,
  0.7657880459F, 0.7661729100F, 0.7665574664F, 0.7669417150F,
  0.7673256553F, 0.7677092871F, 0.7680926100F, 0.7684756239F,
  0.7688583284F, 0.7692407232F, 0.7696228080F, 0.7700045826F,
  0.7703860467F, 0.7707671999F, 0.7711480420F, 0.7715285728F,
  0.7719087918F, 0.7722886989F, 0.7726682938F, 0.7730475762F,
  0.7734265458F, 0.7738052023F, 0.7741835454F, 0.7745615750F,
  0.7749392906F, 0.7753166921F, 0.7756937791F, 0.7760705514F,
  0.7764470087F, 0.7768231508F, 0.7771989773F, 0.7775744880F,
  0.7779496827F, 0.7783245610F, 0.7786991227F, 0.7790733676F,
  0.7794472953F, 0.7798209056F, 0.7801941982F, 0.7805671729F,
  0.7809398294F, 0.7813121675F, 0.7816841869F, 0.7820558873F,
  0.7824272684F, 0.7827983301F, 0.7831690720F, 0.7835394940F,
  0.7839095957F, 0.7842793768F, 0.7846488373F, 0.7850179767F,
  0.7853867948F, 0.7857552914F, 0.7861234663F, 0.7864913191F,
  0.7868588497F, 0.7872260578F, 0.7875929431F, 0.7879595055F,
  0.7883257445F, 0.7886916601F, 0.7890572520F, 0.7894225198F,
  0.7897874635F, 0.7901520827F, 0.7905163772F, 0.7908803468F,
  0.7912439912F, 0.7916073102F, 0.7919703035F, 0.7923329710F,
  0.7926953124F, 0.7930573274F, 0.7934190158F, 0.7937803774F,
  0.7941414120F, 0.7945021193F, 0.7948624991F, 0.7952225511F,
  0.7955822752F, 0.7959416711F, 0.7963007387F, 0.7966594775F,
  0.7970178875F, 0.7973759685F, 0.7977337201F, 0.7980911422F,
  0.7984482346F, 0.7988049970F, 0.7991614292F, 0.7995175310F,
  0.7998733022F, 0.8002287426F, 0.8005838519F, 0.8009386299F,
  0.8012930765F, 0.8016471914F, 0.8020009744F, 0.8023544253F,
  0.8027075438F, 0.8030603298F, 0.8034127831F, 0.8037649035F,
  0.8041166906F, 0.8044681445F, 0.8048192647F, 0.8051700512F,
  0.8055205038F, 0.8058706222F, 0.8062204062F, 0.8065698556F,
  0.8069189702F, 0.8072677499F, 0.8076161944F, 0.8079643036F,
  0.8083120772F, 0.8086595151F, 0.8090066170F, 0.8093533827F,
  0.8096998122F, 0.8100459051F, 0.8103916613F, 0.8107370806F,
  0.8110821628F, 0.8114269077F, 0.8117713151F, 0.8121153849F,
  0.8124591169F, 0.8128025108F, 0.8131455666F, 0.8134882839F,
  0.8138306627F, 0.8141727027F, 0.8145144038F, 0.8148557658F,
  0.8151967886F, 0.8155374718F, 0.8158778154F, 0.8162178192F,
  0.8165574830F, 0.8168968067F, 0.8172357900F, 0.8175744328F,
  0.8179127349F, 0.8182506962F, 0.8185883164F, 0.8189255955F,
  0.8192625332F, 0.8195991295F, 0.8199353840F, 0.8202712967F,
  0.8206068673F, 0.8209420958F, 0.8212769820F, 0.8216115256F,
  0.8219457266F, 0.8222795848F, 0.8226131000F, 0.8229462721F,
  0.8232791009F, 0.8236115863F, 0.8239437280F, 0.8242755260F,
  0.8246069801F, 0.8249380901F, 0.8252688559F, 0.8255992774F,
  0.8259293544F, 0.8262590867F, 0.8265884741F, 0.8269175167F,
  0.8272462141F, 0.8275745663F, 0.8279025732F, 0.8282302344F,
  0.8285575501F, 0.8288845199F, 0.8292111437F, 0.8295374215F,
  0.8298633530F, 0.8301889382F, 0.8305141768F, 0.8308390688F,
  0.8311636141F, 0.8314878124F, 0.8318116637F, 0.8321351678F,
  0.8324583246F, 0.8327811340F, 0.8331035957F, 0.8334257098F,
  0.8337474761F, 0.8340688944F, 0.8343899647F, 0.8347106867F,
  0.8350310605F, 0.8353510857F, 0.8356707624F, 0.8359900904F,
  0.8363090696F, 0.8366276999F, 0.8369459811F, 0.8372639131F,
  0.8375814958F, 0.8378987292F, 0.8382156130F, 0.8385321472F,
  0.8388483316F, 0.8391641662F, 0.8394796508F, 0.8397947853F,
  0.8401095697F, 0.8404240037F, 0.8407380873F, 0.8410518204F,
  0.8413652029F, 0.8416782347F, 0.8419909156F, 0.8423032456F,
  0.8426152245F, 0.8429268523F, 0.8432381289F, 0.8435490541F,
  0.8438596279F, 0.8441698502F, 0.8444797208F, 0.8447892396F,
  0.8450984067F, 0.8454072218F, 0.8457156849F, 0.8460237959F,
  0.8463315547F, 0.8466389612F, 0.8469460154F, 0.8472527170F,
  0.8475590661F, 0.8478650625F, 0.8481707063F, 0.8484759971F,
  0.8487809351F, 0.8490855201F, 0.8493897521F, 0.8496936308F,
  0.8499971564F, 0.8503003286F, 0.8506031474F, 0.8509056128F,
  0.8512077246F, 0.8515094828F, 0.8518108872F, 0.8521119379F,
  0.8524126348F, 0.8527129777F, 0.8530129666F, 0.8533126015F,
  0.8536118822F, 0.8539108087F, 0.8542093809F, 0.8545075988F,
  0.8548054623F, 0.8551029712F, 0.8554001257F, 0.8556969255F,
  0.8559933707F, 0.8562894611F, 0.8565851968F, 0.8568805775F,
  0.8571756034F, 0.8574702743F, 0.8577645902F, 0.8580585509F,
  0.8583521566F, 0.8586454070F, 0.8589383021F, 0.8592308420F,
  0.8595230265F, 0.8598148556F, 0.8601063292F, 0.8603974473F,
  0.8606882098F, 0.8609786167F, 0.8612686680F, 0.8615583636F,
  0.8618477034F, 0.8621366874F, 0.8624253156F, 0.8627135878F,
  0.8630015042F, 0.8632890646F, 0.8635762690F, 0.8638631173F,
  0.8641496096F, 0.8644357457F, 0.8647215257F, 0.8650069495F,
  0.8652920171F, 0.8655767283F, 0.8658610833F, 0.8661450820F,
  0.8664287243F, 0.8667120102F, 0.8669949397F, 0.8672775127F,
  0.8675597293F, 0.8678415894F, 0.8681230929F, 0.8684042398F,
  0.8686850302F, 0.8689654640F, 0.8692455412F, 0.8695252617F,
  0.8698046255F, 0.8700836327F, 0.8703622831F, 0.8706405768F,
  0.8709185138F, 0.8711960940F, 0.8714733174F, 0.8717501840F,
  0.8720266939F, 0.8723028469F, 0.8725786430F, 0.8728540824F,
  0.8731291648F, 0.8734038905F, 0.8736782592F, 0.8739522711F,
  0.8742259261F, 0.8744992242F, 0.8747721653F, 0.8750447496F,
  0.8753169770F, 0.8755888475F, 0.8758603611F, 0.8761315177F,
  0.8764023175F, 0.8766727603F, 0.8769428462F, 0.8772125752F,
  0.8774819474F, 0.8777509626F, 0.8780196209F, 0.8782879224F,
  0.8785558669F, 0.8788234546F, 0.8790906854F, 0.8793575594F,
  0.8796240765F, 0.8798902368F, 0.8801560403F, 0.8804214870F,
  0.8806865768F, 0.8809513099F, 0.8812156863F, 0.8814797059F,
  0.8817433687F, 0.8820066749F, 0.8822696243F, 0.8825322171F,
  0.8827944532F, 0.8830563327F, 0.8833178556F, 0.8835790219F,
  0.8838398316F, 0.8841002848F, 0.8843603815F, 0.8846201217F,
  0.8848795054F, 0.8851385327F, 0.8853972036F, 0.8856555182F,
  0.8859134764F, 0.8861710783F, 0.8864283239F, 0.8866852133F,
  0.8869417464F, 0.8871979234F, 0.8874537443F, 0.8877092090F,
  0.8879643177F, 0.8882190704F, 0.8884734671F, 0.8887275078F,
  0.8889811927F, 0.8892345216F, 0.8894874948F, 0.8897401122F,
  0.8899923738F, 0.8902442798F, 0.8904958301F, 0.8907470248F,
  0.8909978640F, 0.8912483477F, 0.8914984759F, 0.8917482487F,
  0.8919976662F, 0.8922467284F, 0.8924954353F, 0.8927437871F,
  0.8929917837F, 0.8932394252F, 0.8934867118F, 0.8937336433F,
  0.8939802199F, 0.8942264417F, 0.8944723087F, 0.8947178210F,
  0.8949629785F, 0.8952077815F, 0.8954522299F, 0.8956963239F,
  0.8959400634F, 0.8961834486F, 0.8964264795F, 0.8966691561F,
  0.8969114786F, 0.8971534470F, 0.8973950614F, 0.8976363219F,
  0.8978772284F, 0.8981177812F, 0.8983579802F, 0.8985978256F,
  0.8988373174F, 0.8990764556F, 0.8993152405F, 0.8995536720F,
  0.8997917502F, 0.9000294751F, 0.9002668470F, 0.9005038658F,
  0.9007405317F, 0.9009768446F, 0.9012128048F, 0.9014484123F,
  0.9016836671F, 0.9019185693F, 0.9021531191F, 0.9023873165F,
  0.9026211616F, 0.9028546546F, 0.9030877954F, 0.9033205841F,
  0.9035530210F, 0.9037851059F, 0.9040168392F, 0.9042482207F,
  0.9044792507F, 0.9047099293F, 0.9049402564F, 0.9051702323F,
  0.9053998569F, 0.9056291305F, 0.9058580531F, 0.9060866248F,
  0.9063148457F, 0.9065427159F, 0.9067702355F, 0.9069974046F,
  0.9072242233F, 0.9074506917F, 0.9076768100F, 0.9079025782F,
  0.9081279964F, 0.9083530647F, 0.9085777833F, 0.9088021523F,
  0.9090261717F, 0.9092498417F, 0.9094731623F, 0.9096961338F,
  0.9099187561F, 0.9101410295F, 0.9103629540F, 0.9105845297F,
  0.9108057568F, 0.9110266354F, 0.9112471656F, 0.9114673475F,
  0.9116871812F, 0.9119066668F, 0.9121258046F, 0.9123445945F,
  0.9125630367F, 0.9127811314F, 0.9129988786F, 0.9132162785F,
  0.9134333312F, 0.9136500368F, 0.9138663954F, 0.9140824073F,
  0.9142980724F, 0.9145133910F, 0.9147283632F, 0.9149429890F,
  0.9151572687F, 0.9153712023F, 0.9155847900F, 0.9157980319F,
  0.9160109282F, 0.9162234790F, 0.9164356844F, 0.9166475445F,
  0.9168590595F, 0.9170702296F, 0.9172810548F, 0.9174915354F,
  0.9177016714F, 0.9179114629F, 0.9181209102F, 0.9183300134F,
  0.9185387726F, 0.9187471879F, 0.9189552595F, 0.9191629876F,
  0.9193703723F, 0.9195774136F, 0.9197841119F, 0.9199904672F,
  0.9201964797F, 0.9204021495F, 0.9206074767F, 0.9208124616F,
  0.9210171043F, 0.9212214049F, 0.9214253636F, 0.9216289805F,
  0.9218322558F, 0.9220351896F, 0.9222377821F, 0.9224400335F,
  0.9226419439F, 0.9228435134F, 0.9230447423F, 0.9232456307F,
  0.9234461787F, 0.9236463865F, 0.9238462543F, 0.9240457822F,
  0.9242449704F, 0.9244438190F, 0.9246423282F, 0.9248404983F,
  0.9250383293F, 0.9252358214F, 0.9254329747F, 0.9256297896F,
  0.9258262660F, 0.9260224042F, 0.9262182044F, 0.9264136667F,
  0.9266087913F, 0.9268035783F, 0.9269980280F, 0.9271921405F,
  0.9273859160F, 0.9275793546F, 0.9277724566F, 0.9279652221F,
  0.9281576513F, 0.9283497443F, 0.9285415014F, 0.9287329227F,
  0.9289240084F, 0.9291147586F, 0.9293051737F, 0.9294952536F,
  0.9296849987F, 0.9298744091F, 0.9300634850F, 0.9302522266F,
  0.9304406340F, 0.9306287074F, 0.9308164471F, 0.9310038532F,
  0.9311909259F, 0.9313776654F, 0.9315640719F, 0.9317501455F,
  0.9319358865F, 0.9321212951F, 0.9323063713F, 0.9324911155F,
  0.9326755279F, 0.9328596085F, 0.9330433577F, 0.9332267756F,
  0.9334098623F, 0.9335926182F, 0.9337750434F, 0.9339571380F,
  0.9341389023F, 0.9343203366F, 0.9345014409F, 0.9346822155F,
  0.9348626606F, 0.9350427763F, 0.9352225630F, 0.9354020207F,
  0.9355811498F, 0.9357599503F, 0.9359384226F, 0.9361165667F,
  0.9362943830F, 0.9364718716F, 0.9366490327F, 0.9368258666F,
  0.9370023733F, 0.9371785533F, 0.9373544066F, 0.9375299335F,
  0.9377051341F, 0.9378800087F, 0.9380545576F, 0.9382287809F,
  0.9384026787F, 0.9385762515F, 0.9387494993F, 0.9389224223F,
  0.9390950209F, 0.9392672951F, 0.9394392453F, 0.9396108716F,
  0.9397821743F, 0.9399531536F, 0.9401238096F, 0.9402941427F,
  0.9404641530F, 0.9406338407F, 0.9408032061F, 0.9409722495F,
  0.9411409709F, 0.9413093707F, 0.9414774491F, 0.9416452062F,
  0.9418126424F, 0.9419797579F, 0.9421465528F, 0.9423130274F,
  0.9424791819F, 0.9426450166F, 0.9428105317F, 0.9429757274F,
  0.9431406039F, 0.9433051616F, 0.9434694005F, 0.9436333209F,
  0.9437969232F, 0.9439602074F, 0.9441231739F, 0.9442858229F,
  0.9444481545F, 0.9446101691F, 0.9447718669F, 0.9449332481F,
  0.9450943129F, 0.9452550617F, 0.9454154945F, 0.9455756118F,
  0.9457354136F, 0.9458949003F, 0.9460540721F, 0.9462129292F,
  0.9463714719F, 0.9465297003F, 0.9466876149F, 0.9468452157F,
  0.9470025031F, 0.9471594772F, 0.9473161384F, 0.9474724869F,
  0.9476285229F, 0.9477842466F, 0.9479396584F, 0.9480947585F,
  0.9482495470F, 0.9484040243F, 0.9485581906F, 0.9487120462F,
  0.9488655913F, 0.9490188262F, 0.9491717511F, 0.9493243662F,
  0.9494766718F, 0.9496286683F, 0.9497803557F, 0.9499317345F,
  0.9500828047F, 0.9502335668F, 0.9503840209F, 0.9505341673F,
  0.9506840062F, 0.9508335380F, 0.9509827629F, 0.9511316810F,
  0.9512802928F, 0.9514285984F, 0.9515765982F, 0.9517242923F,
  0.9518716810F, 0.9520187646F, 0.9521655434F, 0.9523120176F,
  0.9524581875F, 0.9526040534F, 0.9527496154F, 0.9528948739F,
  0.9530398292F, 0.9531844814F, 0.9533288310F, 0.9534728780F,
  0.9536166229F, 0.9537600659F, 0.9539032071F, 0.9540460470F,
  0.9541885858F, 0.9543308237F, 0.9544727611F, 0.9546143981F,
  0.9547557351F, 0.9548967723F, 0.9550375100F, 0.9551779485F,
  0.9553180881F, 0.9554579290F, 0.9555974714F, 0.9557367158F,
  0.9558756623F, 0.9560143112F, 0.9561526628F, 0.9562907174F,
  0.9564284752F, 0.9565659366F, 0.9567031017F, 0.9568399710F,
  0.9569765446F, 0.9571128229F, 0.9572488061F, 0.9573844944F,
  0.9575198883F, 0.9576549879F, 0.9577897936F, 0.9579243056F,
  0.9580585242F, 0.9581924497F, 0.9583260824F, 0.9584594226F,
  0.9585924705F, 0.9587252264F, 0.9588576906F, 0.9589898634F,
  0.9591217452F, 0.9592533360F, 0.9593846364F, 0.9595156465F,
  0.9596463666F, 0.9597767971F, 0.9599069382F, 0.9600367901F,
  0.9601663533F, 0.9602956279F, 0.9604246143F, 0.9605533128F,
  0.9606817236F, 0.9608098471F, 0.9609376835F, 0.9610652332F,
  0.9611924963F, 0.9613194733F, 0.9614461644F, 0.9615725699F,
  0.9616986901F, 0.9618245253F, 0.9619500757F, 0.9620753418F,
  0.9622003238F, 0.9623250219F, 0.9624494365F, 0.9625735679F,
  0.9626974163F, 0.9628209821F, 0.9629442656F, 0.9630672671F,
  0.9631899868F, 0.9633124251F, 0.9634345822F, 0.9635564585F,
  0.9636780543F, 0.9637993699F, 0.9639204056F, 0.9640411616F,
  0.9641616383F, 0.9642818359F, 0.9644017549F, 0.9645213955F,
  0.9646407579F, 0.9647598426F, 0.9648786497F, 0.9649971797F,
  0.9651154328F, 0.9652334092F, 0.9653511095F, 0.9654685337F,
  0.9655856823F, 0.9657025556F, 0.9658191538F, 0.9659354773F,
  0.9660515263F, 0.9661673013F, 0.9662828024F, 0.9663980300F,
  0.9665129845F, 0.9666276660F, 0.9667420750F, 0.9668562118F,
  0.9669700766F, 0.9670836698F, 0.9671969917F, 0.9673100425F,
  0.9674228227F, 0.9675353325F, 0.9676475722F, 0.9677595422F,
  0.9678712428F, 0.9679826742F, 0.9680938368F, 0.9682047309F,
  0.9683153569F, 0.9684257150F, 0.9685358056F, 0.9686456289F,
  0.9687551853F, 0.9688644752F, 0.9689734987F, 0.9690822564F,
  0.9691907483F, 0.9692989750F, 0.9694069367F, 0.9695146337F,
  0.9696220663F, 0.9697292349F, 0.9698361398F, 0.9699427813F,
  0.9700491597F, 0.9701552754F, 0.9702611286F, 0.9703667197F,
  0.9704720490F, 0.9705771169F, 0.9706819236F, 0.9707864695F,
  0.9708907549F, 0.9709947802F, 0.9710985456F, 0.9712020514F,
  0.9713052981F, 0.9714082859F, 0.9715110151F, 0.9716134862F,
  0.9717156993F, 0.9718176549F, 0.9719193532F, 0.9720207946F,
  0.9721219794F, 0.9722229080F, 0.9723235806F, 0.9724239976F,
  0.9725241593F, 0.9726240661F, 0.9727237183F, 0.9728231161F,
  0.9729222601F, 0.9730211503F, 0.9731197873F, 0.9732181713F,
  0.9733163027F, 0.9734141817F, 0.9735118088F, 0.9736091842F,
  0.9737063083F, 0.9738031814F, 0.9738998039F, 0.9739961760F,
  0.9740922981F, 0.9741881706F, 0.9742837938F, 0.9743791680F,
  0.9744742935F, 0.9745691707F, 0.9746637999F, 0.9747581814F,
  0.9748523157F, 0.9749462029F, 0.9750398435F, 0.9751332378F,
  0.9752263861F, 0.9753192887F, 0.9754119461F, 0.9755043585F,
  0.9755965262F, 0.9756884496F, 0.9757801291F, 0.9758715650F,
  0.9759627575F, 0.9760537071F, 0.9761444141F, 0.9762348789F,
  0.9763251016F, 0.9764150828F, 0.9765048228F, 0.9765943218F,
  0.9766835802F, 0.9767725984F, 0.9768613767F, 0.9769499154F,
  0.9770382149F, 0.9771262755F, 0.9772140976F, 0.9773016815F,
  0.9773890275F, 0.9774761360F, 0.9775630073F, 0.9776496418F,
  0.9777360398F, 0.9778222016F, 0.9779081277F, 0.9779938182F,
  0.9780792736F, 0.9781644943F, 0.9782494805F, 0.9783342326F,
  0.9784187509F, 0.9785030359F, 0.9785870877F, 0.9786709069F,
  0.9787544936F, 0.9788378484F, 0.9789209714F, 0.9790038631F,
  0.9790865238F, 0.9791689538F, 0.9792511535F, 0.9793331232F,
  0.9794148633F, 0.9794963742F, 0.9795776561F, 0.9796587094F,
  0.9797395345F, 0.9798201316F, 0.9799005013F, 0.9799806437F,
  0.9800605593F, 0.9801402483F, 0.9802197112F, 0.9802989483F,
  0.9803779600F, 0.9804567465F, 0.9805353082F, 0.9806136455F,
  0.9806917587F, 0.9807696482F, 0.9808473143F, 0.9809247574F,
  0.9810019778F, 0.9810789759F, 0.9811557519F, 0.9812323064F,
  0.9813086395F, 0.9813847517F, 0.9814606433F, 0.9815363147F,
  0.9816117662F, 0.9816869981F, 0.9817620108F, 0.9818368047F,
  0.9819113801F, 0.9819857374F, 0.9820598769F, 0.9821337989F,
  0.9822075038F, 0.9822809920F, 0.9823542638F, 0.9824273195F,
  0.9825001596F, 0.9825727843F, 0.9826451940F, 0.9827173891F,
  0.9827893700F, 0.9828611368F, 0.9829326901F, 0.9830040302F,
  0.9830751574F, 0.9831460720F, 0.9832167745F, 0.9832872652F,
  0.9833575444F, 0.9834276124F, 0.9834974697F, 0.9835671166F,
  0.9836365535F, 0.9837057806F, 0.9837747983F, 0.9838436071F,
  0.9839122072F, 0.9839805990F, 0.9840487829F, 0.9841167591F,
  0.9841845282F, 0.9842520903F, 0.9843194459F, 0.9843865953F,
  0.9844535389F, 0.9845202771F, 0.9845868101F, 0.9846531383F,
  0.9847192622F, 0.9847851820F, 0.9848508980F, 0.9849164108F,
  0.9849817205F, 0.9850468276F, 0.9851117324F, 0.9851764352F,
  0.9852409365F, 0.9853052366F, 0.9853693358F, 0.9854332344F,
  0.9854969330F, 0.9855604317F, 0.9856237309F, 0.9856868310F,
  0.9857497325F, 0.9858124355F, 0.9858749404F, 0.9859372477F,
  0.9859993577F, 0.9860612707F, 0.9861229871F, 0.9861845072F,
  0.9862458315F, 0.9863069601F, 0.9863678936F, 0.9864286322F,
  0.9864891764F, 0.9865495264F, 0.9866096826F, 0.9866696454F,
  0.9867294152F, 0.9867889922F, 0.9868483769F, 0.9869075695F,
  0.9869665706F, 0.9870253803F, 0.9870839991F, 0.9871424273F,
  0.9872006653F, 0.9872587135F, 0.9873165721F, 0.9873742415F,
  0.9874317222F, 0.9874890144F, 0.9875461185F, 0.9876030348F,
  0.9876597638F, 0.9877163057F, 0.9877726610F, 0.9878288300F,
  0.9878848130F, 0.9879406104F, 0.9879962225F, 0.9880516497F,
  0.9881068924F, 0.9881619509F, 0.9882168256F, 0.9882715168F,
  0.9883260249F, 0.9883803502F, 0.9884344931F, 0.9884884539F,
  0.9885422331F, 0.9885958309F, 0.9886492477F, 0.9887024838F,
  0.9887555397F, 0.9888084157F, 0.9888611120F, 0.9889136292F,
  0.9889659675F, 0.9890181273F, 0.9890701089F, 0.9891219128F,
  0.9891735392F, 0.9892249885F, 0.9892762610F, 0.9893273572F,
  0.9893782774F, 0.9894290219F, 0.9894795911F, 0.9895299853F,
  0.9895802049F, 0.9896302502F, 0.9896801217F, 0.9897298196F,
  0.9897793443F, 0.9898286961F, 0.9898778755F, 0.9899268828F,
  0.9899757183F, 0.9900243823F, 0.9900728753F, 0.9901211976F,
  0.9901693495F, 0.9902173314F, 0.9902651436F, 0.9903127865F,
  0.9903602605F, 0.9904075659F, 0.9904547031F, 0.9905016723F,
  0.9905484740F, 0.9905951086F, 0.9906415763F, 0.9906878775F,
  0.9907340126F, 0.9907799819F, 0.9908257858F, 0.9908714247F,
  0.9909168988F, 0.9909622086F, 0.9910073543F, 0.9910523364F,
  0.9910971552F, 0.9911418110F, 0.9911863042F, 0.9912306351F,
  0.9912748042F, 0.9913188117F, 0.9913626580F, 0.9914063435F,
  0.9914498684F, 0.9914932333F, 0.9915364383F, 0.9915794839F,
  0.9916223703F, 0.9916650981F, 0.9917076674F, 0.9917500787F,
  0.9917923323F, 0.9918344286F, 0.9918763679F, 0.9919181505F,
  0.9919597769F, 0.9920012473F, 0.9920425621F, 0.9920837217F,
  0.9921247263F, 0.9921655765F, 0.9922062724F, 0.9922468145F,
  0.9922872030F, 0.9923274385F, 0.9923675211F, 0.9924074513F,
  0.9924472294F, 0.9924868557F, 0.9925263306F, 0.9925656544F,
  0.9926048275F, 0.9926438503F, 0.9926827230F, 0.9927214461F,
  0.9927600199F, 0.9927984446F, 0.9928367208F, 0.9928748486F,
  0.9929128285F, 0.9929506608F, 0.9929883459F, 0.9930258841F,
  0.9930632757F, 0.9931005211F, 0.9931376207F, 0.9931745747F,
  0.9932113836F, 0.9932480476F, 0.9932845671F, 0.9933209425F,
  0.9933571742F, 0.9933932623F, 0.9934292074F, 0.9934650097F,
  0.9935006696F, 0.9935361874F, 0.9935715635F, 0.9936067982F,
  0.9936418919F, 0.9936768448F, 0.9937116574F, 0.9937463300F,
  0.9937808629F, 0.9938152565F, 0.9938495111F, 0.9938836271F,
  0.9939176047F, 0.9939514444F, 0.9939851465F, 0.9940187112F,
  0.9940521391F, 0.9940854303F, 0.9941185853F, 0.9941516044F,
  0.9941844879F, 0.9942172361F, 0.9942498495F, 0.9942823283F,
  0.9943146729F, 0.9943468836F, 0.9943789608F, 0.9944109047F,
  0.9944427158F, 0.9944743944F, 0.9945059408F, 0.9945373553F,
  0.9945686384F, 0.9945997902F, 0.9946308112F, 0.9946617017F,
  0.9946924621F, 0.9947230926F, 0.9947535937F, 0.9947839656F,
  0.9948142086F, 0.9948443232F, 0.9948743097F, 0.9949041683F,
  0.9949338995F, 0.9949635035F, 0.9949929807F, 0.9950223315F,
  0.9950515561F, 0.9950806549F, 0.9951096282F, 0.9951384764F,
  0.9951671998F, 0.9951957987F, 0.9952242735F, 0.9952526245F,
  0.9952808520F, 0.9953089564F, 0.9953369380F, 0.9953647971F,
  0.9953925340F, 0.9954201491F, 0.9954476428F, 0.9954750153F,
  0.9955022670F, 0.9955293981F, 0.9955564092F, 0.9955833003F,
  0.9956100720F, 0.9956367245F, 0.9956632582F, 0.9956896733F,
  0.9957159703F, 0.9957421494F, 0.9957682110F, 0.9957941553F,
  0.9958199828F, 0.9958456937F, 0.9958712884F, 0.9958967672F,
  0.9959221305F, 0.9959473784F, 0.9959725115F, 0.9959975300F,
  0.9960224342F, 0.9960472244F, 0.9960719011F, 0.9960964644F,
  0.9961209148F, 0.9961452525F, 0.9961694779F, 0.9961935913F,
  0.9962175930F, 0.9962414834F, 0.9962652627F, 0.9962889313F,
  0.9963124895F, 0.9963359377F, 0.9963592761F, 0.9963825051F,
  0.9964056250F, 0.9964286361F, 0.9964515387F, 0.9964743332F,
  0.9964970198F, 0.9965195990F, 0.9965420709F, 0.9965644360F,
  0.9965866946F, 0.9966088469F, 0.9966308932F, 0.9966528340F,
  0.9966746695F, 0.9966964001F, 0.9967180260F, 0.9967395475F,
  0.9967609651F, 0.9967822789F, 0.9968034894F, 0.9968245968F,
  0.9968456014F, 0.9968665036F, 0.9968873037F, 0.9969080019F,
  0.9969285987F, 0.9969490942F, 0.9969694889F, 0.9969897830F,
  0.9970099769F, 0.9970300708F, 0.9970500651F, 0.9970699601F,
  0.9970897561F, 0.9971094533F, 0.9971290522F, 0.9971485531F,
  0.9971679561F, 0.9971872617F, 0.9972064702F, 0.9972255818F,
  0.9972445968F, 0.9972635157F, 0.9972823386F, 0.9973010659F,
  0.9973196980F, 0.9973382350F, 0.9973566773F, 0.9973750253F,
  0.9973932791F, 0.9974114392F, 0.9974295059F, 0.9974474793F,
  0.9974653599F, 0.9974831480F, 0.9975008438F, 0.9975184476F,
  0.9975359598F, 0.9975533806F, 0.9975707104F, 0.9975879495F,
  0.9976050981F, 0.9976221566F, 0.9976391252F, 0.9976560043F,
  0.9976727941F, 0.9976894950F, 0.9977061073F, 0.9977226312F,
  0.9977390671F, 0.9977554152F, 0.9977716759F, 0.9977878495F,
  0.9978039361F, 0.9978199363F, 0.9978358501F, 0.9978516780F,
  0.9978674202F, 0.9978830771F, 0.9978986488F, 0.9979141358F,
  0.9979295383F, 0.9979448566F, 0.9979600909F, 0.9979752417F,
  0.9979903091F, 0.9980052936F, 0.9980201952F, 0.9980350145F,
  0.9980497515F, 0.9980644067F, 0.9980789804F, 0.9980934727F,
  0.9981078841F, 0.9981222147F, 0.9981364649F, 0.9981506350F,
  0.9981647253F, 0.9981787360F, 0.9981926674F, 0.9982065199F,
  0.9982202936F, 0.9982339890F, 0.9982476062F, 0.9982611456F,
  0.9982746074F, 0.9982879920F, 0.9983012996F, 0.9983145304F,
  0.9983276849F, 0.9983407632F, 0.9983537657F, 0.9983666926F,
  0.9983795442F, 0.9983923208F, 0.9984050226F, 0.9984176501F,
  0.9984302033F, 0.9984426827F, 0.9984550884F, 0.9984674208F,
  0.9984796802F, 0.9984918667F, 0.9985039808F, 0.9985160227F,
  0.9985279926F, 0.9985398909F, 0.9985517177F, 0.9985634734F,
  0.9985751583F, 0.9985867727F, 0.9985983167F, 0.9986097907F,
  0.9986211949F, 0.9986325297F, 0.9986437953F, 0.9986549919F,
  0.9986661199F, 0.9986771795F, 0.9986881710F, 0.9986990946F,
  0.9987099507F, 0.9987207394F, 0.9987314611F, 0.9987421161F,
  0.9987527045F, 0.9987632267F, 0.9987736829F, 0.9987840734F,
  0.9987943985F, 0.9988046584F, 0.9988148534F, 0.9988249838F,
  0.9988350498F, 0.9988450516F, 0.9988549897F, 0.9988648641F,
  0.9988746753F, 0.9988844233F, 0.9988941086F, 0.9989037313F,
  0.9989132918F, 0.9989227902F, 0.9989322269F, 0.9989416021F,
  0.9989509160F, 0.9989601690F, 0.9989693613F, 0.9989784931F,
  0.9989875647F, 0.9989965763F, 0.9990055283F, 0.9990144208F,
  0.9990232541F, 0.9990320286F, 0.9990407443F, 0.9990494016F,
  0.9990580008F, 0.9990665421F, 0.9990750257F, 0.9990834519F,
  0.9990918209F, 0.9991001331F, 0.9991083886F, 0.9991165877F,
  0.9991247307F, 0.9991328177F, 0.9991408491F, 0.9991488251F,
  0.9991567460F, 0.9991646119F, 0.9991724232F, 0.9991801801F,
  0.9991878828F, 0.9991955316F, 0.9992031267F, 0.9992106684F,
  0.9992181569F, 0.9992255925F, 0.9992329753F, 0.9992403057F,
  0.9992475839F, 0.9992548101F, 0.9992619846F, 0.9992691076F,
  0.9992761793F, 0.9992832001F, 0.9992901701F, 0.9992970895F,
  0.9993039587F, 0.9993107777F, 0.9993175470F, 0.9993242667F,
  0.9993309371F, 0.9993375583F, 0.9993441307F, 0.9993506545F,
  0.9993571298F, 0.9993635570F, 0.9993699362F, 0.9993762678F,
  0.9993825519F, 0.9993887887F, 0.9993949785F, 0.9994011216F,
  0.9994072181F, 0.9994132683F, 0.9994192725F, 0.9994252307F,
  0.9994311434F, 0.9994370107F, 0.9994428327F, 0.9994486099F,
  0.9994543423F, 0.9994600303F, 0.9994656739F, 0.9994712736F,
  0.9994768294F, 0.9994823417F, 0.9994878105F, 0.9994932363F,
  0.9994986191F, 0.9995039592F, 0.9995092568F, 0.9995145122F,
  0.9995197256F, 0.9995248971F, 0.9995300270F, 0.9995351156F,
  0.9995401630F, 0.9995451695F, 0.9995501352F, 0.9995550604F,
  0.9995599454F, 0.9995647903F, 0.9995695953F, 0.9995743607F,
  0.9995790866F, 0.9995837734F, 0.9995884211F, 0.9995930300F,
  0.9995976004F, 0.9996021324F, 0.9996066263F, 0.9996110822F,
  0.9996155004F, 0.9996198810F, 0.9996242244F, 0.9996285306F,
  0.9996327999F, 0.9996370326F, 0.9996412287F, 0.9996453886F,
  0.9996495125F, 0.9996536004F, 0.9996576527F, 0.9996616696F,
  0.9996656512F, 0.9996695977F, 0.9996735094F, 0.9996773865F,
  0.9996812291F, 0.9996850374F, 0.9996888118F, 0.9996925523F,
  0.9996962591F, 0.9996999325F, 0.9997035727F, 0.9997071798F,
  0.9997107541F, 0.9997142957F, 0.9997178049F, 0.9997212818F,
  0.9997247266F, 0.9997281396F, 0.9997315209F, 0.9997348708F,
  0.9997381893F, 0.9997414767F, 0.9997447333F, 0.9997479591F,
  0.9997511544F, 0.9997543194F, 0.9997574542F, 0.9997605591F,
  0.9997636342F, 0.9997666797F, 0.9997696958F, 0.9997726828F,
  0.9997756407F, 0.9997785698F, 0.9997814703F, 0.9997843423F,
  0.9997871860F, 0.9997900016F, 0.9997927894F, 0.9997955494F,
  0.9997982818F, 0.9998009869F, 0.9998036648F, 0.9998063157F,
  0.9998089398F, 0.9998115373F, 0.9998141082F, 0.9998166529F,
  0.9998191715F, 0.9998216642F, 0.9998241311F, 0.9998265724F,
  0.9998289884F, 0.9998313790F, 0.9998337447F, 0.9998360854F,
  0.9998384015F, 0.9998406930F, 0.9998429602F, 0.9998452031F,
  0.9998474221F, 0.9998496171F, 0.9998517885F, 0.9998539364F,
  0.9998560610F, 0.9998581624F, 0.9998602407F, 0.9998622962F,
  0.9998643291F, 0.9998663394F, 0.9998683274F, 0.9998702932F,
  0.9998722370F, 0.9998741589F, 0.9998760591F, 0.9998779378F,
  0.9998797952F, 0.9998816313F, 0.9998834464F, 0.9998852406F,
  0.9998870141F, 0.9998887670F, 0.9998904995F, 0.9998922117F,
  0.9998939039F, 0.9998955761F, 0.9998972285F, 0.9998988613F,
  0.9999004746F, 0.9999020686F, 0.9999036434F, 0.9999051992F,
  0.9999067362F, 0.9999082544F, 0.9999097541F, 0.9999112354F,
  0.9999126984F, 0.9999141433F, 0.9999155703F, 0.9999169794F,
  0.9999183709F, 0.9999197449F, 0.9999211014F, 0.9999224408F,
  0.9999237631F, 0.9999250684F, 0.9999263570F, 0.9999276289F,
  0.9999288843F, 0.9999301233F, 0.9999313461F, 0.9999325529F,
  0.9999337437F, 0.9999349187F, 0.9999360780F, 0.9999372218F,
  0.9999383503F, 0.9999394635F, 0.9999405616F, 0.9999416447F,
  0.9999427129F, 0.9999437665F, 0.9999448055F, 0.9999458301F,
  0.9999468404F, 0.9999478365F, 0.9999488185F, 0.9999497867F,
  0.9999507411F, 0.9999516819F, 0.9999526091F, 0.9999535230F,
  0.9999544236F, 0.9999553111F, 0.9999561856F, 0.9999570472F,
  0.9999578960F, 0.9999587323F, 0.9999595560F, 0.9999603674F,
  0.9999611666F, 0.9999619536F, 0.9999627286F, 0.9999634917F,
  0.9999642431F, 0.9999649828F, 0.9999657110F, 0.9999664278F,
  0.9999671334F, 0.9999678278F, 0.9999685111F, 0.9999691835F,
  0.9999698451F, 0.9999704960F, 0.9999711364F, 0.9999717662F,
  0.9999723858F, 0.9999729950F, 0.9999735942F, 0.9999741834F,
  0.9999747626F, 0.9999753321F, 0.9999758919F, 0.9999764421F,
  0.9999769828F, 0.9999775143F, 0.9999780364F, 0.9999785495F,
  0.9999790535F, 0.9999795485F, 0.9999800348F, 0.9999805124F,
  0.9999809813F, 0.9999814417F, 0.9999818938F, 0.9999823375F,
  0.9999827731F, 0.9999832005F, 0.9999836200F, 0.9999840316F,
  0.9999844353F, 0.9999848314F, 0.9999852199F, 0.9999856008F,
  0.9999859744F, 0.9999863407F, 0.9999866997F, 0.9999870516F,
  0.9999873965F, 0.9999877345F, 0.9999880656F, 0.9999883900F,
  0.9999887078F, 0.9999890190F, 0.9999893237F, 0.9999896220F,
  0.9999899140F, 0.9999901999F, 0.9999904796F, 0.9999907533F,
  0.9999910211F, 0.9999912830F, 0.9999915391F, 0.9999917896F,
  0.9999920345F, 0.9999922738F, 0.9999925077F, 0.9999927363F,
  0.9999929596F, 0.9999931777F, 0.9999933907F, 0.9999935987F,
  0.9999938018F, 0.9999940000F, 0.9999941934F, 0.9999943820F,
  0.9999945661F, 0.9999947456F, 0.9999949206F, 0.9999950912F,
  0.9999952575F, 0.9999954195F, 0.9999955773F, 0.9999957311F,
  0.9999958807F, 0.9999960265F, 0.9999961683F, 0.9999963063F,
  0.9999964405F, 0.9999965710F, 0.9999966979F, 0.9999968213F,
  0.9999969412F, 0.9999970576F, 0.9999971707F, 0.9999972805F,
  0.9999973871F, 0.9999974905F, 0.9999975909F, 0.9999976881F,
  0.9999977824F, 0.9999978738F, 0.9999979624F, 0.9999980481F,
  0.9999981311F, 0.9999982115F, 0.9999982892F, 0.9999983644F,
  0.9999984370F, 0.9999985072F, 0.9999985750F, 0.9999986405F,
  0.9999987037F, 0.9999987647F, 0.9999988235F, 0.9999988802F,
  0.9999989348F, 0.9999989873F, 0.9999990379F, 0.9999990866F,
  0.9999991334F, 0.9999991784F, 0.9999992217F, 0.9999992632F,
  0.9999993030F, 0.9999993411F, 0.9999993777F, 0.9999994128F,
  0.9999994463F, 0.9999994784F, 0.9999995091F, 0.9999995384F,
  0.9999995663F, 0.9999995930F, 0.9999996184F, 0.9999996426F,
  0.9999996657F, 0.9999996876F, 0.9999997084F, 0.9999997282F,
  0.9999997469F, 0.9999997647F, 0.9999997815F, 0.9999997973F,
  0.9999998123F, 0.9999998265F, 0.9999998398F, 0.9999998524F,
  0.9999998642F, 0.9999998753F, 0.9999998857F, 0.9999998954F,
  0.9999999045F, 0.9999999130F, 0.9999999209F, 0.9999999282F,
  0.9999999351F, 0.9999999414F, 0.9999999472F, 0.9999999526F,
  0.9999999576F, 0.9999999622F, 0.9999999664F, 0.9999999702F,
  0.9999999737F, 0.9999999769F, 0.9999999798F, 0.9999999824F,
  0.9999999847F, 0.9999999868F, 0.9999999887F, 0.9999999904F,
  0.9999999919F, 0.9999999932F, 0.9999999943F, 0.9999999953F,
  0.9999999961F, 0.9999999969F, 0.9999999975F, 0.9999999980F,
  0.9999999985F, 0.9999999988F, 0.9999999991F, 0.9999999993F,
  0.9999999995F, 0.9999999997F, 0.9999999998F, 0.9999999999F,
  0.9999999999F, 1.0000000000F, 1.0000000000F, 1.0000000000F,
  1.0000000000F, 1.0000000000F, 1.0000000000F, 1.0000000000F,
};

static float *vwin[8] = {
  vwin64,
  vwin128,
  vwin256,
  vwin512,
  vwin1024,
  vwin2048,
  vwin4096,
  vwin8192,
};

float *_vorbis_window_get(int n){
  return vwin[n];
}

void _vorbis_apply_window(float *d,int *winno,long *blocksizes,
     int lW,int W,int nW){
  lW=(W?lW:0);
  nW=(W?nW:0);

  {
    float *windowLW=vwin[winno[lW]];
    float *windowNW=vwin[winno[nW]];

    long n=blocksizes[W];
    long ln=blocksizes[lW];
    long rn=blocksizes[nW];

    long leftbegin=n/4-ln/4;
    long leftend=leftbegin+ln/2;

    long rightbegin=n/2+n/4-rn/4;
    long rightend=rightbegin+rn/2;

    int i,p;

    for(i=0;i<leftbegin;i++)
      d[i]=0.f;

    for(p=0;i<leftend;i++,p++)
      d[i]*=windowLW[p];

    for(i=rightbegin,p=rn/2-1;i<rightend;i++,p--)
      d[i]*=windowNW[p];

    for(;i<n;i++)
      d[i]=0.f;
  }
}
# 53464 "oggenc.c"
extern int vorbis_lpc_to_lsp(float *lpc,float *lsp,int m);

extern void vorbis_lsp_to_curve(float *curve,int *map,int n,int ln,
    float *lsp,int m,
    float amp,float ampoffset);

typedef struct {
  int ln;
  int m;
  int **linearmap;
  int n[2];

  vorbis_info_floor0 *vi;

  long bits;
  long frames;
} vorbis_look_floor0;




static void floor0_free_info(vorbis_info_floor *i){
  vorbis_info_floor0 *info=(vorbis_info_floor0 *)i;
  if(info){
    memset(info,0,sizeof(*info));
    free(info);
  }
}

static void floor0_free_look(vorbis_look_floor *i){
  vorbis_look_floor0 *look=(vorbis_look_floor0 *)i;
  if(look){

    if(look->linearmap){

      if(look->linearmap[0])free(look->linearmap[0]);
      if(look->linearmap[1])free(look->linearmap[1]);

      free(look->linearmap);
    }
    memset(look,0,sizeof(*look));
    free(look);
  }
}

static vorbis_info_floor *floor0_unpack (vorbis_info *vi,oggpack_buffer *opb){
  codec_setup_info *ci=vi->codec_setup;
  int j;

  vorbis_info_floor0 *info=malloc(sizeof(*info));
  info->order=oggpack_read(opb,8);
  info->rate=oggpack_read(opb,16);
  info->barkmap=oggpack_read(opb,16);
  info->ampbits=oggpack_read(opb,6);
  info->ampdB=oggpack_read(opb,8);
  info->numbooks=oggpack_read(opb,4)+1;

  if(info->order<1)goto err_out;
  if(info->rate<1)goto err_out;
  if(info->barkmap<1)goto err_out;
  if(info->numbooks<1)goto err_out;

  for(j=0;j<info->numbooks;j++){
    info->books[j]=oggpack_read(opb,8);
    if(info->books[j]<0 || info->books[j]>=ci->books)goto err_out;
  }
  return(info);

 err_out:
  floor0_free_info(info);
  return(
# 53534 "oggenc.c" 3 4
        ((void *)0)
# 53534 "oggenc.c"
            );
}
# 53545 "oggenc.c"
static void floor0_map_lazy_init(vorbis_block *vb,
     vorbis_info_floor *infoX,
     vorbis_look_floor0 *look){
  if(!look->linearmap[vb->W]){
    vorbis_dsp_state *vd=vb->vd;
    vorbis_info *vi=vd->vi;
    codec_setup_info *ci=vi->codec_setup;
    vorbis_info_floor0 *info=(vorbis_info_floor0 *)infoX;
    int W=vb->W;
    int n=ci->blocksizes[W]/2,j;




    float scale=look->ln/(13.1f*atan(.00074f*(info->rate/2.f))+2.24f*atan((info->rate/2.f)*(info->rate/2.f)*1.85e-8f)+1e-4f*(info->rate/2.f));







    look->linearmap[W]=malloc((n+1)*sizeof(**look->linearmap));
    for(j=0;j<n;j++){
      int val=floor( (13.1f*atan(.00074f*((info->rate/2.f)/n*j))+2.24f*atan(((info->rate/2.f)/n*j)*((info->rate/2.f)/n*j)*1.85e-8f)+1e-4f*((info->rate/2.f)/n*j))
       *scale);
      if(val>=look->ln)val=look->ln-1;
      look->linearmap[W][j]=val;
    }
    look->linearmap[W][j]=-1;
    look->n[W]=n;
  }
}

static vorbis_look_floor *floor0_look(vorbis_dsp_state *vd,
          vorbis_info_floor *i){
  vorbis_info_floor0 *info=(vorbis_info_floor0 *)i;
  vorbis_look_floor0 *look=calloc(1,sizeof(*look));
  look->m=info->order;
  look->ln=info->barkmap;
  look->vi=info;

  look->linearmap=calloc(2,sizeof(*look->linearmap));

  return look;
}

static void *floor0_inverse1(vorbis_block *vb,vorbis_look_floor *i){
  vorbis_look_floor0 *look=(vorbis_look_floor0 *)i;
  vorbis_info_floor0 *info=look->vi;
  int j,k;

  int ampraw=oggpack_read(&vb->opb,info->ampbits);
  if(ampraw>0){
    long maxval=(1<<info->ampbits)-1;
    float amp=(float)ampraw/maxval*info->ampdB;
    int booknum=oggpack_read(&vb->opb,_ilog(info->numbooks));

    if(booknum!=-1 && booknum<info->numbooks){
      codec_setup_info *ci=vb->vd->vi->codec_setup;
      codebook *b=ci->fullbooks+info->books[booknum];
      float last=0.f;




      float *lsp=_vorbis_block_alloc(vb,sizeof(*lsp)*(look->m+b->dim+1));

      for(j=0;j<look->m;j+=b->dim)
 if(vorbis_book_decodev_set(b,lsp+j,&vb->opb,b->dim)==-1)goto eop;
      for(j=0;j<look->m;){
 for(k=0;k<b->dim;k++,j++)lsp[j]+=last;
 last=lsp[j-1];
      }

      lsp[look->m]=amp;
      return(lsp);
    }
  }
 eop:
  return(
# 53625 "oggenc.c" 3 4
        ((void *)0)
# 53625 "oggenc.c"
            );
}

static int floor0_inverse2(vorbis_block *vb,vorbis_look_floor *i,
      void *memo,float *out){
  vorbis_look_floor0 *look=(vorbis_look_floor0 *)i;
  vorbis_info_floor0 *info=look->vi;

  floor0_map_lazy_init(vb,info,look);

  if(memo){
    float *lsp=(float *)memo;
    float amp=lsp[look->m];


    vorbis_lsp_to_curve(out,
   look->linearmap[vb->W],
   look->n[vb->W],
   look->ln,
   lsp,look->m,amp,(float)info->ampdB);
    return(1);
  }
  memset(out,0,sizeof(*out)*look->n[vb->W]);
  return(0);
}


vorbis_func_floor floor0_exportbundle={
  
# 53653 "oggenc.c" 3 4
 ((void *)0)
# 53653 "oggenc.c"
     ,&floor0_unpack,&floor0_look,&floor0_free_info,
  &floor0_free_look,&floor0_inverse1,&floor0_inverse2
};
# 53771 "oggenc.c"
static float COS_LOOKUP[128 +1]={
 +1.0000000000000f,+0.9996988186962f,+0.9987954562052f,+0.9972904566787f,
 +0.9951847266722f,+0.9924795345987f,+0.9891765099648f,+0.9852776423889f,
 +0.9807852804032f,+0.9757021300385f,+0.9700312531945f,+0.9637760657954f,
 +0.9569403357322f,+0.9495281805930f,+0.9415440651830f,+0.9329927988347f,
 +0.9238795325113f,+0.9142097557035f,+0.9039892931234f,+0.8932243011955f,
 +0.8819212643484f,+0.8700869911087f,+0.8577286100003f,+0.8448535652497f,
 +0.8314696123025f,+0.8175848131516f,+0.8032075314806f,+0.7883464276266f,
 +0.7730104533627f,+0.7572088465065f,+0.7409511253550f,+0.7242470829515f,
 +0.7071067811865f,+0.6895405447371f,+0.6715589548470f,+0.6531728429538f,
 +0.6343932841636f,+0.6152315905806f,+0.5956993044924f,+0.5758081914178f,
 +0.5555702330196f,+0.5349976198871f,+0.5141027441932f,+0.4928981922298f,
 +0.4713967368260f,+0.4496113296546f,+0.4275550934303f,+0.4052413140050f,
 +0.3826834323651f,+0.3598950365350f,+0.3368898533922f,+0.3136817403989f,
 +0.2902846772545f,+0.2667127574749f,+0.2429801799033f,+0.2191012401569f,
 +0.1950903220161f,+0.1709618887603f,+0.1467304744554f,+0.1224106751992f,
 +0.0980171403296f,+0.0735645635997f,+0.0490676743274f,+0.0245412285229f,
 +0.0000000000000f,-0.0245412285229f,-0.0490676743274f,-0.0735645635997f,
 -0.0980171403296f,-0.1224106751992f,-0.1467304744554f,-0.1709618887603f,
 -0.1950903220161f,-0.2191012401569f,-0.2429801799033f,-0.2667127574749f,
 -0.2902846772545f,-0.3136817403989f,-0.3368898533922f,-0.3598950365350f,
 -0.3826834323651f,-0.4052413140050f,-0.4275550934303f,-0.4496113296546f,
 -0.4713967368260f,-0.4928981922298f,-0.5141027441932f,-0.5349976198871f,
 -0.5555702330196f,-0.5758081914178f,-0.5956993044924f,-0.6152315905806f,
 -0.6343932841636f,-0.6531728429538f,-0.6715589548470f,-0.6895405447371f,
 -0.7071067811865f,-0.7242470829515f,-0.7409511253550f,-0.7572088465065f,
 -0.7730104533627f,-0.7883464276266f,-0.8032075314806f,-0.8175848131516f,
 -0.8314696123025f,-0.8448535652497f,-0.8577286100003f,-0.8700869911087f,
 -0.8819212643484f,-0.8932243011955f,-0.9039892931234f,-0.9142097557035f,
 -0.9238795325113f,-0.9329927988347f,-0.9415440651830f,-0.9495281805930f,
 -0.9569403357322f,-0.9637760657954f,-0.9700312531945f,-0.9757021300385f,
 -0.9807852804032f,-0.9852776423889f,-0.9891765099648f,-0.9924795345987f,
 -0.9951847266722f,-0.9972904566787f,-0.9987954562052f,-0.9996988186962f,
 -1.0000000000000f,
};


static float INVSQ_LOOKUP[32 +1]={
 1.414213562373f,1.392621247646f,1.371988681140f,1.352246807566f,
 1.333333333333f,1.315191898443f,1.297771369046f,1.281025230441f,
 1.264911064067f,1.249390095109f,1.234426799697f,1.219988562661f,
 1.206045378311f,1.192569588000f,1.179535649239f,1.166919931983f,
 1.154700538379f,1.142857142857f,1.131370849898f,1.120224067222f,
 1.109400392450f,1.098884511590f,1.088662107904f,1.078719779941f,
 1.069044967650f,1.059625885652f,1.050451462878f,1.041511287847f,
 1.032795558989f,1.024295039463f,1.016001016002f,1.007905261358f,
 1.000000000000f,
};



static float INVSQ2EXP_LOOKUP[32 -
                              (-32)+1]={
          65536.f, 46340.95001f, 32768.f, 23170.47501f,
          16384.f, 11585.2375f, 8192.f, 5792.618751f,
           4096.f, 2896.309376f, 2048.f, 1448.154688f,
           1024.f, 724.0773439f, 512.f, 362.038672f,
            256.f, 181.019336f, 128.f, 90.50966799f,
             64.f, 45.254834f, 32.f, 22.627417f,
             16.f, 11.3137085f, 8.f, 5.656854249f,
              4.f, 2.828427125f, 2.f, 1.414213562f,
              1.f, 0.7071067812f, 0.5f, 0.3535533906f,
            0.25f, 0.1767766953f, 0.125f, 0.08838834765f,
          0.0625f, 0.04419417382f, 0.03125f, 0.02209708691f,
        0.015625f, 0.01104854346f, 0.0078125f, 0.005524271728f,
      0.00390625f, 0.002762135864f, 0.001953125f, 0.001381067932f,
    0.0009765625f, 0.000690533966f, 0.00048828125f, 0.000345266983f,
  0.000244140625f,0.0001726334915f,0.0001220703125f,8.631674575e-05f,
 6.103515625e-05f,4.315837288e-05f,3.051757812e-05f,2.157918644e-05f,
 1.525878906e-05f,
};
# 53850 "oggenc.c"
static float FROMdB_LOOKUP[35]={
              1.f, 0.6309573445f, 0.3981071706f, 0.2511886432f,
    0.1584893192f, 0.1f, 0.06309573445f, 0.03981071706f,
   0.02511886432f, 0.01584893192f, 0.01f, 0.006309573445f,
  0.003981071706f, 0.002511886432f, 0.001584893192f, 0.001f,
 0.0006309573445f,0.0003981071706f,0.0002511886432f,0.0001584893192f,
          0.0001f,6.309573445e-05f,3.981071706e-05f,2.511886432e-05f,
 1.584893192e-05f, 1e-05f,6.309573445e-06f,3.981071706e-06f,
 2.511886432e-06f,1.584893192e-06f, 1e-06f,6.309573445e-07f,
 3.981071706e-07f,2.511886432e-07f,1.584893192e-07f,
};

static float FROMdB2_LOOKUP[32]={
    0.9928302478f, 0.9786445908f, 0.9646616199f, 0.9508784391f,
    0.9372921937f, 0.92390007f, 0.9106992942f, 0.8976871324f,
    0.8848608897f, 0.8722179097f, 0.8597555737f, 0.8474713009f,
     0.835362547f, 0.8234268041f, 0.8116616003f, 0.8000644989f,
    0.7886330981f, 0.7773650302f, 0.7662579617f, 0.755309592f,
    0.7445176537f, 0.7338799116f, 0.7233941627f, 0.7130582353f,
    0.7028699885f, 0.6928273125f, 0.6829281272f, 0.6731703824f,
    0.6635520573f, 0.6540711597f, 0.6447257262f, 0.6355138211f,
};
# 53941 "oggenc.c"
float vorbis_coslook(float a){
  double d=a*(.31830989*(float)128);
  int i=vorbis_ftoi(d-.5);

  return COS_LOOKUP[i]+ (d-i)*(COS_LOOKUP[i+1]-COS_LOOKUP[i]);
}


float vorbis_invsqlook(float a){
  double d=a*(2.f*(float)32)-(float)32;
  int i=vorbis_ftoi(d-.5f);
  return INVSQ_LOOKUP[i]+ (d-i)*(INVSQ_LOOKUP[i+1]-INVSQ_LOOKUP[i]);
}


float vorbis_invsq2explook(int a){
  return INVSQ2EXP_LOOKUP[a-(-32)];
}


float vorbis_fromdBlook(float a){
  int i=vorbis_ftoi(a*((float)(-(1<<3)))-.5f);
  return (i<0)?1.f:
    ((i>=(35<<5))?0.f:
     FROMdB_LOOKUP[i>>5]*FROMdB2_LOOKUP[i&31]);
}
# 54010 "oggenc.c"
void vorbis_lsp_to_curve(float *curve,int *map,int n,int ln,float *lsp,int m,
       float amp,float ampoffset){
  int i;
  float wdel=
# 54013 "oggenc.c" 3 4
            3.14159265358979323846
# 54013 "oggenc.c"
                /ln;
  vorbis_fpu_control fpu;

  {};
  for(i=0;i<m;i++)lsp[i]=vorbis_coslook(lsp[i]);

  i=0;
  while(i<n){
    int k=map[i];
    int qexp;
    float p=.7071067812f;
    float q=.7071067812f;
    float w=vorbis_coslook(wdel*k);
    float *ftmp=lsp;
    int c=m>>1;

    do{
      q*=ftmp[0]-w;
      p*=ftmp[1]-w;
      ftmp+=2;
    }while(--c);

    if(m&1){


      q*=ftmp[0]-w;
      q*=q;
      p*=p*(1.f-w*w);
    }else{

      q*=q*(1.f+w);
      p*=p*(1.f-w);
    }

    q=frexp(p+q,&qexp);
    q=vorbis_fromdBlook(amp*
   vorbis_invsqlook(q)*
   vorbis_invsq2explook(qexp+m)-
   ampoffset);

    do{
      curve[i++]*=q;
    }while(map[i]==k);
  }
  {};
}
# 54228 "oggenc.c"
static void cheby(float *g, int ord) {
  int i, j;

  g[0] *= .5f;
  for(i=2; i<= ord; i++) {
    for(j=ord; j >= i; j--) {
      g[j-2] -= g[j];
      g[j] += g[j];
    }
  }
}

static int comp(const void *a,const void *b){
  return (*(float *)a<*(float *)b)-(*(float *)a>*(float *)b);
}
# 54252 "oggenc.c"
static int Laguerre_With_Deflation(float *a,int ord,float *r){
  int i,m;
  double lastdelta=0.f;
  double *defl=
# 54255 "oggenc.c" 3 4
              __builtin_alloca (
# 54255 "oggenc.c"
              sizeof(*defl)*(ord+1)
# 54255 "oggenc.c" 3 4
              )
# 54255 "oggenc.c"
                                           ;
  for(i=0;i<=ord;i++)defl[i]=a[i];

  for(m=ord;m>0;m--){
    double new=0.f,delta;


    while(1){
      double p=defl[m],pp=0.f,ppp=0.f,denom;


      for(i=m;i>0;i--){
 ppp = new*ppp + pp;
 pp = new*pp + p;
 p = new*p + defl[i-1];
      }


      denom=(m-1) * ((m-1)*pp*pp - m*p*ppp);
      if(denom<0)
 return(-1);

      if(pp>0){
 denom = pp + sqrt(denom);
 if(denom<10e-7)denom=10e-7;
      }else{
 denom = pp - sqrt(denom);
 if(denom>-(10e-7))denom=-(10e-7);
      }

      delta = m*p/denom;
      new -= delta;

      if(delta<0.f)delta*=-1;

      if(fabs(delta/new)<10e-12)break;
      lastdelta=delta;
    }

    r[m-1]=new;



    for(i=m;i>0;i--)
      defl[i-1]+=new*defl[i];
    defl++;

  }
  return(0);
}



static int Newton_Raphson(float *a,int ord,float *r){
  int i, k, count=0;
  double error=1.f;
  double *root=
# 54311 "oggenc.c" 3 4
              __builtin_alloca (
# 54311 "oggenc.c"
              ord*sizeof(*root)
# 54311 "oggenc.c" 3 4
              )
# 54311 "oggenc.c"
                                       ;

  for(i=0; i<ord;i++) root[i] = r[i];

  while(error>1e-20){
    error=0;

    for(i=0; i<ord; i++) {
      double pp=0.,delta;
      double rooti=root[i];
      double p=a[ord];
      for(k=ord-1; k>= 0; k--) {

 pp= pp* rooti + p;
 p = p * rooti + a[k];
      }

      delta = p/pp;
      root[i] -= delta;
      error+= delta*delta;
    }

    if(count>40)return(-1);

    count++;
  }




  for(i=0; i<ord;i++) r[i] = root[i];
  return(0);
}



int vorbis_lpc_to_lsp(float *lpc,float *lsp,int m){
  int order2=(m+1)>>1;
  int g1_order,g2_order;
  float *g1=
# 54350 "oggenc.c" 3 4
           __builtin_alloca (
# 54350 "oggenc.c"
           sizeof(*g1)*(order2+1)
# 54350 "oggenc.c" 3 4
           )
# 54350 "oggenc.c"
                                         ;
  float *g2=
# 54351 "oggenc.c" 3 4
           __builtin_alloca (
# 54351 "oggenc.c"
           sizeof(*g2)*(order2+1)
# 54351 "oggenc.c" 3 4
           )
# 54351 "oggenc.c"
                                         ;
  float *g1r=
# 54352 "oggenc.c" 3 4
            __builtin_alloca (
# 54352 "oggenc.c"
            sizeof(*g1r)*(order2+1)
# 54352 "oggenc.c" 3 4
            )
# 54352 "oggenc.c"
                                           ;
  float *g2r=
# 54353 "oggenc.c" 3 4
            __builtin_alloca (
# 54353 "oggenc.c"
            sizeof(*g2r)*(order2+1)
# 54353 "oggenc.c" 3 4
            )
# 54353 "oggenc.c"
                                           ;
  int i;


  g1_order=(m+1)>>1;
  g2_order=(m) >>1;






  g1[g1_order] = 1.f;
  for(i=1;i<=g1_order;i++) g1[g1_order-i] = lpc[i-1]+lpc[m-i];
  g2[g2_order] = 1.f;
  for(i=1;i<=g2_order;i++) g2[g2_order-i] = lpc[i-1]-lpc[m-i];

  if(g1_order>g2_order){
    for(i=2; i<=g2_order;i++) g2[g2_order-i] += g2[g2_order-i+2];
  }else{
    for(i=1; i<=g1_order;i++) g1[g1_order-i] -= g1[g1_order-i+1];
    for(i=1; i<=g2_order;i++) g2[g2_order-i] += g2[g2_order-i+1];
  }


  cheby(g1,g1_order);
  cheby(g2,g2_order);


  if(Laguerre_With_Deflation(g1,g1_order,g1r) ||
     Laguerre_With_Deflation(g2,g2_order,g2r))
    return(-1);

  Newton_Raphson(g1,g1_order,g1r);
  Newton_Raphson(g2,g2_order,g2r);

  qsort(g1r,g1_order,sizeof(*g1r),comp);
  qsort(g2r,g2_order,sizeof(*g2r),comp);

  for(i=0;i<g1_order;i++)
    lsp[i*2] = acos(g1r[i]);

  for(i=0;i<g2_order;i++)
    lsp[i*2+1] = acos(g2r[i]);
  return(0);
}
# 54420 "oggenc.c"
typedef struct {
  int sorted_index[63 +2];
  int forward_index[63 +2];
  int reverse_index[63 +2];

  int hineighbor[63];
  int loneighbor[63];
  int posts;

  int n;
  int quant_q;
  vorbis_info_floor1 *vi;

  long phrasebits;
  long postbits;
  long frames;
} vorbis_look_floor1;

typedef struct lsfit_acc{
  long x0;
  long x1;

  long xa;
  long ya;
  long x2a;
  long y2a;
  long xya;
  long an;
} lsfit_acc;



static void floor1_free_info(vorbis_info_floor *i){
  vorbis_info_floor1 *info=(vorbis_info_floor1 *)i;
  if(info){
    memset(info,0,sizeof(*info));
    free(info);
  }
}

static void floor1_free_look(vorbis_look_floor *i){
  vorbis_look_floor1 *look=(vorbis_look_floor1 *)i;
  if(look){





    memset(look,0,sizeof(*look));
    free(look);
  }
}

static int ilog(unsigned int v){
  int ret=0;
  while(v){
    ret++;
    v>>=1;
  }
  return(ret);
}

static void floor1_pack (vorbis_info_floor *i,oggpack_buffer *opb){
  vorbis_info_floor1 *info=(vorbis_info_floor1 *)i;
  int j,k;
  int count=0;
  int rangebits;
  int maxposit=info->postlist[1];
  int maxclass=-1;


  oggpack_write(opb,info->partitions,5);
  for(j=0;j<info->partitions;j++){
    oggpack_write(opb,info->partitionclass[j],4);
    if(maxclass<info->partitionclass[j])maxclass=info->partitionclass[j];
  }


  for(j=0;j<maxclass+1;j++){
    oggpack_write(opb,info->class_dim[j]-1,3);
    oggpack_write(opb,info->class_subs[j],2);
    if(info->class_subs[j])oggpack_write(opb,info->class_book[j],8);
    for(k=0;k<(1<<info->class_subs[j]);k++)
      oggpack_write(opb,info->class_subbook[j][k]+1,8);
  }


  oggpack_write(opb,info->mult-1,2);
  oggpack_write(opb,ilog2(maxposit),4);
  rangebits=ilog2(maxposit);

  for(j=0,k=0;j<info->partitions;j++){
    count+=info->class_dim[info->partitionclass[j]];
    for(;k<count;k++)
      oggpack_write(opb,info->postlist[k+2],rangebits);
  }
}


static vorbis_info_floor *floor1_unpack (vorbis_info *vi,oggpack_buffer *opb){
  codec_setup_info *ci=vi->codec_setup;
  int j,k,count=0,maxclass=-1,rangebits;

  vorbis_info_floor1 *info=calloc(1,sizeof(*info));

  info->partitions=oggpack_read(opb,5);
  for(j=0;j<info->partitions;j++){
    info->partitionclass[j]=oggpack_read(opb,4);
    if(maxclass<info->partitionclass[j])maxclass=info->partitionclass[j];
  }


  for(j=0;j<maxclass+1;j++){
    info->class_dim[j]=oggpack_read(opb,3)+1;
    info->class_subs[j]=oggpack_read(opb,2);
    if(info->class_subs[j]<0)
      goto err_out;
    if(info->class_subs[j])info->class_book[j]=oggpack_read(opb,8);
    if(info->class_book[j]<0 || info->class_book[j]>=ci->books)
      goto err_out;
    for(k=0;k<(1<<info->class_subs[j]);k++){
      info->class_subbook[j][k]=oggpack_read(opb,8)-1;
      if(info->class_subbook[j][k]<-1 || info->class_subbook[j][k]>=ci->books)
 goto err_out;
    }
  }


  info->mult=oggpack_read(opb,2)+1;
  rangebits=oggpack_read(opb,4);

  for(j=0,k=0;j<info->partitions;j++){
    count+=info->class_dim[info->partitionclass[j]];
    for(;k<count;k++){
      int t=info->postlist[k+2]=oggpack_read(opb,rangebits);
      if(t<0 || t>=(1<<rangebits))
 goto err_out;
    }
  }
  info->postlist[0]=0;
  info->postlist[1]=1<<rangebits;

  return(info);

 err_out:
  floor1_free_info(info);
  return(
# 54566 "oggenc.c" 3 4
        ((void *)0)
# 54566 "oggenc.c"
            );
}

static int icomp(const void *a,const void *b){
  return(**(int **)a-**(int **)b);
}

static vorbis_look_floor *floor1_look(vorbis_dsp_state *vd,
          vorbis_info_floor *in){

  int *sortpointer[63 +2];
  vorbis_info_floor1 *info=(vorbis_info_floor1 *)in;
  vorbis_look_floor1 *look=calloc(1,sizeof(*look));
  int i,j,n=0;

  look->vi=info;
  look->n=info->postlist[1];
# 54591 "oggenc.c"
  for(i=0;i<info->partitions;i++)n+=info->class_dim[info->partitionclass[i]];
  n+=2;
  look->posts=n;


  for(i=0;i<n;i++)sortpointer[i]=info->postlist+i;
  qsort(sortpointer,n,sizeof(*sortpointer),icomp);


  for(i=0;i<n;i++)look->forward_index[i]=sortpointer[i]-info->postlist;

  for(i=0;i<n;i++)look->reverse_index[look->forward_index[i]]=i;

  for(i=0;i<n;i++)look->sorted_index[i]=info->postlist[look->forward_index[i]];


  switch(info->mult){
  case 1:
    look->quant_q=256;
    break;
  case 2:
    look->quant_q=128;
    break;
  case 3:
    look->quant_q=86;
    break;
  case 4:
    look->quant_q=64;
    break;
  }



  for(i=0;i<n-2;i++){
    int lo=0;
    int hi=1;
    int lx=0;
    int hx=look->n;
    int currentx=info->postlist[i+2];
    for(j=0;j<i+2;j++){
      int x=info->postlist[j];
      if(x>lx && x<currentx){
 lo=j;
 lx=x;
      }
      if(x<hx && x>currentx){
 hi=j;
 hx=x;
      }
    }
    look->loneighbor[i]=lo;
    look->hineighbor[i]=hi;
  }

  return(look);
}

static int render_point(int x0,int x1,int y0,int y1,int x){
  y0&=0x7fff;
  y1&=0x7fff;

  {
    int dy=y1-y0;
    int adx=x1-x0;
    int ady=abs(dy);
    int err=ady*(x-x0);

    int off=err/adx;
    if(dy<0)return(y0-off);
    return(y0+off);
  }
}

static int vorbis_dBquant(const float *x){
  int i= *x*7.3142857f+1023.5f;
  if(i>1023)return(1023);
  if(i<0)return(0);
  return i;
}

static float FLOOR1_fromdB_LOOKUP[256]={
  1.0649863e-07F, 1.1341951e-07F, 1.2079015e-07F, 1.2863978e-07F,
  1.3699951e-07F, 1.4590251e-07F, 1.5538408e-07F, 1.6548181e-07F,
  1.7623575e-07F, 1.8768855e-07F, 1.9988561e-07F, 2.128753e-07F,
  2.2670913e-07F, 2.4144197e-07F, 2.5713223e-07F, 2.7384213e-07F,
  2.9163793e-07F, 3.1059021e-07F, 3.3077411e-07F, 3.5226968e-07F,
  3.7516214e-07F, 3.9954229e-07F, 4.2550680e-07F, 4.5315863e-07F,
  4.8260743e-07F, 5.1396998e-07F, 5.4737065e-07F, 5.8294187e-07F,
  6.2082472e-07F, 6.6116941e-07F, 7.0413592e-07F, 7.4989464e-07F,
  7.9862701e-07F, 8.5052630e-07F, 9.0579828e-07F, 9.6466216e-07F,
  1.0273513e-06F, 1.0941144e-06F, 1.1652161e-06F, 1.2409384e-06F,
  1.3215816e-06F, 1.4074654e-06F, 1.4989305e-06F, 1.5963394e-06F,
  1.7000785e-06F, 1.8105592e-06F, 1.9282195e-06F, 2.0535261e-06F,
  2.1869758e-06F, 2.3290978e-06F, 2.4804557e-06F, 2.6416497e-06F,
  2.8133190e-06F, 2.9961443e-06F, 3.1908506e-06F, 3.3982101e-06F,
  3.6190449e-06F, 3.8542308e-06F, 4.1047004e-06F, 4.3714470e-06F,
  4.6555282e-06F, 4.9580707e-06F, 5.2802740e-06F, 5.6234160e-06F,
  5.9888572e-06F, 6.3780469e-06F, 6.7925283e-06F, 7.2339451e-06F,
  7.7040476e-06F, 8.2047000e-06F, 8.7378876e-06F, 9.3057248e-06F,
  9.9104632e-06F, 1.0554501e-05F, 1.1240392e-05F, 1.1970856e-05F,
  1.2748789e-05F, 1.3577278e-05F, 1.4459606e-05F, 1.5399272e-05F,
  1.6400004e-05F, 1.7465768e-05F, 1.8600792e-05F, 1.9809576e-05F,
  2.1096914e-05F, 2.2467911e-05F, 2.3928002e-05F, 2.5482978e-05F,
  2.7139006e-05F, 2.8902651e-05F, 3.0780908e-05F, 3.2781225e-05F,
  3.4911534e-05F, 3.7180282e-05F, 3.9596466e-05F, 4.2169667e-05F,
  4.4910090e-05F, 4.7828601e-05F, 5.0936773e-05F, 5.4246931e-05F,
  5.7772202e-05F, 6.1526565e-05F, 6.5524908e-05F, 6.9783085e-05F,
  7.4317983e-05F, 7.9147585e-05F, 8.4291040e-05F, 8.9768747e-05F,
  9.5602426e-05F, 0.00010181521F, 0.00010843174F, 0.00011547824F,
  0.00012298267F, 0.00013097477F, 0.00013948625F, 0.00014855085F,
  0.00015820453F, 0.00016848555F, 0.00017943469F, 0.00019109536F,
  0.00020351382F, 0.00021673929F, 0.00023082423F, 0.00024582449F,
  0.00026179955F, 0.00027881276F, 0.00029693158F, 0.00031622787F,
  0.00033677814F, 0.00035866388F, 0.00038197188F, 0.00040679456F,
  0.00043323036F, 0.00046138411F, 0.00049136745F, 0.00052329927F,
  0.00055730621F, 0.00059352311F, 0.00063209358F, 0.00067317058F,
  0.00071691700F, 0.00076350630F, 0.00081312324F, 0.00086596457F,
  0.00092223983F, 0.00098217216F, 0.0010459992F, 0.0011139742F,
  0.0011863665F, 0.0012634633F, 0.0013455702F, 0.0014330129F,
  0.0015261382F, 0.0016253153F, 0.0017309374F, 0.0018434235F,
  0.0019632195F, 0.0020908006F, 0.0022266726F, 0.0023713743F,
  0.0025254795F, 0.0026895994F, 0.0028643847F, 0.0030505286F,
  0.0032487691F, 0.0034598925F, 0.0036847358F, 0.0039241906F,
  0.0041792066F, 0.0044507950F, 0.0047400328F, 0.0050480668F,
  0.0053761186F, 0.0057254891F, 0.0060975636F, 0.0064938176F,
  0.0069158225F, 0.0073652516F, 0.0078438871F, 0.0083536271F,
  0.0088964928F, 0.009474637F, 0.010090352F, 0.010746080F,
  0.011444421F, 0.012188144F, 0.012980198F, 0.013823725F,
  0.014722068F, 0.015678791F, 0.016697687F, 0.017782797F,
  0.018938423F, 0.020169149F, 0.021479854F, 0.022875735F,
  0.024362330F, 0.025945531F, 0.027631618F, 0.029427276F,
  0.031339626F, 0.033376252F, 0.035545228F, 0.037855157F,
  0.040315199F, 0.042935108F, 0.045725273F, 0.048696758F,
  0.051861348F, 0.055231591F, 0.058820850F, 0.062643361F,
  0.066714279F, 0.071049749F, 0.075666962F, 0.080584227F,
  0.085821044F, 0.091398179F, 0.097337747F, 0.10366330F,
  0.11039993F, 0.11757434F, 0.12521498F, 0.13335215F,
  0.14201813F, 0.15124727F, 0.16107617F, 0.17154380F,
  0.18269168F, 0.19456402F, 0.20720788F, 0.22067342F,
  0.23501402F, 0.25028656F, 0.26655159F, 0.28387361F,
  0.30232132F, 0.32196786F, 0.34289114F, 0.36517414F,
  0.38890521F, 0.41417847F, 0.44109412F, 0.46975890F,
  0.50028648F, 0.53279791F, 0.56742212F, 0.60429640F,
  0.64356699F, 0.68538959F, 0.72993007F, 0.77736504F,
  0.82788260F, 0.88168307F, 0.9389798F, 1.F,
};

static void render_line(int x0,int x1,int y0,int y1,float *d){
  int dy=y1-y0;
  int adx=x1-x0;
  int ady=abs(dy);
  int base=dy/adx;
  int sy=(dy<0?base-1:base+1);
  int x=x0;
  int y=y0;
  int err=0;

  ady-=abs(base*adx);

  d[x]*=FLOOR1_fromdB_LOOKUP[y];
  while(++x<x1){
    err=err+ady;
    if(err>=adx){
      err-=adx;
      y+=sy;
    }else{
      y+=base;
    }
    d[x]*=FLOOR1_fromdB_LOOKUP[y];
  }
}

static void render_line0(int x0,int x1,int y0,int y1,int *d){
  int dy=y1-y0;
  int adx=x1-x0;
  int ady=abs(dy);
  int base=dy/adx;
  int sy=(dy<0?base-1:base+1);
  int x=x0;
  int y=y0;
  int err=0;

  ady-=abs(base*adx);

  d[x]=y;
  while(++x<x1){
    err=err+ady;
    if(err>=adx){
      err-=adx;
      y+=sy;
    }else{
      y+=base;
    }
    d[x]=y;
  }
}


static int accumulate_fit(const float *flr,const float *mdct,
     int x0, int x1,lsfit_acc *a,
     int n,vorbis_info_floor1 *info){
  long i;

  long xa=0,ya=0,x2a=0,y2a=0,xya=0,na=0, xb=0,yb=0,x2b=0,y2b=0,xyb=0,nb=0;

  memset(a,0,sizeof(*a));
  a->x0=x0;
  a->x1=x1;
  if(x1>=n)x1=n-1;

  for(i=x0;i<=x1;i++){
    int quantized=vorbis_dBquant(flr+i);
    if(quantized){
      if(mdct[i]+info->twofitatten>=flr[i]){
 xa += i;
 ya += quantized;
 x2a += i*i;
 y2a += quantized*quantized;
 xya += i*quantized;
 na++;
      }else{
 xb += i;
 yb += quantized;
 x2b += i*i;
 y2b += quantized*quantized;
 xyb += i*quantized;
 nb++;
      }
    }
  }

  xb+=xa;
  yb+=ya;
  x2b+=x2a;
  y2b+=y2a;
  xyb+=xya;
  nb+=na;


  {
    int weight=nb*info->twofitweight/(na+1);

    a->xa=xa*weight+xb;
    a->ya=ya*weight+yb;
    a->x2a=x2a*weight+x2b;
    a->y2a=y2a*weight+y2b;
    a->xya=xya*weight+xyb;
    a->an=na*weight+nb;
  }

  return(na);
}

static void fit_line(lsfit_acc *a,int fits,int *y0,int *y1){
  long x=0,y=0,x2=0,y2=0,xy=0,an=0,i;
  long x0=a[0].x0;
  long x1=a[fits-1].x1;

  for(i=0;i<fits;i++){
    x+=a[i].xa;
    y+=a[i].ya;
    x2+=a[i].x2a;
    y2+=a[i].y2a;
    xy+=a[i].xya;
    an+=a[i].an;
  }

  if(*y0>=0){
    x+= x0;
    y+= *y0;
    x2+= x0 * x0;
    y2+= *y0 * *y0;
    xy+= *y0 * x0;
    an++;
  }

  if(*y1>=0){
    x+= x1;
    y+= *y1;
    x2+= x1 * x1;
    y2+= *y1 * *y1;
    xy+= *y1 * x1;
    an++;
  }

  if(an){

    double fx=x;
    double fy=y;
    double fx2=x2;
    double fxy=xy;
    double denom=1./(an*fx2-fx*fx);
    double a=(fy*fx2-fxy*fx)*denom;
    double b=(an*fxy-fx*fy)*denom;
    *y0=rint(a+b*x0);
    *y1=rint(a+b*x1);


    if(*y0>1023)*y0=1023;
    if(*y1>1023)*y1=1023;
    if(*y0<0)*y0=0;
    if(*y1<0)*y1=0;

  }else{
    *y0=0;
    *y1=0;
  }
}
# 54910 "oggenc.c"
static int inspect_error(int x0,int x1,int y0,int y1,const float *mask,
    const float *mdct,
    vorbis_info_floor1 *info){
  int dy=y1-y0;
  int adx=x1-x0;
  int ady=abs(dy);
  int base=dy/adx;
  int sy=(dy<0?base-1:base+1);
  int x=x0;
  int y=y0;
  int err=0;
  int val=vorbis_dBquant(mask+x);
  int mse=0;
  int n=0;

  ady-=abs(base*adx);

  mse=(y-val);
  mse*=mse;
  n++;
  if(mdct[x]+info->twofitatten>=mask[x]){
    if(y+info->maxover<val)return(1);
    if(y-info->maxunder>val)return(1);
  }

  while(++x<x1){
    err=err+ady;
    if(err>=adx){
      err-=adx;
      y+=sy;
    }else{
      y+=base;
    }

    val=vorbis_dBquant(mask+x);
    mse+=((y-val)*(y-val));
    n++;
    if(mdct[x]+info->twofitatten>=mask[x]){
      if(val){
 if(y+info->maxover<val)return(1);
 if(y-info->maxunder>val)return(1);
      }
    }
  }

  if(info->maxover*info->maxover/n>info->maxerr)return(0);
  if(info->maxunder*info->maxunder/n>info->maxerr)return(0);
  if(mse/n>info->maxerr)return(1);
  return(0);
}

static int post_Y(int *A,int *B,int pos){
  if(A[pos]<0)
    return B[pos];
  if(B[pos]<0)
    return A[pos];

  return (A[pos]+B[pos])>>1;
}

int *floor1_fit(vorbis_block *vb,vorbis_look_floor1 *look,
     const float *logmdct,
     const float *logmask){
  long i,j;
  vorbis_info_floor1 *info=look->vi;
  long n=look->n;
  long posts=look->posts;
  long nonzero=0;
  lsfit_acc fits[63 +1];
  int fit_valueA[63 +2];
  int fit_valueB[63 +2];

  int loneighbor[63 +2];
  int hineighbor[63 +2];
  int *output=
# 54984 "oggenc.c" 3 4
             ((void *)0)
# 54984 "oggenc.c"
                 ;
  int memo[63 +2];

  for(i=0;i<posts;i++)fit_valueA[i]=-200;
  for(i=0;i<posts;i++)fit_valueB[i]=-200;
  for(i=0;i<posts;i++)loneighbor[i]=0;
  for(i=0;i<posts;i++)hineighbor[i]=1;
  for(i=0;i<posts;i++)memo[i]=-1;



  if(posts==0){
    nonzero+=accumulate_fit(logmask,logmdct,0,n,fits,n,info);
  }else{
    for(i=0;i<posts-1;i++)
      nonzero+=accumulate_fit(logmask,logmdct,look->sorted_index[i],
         look->sorted_index[i+1],fits+i,
         n,info);
  }

  if(nonzero){

    int y0=-200;
    int y1=-200;
    fit_line(fits,posts-1,&y0,&y1);

    fit_valueA[0]=y0;
    fit_valueB[0]=y0;
    fit_valueB[1]=y1;
    fit_valueA[1]=y1;





    for(i=2;i<posts;i++){
      int sortpos=look->reverse_index[i];
      int ln=loneighbor[sortpos];
      int hn=hineighbor[sortpos];


      if(memo[ln]!=hn){

 int lsortpos=look->reverse_index[ln];
 int hsortpos=look->reverse_index[hn];
 memo[ln]=hn;

 {

   int lx=info->postlist[ln];
   int hx=info->postlist[hn];
   int ly=post_Y(fit_valueA,fit_valueB,ln);
   int hy=post_Y(fit_valueA,fit_valueB,hn);

   if(ly==-1 || hy==-1){
     exit(1);
   }

   if(inspect_error(lx,hx,ly,hy,logmask,logmdct,info)){

     int ly0=-200;
     int ly1=-200;
     int hy0=-200;
     int hy1=-200;
     fit_line(fits+lsortpos,sortpos-lsortpos,&ly0,&ly1);
     fit_line(fits+sortpos,hsortpos-sortpos,&hy0,&hy1);


     fit_valueB[ln]=ly0;
     if(ln==0)fit_valueA[ln]=ly0;
     fit_valueA[i]=ly1;
     fit_valueB[i]=hy0;
     fit_valueA[hn]=hy1;
     if(hn==1)fit_valueB[hn]=hy1;

     if(ly1>=0 || hy0>=0){

       for(j=sortpos-1;j>=0;j--)
  if(hineighbor[j]==hn)
    hineighbor[j]=i;
  else
    break;
       for(j=sortpos+1;j<posts;j++)
  if(loneighbor[j]==ln)
    loneighbor[j]=i;
  else
    break;

     }
   }else{

     fit_valueA[i]=-200;
     fit_valueB[i]=-200;
   }
 }
      }
    }

    output=_vorbis_block_alloc(vb,sizeof(*output)*posts);

    output[0]=post_Y(fit_valueA,fit_valueB,0);
    output[1]=post_Y(fit_valueA,fit_valueB,1);




    for(i=2;i<posts;i++){
      int ln=look->loneighbor[i-2];
      int hn=look->hineighbor[i-2];
      int x0=info->postlist[ln];
      int x1=info->postlist[hn];
      int y0=output[ln];
      int y1=output[hn];

      int predicted=render_point(x0,x1,y0,y1,info->postlist[i]);
      int vx=post_Y(fit_valueA,fit_valueB,i);

      if(vx>=0 && predicted!=vx){
 output[i]=vx;
      }else{
 output[i]= predicted|0x8000;
      }
    }
  }

  return(output);

}

int *floor1_interpolate_fit(vorbis_block *vb,vorbis_look_floor1 *look,
     int *A,int *B,
     int del){

  long i;
  long posts=look->posts;
  int *output=
# 55119 "oggenc.c" 3 4
             ((void *)0)
# 55119 "oggenc.c"
                 ;

  if(A && B){
    output=_vorbis_block_alloc(vb,sizeof(*output)*posts);

    for(i=0;i<posts;i++){
      output[i]=((65536-del)*(A[i]&0x7fff)+del*(B[i]&0x7fff)+32768)>>16;
      if(A[i]&0x8000 && B[i]&0x8000)output[i]|=0x8000;
    }
  }

  return(output);
}


int floor1_encode(vorbis_block *vb,vorbis_look_floor1 *look,
    int *post,int *ilogmask){

  long i,j;
  vorbis_info_floor1 *info=look->vi;
  long posts=look->posts;
  codec_setup_info *ci=vb->vd->vi->codec_setup;
  int out[63 +2];
  static_codebook **sbooks=ci->book_param;
  codebook *books=ci->fullbooks;
  static long seq=0;


  if(post){
    for(i=0;i<posts;i++){
      int val=post[i]&0x7fff;
      switch(info->mult){
      case 1:
 val>>=2;
 break;
      case 2:
 val>>=3;
 break;
      case 3:
 val/=12;
 break;
      case 4:
 val>>=4;
 break;
      }
      post[i]=val | (post[i]&0x8000);
    }

    out[0]=post[0];
    out[1]=post[1];


    for(i=2;i<posts;i++){
      int ln=look->loneighbor[i-2];
      int hn=look->hineighbor[i-2];
      int x0=info->postlist[ln];
      int x1=info->postlist[hn];
      int y0=post[ln];
      int y1=post[hn];

      int predicted=render_point(x0,x1,y0,y1,info->postlist[i]);

      if((post[i]&0x8000) || (predicted==post[i])){
 post[i]=predicted|0x8000;

 out[i]=0;
      }else{
 int headroom=(look->quant_q-predicted<predicted?
        look->quant_q-predicted:predicted);

 int val=post[i]-predicted;







 if(val<0)
   if(val<-headroom)
     val=headroom-val-1;
   else
     val=-1-(val<<1);
 else
   if(val>=headroom)
     val= val+headroom;
   else
     val<<=1;

 out[i]=val;
 post[ln]&=0x7fff;
 post[hn]&=0x7fff;
      }
    }



    oggpack_write(&vb->opb,1,1);


    look->frames++;
    look->postbits+=ilog(look->quant_q-1)*2;
    oggpack_write(&vb->opb,out[0],ilog(look->quant_q-1));
    oggpack_write(&vb->opb,out[1],ilog(look->quant_q-1));



    for(i=0,j=2;i<info->partitions;i++){
      int class=info->partitionclass[i];
      int cdim=info->class_dim[class];
      int csubbits=info->class_subs[class];
      int csub=1<<csubbits;
      int bookas[8]={0,0,0,0,0,0,0,0};
      int cval=0;
      int cshift=0;
      int k,l;


      if(csubbits){
 int maxval[8];
 for(k=0;k<csub;k++){
   int booknum=info->class_subbook[class][k];
   if(booknum<0){
     maxval[k]=1;
   }else{
     maxval[k]=sbooks[info->class_subbook[class][k]]->entries;
   }
 }
 for(k=0;k<cdim;k++){
   for(l=0;l<csub;l++){
     int val=out[j+k];
     if(val<maxval[l]){
       bookas[k]=l;
       break;
     }
   }
   cval|= bookas[k]<<cshift;
   cshift+=csubbits;
 }

 look->phrasebits+=
   vorbis_book_encode(books+info->class_book[class],cval,&vb->opb);
# 55273 "oggenc.c"
      }


      for(k=0;k<cdim;k++){
 int book=info->class_subbook[class][bookas[k]];
 if(book>=0){

   if(out[j+k]<(books+book)->entries)
     look->postbits+=vorbis_book_encode(books+book,
            out[j+k],&vb->opb);
# 55297 "oggenc.c"
 }
      }
      j+=cdim;
    }

    {


      int hx=0;
      int lx=0;
      int ly=post[0]*info->mult;
      for(j=1;j<look->posts;j++){
 int current=look->forward_index[j];
 int hy=post[current]&0x7fff;
 if(hy==post[current]){

   hy*=info->mult;
   hx=info->postlist[current];

   render_line0(lx,hx,ly,hy,ilogmask);

   lx=hx;
   ly=hy;
 }
      }
      for(j=hx;j<vb->pcmend/2;j++)ilogmask[j]=ly;
      seq++;
      return(1);
    }
  }else{
    oggpack_write(&vb->opb,0,1);
    memset(ilogmask,0,vb->pcmend/2*sizeof(*ilogmask));
    seq++;
    return(0);
  }
}

static void *floor1_inverse1(vorbis_block *vb,vorbis_look_floor *in){
  vorbis_look_floor1 *look=(vorbis_look_floor1 *)in;
  vorbis_info_floor1 *info=look->vi;
  codec_setup_info *ci=vb->vd->vi->codec_setup;

  int i,j,k;
  codebook *books=ci->fullbooks;


  if(oggpack_read(&vb->opb,1)==1){
    int *fit_value=_vorbis_block_alloc(vb,(look->posts)*sizeof(*fit_value));

    fit_value[0]=oggpack_read(&vb->opb,ilog(look->quant_q-1));
    fit_value[1]=oggpack_read(&vb->opb,ilog(look->quant_q-1));


    for(i=0,j=2;i<info->partitions;i++){
      int class=info->partitionclass[i];
      int cdim=info->class_dim[class];
      int csubbits=info->class_subs[class];
      int csub=1<<csubbits;
      int cval=0;


      if(csubbits){
 cval=vorbis_book_decode(books+info->class_book[class],&vb->opb);

 if(cval==-1)goto eop;
      }

      for(k=0;k<cdim;k++){
 int book=info->class_subbook[class][cval&(csub-1)];
 cval>>=csubbits;
 if(book>=0){
   if((fit_value[j+k]=vorbis_book_decode(books+book,&vb->opb))==-1)
     goto eop;
 }else{
   fit_value[j+k]=0;
 }
      }
      j+=cdim;
    }


    for(i=2;i<look->posts;i++){
      int predicted=render_point(info->postlist[look->loneighbor[i-2]],
     info->postlist[look->hineighbor[i-2]],
     fit_value[look->loneighbor[i-2]],
     fit_value[look->hineighbor[i-2]],
     info->postlist[i]);
      int hiroom=look->quant_q-predicted;
      int loroom=predicted;
      int room=(hiroom<loroom?hiroom:loroom)<<1;
      int val=fit_value[i];

      if(val){
 if(val>=room){
   if(hiroom>loroom){
     val = val-loroom;
   }else{
     val = -1-(val-hiroom);
   }
 }else{
   if(val&1){
     val= -((val+1)>>1);
   }else{
     val>>=1;
   }
 }

 fit_value[i]=val+predicted;
 fit_value[look->loneighbor[i-2]]&=0x7fff;
 fit_value[look->hineighbor[i-2]]&=0x7fff;

      }else{
 fit_value[i]=predicted|0x8000;
      }

    }

    return(fit_value);
  }
 eop:
  return(
# 55417 "oggenc.c" 3 4
        ((void *)0)
# 55417 "oggenc.c"
            );
}

static int floor1_inverse2(vorbis_block *vb,vorbis_look_floor *in,void *memo,
     float *out){
  vorbis_look_floor1 *look=(vorbis_look_floor1 *)in;
  vorbis_info_floor1 *info=look->vi;

  codec_setup_info *ci=vb->vd->vi->codec_setup;
  int n=ci->blocksizes[vb->W]/2;
  int j;

  if(memo){

    int *fit_value=(int *)memo;
    int hx=0;
    int lx=0;
    int ly=fit_value[0]*info->mult;
    for(j=1;j<look->posts;j++){
      int current=look->forward_index[j];
      int hy=fit_value[current]&0x7fff;
      if(hy==fit_value[current]){

 hy*=info->mult;
 hx=info->postlist[current];

 render_line(lx,hx,ly,hy,out);

 lx=hx;
 ly=hy;
      }
    }
    for(j=hx;j<n;j++)out[j]*=FLOOR1_fromdB_LOOKUP[ly];
    return(1);
  }
  memset(out,0,sizeof(*out)*n);
  return(0);
}


vorbis_func_floor floor1_exportbundle={
  &floor1_pack,&floor1_unpack,&floor1_look,&floor1_free_info,
  &floor1_free_look,&floor1_inverse1,&floor1_inverse2
};
# 55489 "oggenc.c"
typedef struct {
  vorbis_info_residue0 *info;

  int parts;
  int stages;
  codebook *fullbooks;
  codebook *phrasebook;
  codebook ***partbooks;

  int partvals;
  int **decodemap;

  long postbits;
  long phrasebits;
  long frames;
# 55514 "oggenc.c"
} vorbis_look_residue0;

void res0_free_info(vorbis_info_residue *i){
  vorbis_info_residue0 *info=(vorbis_info_residue0 *)i;
  if(info){
    memset(info,0,sizeof(*info));
    free(info);
  }
}

void res0_free_look(vorbis_look_residue *i){
  int j;
  if(i){

    vorbis_look_residue0 *look=(vorbis_look_residue0 *)i;
# 55589 "oggenc.c"
    for(j=0;j<look->parts;j++)
      if(look->partbooks[j])free(look->partbooks[j]);
    free(look->partbooks);
    for(j=0;j<look->partvals;j++)
      free(look->decodemap[j]);
    free(look->decodemap);

    memset(look,0,sizeof(*look));
    free(look);
  }
}

static int icount(unsigned int v){
  int ret=0;
  while(v){
    ret+=v&1;
    v>>=1;
  }
  return(ret);
}


void res0_pack(vorbis_info_residue *vr,oggpack_buffer *opb){
  vorbis_info_residue0 *info=(vorbis_info_residue0 *)vr;
  int j,acc=0;
  oggpack_write(opb,info->begin,24);
  oggpack_write(opb,info->end,24);

  oggpack_write(opb,info->grouping-1,24);

  oggpack_write(opb,info->partitions-1,6);
  oggpack_write(opb,info->groupbook,8);




  for(j=0;j<info->partitions;j++){
    if(ilog(info->secondstages[j])>3){

      oggpack_write(opb,info->secondstages[j],3);
      oggpack_write(opb,1,1);
      oggpack_write(opb,info->secondstages[j]>>3,5);
    }else
      oggpack_write(opb,info->secondstages[j],4);
    acc+=icount(info->secondstages[j]);
  }
  for(j=0;j<acc;j++)
    oggpack_write(opb,info->booklist[j],8);

}


vorbis_info_residue *res0_unpack(vorbis_info *vi,oggpack_buffer *opb){
  int j,acc=0;
  vorbis_info_residue0 *info=calloc(1,sizeof(*info));
  codec_setup_info *ci=vi->codec_setup;

  info->begin=oggpack_read(opb,24);
  info->end=oggpack_read(opb,24);
  info->grouping=oggpack_read(opb,24)+1;
  info->partitions=oggpack_read(opb,6)+1;
  info->groupbook=oggpack_read(opb,8);

  for(j=0;j<info->partitions;j++){
    int cascade=oggpack_read(opb,3);
    if(oggpack_read(opb,1))
      cascade|=(oggpack_read(opb,5)<<3);
    info->secondstages[j]=cascade;

    acc+=icount(cascade);
  }
  for(j=0;j<acc;j++)
    info->booklist[j]=oggpack_read(opb,8);

  if(info->groupbook>=ci->books)goto errout;
  for(j=0;j<acc;j++)
    if(info->booklist[j]>=ci->books)goto errout;

  return(info);
 errout:
  res0_free_info(info);
  return(
# 55670 "oggenc.c" 3 4
        ((void *)0)
# 55670 "oggenc.c"
            );
}

vorbis_look_residue *res0_look(vorbis_dsp_state *vd,
          vorbis_info_residue *vr){
  vorbis_info_residue0 *info=(vorbis_info_residue0 *)vr;
  vorbis_look_residue0 *look=calloc(1,sizeof(*look));
  codec_setup_info *ci=vd->vi->codec_setup;

  int j,k,acc=0;
  int dim;
  int maxstage=0;
  look->info=info;

  look->parts=info->partitions;
  look->fullbooks=ci->fullbooks;
  look->phrasebook=ci->fullbooks+info->groupbook;
  dim=look->phrasebook->dim;

  look->partbooks=calloc(look->parts,sizeof(*look->partbooks));

  for(j=0;j<look->parts;j++){
    int stages=ilog(info->secondstages[j]);
    if(stages){
      if(stages>maxstage)maxstage=stages;
      look->partbooks[j]=calloc(stages,sizeof(*look->partbooks[j]));
      for(k=0;k<stages;k++)
 if(info->secondstages[j]&(1<<k)){
   look->partbooks[j][k]=ci->fullbooks+info->booklist[acc++];




 }
    }
  }

  look->partvals=rint(pow((float)look->parts,(float)dim));
  look->stages=maxstage;
  look->decodemap=malloc(look->partvals*sizeof(*look->decodemap));
  for(j=0;j<look->partvals;j++){
    long val=j;
    long mult=look->partvals/look->parts;
    look->decodemap[j]=malloc(dim*sizeof(*look->decodemap[j]));
    for(k=0;k<dim;k++){
      long deco=val/mult;
      val-=deco*mult;
      mult/=look->parts;
      look->decodemap[j][k]=deco;
    }
  }






  return(look);
}


static int local_book_besterror(codebook *book,float *a){
  int dim=book->dim,i,k,o;
  int best=0;
  encode_aux_threshmatch *tt=book->c->thresh_tree;


  for(k=0,o=dim;k<dim;++k){
    float val=a[--o];
    i=tt->threshvals>>1;

    if(val<tt->quantthresh[i]){
      if(val<tt->quantthresh[i-1]){
 for(--i;i>0;--i)
   if(val>=tt->quantthresh[i-1])
     break;
      }
    }else{

      for(++i;i<tt->threshvals-1;++i)
 if(val<tt->quantthresh[i])break;

    }

    best=(best*tt->quantvals)+tt->quantmap[i];
  }


  if(book->c->lengthlist[best]<=0){
    const static_codebook *c=book->c;
    int i,j;
    float bestf=0.f;
    float *e=book->valuelist;
    best=-1;
    for(i=0;i<book->entries;i++){
      if(c->lengthlist[i]>0){
 float this=0.f;
 for(j=0;j<dim;j++){
   float val=(e[j]-a[j]);
   this+=val*val;
 }
 if(best==-1 || this<bestf){
   bestf=this;
   best=i;
 }
      }
      e+=dim;
    }
  }

  {
    float *ptr=book->valuelist+best*dim;
    for(i=0;i<dim;i++)
      *a++ -= *ptr++;
  }

  return(best);
}

static int _encodepart(oggpack_buffer *opb,float *vec, int n,
         codebook *book,long *acc){
  int i,bits=0;
  int dim=book->dim;
  int step=n/dim;

  for(i=0;i<step;i++){
    int entry=local_book_besterror(book,vec+i*dim);





    bits+=vorbis_book_encode(book,entry,opb);
  }

  return(bits);
}

static long **_01class(vorbis_block *vb,vorbis_look_residue *vl,
         float **in,int ch){
  long i,j,k;
  vorbis_look_residue0 *look=(vorbis_look_residue0 *)vl;
  vorbis_info_residue0 *info=look->info;


  int samples_per_partition=info->grouping;
  int possible_partitions=info->partitions;
  int n=info->end-info->begin;

  int partvals=n/samples_per_partition;
  long **partword=_vorbis_block_alloc(vb,ch*sizeof(*partword));
  float scale=100./samples_per_partition;





  for(i=0;i<ch;i++){
    partword[i]=_vorbis_block_alloc(vb,n/samples_per_partition*sizeof(*partword[i]));
    memset(partword[i],0,n/samples_per_partition*sizeof(*partword[i]));
  }

  for(i=0;i<partvals;i++){
    int offset=i*samples_per_partition+info->begin;
    for(j=0;j<ch;j++){
      float max=0.;
      float ent=0.;
      for(k=0;k<samples_per_partition;k++){
 if(fabs(in[j][offset+k])>max)max=fabs(in[j][offset+k]);
 ent+=fabs(rint(in[j][offset+k]));
      }
      ent*=scale;

      for(k=0;k<possible_partitions-1;k++)
 if(max<=info->classmetric1[k] &&
    (info->classmetric2[k]<0 || (int)ent<info->classmetric2[k]))
   break;

      partword[j][i]=k;
    }
  }
# 55867 "oggenc.c"
  look->frames++;

  return(partword);
}




static long **_2class(vorbis_block *vb,vorbis_look_residue *vl,float **in,
        int ch){
  long i,j,k,l;
  vorbis_look_residue0 *look=(vorbis_look_residue0 *)vl;
  vorbis_info_residue0 *info=look->info;


  int samples_per_partition=info->grouping;
  int possible_partitions=info->partitions;
  int n=info->end-info->begin;

  int partvals=n/samples_per_partition;
  long **partword=_vorbis_block_alloc(vb,sizeof(*partword));






  partword[0]=_vorbis_block_alloc(vb,n*ch/samples_per_partition*sizeof(*partword[0]));
  memset(partword[0],0,n*ch/samples_per_partition*sizeof(*partword[0]));

  for(i=0,l=info->begin/ch;i<partvals;i++){
    float magmax=0.f;
    float angmax=0.f;
    for(j=0;j<samples_per_partition;j+=ch){
      if(fabs(in[0][l])>magmax)magmax=fabs(in[0][l]);
      for(k=1;k<ch;k++)
 if(fabs(in[k][l])>angmax)angmax=fabs(in[k][l]);
      l++;
    }

    for(j=0;j<possible_partitions-1;j++)
      if(magmax<=info->classmetric1[j] &&
  angmax<=info->classmetric2[j])
 break;

    partword[0][i]=j;

  }
# 55925 "oggenc.c"
  look->frames++;

  return(partword);
}

static int _01forward(vorbis_block *vb,vorbis_look_residue *vl,
        float **in,int ch,
        long **partword,
        int (*encode)(oggpack_buffer *,float *,int,
        codebook *,long *)){
  long i,j,k,s;
  vorbis_look_residue0 *look=(vorbis_look_residue0 *)vl;
  vorbis_info_residue0 *info=look->info;


  int samples_per_partition=info->grouping;
  int possible_partitions=info->partitions;
  int partitions_per_word=look->phrasebook->dim;
  int n=info->end-info->begin;

  int partvals=n/samples_per_partition;
  long resbits[128];
  long resvals[128];
# 55957 "oggenc.c"
  memset(resbits,0,sizeof(resbits));
  memset(resvals,0,sizeof(resvals));






  for(s=0;s<look->stages;s++){

    for(i=0;i<partvals;){


      if(s==0){
 for(j=0;j<ch;j++){
   long val=partword[j][i];
   for(k=1;k<partitions_per_word;k++){
     val*=possible_partitions;
     if(i+k<partvals)
       val+=partword[j][i+k];
   }


   if(val<look->phrasebook->entries)
     look->phrasebits+=vorbis_book_encode(look->phrasebook,val,&vb->opb);





 }
      }


      for(k=0;k<partitions_per_word && i<partvals;k++,i++){
 long offset=i*samples_per_partition+info->begin;

 for(j=0;j<ch;j++){
   if(s==0)resvals[partword[j][i]]+=samples_per_partition;
   if(info->secondstages[partword[j][i]]&(1<<s)){
     codebook *statebook=look->partbooks[partword[j][i]][s];
     if(statebook){
       int ret;
       long *accumulator=
# 56000 "oggenc.c" 3 4
                        ((void *)0)
# 56000 "oggenc.c"
                            ;
# 56016 "oggenc.c"
       ret=encode(&vb->opb,in[j]+offset,samples_per_partition,
    statebook,accumulator);

       look->postbits+=ret;
       resbits[partword[j][i]]+=ret;
     }
   }
 }
      }
    }
  }
# 56040 "oggenc.c"
  return(0);
}


static int _01inverse(vorbis_block *vb,vorbis_look_residue *vl,
        float **in,int ch,
        long (*decodepart)(codebook *, float *,
      oggpack_buffer *,int)){

  long i,j,k,l,s;
  vorbis_look_residue0 *look=(vorbis_look_residue0 *)vl;
  vorbis_info_residue0 *info=look->info;


  int samples_per_partition=info->grouping;
  int partitions_per_word=look->phrasebook->dim;
  int n=info->end-info->begin;

  int partvals=n/samples_per_partition;
  int partwords=(partvals+partitions_per_word-1)/partitions_per_word;
  int ***partword=
# 56060 "oggenc.c" 3 4
                 __builtin_alloca (
# 56060 "oggenc.c"
                 ch*sizeof(*partword)
# 56060 "oggenc.c" 3 4
                 )
# 56060 "oggenc.c"
                                             ;

  for(j=0;j<ch;j++)
    partword[j]=_vorbis_block_alloc(vb,partwords*sizeof(*partword[j]));

  for(s=0;s<look->stages;s++){



    for(i=0,l=0;i<partvals;l++){
      if(s==0){

 for(j=0;j<ch;j++){
   int temp=vorbis_book_decode(look->phrasebook,&vb->opb);
   if(temp==-1)goto eopbreak;
   partword[j][l]=look->decodemap[temp];
   if(partword[j][l]==
# 56076 "oggenc.c" 3 4
                     ((void *)0)
# 56076 "oggenc.c"
                         )goto errout;
 }
      }


      for(k=0;k<partitions_per_word && i<partvals;k++,i++)
 for(j=0;j<ch;j++){
   long offset=info->begin+i*samples_per_partition;
   if(info->secondstages[partword[j][l][k]]&(1<<s)){
     codebook *stagebook=look->partbooks[partword[j][l][k]][s];
     if(stagebook){
       if(decodepart(stagebook,in[j]+offset,&vb->opb,
       samples_per_partition)==-1)goto eopbreak;
     }
   }
 }
    }
  }

 errout:
 eopbreak:
  return(0);
}
# 56148 "oggenc.c"
int res0_inverse(vorbis_block *vb,vorbis_look_residue *vl,
   float **in,int *nonzero,int ch){
  int i,used=0;
  for(i=0;i<ch;i++)
    if(nonzero[i])
      in[used++]=in[i];
  if(used)
    return(_01inverse(vb,vl,in,used,vorbis_book_decodevs_add));
  else
    return(0);
}

int res1_forward(vorbis_block *vb,vorbis_look_residue *vl,
   float **in,float **out,int *nonzero,int ch,
   long **partword){
  int i,j,used=0,n=vb->pcmend/2;
  for(i=0;i<ch;i++)
    if(nonzero[i]){
      if(out)
 for(j=0;j<n;j++)
   out[i][j]+=in[i][j];
      in[used++]=in[i];
    }

  if(used){
    int ret=_01forward(vb,vl,in,used,partword,_encodepart);
    if(out){
      used=0;
      for(i=0;i<ch;i++)
 if(nonzero[i]){
   for(j=0;j<n;j++)
     out[i][j]-=in[used][j];
   used++;
 }
    }
    return(ret);
  }else{
    return(0);
  }
}

long **res1_class(vorbis_block *vb,vorbis_look_residue *vl,
    float **in,int *nonzero,int ch){
  int i,used=0;
  for(i=0;i<ch;i++)
    if(nonzero[i])
      in[used++]=in[i];
  if(used)
    return(_01class(vb,vl,in,used));
  else
    return(0);
}

int res1_inverse(vorbis_block *vb,vorbis_look_residue *vl,
   float **in,int *nonzero,int ch){
  int i,used=0;
  for(i=0;i<ch;i++)
    if(nonzero[i])
      in[used++]=in[i];
  if(used)
    return(_01inverse(vb,vl,in,used,vorbis_book_decodev_add));
  else
    return(0);
}

long **res2_class(vorbis_block *vb,vorbis_look_residue *vl,
    float **in,int *nonzero,int ch){
  int i,used=0;
  for(i=0;i<ch;i++)
    if(nonzero[i])used++;
  if(used)
    return(_2class(vb,vl,in,ch));
  else
    return(0);
}




int res2_forward(vorbis_block *vb,vorbis_look_residue *vl,
   float **in,float **out,int *nonzero,int ch,
   long **partword){
  long i,j,k,n=vb->pcmend/2,used=0;




  float *work=_vorbis_block_alloc(vb,ch*n*sizeof(*work));
  for(i=0;i<ch;i++){
    float *pcm=in[i];
    if(nonzero[i])used++;
    for(j=0,k=i;j<n;j++,k+=ch)
      work[k]=pcm[j];
  }

  if(used){
    int ret=_01forward(vb,vl,&work,1,partword,_encodepart);

    if(out){
      for(i=0;i<ch;i++){
 float *pcm=in[i];
 float *sofar=out[i];
 for(j=0,k=i;j<n;j++,k+=ch)
   sofar[j]+=pcm[j]-work[k];

      }
    }
    return(ret);
  }else{
    return(0);
  }
}


int res2_inverse(vorbis_block *vb,vorbis_look_residue *vl,
   float **in,int *nonzero,int ch){
  long i,k,l,s;
  vorbis_look_residue0 *look=(vorbis_look_residue0 *)vl;
  vorbis_info_residue0 *info=look->info;


  int samples_per_partition=info->grouping;
  int partitions_per_word=look->phrasebook->dim;
  int n=info->end-info->begin;

  int partvals=n/samples_per_partition;
  int partwords=(partvals+partitions_per_word-1)/partitions_per_word;
  int **partword=_vorbis_block_alloc(vb,partwords*sizeof(*partword));

  for(i=0;i<ch;i++)if(nonzero[i])break;
  if(i==ch)return(0);

  for(s=0;s<look->stages;s++){
    for(i=0,l=0;i<partvals;l++){

      if(s==0){

 int temp=vorbis_book_decode(look->phrasebook,&vb->opb);
 if(temp==-1)goto eopbreak;
 partword[l]=look->decodemap[temp];
 if(partword[l]==
# 56288 "oggenc.c" 3 4
                ((void *)0)
# 56288 "oggenc.c"
                    )goto errout;
      }


      for(k=0;k<partitions_per_word && i<partvals;k++,i++)
 if(info->secondstages[partword[l][k]]&(1<<s)){
   codebook *stagebook=look->partbooks[partword[l][k]][s];

   if(stagebook){
     if(vorbis_book_decodevv_add(stagebook,in,
     i*samples_per_partition+info->begin,ch,
     &vb->opb,samples_per_partition)==-1)
       goto eopbreak;
   }
 }
    }
  }

 errout:
 eopbreak:
  return(0);
}


vorbis_func_residue residue0_exportbundle={
  
# 56313 "oggenc.c" 3 4
 ((void *)0)
# 56313 "oggenc.c"
     ,
  &res0_unpack,
  &res0_look,
  &res0_free_info,
  &res0_free_look,
  
# 56318 "oggenc.c" 3 4
 ((void *)0)
# 56318 "oggenc.c"
     ,
  
# 56319 "oggenc.c" 3 4
 ((void *)0)
# 56319 "oggenc.c"
     ,
  &res0_inverse
};

vorbis_func_residue residue1_exportbundle={
  &res0_pack,
  &res0_unpack,
  &res0_look,
  &res0_free_info,
  &res0_free_look,
  &res1_class,
  &res1_forward,
  &res1_inverse
};

vorbis_func_residue residue2_exportbundle={
  &res0_pack,
  &res0_unpack,
  &res0_look,
  &res0_free_info,
  &res0_free_look,
  &res2_class,
  &res2_forward,
  &res2_inverse
};
# 56371 "oggenc.c"
static void mapping0_free_info(vorbis_info_mapping *i){
  vorbis_info_mapping0 *info=(vorbis_info_mapping0 *)i;
  if(info){
    memset(info,0,sizeof(*info));
    free(info);
  }
}

static void mapping0_pack(vorbis_info *vi,vorbis_info_mapping *vm,
     oggpack_buffer *opb){
  int i;
  vorbis_info_mapping0 *info=(vorbis_info_mapping0 *)vm;
# 56391 "oggenc.c"
  if(info->submaps>1){
    oggpack_write(opb,1,1);
    oggpack_write(opb,info->submaps-1,4);
  }else
    oggpack_write(opb,0,1);

  if(info->coupling_steps>0){
    oggpack_write(opb,1,1);
    oggpack_write(opb,info->coupling_steps-1,8);

    for(i=0;i<info->coupling_steps;i++){
      oggpack_write(opb,info->coupling_mag[i],ilog(vi->channels));
      oggpack_write(opb,info->coupling_ang[i],ilog(vi->channels));
    }
  }else
    oggpack_write(opb,0,1);

  oggpack_write(opb,0,2);


  if(info->submaps>1){
    for(i=0;i<vi->channels;i++)
      oggpack_write(opb,info->chmuxlist[i],4);
  }
  for(i=0;i<info->submaps;i++){
    oggpack_write(opb,0,8);
    oggpack_write(opb,info->floorsubmap[i],8);
    oggpack_write(opb,info->residuesubmap[i],8);
  }
}


static vorbis_info_mapping *mapping0_unpack(vorbis_info *vi,oggpack_buffer *opb){
  int i;
  vorbis_info_mapping0 *info=calloc(1,sizeof(*info));
  codec_setup_info *ci=vi->codec_setup;
  memset(info,0,sizeof(*info));

  if(oggpack_read(opb,1))
    info->submaps=oggpack_read(opb,4)+1;
  else
    info->submaps=1;

  if(oggpack_read(opb,1)){
    info->coupling_steps=oggpack_read(opb,8)+1;

    for(i=0;i<info->coupling_steps;i++){
      int testM=info->coupling_mag[i]=oggpack_read(opb,ilog(vi->channels));
      int testA=info->coupling_ang[i]=oggpack_read(opb,ilog(vi->channels));

      if(testM<0 ||
  testA<0 ||
  testM==testA ||
  testM>=vi->channels ||
  testA>=vi->channels) goto err_out;
    }

  }

  if(oggpack_read(opb,2)>0)goto err_out;

  if(info->submaps>1){
    for(i=0;i<vi->channels;i++){
      info->chmuxlist[i]=oggpack_read(opb,4);
      if(info->chmuxlist[i]>=info->submaps)goto err_out;
    }
  }
  for(i=0;i<info->submaps;i++){
    oggpack_read(opb,8);
    info->floorsubmap[i]=oggpack_read(opb,8);
    if(info->floorsubmap[i]>=ci->floors)goto err_out;
    info->residuesubmap[i]=oggpack_read(opb,8);
    if(info->residuesubmap[i]>=ci->residues)goto err_out;
  }

  return info;

 err_out:
  mapping0_free_info(info);
  return(
# 56470 "oggenc.c" 3 4
        ((void *)0)
# 56470 "oggenc.c"
            );
}
# 56545 "oggenc.c"
void oggpack_writealign(oggpack_buffer *b);

static int mapping0_forward(vorbis_block *vb){
  vorbis_dsp_state *vd=vb->vd;
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  private_state *b=vb->vd->backend_state;
  vorbis_block_internal *vbi=(vorbis_block_internal *)vb->internal;
  int n=vb->pcmend;
  int i,j,k;

  int *nonzero = 
# 56556 "oggenc.c" 3 4
                      __builtin_alloca (
# 56556 "oggenc.c"
                      sizeof(*nonzero)*vi->channels
# 56556 "oggenc.c" 3 4
                      )
# 56556 "oggenc.c"
                                                           ;
  float **gmdct = _vorbis_block_alloc(vb,vi->channels*sizeof(*gmdct));
  int **ilogmaskch= _vorbis_block_alloc(vb,vi->channels*sizeof(*ilogmaskch));
  int ***floor_posts = _vorbis_block_alloc(vb,vi->channels*sizeof(*floor_posts));

  float global_ampmax=vbi->ampmax;
  float *local_ampmax=
# 56562 "oggenc.c" 3 4
                     __builtin_alloca (
# 56562 "oggenc.c"
                     sizeof(*local_ampmax)*vi->channels
# 56562 "oggenc.c" 3 4
                     )
# 56562 "oggenc.c"
                                                               ;
  int blocktype=vbi->blocktype;

  int modenumber=vb->W;
  vorbis_info_mapping0 *info=ci->map_param[modenumber];
  vorbis_look_psy *psy_look=
    b->psy+blocktype+(vb->W?2:0);

  vb->mode=modenumber;

  for(i=0;i<vi->channels;i++){
    float scale=4.f/n;
    float scale_dB;

    float *pcm =vb->pcm[i];
    float *logfft =pcm;

    gmdct[i]=_vorbis_block_alloc(vb,n/2*sizeof(**gmdct));

    scale_dB=todB(&scale);
# 56592 "oggenc.c"
    _vorbis_apply_window(pcm,b->window,ci->blocksizes,vb->lW,vb->W,vb->nW);
# 56604 "oggenc.c"
    mdct_forward(b->transform[vb->W][0],pcm,gmdct[i]);


    drft_forward(&b->fft_look[vb->W],pcm);
    logfft[0]=scale_dB+todB(pcm);
    local_ampmax[i]=logfft[0];
    for(j=1;j<n-1;j+=2){
      float temp=pcm[j]*pcm[j]+pcm[j+1]*pcm[j+1];
      temp=logfft[(j+1)>>1]=scale_dB+.5f*todB(&temp);
      if(temp>local_ampmax[i])local_ampmax[i]=temp;
    }

    if(local_ampmax[i]>0.f)local_ampmax[i]=0.f;
    if(local_ampmax[i]>global_ampmax)global_ampmax=local_ampmax[i];
# 56627 "oggenc.c"
  }

  {
    float *noise = _vorbis_block_alloc(vb,n/2*sizeof(*noise));
    float *tone = _vorbis_block_alloc(vb,n/2*sizeof(*tone));

    for(i=0;i<vi->channels;i++){



      int submap=info->chmuxlist[i];


      float *mdct =gmdct[i];
      float *logfft =vb->pcm[i];

      float *logmdct =logfft+n/2;
      float *logmask =logfft;

      vb->mode=modenumber;

      floor_posts[i]=_vorbis_block_alloc(vb,15*sizeof(**floor_posts));
      memset(floor_posts[i],0,sizeof(**floor_posts)*15);

      for(j=0;j<n/2;j++)
 logmdct[j]=todB(mdct+j);
# 56671 "oggenc.c"
      _vp_noisemask(psy_look,
      logmdct,
      noise);
# 56688 "oggenc.c"
      _vp_tonemask(psy_look,
     logfft,
     tone,
     global_ampmax,
     local_ampmax[i]);
# 56708 "oggenc.c"
      _vp_offset_and_mix(psy_look,
    noise,
    tone,
    1,
    logmask);
# 56726 "oggenc.c"
      if(ci->floor_type[info->floorsubmap[submap]]!=1)return(-1);

      floor_posts[i][15/2]=
 floor1_fit(vb,b->flr[info->floorsubmap[submap]],
     logmdct,
     logmask);



      if(vorbis_bitrate_managed(vb) && floor_posts[i][15/2]){


 _vp_offset_and_mix(psy_look,
      noise,
      tone,
      2,
      logmask);
# 56753 "oggenc.c"
 floor_posts[i][15 -1]=
   floor1_fit(vb,b->flr[info->floorsubmap[submap]],
       logmdct,
       logmask);


 _vp_offset_and_mix(psy_look,
      noise,
      tone,
      0,
      logmask);
# 56773 "oggenc.c"
 floor_posts[i][0]=
   floor1_fit(vb,b->flr[info->floorsubmap[submap]],
       logmdct,
       logmask);



 for(k=1;k<15/2;k++)
   floor_posts[i][k]=
     floor1_interpolate_fit(vb,b->flr[info->floorsubmap[submap]],
       floor_posts[i][0],
       floor_posts[i][15/2],
       k*65536/(15/2));
 for(k=15/2+1;k<15 -1;k++)
   floor_posts[i][k]=
     floor1_interpolate_fit(vb,b->flr[info->floorsubmap[submap]],
       floor_posts[i][15/2],
       floor_posts[i][15 -1],
       (k-15/2)*65536/(15/2));
      }
    }
  }
  vbi->ampmax=global_ampmax;
# 56811 "oggenc.c"
  {
    float **res_bundle=
# 56812 "oggenc.c" 3 4
                      __builtin_alloca (
# 56812 "oggenc.c"
                      sizeof(*res_bundle)*vi->channels
# 56812 "oggenc.c" 3 4
                      )
# 56812 "oggenc.c"
                                                              ;
    float **couple_bundle=
# 56813 "oggenc.c" 3 4
                         __builtin_alloca (
# 56813 "oggenc.c"
                         sizeof(*couple_bundle)*vi->channels
# 56813 "oggenc.c" 3 4
                         )
# 56813 "oggenc.c"
                                                                    ;
    int *zerobundle=
# 56814 "oggenc.c" 3 4
                   __builtin_alloca (
# 56814 "oggenc.c"
                   sizeof(*zerobundle)*vi->channels
# 56814 "oggenc.c" 3 4
                   )
# 56814 "oggenc.c"
                                                           ;
    int **sortindex=
# 56815 "oggenc.c" 3 4
                   __builtin_alloca (
# 56815 "oggenc.c"
                   sizeof(*sortindex)*vi->channels
# 56815 "oggenc.c" 3 4
                   )
# 56815 "oggenc.c"
                                                          ;
    float **mag_memo;
    int **mag_sort;

    if(info->coupling_steps){
      mag_memo=_vp_quantize_couple_memo(vb,
     &ci->psy_g_param,
     psy_look,
     info,
     gmdct);

      mag_sort=_vp_quantize_couple_sort(vb,
     psy_look,
     info,
     mag_memo);
    }

    memset(sortindex,0,sizeof(*sortindex)*vi->channels);
    if(psy_look->vi->normal_channel_p){
      for(i=0;i<vi->channels;i++){
 float *mdct =gmdct[i];
 sortindex[i]=
# 56836 "oggenc.c" 3 4
             __builtin_alloca (
# 56836 "oggenc.c"
             sizeof(**sortindex)*n/2
# 56836 "oggenc.c" 3 4
             )
# 56836 "oggenc.c"
                                            ;
 _vp_noise_normalize_sort(psy_look,mdct,sortindex[i]);
      }
    }

    for(k=(vorbis_bitrate_managed(vb)?0:15/2);
 k<=(vorbis_bitrate_managed(vb)?15 -1:15/2);
 k++){



      oggpack_write(&vb->opb,0,1);


      oggpack_write(&vb->opb,modenumber,b->modebits);
      if(vb->W){
 oggpack_write(&vb->opb,vb->lW,1);
 oggpack_write(&vb->opb,vb->nW,1);
      }


      for(i=0;i<vi->channels;i++){
 int submap=info->chmuxlist[i];
 float *mdct =gmdct[i];
 float *res =vb->pcm[i];
 int *ilogmask=ilogmaskch[i]=
   _vorbis_block_alloc(vb,n/2*sizeof(**gmdct));

 nonzero[i]=floor1_encode(vb,b->flr[info->floorsubmap[submap]],
     floor_posts[i][k],
     ilogmask);
# 56877 "oggenc.c"
 _vp_remove_floor(psy_look,
    mdct,
    ilogmask,
    res,
    ci->psy_g_param.sliding_lowpass[vb->W][k]);

 _vp_noise_normalize(psy_look,res,res+n/2,sortindex[i]);
# 56897 "oggenc.c"
      }







      if(info->coupling_steps){
 _vp_couple(k,
     &ci->psy_g_param,
     psy_look,
     info,
     vb->pcm,
     mag_memo,
     mag_sort,
     ilogmaskch,
     nonzero,
     ci->psy_g_param.sliding_lowpass[vb->W][k]);
      }


      for(i=0;i<info->submaps;i++){
 int ch_in_bundle=0;
 long **classifications;
 int resnum=info->residuesubmap[i];

 for(j=0;j<vi->channels;j++){
   if(info->chmuxlist[j]==i){
     zerobundle[ch_in_bundle]=0;
     if(nonzero[j])zerobundle[ch_in_bundle]=1;
     res_bundle[ch_in_bundle]=vb->pcm[j];
     couple_bundle[ch_in_bundle++]=vb->pcm[j]+n/2;
   }
 }

 classifications=_residue_P[ci->residue_type[resnum]]->
   class(vb,b->residue[resnum],couple_bundle,zerobundle,ch_in_bundle);

 _residue_P[ci->residue_type[resnum]]->
   forward(vb,b->residue[resnum],
    couple_bundle,
# 56938 "oggenc.c" 3 4
                 ((void *)0)
# 56938 "oggenc.c"
                     ,zerobundle,ch_in_bundle,classifications);
      }


      oggpack_writealign(&vb->opb);
      vbi->packetblob_markers[k]=oggpack_bytes(&vb->opb);

    }

  }





  return(0);
}

static int mapping0_inverse(vorbis_block *vb,vorbis_info_mapping *l){
  vorbis_dsp_state *vd=vb->vd;
  vorbis_info *vi=vd->vi;
  codec_setup_info *ci=vi->codec_setup;
  private_state *b=vd->backend_state;
  vorbis_info_mapping0 *info=(vorbis_info_mapping0 *)l;

  int i,j;
  long n=vb->pcmend=ci->blocksizes[vb->W];

  float **pcmbundle=
# 56966 "oggenc.c" 3 4
                   __builtin_alloca (
# 56966 "oggenc.c"
                   sizeof(*pcmbundle)*vi->channels
# 56966 "oggenc.c" 3 4
                   )
# 56966 "oggenc.c"
                                                          ;
  int *zerobundle=
# 56967 "oggenc.c" 3 4
                    __builtin_alloca (
# 56967 "oggenc.c"
                    sizeof(*zerobundle)*vi->channels
# 56967 "oggenc.c" 3 4
                    )
# 56967 "oggenc.c"
                                                            ;

  int *nonzero =
# 56969 "oggenc.c" 3 4
                  __builtin_alloca (
# 56969 "oggenc.c"
                  sizeof(*nonzero)*vi->channels
# 56969 "oggenc.c" 3 4
                  )
# 56969 "oggenc.c"
                                                       ;
  void **floormemo=
# 56970 "oggenc.c" 3 4
                  __builtin_alloca (
# 56970 "oggenc.c"
                  sizeof(*floormemo)*vi->channels
# 56970 "oggenc.c" 3 4
                  )
# 56970 "oggenc.c"
                                                         ;


  for(i=0;i<vi->channels;i++){
    int submap=info->chmuxlist[i];
    floormemo[i]=_floor_P[ci->floor_type[info->floorsubmap[submap]]]->
      inverse1(vb,b->flr[info->floorsubmap[submap]]);
    if(floormemo[i])
      nonzero[i]=1;
    else
      nonzero[i]=0;
    memset(vb->pcm[i],0,sizeof(*vb->pcm[i])*n/2);
  }


  for(i=0;i<info->coupling_steps;i++){
    if(nonzero[info->coupling_mag[i]] ||
       nonzero[info->coupling_ang[i]]){
      nonzero[info->coupling_mag[i]]=1;
      nonzero[info->coupling_ang[i]]=1;
    }
  }


  for(i=0;i<info->submaps;i++){
    int ch_in_bundle=0;
    for(j=0;j<vi->channels;j++){
      if(info->chmuxlist[j]==i){
 if(nonzero[j])
   zerobundle[ch_in_bundle]=1;
 else
   zerobundle[ch_in_bundle]=0;
 pcmbundle[ch_in_bundle++]=vb->pcm[j];
      }
    }

    _residue_P[ci->residue_type[info->residuesubmap[i]]]->
      inverse(vb,b->residue[info->residuesubmap[i]],
       pcmbundle,zerobundle,ch_in_bundle);
  }


  for(i=info->coupling_steps-1;i>=0;i--){
    float *pcmM=vb->pcm[info->coupling_mag[i]];
    float *pcmA=vb->pcm[info->coupling_ang[i]];

    for(j=0;j<n/2;j++){
      float mag=pcmM[j];
      float ang=pcmA[j];

      if(mag>0)
 if(ang>0){
   pcmM[j]=mag;
   pcmA[j]=mag-ang;
 }else{
   pcmA[j]=mag;
   pcmM[j]=mag+ang;
 }
      else
 if(ang>0){
   pcmM[j]=mag;
   pcmA[j]=mag+ang;
 }else{
   pcmA[j]=mag;
   pcmM[j]=mag-ang;
 }
    }
  }


  for(i=0;i<vi->channels;i++){
    float *pcm=vb->pcm[i];
    int submap=info->chmuxlist[i];
    _floor_P[ci->floor_type[info->floorsubmap[submap]]]->
      inverse2(vb,b->flr[info->floorsubmap[submap]],
        floormemo[i],pcm);
  }



  for(i=0;i<vi->channels;i++){
    float *pcm=vb->pcm[i];
    mdct_backward(b->transform[vb->W][0],pcm,pcm);
  }


  return(0);
}


vorbis_func_mapping mapping0_exportbundle={
  &mapping0_pack,
  &mapping0_unpack,
  &mapping0_free_info,
  &mapping0_forward,
  &mapping0_inverse
};
# 57091 "oggenc.c"
static unsigned long mask[]=
{0x00000000,0x00000001,0x00000003,0x00000007,0x0000000f,
 0x0000001f,0x0000003f,0x0000007f,0x000000ff,0x000001ff,
 0x000003ff,0x000007ff,0x00000fff,0x00001fff,0x00003fff,
 0x00007fff,0x0000ffff,0x0001ffff,0x0003ffff,0x0007ffff,
 0x000fffff,0x001fffff,0x003fffff,0x007fffff,0x00ffffff,
 0x01ffffff,0x03ffffff,0x07ffffff,0x0fffffff,0x1fffffff,
 0x3fffffff,0x7fffffff,0xffffffff };

static unsigned int mask8B[]=
{0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfe,0xff};

void oggpack_writeinit(oggpack_buffer *b){
  memset(b,0,sizeof(*b));
  b->ptr=b->buffer=malloc(256);
  b->buffer[0]='\0';
  b->storage=256;
}

void oggpackB_writeinit(oggpack_buffer *b){
  oggpack_writeinit(b);
}

void oggpack_writetrunc(oggpack_buffer *b,long bits){
  long bytes=bits>>3;
  bits-=bytes*8;
  b->ptr=b->buffer+bytes;
  b->endbit=bits;
  b->endbyte=bytes;
  *b->ptr&=mask[bits];
}

void oggpackB_writetrunc(oggpack_buffer *b,long bits){
  long bytes=bits>>3;
  bits-=bytes*8;
  b->ptr=b->buffer+bytes;
  b->endbit=bits;
  b->endbyte=bytes;
  *b->ptr&=mask8B[bits];
}


void oggpack_write(oggpack_buffer *b,unsigned long value,int bits){
  if(b->endbyte+4>=b->storage){
    b->buffer=realloc(b->buffer,b->storage+256);
    b->storage+=256;
    b->ptr=b->buffer+b->endbyte;
  }

  value&=mask[bits];
  bits+=b->endbit;

  b->ptr[0]|=value<<b->endbit;

  if(bits>=8){
    b->ptr[1]=value>>(8-b->endbit);
    if(bits>=16){
      b->ptr[2]=value>>(16-b->endbit);
      if(bits>=24){
 b->ptr[3]=value>>(24-b->endbit);
 if(bits>=32){
   if(b->endbit)
     b->ptr[4]=value>>(32-b->endbit);
   else
     b->ptr[4]=0;
 }
      }
    }
  }

  b->endbyte+=bits/8;
  b->ptr+=bits/8;
  b->endbit=bits&7;
}


void oggpackB_write(oggpack_buffer *b,unsigned long value,int bits){
  if(b->endbyte+4>=b->storage){
    b->buffer=realloc(b->buffer,b->storage+256);
    b->storage+=256;
    b->ptr=b->buffer+b->endbyte;
  }

  value=(value&mask[bits])<<(32-bits);
  bits+=b->endbit;

  b->ptr[0]|=value>>(24+b->endbit);

  if(bits>=8){
    b->ptr[1]=value>>(16+b->endbit);
    if(bits>=16){
      b->ptr[2]=value>>(8+b->endbit);
      if(bits>=24){
 b->ptr[3]=value>>(b->endbit);
 if(bits>=32){
   if(b->endbit)
     b->ptr[4]=value<<(8-b->endbit);
   else
     b->ptr[4]=0;
 }
      }
    }
  }

  b->endbyte+=bits/8;
  b->ptr+=bits/8;
  b->endbit=bits&7;
}

void oggpack_writealign(oggpack_buffer *b){
  int bits=8-b->endbit;
  if(bits<8)
    oggpack_write(b,0,bits);
}

void oggpackB_writealign(oggpack_buffer *b){
  int bits=8-b->endbit;
  if(bits<8)
    oggpackB_write(b,0,bits);
}

static void oggpack_writecopy_helper(oggpack_buffer *b,
         void *source,
         long bits,
         void (*w)(oggpack_buffer *,
            unsigned long,
            int),
         int msb){
  unsigned char *ptr=(unsigned char *)source;

  long bytes=bits/8;
  bits-=bytes*8;

  if(b->endbit){
    int i;

    for(i=0;i<bytes;i++)
      w(b,(unsigned long)(ptr[i]),8);
  }else{

    if(b->endbyte+bytes+1>=b->storage){
      b->storage=b->endbyte+bytes+256;
      b->buffer=realloc(b->buffer,b->storage);
      b->ptr=b->buffer+b->endbyte;
    }

    memmove(b->ptr,source,bytes);
    b->ptr+=bytes;
    b->buffer+=bytes;
    *b->ptr=0;

  }
  if(bits){
    if(msb)
      w(b,(unsigned long)(ptr[bytes]>>(8-bits)),bits);
    else
      w(b,(unsigned long)(ptr[bytes]),bits);
  }
}

void oggpack_writecopy(oggpack_buffer *b,void *source,long bits){
  oggpack_writecopy_helper(b,source,bits,oggpack_write,0);
}

void oggpackB_writecopy(oggpack_buffer *b,void *source,long bits){
  oggpack_writecopy_helper(b,source,bits,oggpackB_write,1);
}

void oggpack_reset(oggpack_buffer *b){
  b->ptr=b->buffer;
  b->buffer[0]=0;
  b->endbit=b->endbyte=0;
}

void oggpackB_reset(oggpack_buffer *b){
  oggpack_reset(b);
}

void oggpack_writeclear(oggpack_buffer *b){
  free(b->buffer);
  memset(b,0,sizeof(*b));
}

void oggpackB_writeclear(oggpack_buffer *b){
  oggpack_writeclear(b);
}

void oggpack_readinit(oggpack_buffer *b,unsigned char *buf,int bytes){
  memset(b,0,sizeof(*b));
  b->buffer=b->ptr=buf;
  b->storage=bytes;
}

void oggpackB_readinit(oggpack_buffer *b,unsigned char *buf,int bytes){
  oggpack_readinit(b,buf,bytes);
}


long oggpack_look(oggpack_buffer *b,int bits){
  unsigned long ret;
  unsigned long m=mask[bits];

  bits+=b->endbit;

  if(b->endbyte+4>=b->storage){

    if(b->endbyte*8+bits>b->storage*8)return(-1);
  }

  ret=b->ptr[0]>>b->endbit;
  if(bits>8){
    ret|=b->ptr[1]<<(8-b->endbit);
    if(bits>16){
      ret|=b->ptr[2]<<(16-b->endbit);
      if(bits>24){
 ret|=b->ptr[3]<<(24-b->endbit);
 if(bits>32 && b->endbit)
   ret|=b->ptr[4]<<(32-b->endbit);
      }
    }
  }
  return(m&ret);
}


long oggpackB_look(oggpack_buffer *b,int bits){
  unsigned long ret;
  int m=32-bits;

  bits+=b->endbit;

  if(b->endbyte+4>=b->storage){

    if(b->endbyte*8+bits>b->storage*8)return(-1);
  }

  ret=b->ptr[0]<<(24+b->endbit);
  if(bits>8){
    ret|=b->ptr[1]<<(16+b->endbit);
    if(bits>16){
      ret|=b->ptr[2]<<(8+b->endbit);
      if(bits>24){
 ret|=b->ptr[3]<<(b->endbit);
 if(bits>32 && b->endbit)
   ret|=b->ptr[4]>>(8-b->endbit);
      }
    }
  }
  return (ret>>(m>>1))>>((m+1)>>1);
}

long oggpack_look1(oggpack_buffer *b){
  if(b->endbyte>=b->storage)return(-1);
  return((b->ptr[0]>>b->endbit)&1);
}

long oggpackB_look1(oggpack_buffer *b){
  if(b->endbyte>=b->storage)return(-1);
  return((b->ptr[0]>>(7-b->endbit))&1);
}

void oggpack_adv(oggpack_buffer *b,int bits){
  bits+=b->endbit;
  b->ptr+=bits/8;
  b->endbyte+=bits/8;
  b->endbit=bits&7;
}

void oggpackB_adv(oggpack_buffer *b,int bits){
  oggpack_adv(b,bits);
}

void oggpack_adv1(oggpack_buffer *b){
  if(++(b->endbit)>7){
    b->endbit=0;
    b->ptr++;
    b->endbyte++;
  }
}

void oggpackB_adv1(oggpack_buffer *b){
  oggpack_adv1(b);
}


long oggpack_read(oggpack_buffer *b,int bits){
  unsigned long ret;
  unsigned long m=mask[bits];

  bits+=b->endbit;

  if(b->endbyte+4>=b->storage){

    ret=-1UL;
    if(b->endbyte*8+bits>b->storage*8)goto overflow;
  }

  ret=b->ptr[0]>>b->endbit;
  if(bits>8){
    ret|=b->ptr[1]<<(8-b->endbit);
    if(bits>16){
      ret|=b->ptr[2]<<(16-b->endbit);
      if(bits>24){
 ret|=b->ptr[3]<<(24-b->endbit);
 if(bits>32 && b->endbit){
   ret|=b->ptr[4]<<(32-b->endbit);
 }
      }
    }
  }
  ret&=m;

 overflow:

  b->ptr+=bits/8;
  b->endbyte+=bits/8;
  b->endbit=bits&7;
  return(ret);
}


long oggpackB_read(oggpack_buffer *b,int bits){
  unsigned long ret;
  long m=32-bits;

  bits+=b->endbit;

  if(b->endbyte+4>=b->storage){

    ret=-1UL;
    if(b->endbyte*8+bits>b->storage*8)goto overflow;
  }

  ret=b->ptr[0]<<(24+b->endbit);
  if(bits>8){
    ret|=b->ptr[1]<<(16+b->endbit);
    if(bits>16){
      ret|=b->ptr[2]<<(8+b->endbit);
      if(bits>24){
 ret|=b->ptr[3]<<(b->endbit);
 if(bits>32 && b->endbit)
   ret|=b->ptr[4]>>(8-b->endbit);
      }
    }
  }
  ret=(ret>>(m>>1))>>((m+1)>>1);

 overflow:

  b->ptr+=bits/8;
  b->endbyte+=bits/8;
  b->endbit=bits&7;
  return(ret);
}

long oggpack_read1(oggpack_buffer *b){
  unsigned long ret;

  if(b->endbyte>=b->storage){

    ret=-1UL;
    goto overflow;
  }

  ret=(b->ptr[0]>>b->endbit)&1;

 overflow:

  b->endbit++;
  if(b->endbit>7){
    b->endbit=0;
    b->ptr++;
    b->endbyte++;
  }
  return(ret);
}

long oggpackB_read1(oggpack_buffer *b){
  unsigned long ret;

  if(b->endbyte>=b->storage){

    ret=-1UL;
    goto overflow;
  }

  ret=(b->ptr[0]>>(7-b->endbit))&1;

 overflow:

  b->endbit++;
  if(b->endbit>7){
    b->endbit=0;
    b->ptr++;
    b->endbyte++;
  }
  return(ret);
}

long oggpack_bytes(oggpack_buffer *b){
  return(b->endbyte+(b->endbit+7)/8);
}

long oggpack_bits(oggpack_buffer *b){
  return(b->endbyte*8+b->endbit);
}

long oggpackB_bytes(oggpack_buffer *b){
  return oggpack_bytes(b);
}

long oggpackB_bits(oggpack_buffer *b){
  return oggpack_bits(b);
}

unsigned char *oggpack_get_buffer(oggpack_buffer *b){
  return(b->buffer);
}

unsigned char *oggpackB_get_buffer(oggpack_buffer *b){
  return oggpack_get_buffer(b);
}
# 57541 "oggenc.c"
int ogg_page_version(ogg_page *og){
  return((int)(og->header[4]));
}

int ogg_page_continued(ogg_page *og){
  return((int)(og->header[5]&0x01));
}

int ogg_page_bos(ogg_page *og){
  return((int)(og->header[5]&0x02));
}

int ogg_page_eos(ogg_page *og){
  return((int)(og->header[5]&0x04));
}

ogg_int64_t ogg_page_granulepos(ogg_page *og){
  unsigned char *page=og->header;
  ogg_int64_t granulepos=page[13]&(0xff);
  granulepos= (granulepos<<8)|(page[12]&0xff);
  granulepos= (granulepos<<8)|(page[11]&0xff);
  granulepos= (granulepos<<8)|(page[10]&0xff);
  granulepos= (granulepos<<8)|(page[9]&0xff);
  granulepos= (granulepos<<8)|(page[8]&0xff);
  granulepos= (granulepos<<8)|(page[7]&0xff);
  granulepos= (granulepos<<8)|(page[6]&0xff);
  return(granulepos);
}

int ogg_page_serialno(ogg_page *og){
  return(og->header[14] |
  (og->header[15]<<8) |
  (og->header[16]<<16) |
  (og->header[17]<<24));
}

long ogg_page_pageno(ogg_page *og){
  return(og->header[18] |
  (og->header[19]<<8) |
  (og->header[20]<<16) |
  (og->header[21]<<24));
}
# 57603 "oggenc.c"
int ogg_page_packets(ogg_page *og){
  int i,n=og->header[26],count=0;
  for(i=0;i<n;i++)
    if(og->header[27+i]<255)count++;
  return(count);
}
# 57632 "oggenc.c"
static ogg_uint32_t crc_lookup[256]={
  0x00000000,0x04c11db7,0x09823b6e,0x0d4326d9,
  0x130476dc,0x17c56b6b,0x1a864db2,0x1e475005,
  0x2608edb8,0x22c9f00f,0x2f8ad6d6,0x2b4bcb61,
  0x350c9b64,0x31cd86d3,0x3c8ea00a,0x384fbdbd,
  0x4c11db70,0x48d0c6c7,0x4593e01e,0x4152fda9,
  0x5f15adac,0x5bd4b01b,0x569796c2,0x52568b75,
  0x6a1936c8,0x6ed82b7f,0x639b0da6,0x675a1011,
  0x791d4014,0x7ddc5da3,0x709f7b7a,0x745e66cd,
  0x9823b6e0,0x9ce2ab57,0x91a18d8e,0x95609039,
  0x8b27c03c,0x8fe6dd8b,0x82a5fb52,0x8664e6e5,
  0xbe2b5b58,0xbaea46ef,0xb7a96036,0xb3687d81,
  0xad2f2d84,0xa9ee3033,0xa4ad16ea,0xa06c0b5d,
  0xd4326d90,0xd0f37027,0xddb056fe,0xd9714b49,
  0xc7361b4c,0xc3f706fb,0xceb42022,0xca753d95,
  0xf23a8028,0xf6fb9d9f,0xfbb8bb46,0xff79a6f1,
  0xe13ef6f4,0xe5ffeb43,0xe8bccd9a,0xec7dd02d,
  0x34867077,0x30476dc0,0x3d044b19,0x39c556ae,
  0x278206ab,0x23431b1c,0x2e003dc5,0x2ac12072,
  0x128e9dcf,0x164f8078,0x1b0ca6a1,0x1fcdbb16,
  0x018aeb13,0x054bf6a4,0x0808d07d,0x0cc9cdca,
  0x7897ab07,0x7c56b6b0,0x71159069,0x75d48dde,
  0x6b93dddb,0x6f52c06c,0x6211e6b5,0x66d0fb02,
  0x5e9f46bf,0x5a5e5b08,0x571d7dd1,0x53dc6066,
  0x4d9b3063,0x495a2dd4,0x44190b0d,0x40d816ba,
  0xaca5c697,0xa864db20,0xa527fdf9,0xa1e6e04e,
  0xbfa1b04b,0xbb60adfc,0xb6238b25,0xb2e29692,
  0x8aad2b2f,0x8e6c3698,0x832f1041,0x87ee0df6,
  0x99a95df3,0x9d684044,0x902b669d,0x94ea7b2a,
  0xe0b41de7,0xe4750050,0xe9362689,0xedf73b3e,
  0xf3b06b3b,0xf771768c,0xfa325055,0xfef34de2,
  0xc6bcf05f,0xc27dede8,0xcf3ecb31,0xcbffd686,
  0xd5b88683,0xd1799b34,0xdc3abded,0xd8fba05a,
  0x690ce0ee,0x6dcdfd59,0x608edb80,0x644fc637,
  0x7a089632,0x7ec98b85,0x738aad5c,0x774bb0eb,
  0x4f040d56,0x4bc510e1,0x46863638,0x42472b8f,
  0x5c007b8a,0x58c1663d,0x558240e4,0x51435d53,
  0x251d3b9e,0x21dc2629,0x2c9f00f0,0x285e1d47,
  0x36194d42,0x32d850f5,0x3f9b762c,0x3b5a6b9b,
  0x0315d626,0x07d4cb91,0x0a97ed48,0x0e56f0ff,
  0x1011a0fa,0x14d0bd4d,0x19939b94,0x1d528623,
  0xf12f560e,0xf5ee4bb9,0xf8ad6d60,0xfc6c70d7,
  0xe22b20d2,0xe6ea3d65,0xeba91bbc,0xef68060b,
  0xd727bbb6,0xd3e6a601,0xdea580d8,0xda649d6f,
  0xc423cd6a,0xc0e2d0dd,0xcda1f604,0xc960ebb3,
  0xbd3e8d7e,0xb9ff90c9,0xb4bcb610,0xb07daba7,
  0xae3afba2,0xaafbe615,0xa7b8c0cc,0xa379dd7b,
  0x9b3660c6,0x9ff77d71,0x92b45ba8,0x9675461f,
  0x8832161a,0x8cf30bad,0x81b02d74,0x857130c3,
  0x5d8a9099,0x594b8d2e,0x5408abf7,0x50c9b640,
  0x4e8ee645,0x4a4ffbf2,0x470cdd2b,0x43cdc09c,
  0x7b827d21,0x7f436096,0x7200464f,0x76c15bf8,
  0x68860bfd,0x6c47164a,0x61043093,0x65c52d24,
  0x119b4be9,0x155a565e,0x18197087,0x1cd86d30,
  0x029f3d35,0x065e2082,0x0b1d065b,0x0fdc1bec,
  0x3793a651,0x3352bbe6,0x3e119d3f,0x3ad08088,
  0x2497d08d,0x2056cd3a,0x2d15ebe3,0x29d4f654,
  0xc5a92679,0xc1683bce,0xcc2b1d17,0xc8ea00a0,
  0xd6ad50a5,0xd26c4d12,0xdf2f6bcb,0xdbee767c,
  0xe3a1cbc1,0xe760d676,0xea23f0af,0xeee2ed18,
  0xf0a5bd1d,0xf464a0aa,0xf9278673,0xfde69bc4,
  0x89b8fd09,0x8d79e0be,0x803ac667,0x84fbdbd0,
  0x9abc8bd5,0x9e7d9662,0x933eb0bb,0x97ffad0c,
  0xafb010b1,0xab710d06,0xa6322bdf,0xa2f33668,
  0xbcb4666d,0xb8757bda,0xb5365d03,0xb1f740b4};



int ogg_stream_init(ogg_stream_state *os,int serialno){
  if(os){
    memset(os,0,sizeof(*os));
    os->body_storage=16*1024;
    os->body_data=malloc(os->body_storage*sizeof(*os->body_data));

    os->lacing_storage=1024;
    os->lacing_vals=malloc(os->lacing_storage*sizeof(*os->lacing_vals));
    os->granule_vals=malloc(os->lacing_storage*sizeof(*os->granule_vals));

    os->serialno=serialno;

    return(0);
  }
  return(-1);
}


int ogg_stream_clear(ogg_stream_state *os){
  if(os){
    if(os->body_data)free(os->body_data);
    if(os->lacing_vals)free(os->lacing_vals);
    if(os->granule_vals)free(os->granule_vals);

    memset(os,0,sizeof(*os));
  }
  return(0);
}

int ogg_stream_destroy(ogg_stream_state *os){
  if(os){
    ogg_stream_clear(os);
    free(os);
  }
  return(0);
}




static void _os_body_expand(ogg_stream_state *os,int needed){
  if(os->body_storage<=os->body_fill+needed){
    os->body_storage+=(needed+1024);
    os->body_data=realloc(os->body_data,os->body_storage*sizeof(*os->body_data));
  }
}

static void _os_lacing_expand(ogg_stream_state *os,int needed){
  if(os->lacing_storage<=os->lacing_fill+needed){
    os->lacing_storage+=(needed+32);
    os->lacing_vals=realloc(os->lacing_vals,os->lacing_storage*sizeof(*os->lacing_vals));
    os->granule_vals=realloc(os->granule_vals,os->lacing_storage*sizeof(*os->granule_vals));
  }
}





void ogg_page_checksum_set(ogg_page *og){
  if(og){
    ogg_uint32_t crc_reg=0;
    int i;


    og->header[22]=0;
    og->header[23]=0;
    og->header[24]=0;
    og->header[25]=0;

    for(i=0;i<og->header_len;i++)
      crc_reg=(crc_reg<<8)^crc_lookup[((crc_reg >> 24)&0xff)^og->header[i]];
    for(i=0;i<og->body_len;i++)
      crc_reg=(crc_reg<<8)^crc_lookup[((crc_reg >> 24)&0xff)^og->body[i]];

    og->header[22]=crc_reg&0xff;
    og->header[23]=(crc_reg>>8)&0xff;
    og->header[24]=(crc_reg>>16)&0xff;
    og->header[25]=(crc_reg>>24)&0xff;
  }
}


int ogg_stream_packetin(ogg_stream_state *os,ogg_packet *op){
  int lacing_vals=op->bytes/255+1,i;

  if(os->body_returned){




    os->body_fill-=os->body_returned;
    if(os->body_fill)
      memmove(os->body_data,os->body_data+os->body_returned,
       os->body_fill);
    os->body_returned=0;
  }


  _os_body_expand(os,op->bytes);
  _os_lacing_expand(os,lacing_vals);






  memcpy(os->body_data+os->body_fill,op->packet,op->bytes);
  os->body_fill+=op->bytes;


  for(i=0;i<lacing_vals-1;i++){
    os->lacing_vals[os->lacing_fill+i]=255;
    os->granule_vals[os->lacing_fill+i]=os->granulepos;
  }
  os->lacing_vals[os->lacing_fill+i]=(op->bytes)%255;
  os->granulepos=os->granule_vals[os->lacing_fill+i]=op->granulepos;


  os->lacing_vals[os->lacing_fill]|= 0x100;

  os->lacing_fill+=lacing_vals;


  os->packetno++;

  if(op->e_o_s)os->e_o_s=1;

  return(0);
}
# 57845 "oggenc.c"
int ogg_stream_flush(ogg_stream_state *os,ogg_page *og){
  int i;
  int vals=0;
  int maxvals=(os->lacing_fill>255?255:os->lacing_fill);
  int bytes=0;
  long acc=0;
  ogg_int64_t granule_pos=os->granule_vals[0];

  if(maxvals==0)return(0);






  if(os->b_o_s==0){
    granule_pos=0;
    for(vals=0;vals<maxvals;vals++){
      if((os->lacing_vals[vals]&0x0ff)<255){
 vals++;
 break;
      }
    }
  }else{
    for(vals=0;vals<maxvals;vals++){
      if(acc>4096)break;
      acc+=os->lacing_vals[vals]&0x0ff;
      granule_pos=os->granule_vals[vals];
    }
  }


  memcpy(os->header,"OggS",4);


  os->header[4]=0x00;


  os->header[5]=0x00;
  if((os->lacing_vals[0]&0x100)==0)os->header[5]|=0x01;

  if(os->b_o_s==0)os->header[5]|=0x02;

  if(os->e_o_s && os->lacing_fill==vals)os->header[5]|=0x04;
  os->b_o_s=1;


  for(i=6;i<14;i++){
    os->header[i]=(granule_pos&0xff);
    granule_pos>>=8;
  }


  {
    long serialno=os->serialno;
    for(i=14;i<18;i++){
      os->header[i]=(serialno&0xff);
      serialno>>=8;
    }
  }



  if(os->pageno==-1)os->pageno=0;




  {
    long pageno=os->pageno++;
    for(i=18;i<22;i++){
      os->header[i]=(pageno&0xff);
      pageno>>=8;
    }
  }


  os->header[22]=0;
  os->header[23]=0;
  os->header[24]=0;
  os->header[25]=0;


  os->header[26]=vals&0xff;
  for(i=0;i<vals;i++)
    bytes+=os->header[i+27]=(os->lacing_vals[i]&0xff);


  og->header=os->header;
  og->header_len=os->header_fill=vals+27;
  og->body=os->body_data+os->body_returned;
  og->body_len=bytes;



  os->lacing_fill-=vals;
  memmove(os->lacing_vals,os->lacing_vals+vals,os->lacing_fill*sizeof(*os->lacing_vals));
  memmove(os->granule_vals,os->granule_vals+vals,os->lacing_fill*sizeof(*os->granule_vals));
  os->body_returned+=bytes;



  ogg_page_checksum_set(og);


  return(1);
}






int ogg_stream_pageout(ogg_stream_state *os, ogg_page *og){

  if((os->e_o_s&&os->lacing_fill) ||
     os->body_fill-os->body_returned > 4096 ||
     os->lacing_fill>=255 ||
     (os->lacing_fill&&!os->b_o_s)){

    return(ogg_stream_flush(os,og));
  }


  return(0);
}

int ogg_stream_eos(ogg_stream_state *os){
  return os->e_o_s;
}
# 57993 "oggenc.c"
int ogg_sync_init(ogg_sync_state *oy){
  if(oy){
    memset(oy,0,sizeof(*oy));
  }
  return(0);
}


int ogg_sync_clear(ogg_sync_state *oy){
  if(oy){
    if(oy->data)free(oy->data);
    ogg_sync_init(oy);
  }
  return(0);
}

int ogg_sync_destroy(ogg_sync_state *oy){
  if(oy){
    ogg_sync_clear(oy);
    free(oy);
  }
  return(0);
}

char *ogg_sync_buffer(ogg_sync_state *oy, long size){


  if(oy->returned){
    oy->fill-=oy->returned;
    if(oy->fill>0)
      memmove(oy->data,oy->data+oy->returned,oy->fill);
    oy->returned=0;
  }

  if(size>oy->storage-oy->fill){

    long newsize=size+oy->fill+4096;

    if(oy->data)
      oy->data=realloc(oy->data,newsize);
    else
      oy->data=malloc(newsize);
    oy->storage=newsize;
  }


  return((char *)oy->data+oy->fill);
}

int ogg_sync_wrote(ogg_sync_state *oy, long bytes){
  if(oy->fill+bytes>oy->storage)return(-1);
  oy->fill+=bytes;
  return(0);
}
# 58058 "oggenc.c"
long ogg_sync_pageseek(ogg_sync_state *oy,ogg_page *og){
  unsigned char *page=oy->data+oy->returned;
  unsigned char *next;
  long bytes=oy->fill-oy->returned;

  if(oy->headerbytes==0){
    int headerbytes,i;
    if(bytes<27)return(0);


    if(memcmp(page,"OggS",4))goto sync_fail;

    headerbytes=page[26]+27;
    if(bytes<headerbytes)return(0);



    for(i=0;i<page[26];i++)
      oy->bodybytes+=page[27+i];
    oy->headerbytes=headerbytes;
  }

  if(oy->bodybytes+oy->headerbytes>bytes)return(0);


  {

    char chksum[4];
    ogg_page log;

    memcpy(chksum,page+22,4);
    memset(page+22,0,4);


    log.header=page;
    log.header_len=oy->headerbytes;
    log.body=page+oy->headerbytes;
    log.body_len=oy->bodybytes;
    ogg_page_checksum_set(&log);


    if(memcmp(chksum,page+22,4)){



      memcpy(page+22,chksum,4);


      goto sync_fail;
    }
  }


  {
    unsigned char *page=oy->data+oy->returned;
    long bytes;

    if(og){
      og->header=page;
      og->header_len=oy->headerbytes;
      og->body=page+oy->headerbytes;
      og->body_len=oy->bodybytes;
    }

    oy->unsynced=0;
    oy->returned+=(bytes=oy->headerbytes+oy->bodybytes);
    oy->headerbytes=0;
    oy->bodybytes=0;
    return(bytes);
  }

 sync_fail:

  oy->headerbytes=0;
  oy->bodybytes=0;


  next=memchr(page+1,'O',bytes-1);
  if(!next)
    next=oy->data+oy->fill;

  oy->returned=next-oy->data;
  return(-(next-page));
}
# 58154 "oggenc.c"
int ogg_sync_pageout(ogg_sync_state *oy, ogg_page *og){





  while(1){
    long ret=ogg_sync_pageseek(oy,og);
    if(ret>0){

      return(1);
    }
    if(ret==0){

      return(0);
    }


    if(!oy->unsynced){
      oy->unsynced=1;
      return(-1);
    }



  }
}




int ogg_stream_pagein(ogg_stream_state *os, ogg_page *og){
  unsigned char *header=og->header;
  unsigned char *body=og->body;
  long bodysize=og->body_len;
  int segptr=0;

  int version=ogg_page_version(og);
  int continued=ogg_page_continued(og);
  int bos=ogg_page_bos(og);
  int eos=ogg_page_eos(og);
  ogg_int64_t granulepos=ogg_page_granulepos(og);
  int serialno=ogg_page_serialno(og);
  long pageno=ogg_page_pageno(og);
  int segments=header[26];


  {
    long lr=os->lacing_returned;
    long br=os->body_returned;


    if(br){
      os->body_fill-=br;
      if(os->body_fill)
 memmove(os->body_data,os->body_data+br,os->body_fill);
      os->body_returned=0;
    }

    if(lr){

      if(os->lacing_fill-lr){
 memmove(os->lacing_vals,os->lacing_vals+lr,
  (os->lacing_fill-lr)*sizeof(*os->lacing_vals));
 memmove(os->granule_vals,os->granule_vals+lr,
  (os->lacing_fill-lr)*sizeof(*os->granule_vals));
      }
      os->lacing_fill-=lr;
      os->lacing_packet-=lr;
      os->lacing_returned=0;
    }
  }


  if(serialno!=os->serialno)return(-1);
  if(version>0)return(-1);

  _os_lacing_expand(os,segments+1);


  if(pageno!=os->pageno){
    int i;


    for(i=os->lacing_packet;i<os->lacing_fill;i++)
      os->body_fill-=os->lacing_vals[i]&0xff;
    os->lacing_fill=os->lacing_packet;


    if(os->pageno!=-1){
      os->lacing_vals[os->lacing_fill++]=0x400;
      os->lacing_packet++;
    }



    if(continued){
      bos=0;
      for(;segptr<segments;segptr++){
 int val=header[27+segptr];
 body+=val;
 bodysize-=val;
 if(val<255){
   segptr++;
   break;
 }
      }
    }
  }

  if(bodysize){
    _os_body_expand(os,bodysize);
    memcpy(os->body_data+os->body_fill,body,bodysize);
    os->body_fill+=bodysize;
  }

  {
    int saved=-1;
    while(segptr<segments){
      int val=header[27+segptr];
      os->lacing_vals[os->lacing_fill]=val;
      os->granule_vals[os->lacing_fill]=-1;

      if(bos){
 os->lacing_vals[os->lacing_fill]|=0x100;
 bos=0;
      }

      if(val<255)saved=os->lacing_fill;

      os->lacing_fill++;
      segptr++;

      if(val<255)os->lacing_packet=os->lacing_fill;
    }


    if(saved!=-1){
      os->granule_vals[saved]=granulepos;
    }

  }

  if(eos){
    os->e_o_s=1;
    if(os->lacing_fill>0)
      os->lacing_vals[os->lacing_fill-1]|=0x200;
  }

  os->pageno=pageno+1;

  return(0);
}


int ogg_sync_reset(ogg_sync_state *oy){
  oy->fill=0;
  oy->returned=0;
  oy->unsynced=0;
  oy->headerbytes=0;
  oy->bodybytes=0;
  return(0);
}

int ogg_stream_reset(ogg_stream_state *os){
  os->body_fill=0;
  os->body_returned=0;

  os->lacing_fill=0;
  os->lacing_packet=0;
  os->lacing_returned=0;

  os->header_fill=0;

  os->e_o_s=0;
  os->b_o_s=0;
  os->pageno=-1;
  os->packetno=0;
  os->granulepos=0;

  return(0);
}

int ogg_stream_reset_serialno(ogg_stream_state *os,int serialno){
  ogg_stream_reset(os);
  os->serialno=serialno;
  return(0);
}

static int _packetout(ogg_stream_state *os,ogg_packet *op,int adv){





  int ptr=os->lacing_returned;

  if(os->lacing_packet<=ptr)return(0);

  if(os->lacing_vals[ptr]&0x400){


    os->lacing_returned++;
    os->packetno++;
    return(-1);
  }

  if(!op && !adv)return(1);




  {
    int size=os->lacing_vals[ptr]&0xff;
    int bytes=size;
    int eos=os->lacing_vals[ptr]&0x200;
    int bos=os->lacing_vals[ptr]&0x100;

    while(size==255){
      int val=os->lacing_vals[++ptr];
      size=val&0xff;
      if(val&0x200)eos=0x200;
      bytes+=size;
    }

    if(op){
      op->e_o_s=eos;
      op->b_o_s=bos;
      op->packet=os->body_data+os->body_returned;
      op->packetno=os->packetno;
      op->granulepos=os->granule_vals[ptr];
      op->bytes=bytes;
    }

    if(adv){
      os->body_returned+=bytes;
      os->lacing_returned=ptr+1;
      os->packetno++;
    }
  }
  return(1);
}

int ogg_stream_packetout(ogg_stream_state *os,ogg_packet *op){
  return _packetout(os,op,1);
}

int ogg_stream_packetpeek(ogg_stream_state *os,ogg_packet *op){
  return _packetout(os,op,0);
}

void ogg_packet_clear(ogg_packet *op) {
  free(op->packet);
  memset(op, 0, sizeof(*op));
}
